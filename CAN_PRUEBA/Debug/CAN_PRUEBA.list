
CAN_PRUEBA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c0  080043c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c8  080043c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000148  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b8  200001b8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a38e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018e0  00000000  00000000  0002a42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  0002bd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007b8  00000000  00000000  0002c560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f0a  00000000  00000000  0002cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009633  00000000  00000000  00050c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6514  00000000  00000000  0005a255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130769  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000293c  00000000  00000000  001307bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004278 	.word	0x08004278

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004278 	.word	0x08004278

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_write>:

int datacheck = 0;
int i=0,a;

int _write(int file,char *ptr,int len)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	 HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a8:	68b9      	ldr	r1, [r7, #8]
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <_write+0x28>)
 80005ac:	f002 fb2f 	bl	8002c0e <HAL_UART_Transmit>
	 return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000dc 	.word	0x200000dc

080005c0 <HAL_CAN_RxFifo0MsgPendingCallback>:
//		}
//  }


void  HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan2)
  {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Amarillo_GPIO_Port, Amarillo_Pin);
 80005c8:	2101      	movs	r1, #1
 80005ca:	480c      	ldr	r0, [pc, #48]	; (80005fc <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80005cc:	f001 fe5f 	bl	800228e <HAL_GPIO_TogglePin>

	if (HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO0, &RxHeader2, RxData) != HAL_OK)
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80005d2:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80005d4:	2100      	movs	r1, #0
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f001 f81b 	bl	8001612 <HAL_CAN_GetRxMessage>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
	  {
	    Error_Handler();
 80005e2:	f000 fa65 	bl	8000ab0 <Error_Handler>
	  }

	  if ((RxHeader2.StdId == 46))
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b2e      	cmp	r3, #46	; 0x2e
 80005ec:	d102      	bne.n	80005f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	  {
		  datacheck = 1;
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	601a      	str	r2, [r3, #0]
	  }
  }
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40020400 	.word	0x40020400
 8000600:	20000190 	.word	0x20000190
 8000604:	2000016c 	.word	0x2000016c
 8000608:	20000194 	.word	0x20000194

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fc6e 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f89c 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f9e8 	bl	80009ec <MX_GPIO_Init>
  MX_CAN1_Init();
 800061c:	f000 f8f8 	bl	8000810 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000620:	f000 f958 	bl	80008d4 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8000624:	f000 f9b8 	bl	8000998 <MX_USART3_UART_Init>
//pthread_create(&proceso1, NULL, &procesoSeparado, "hola");
//pthread_create(&proceso2, NULL, &procesoSeparado, "adios");
//pthread_join(proceso1,NULL);
//pthread_join(proceso2,NULL);

printf("Protocolo de Comuncacion CAN activo:\n\rCAN 1: PB8=Rx PB9=Tx\n\rCAN 2: PB5=Rx PB6=Tx \n\r");
 8000628:	483d      	ldr	r0, [pc, #244]	; (8000720 <main+0x114>)
 800062a:	f002 fe97 	bl	800335c <iprintf>

  TxHeader.IDE = CAN_ID_STD;
 800062e:	4b3d      	ldr	r3, [pc, #244]	; (8000724 <main+0x118>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 46;
 8000634:	4b3b      	ldr	r3, [pc, #236]	; (8000724 <main+0x118>)
 8000636:	222e      	movs	r2, #46	; 0x2e
 8000638:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 800063a:	4b3a      	ldr	r3, [pc, #232]	; (8000724 <main+0x118>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 1;
 8000640:	4b38      	ldr	r3, [pc, #224]	; (8000724 <main+0x118>)
 8000642:	2201      	movs	r2, #1
 8000644:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000646:	4b37      	ldr	r3, [pc, #220]	; (8000724 <main+0x118>)
 8000648:	2200      	movs	r2, #0
 800064a:	751a      	strb	r2, [r3, #20]

  RxHeader.IDE = CAN_ID_STD;
 800064c:	4b36      	ldr	r3, [pc, #216]	; (8000728 <main+0x11c>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  RxHeader.StdId = 46;
 8000652:	4b35      	ldr	r3, [pc, #212]	; (8000728 <main+0x11c>)
 8000654:	222e      	movs	r2, #46	; 0x2e
 8000656:	601a      	str	r2, [r3, #0]
  RxHeader.RTR = CAN_RTR_DATA;
 8000658:	4b33      	ldr	r3, [pc, #204]	; (8000728 <main+0x11c>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  RxHeader.DLC = 1;
 800065e:	4b32      	ldr	r3, [pc, #200]	; (8000728 <main+0x11c>)
 8000660:	2201      	movs	r2, #1
 8000662:	611a      	str	r2, [r3, #16]

  TxHeader2.IDE = CAN_ID_STD;
 8000664:	4b31      	ldr	r3, [pc, #196]	; (800072c <main+0x120>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  TxHeader2.StdId = 20;
 800066a:	4b30      	ldr	r3, [pc, #192]	; (800072c <main+0x120>)
 800066c:	2214      	movs	r2, #20
 800066e:	601a      	str	r2, [r3, #0]
  TxHeader2.RTR = CAN_RTR_DATA;
 8000670:	4b2e      	ldr	r3, [pc, #184]	; (800072c <main+0x120>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  TxHeader2.DLC = 1;
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <main+0x120>)
 8000678:	2201      	movs	r2, #1
 800067a:	611a      	str	r2, [r3, #16]
  TxHeader2.TransmitGlobalTime = DISABLE;
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <main+0x120>)
 800067e:	2200      	movs	r2, #0
 8000680:	751a      	strb	r2, [r3, #20]

  RxHeader2.IDE = CAN_ID_STD;
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <main+0x124>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  RxHeader2.StdId = 20;
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <main+0x124>)
 800068a:	2214      	movs	r2, #20
 800068c:	601a      	str	r2, [r3, #0]
  RxHeader2.RTR = CAN_RTR_DATA;
 800068e:	4b28      	ldr	r3, [pc, #160]	; (8000730 <main+0x124>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  RxHeader2.DLC = 1;
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <main+0x124>)
 8000696:	2201      	movs	r2, #1
 8000698:	611a      	str	r2, [r3, #16]

    /* USER CODE BEGIN 3 */



	  for(a=49;a<58;a++)
 800069a:	4b26      	ldr	r3, [pc, #152]	; (8000734 <main+0x128>)
 800069c:	2231      	movs	r2, #49	; 0x31
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	e039      	b.n	8000716 <main+0x10a>
	  {  TxData[0] = a;
 80006a2:	4b24      	ldr	r3, [pc, #144]	; (8000734 <main+0x128>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <main+0x12c>)
 80006aa:	701a      	strb	r2, [r3, #0]

			if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80006ac:	4b23      	ldr	r3, [pc, #140]	; (800073c <main+0x130>)
 80006ae:	4a22      	ldr	r2, [pc, #136]	; (8000738 <main+0x12c>)
 80006b0:	491c      	ldr	r1, [pc, #112]	; (8000724 <main+0x118>)
 80006b2:	4823      	ldr	r0, [pc, #140]	; (8000740 <main+0x134>)
 80006b4:	f000 fed2 	bl	800145c <HAL_CAN_AddTxMessage>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d005      	beq.n	80006ca <main+0xbe>
	  		 	{
				   HAL_GPIO_TogglePin(Amarillo_GPIO_Port, Amarillo_Pin);
 80006be:	2101      	movs	r1, #1
 80006c0:	4820      	ldr	r0, [pc, #128]	; (8000744 <main+0x138>)
 80006c2:	f001 fde4 	bl	800228e <HAL_GPIO_TogglePin>
	  		 	   Error_Handler ();
 80006c6:	f000 f9f3 	bl	8000ab0 <Error_Handler>
	  		 	}
			printf("\nCAN2 RX:- CANID: %d, LEN: %d  RxData:%s\n\r",(char *)RxHeader2.StdId,( char *)RxHeader2.DLC,(uint8_t *)TxData);
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <main+0x124>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4619      	mov	r1, r3
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <main+0x124>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <main+0x12c>)
 80006d8:	481b      	ldr	r0, [pc, #108]	; (8000748 <main+0x13c>)
 80006da:	f002 fe3f 	bl	800335c <iprintf>
			HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	4818      	ldr	r0, [pc, #96]	; (8000744 <main+0x138>)
 80006e2:	f001 fdd4 	bl	800228e <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 80006e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ea:	f000 fc73 	bl	8000fd4 <HAL_Delay>

	  if (datacheck)
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <main+0x140>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d00a      	beq.n	800070c <main+0x100>
	  {
		  HAL_GPIO_TogglePin(Rojo_GPIO_Port, Rojo_Pin);
 80006f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fa:	4812      	ldr	r0, [pc, #72]	; (8000744 <main+0x138>)
 80006fc:	f001 fdc7 	bl	800228e <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8000700:	2032      	movs	r0, #50	; 0x32
 8000702:	f000 fc67 	bl	8000fd4 <HAL_Delay>
		  datacheck = 0;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <main+0x140>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
	  for(a=49;a<58;a++)
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <main+0x128>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a08      	ldr	r2, [pc, #32]	; (8000734 <main+0x128>)
 8000714:	6013      	str	r3, [r2, #0]
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <main+0x128>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b39      	cmp	r3, #57	; 0x39
 800071c:	ddc1      	ble.n	80006a2 <main+0x96>
 800071e:	e7bc      	b.n	800069a <main+0x8e>
 8000720:	08004290 	.word	0x08004290
 8000724:	20000120 	.word	0x20000120
 8000728:	20000150 	.word	0x20000150
 800072c:	20000138 	.word	0x20000138
 8000730:	2000016c 	.word	0x2000016c
 8000734:	20000198 	.word	0x20000198
 8000738:	2000018c 	.word	0x2000018c
 800073c:	20000188 	.word	0x20000188
 8000740:	2000008c 	.word	0x2000008c
 8000744:	40020400 	.word	0x40020400
 8000748:	080042e4 	.word	0x080042e4
 800074c:	20000194 	.word	0x20000194

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	; 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fdf4 	bl	800334c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <SystemClock_Config+0xb8>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <SystemClock_Config+0xb8>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <SystemClock_Config+0xb8>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <SystemClock_Config+0xbc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800079c:	4a1b      	ldr	r2, [pc, #108]	; (800080c <SystemClock_Config+0xbc>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <SystemClock_Config+0xbc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b0:	2302      	movs	r3, #2
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b8:	2310      	movs	r3, #16
 80007ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007bc:	2300      	movs	r3, #0
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fd7d 	bl	80022c4 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007d0:	f000 f96e 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	230f      	movs	r3, #15
 80007d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 ffe0 	bl	80027b4 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007fa:	f000 f959 	bl	8000ab0 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	; 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_CAN1_Init+0xbc>)
 8000818:	4a2d      	ldr	r2, [pc, #180]	; (80008d0 <MX_CAN1_Init+0xc0>)
 800081a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800081c:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_CAN1_Init+0xbc>)
 800081e:	2210      	movs	r2, #16
 8000820:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_CAN1_Init+0xbc>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_CAN1_Init+0xbc>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <MX_CAN1_Init+0xbc>)
 8000830:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000834:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <MX_CAN1_Init+0xbc>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_CAN1_Init+0xbc>)
 800083e:	2200      	movs	r2, #0
 8000840:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_CAN1_Init+0xbc>)
 8000844:	2200      	movs	r2, #0
 8000846:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000848:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_CAN1_Init+0xbc>)
 800084a:	2200      	movs	r2, #0
 800084c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_CAN1_Init+0xbc>)
 8000850:	2200      	movs	r2, #0
 8000852:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_CAN1_Init+0xbc>)
 8000856:	2200      	movs	r2, #0
 8000858:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_CAN1_Init+0xbc>)
 800085c:	2200      	movs	r2, #0
 800085e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000860:	481a      	ldr	r0, [pc, #104]	; (80008cc <MX_CAN1_Init+0xbc>)
 8000862:	f000 fbdb 	bl	800101c <HAL_CAN_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800086c:	f000 f920 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterIdHigh=0;
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIdLow=0;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterMaskIdHigh=0;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterMaskIdLow=0;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 800088c:	2301      	movs	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterActivation=ENABLE;
 8000890:	2301      	movs	r3, #1
 8000892:	623b      	str	r3, [r7, #32]
      sFilterConfig.SlaveStartFilterBank = 14;
 8000894:	230e      	movs	r3, #14
 8000896:	627b      	str	r3, [r7, #36]	; 0x24

      if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_CAN1_Init+0xbc>)
 800089e:	f000 fcb9 	bl	8001214 <HAL_CAN_ConfigFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_CAN1_Init+0x9c>
        {
          /* Filter configuration Error */
          Error_Handler();
 80008a8:	f000 f902 	bl	8000ab0 <Error_Handler>
        }

      HAL_CAN_Start(&hcan1);
 80008ac:	4807      	ldr	r0, [pc, #28]	; (80008cc <MX_CAN1_Init+0xbc>)
 80008ae:	f000 fd91 	bl	80013d4 <HAL_CAN_Start>

        /*##-4- Activate CAN RX notification #######################################*/
        if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80008b2:	2102      	movs	r1, #2
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_CAN1_Init+0xbc>)
 80008b6:	f000 ffbe 	bl	8001836 <HAL_CAN_ActivateNotification>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_CAN1_Init+0xb4>
        {
          /* Notification Error */
          Error_Handler();
 80008c0:	f000 f8f6 	bl	8000ab0 <Error_Handler>
        }
  /* USER CODE END CAN1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000008c 	.word	0x2000008c
 80008d0:	40006400 	.word	0x40006400

080008d4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <MX_CAN2_Init+0xbc>)
 80008dc:	4a2d      	ldr	r2, [pc, #180]	; (8000994 <MX_CAN2_Init+0xc0>)
 80008de:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80008e0:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <MX_CAN2_Init+0xbc>)
 80008e2:	2210      	movs	r2, #16
 80008e4:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <MX_CAN2_Init+0xbc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008ec:	4b28      	ldr	r3, [pc, #160]	; (8000990 <MX_CAN2_Init+0xbc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <MX_CAN2_Init+0xbc>)
 80008f4:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80008f8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008fa:	4b25      	ldr	r3, [pc, #148]	; (8000990 <MX_CAN2_Init+0xbc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_CAN2_Init+0xbc>)
 8000902:	2200      	movs	r2, #0
 8000904:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000906:	4b22      	ldr	r3, [pc, #136]	; (8000990 <MX_CAN2_Init+0xbc>)
 8000908:	2200      	movs	r2, #0
 800090a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <MX_CAN2_Init+0xbc>)
 800090e:	2200      	movs	r2, #0
 8000910:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_CAN2_Init+0xbc>)
 8000914:	2200      	movs	r2, #0
 8000916:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_CAN2_Init+0xbc>)
 800091a:	2200      	movs	r2, #0
 800091c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_CAN2_Init+0xbc>)
 8000920:	2200      	movs	r2, #0
 8000922:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000924:	481a      	ldr	r0, [pc, #104]	; (8000990 <MX_CAN2_Init+0xbc>)
 8000926:	f000 fb79 	bl	800101c <HAL_CAN_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000930:	f000 f8be 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  sFilterConfig.FilterBank = 14;
 8000934:	230e      	movs	r3, #14
 8000936:	617b      	str	r3, [r7, #20]
		  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
		  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
		  sFilterConfig.FilterIdHigh=0;
 8000940:	2300      	movs	r3, #0
 8000942:	603b      	str	r3, [r7, #0]
		  sFilterConfig.FilterIdLow=0;
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
		  sFilterConfig.FilterMaskIdHigh=0;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
		  sFilterConfig.FilterMaskIdLow=0;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
		  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000950:	2301      	movs	r3, #1
 8000952:	61fb      	str	r3, [r7, #28]
		  sFilterConfig.FilterActivation=ENABLE;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
	      sFilterConfig.SlaveStartFilterBank = 14;
 8000958:	230e      	movs	r3, #14
 800095a:	627b      	str	r3, [r7, #36]	; 0x24

	      if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <MX_CAN2_Init+0xbc>)
 8000962:	f000 fc57 	bl	8001214 <HAL_CAN_ConfigFilter>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_CAN2_Init+0x9c>
	        {
	          /* Filter configuration Error */
	          Error_Handler();
 800096c:	f000 f8a0 	bl	8000ab0 <Error_Handler>
	        }

	      HAL_CAN_Start(&hcan2);
 8000970:	4807      	ldr	r0, [pc, #28]	; (8000990 <MX_CAN2_Init+0xbc>)
 8000972:	f000 fd2f 	bl	80013d4 <HAL_CAN_Start>

	        /*##-4- Activate CAN RX notification #######################################*/
	        if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000976:	2102      	movs	r1, #2
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_CAN2_Init+0xbc>)
 800097a:	f000 ff5c 	bl	8001836 <HAL_CAN_ActivateNotification>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_CAN2_Init+0xb4>
	        {
	          /* Notification Error */
	          Error_Handler();
 8000984:	f000 f894 	bl	8000ab0 <Error_Handler>
	        }
  /* USER CODE END CAN2_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	; 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000b4 	.word	0x200000b4
 8000994:	40006800 	.word	0x40006800

08000998 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_USART3_UART_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART3_UART_Init+0x4c>)
 80009d0:	f002 f8d0 	bl	8002b74 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 f869 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000dc 	.word	0x200000dc
 80009e8:	40004800 	.word	0x40004800

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <MX_GPIO_Init+0xb8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a26      	ldr	r2, [pc, #152]	; (8000aa4 <MX_GPIO_Init+0xb8>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <MX_GPIO_Init+0xb8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_GPIO_Init+0xb8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <MX_GPIO_Init+0xb8>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_GPIO_Init+0xb8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_GPIO_Init+0xb8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <MX_GPIO_Init+0xb8>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_GPIO_Init+0xb8>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Amarillo_Pin|Rojo_Pin|Azul_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a5c:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a5e:	f001 fbfd 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <MX_GPIO_Init+0xc0>)
 8000a7a:	f001 fa43 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Amarillo_Pin Rojo_Pin Azul_Pin */
  GPIO_InitStruct.Pin = Amarillo_Pin|Rojo_Pin|Azul_Pin;
 8000a7e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a98:	f001 fa34 	bl	8001f04 <HAL_GPIO_Init>

}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40020800 	.word	0x40020800

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_MspInit+0x68>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <HAL_MspInit+0x68>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_MspInit+0x68>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_MspInit+0x68>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_MspInit+0x68>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_MspInit+0x68>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2005      	movs	r0, #5
 8000b00:	f001 f9c9 	bl	8001e96 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b04:	2005      	movs	r0, #5
 8000b06:	f001 f9e2 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2005      	movs	r0, #5
 8000b10:	f001 f9c1 	bl	8001e96 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b14:	2005      	movs	r0, #5
 8000b16:	f001 f9da 	bl	8001ece <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	; 0x30
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a46      	ldr	r2, [pc, #280]	; (8000c60 <HAL_CAN_MspInit+0x138>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d136      	bne.n	8000bb8 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b4a:	4b46      	ldr	r3, [pc, #280]	; (8000c64 <HAL_CAN_MspInit+0x13c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a44      	ldr	r2, [pc, #272]	; (8000c64 <HAL_CAN_MspInit+0x13c>)
 8000b52:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b54:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <HAL_CAN_MspInit+0x13c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d10d      	bne.n	8000b78 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	4b41      	ldr	r3, [pc, #260]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a40      	ldr	r2, [pc, #256]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000b66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6c:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b74:	61bb      	str	r3, [r7, #24]
 8000b76:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	4b3a      	ldr	r3, [pc, #232]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a39      	ldr	r2, [pc, #228]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
 8000b88:	4b37      	ldr	r3, [pc, #220]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ba6:	2309      	movs	r3, #9
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	482e      	ldr	r0, [pc, #184]	; (8000c6c <HAL_CAN_MspInit+0x144>)
 8000bb2:	f001 f9a7 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000bb6:	e04f      	b.n	8000c58 <HAL_CAN_MspInit+0x130>
  else if(hcan->Instance==CAN2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a2c      	ldr	r2, [pc, #176]	; (8000c70 <HAL_CAN_MspInit+0x148>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d14a      	bne.n	8000c58 <HAL_CAN_MspInit+0x130>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a27      	ldr	r2, [pc, #156]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000bcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <HAL_CAN_MspInit+0x13c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <HAL_CAN_MspInit+0x13c>)
 8000be6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <HAL_CAN_MspInit+0x13c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d10d      	bne.n	8000c0c <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_CAN_MspInit+0x140>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c28:	2360      	movs	r3, #96	; 0x60
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c38:	2309      	movs	r3, #9
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	480a      	ldr	r0, [pc, #40]	; (8000c6c <HAL_CAN_MspInit+0x144>)
 8000c44:	f001 f95e 	bl	8001f04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2040      	movs	r0, #64	; 0x40
 8000c4e:	f001 f922 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000c52:	2040      	movs	r0, #64	; 0x40
 8000c54:	f001 f93b 	bl	8001ece <HAL_NVIC_EnableIRQ>
}
 8000c58:	bf00      	nop
 8000c5a:	3730      	adds	r7, #48	; 0x30
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40006400 	.word	0x40006400
 8000c64:	2000019c 	.word	0x2000019c
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40006800 	.word	0x40006800

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <HAL_UART_MspInit+0x84>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12c      	bne.n	8000cf0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_UART_MspInit+0x88>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_UART_MspInit+0x88>)
 8000ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_UART_MspInit+0x88>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_UART_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <HAL_UART_MspInit+0x88>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_UART_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_UART_MspInit+0x8c>)
 8000cec:	f001 f90a 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40004800 	.word	0x40004800
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020c00 	.word	0x40020c00

08000d04 <HardFault_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <HardFault_Handler+0x4>

08000d0a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <MemManage_Handler+0x4>

08000d10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <BusFault_Handler+0x4>

08000d16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <UsageFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4a:	f000 f923 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <CAN2_RX0_IRQHandler+0x10>)
 8000d5a:	f000 fd92 	bl	8001882 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000b4 	.word	0x200000b4

08000d68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	e00a      	b.n	8000d90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d7a:	f3af 8000 	nop.w
 8000d7e:	4601      	mov	r1, r0
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	60ba      	str	r2, [r7, #8]
 8000d86:	b2ca      	uxtb	r2, r1
 8000d88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	dbf0      	blt.n	8000d7a <_read+0x12>
	}

return len;
 8000d98:	687b      	ldr	r3, [r7, #4]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
	return -1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dca:	605a      	str	r2, [r3, #4]
	return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_isatty>:

int _isatty(int file)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
	return 1;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
	return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f002 fa5c 	bl	80032f8 <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20030000 	.word	0x20030000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	200001a0 	.word	0x200001a0
 8000e74:	200001b8 	.word	0x200001b8

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <SystemInit+0x20>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <SystemInit+0x20>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea2:	490e      	ldr	r1, [pc, #56]	; (8000edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec6:	f7ff ffd7 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f002 fa1b 	bl	8003304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fb9d 	bl	800060c <main>
  bx  lr    
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ed4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ee0:	080043d0 	.word	0x080043d0
  ldr r2, =_sbss
 8000ee4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ee8:	200001b8 	.word	0x200001b8

08000eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_Init+0x40>)
 8000efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_Init+0x40>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x40>)
 8000f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 ffb1 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fdca 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 ffc9 	bl	8001eea <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f70:	f000 ff91 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	200001a4 	.word	0x200001a4

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200001a4 	.word	0x200001a4

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008

0800101c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e0ed      	b.n	800120a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff fd74 	bl	8000b28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0201 	orr.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001050:	f7ff ffb4 	bl	8000fbc <HAL_GetTick>
 8001054:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001056:	e012      	b.n	800107e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001058:	f7ff ffb0 	bl	8000fbc <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d90b      	bls.n	800107e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2205      	movs	r2, #5
 8001076:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e0c5      	b.n	800120a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0e5      	beq.n	8001058 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0202 	bic.w	r2, r2, #2
 800109a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800109c:	f7ff ff8e 	bl	8000fbc <HAL_GetTick>
 80010a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010a2:	e012      	b.n	80010ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a4:	f7ff ff8a 	bl	8000fbc <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b0a      	cmp	r3, #10
 80010b0:	d90b      	bls.n	80010ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2205      	movs	r2, #5
 80010c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e09f      	b.n	800120a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1e5      	bne.n	80010a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7e1b      	ldrb	r3, [r3, #24]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d108      	bne.n	80010f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e007      	b.n	8001102 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7e5b      	ldrb	r3, [r3, #25]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d108      	bne.n	800111c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e007      	b.n	800112c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800112a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e9b      	ldrb	r3, [r3, #26]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0220 	orr.w	r2, r2, #32
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0220 	bic.w	r2, r2, #32
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7edb      	ldrb	r3, [r3, #27]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0210 	bic.w	r2, r2, #16
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e007      	b.n	8001180 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0210 	orr.w	r2, r2, #16
 800117e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7f1b      	ldrb	r3, [r3, #28]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0208 	orr.w	r2, r2, #8
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e007      	b.n	80011aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0208 	bic.w	r2, r2, #8
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7f5b      	ldrb	r3, [r3, #29]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d108      	bne.n	80011c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 0204 	orr.w	r2, r2, #4
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e007      	b.n	80011d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0204 	bic.w	r2, r2, #4
 80011d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	ea42 0103 	orr.w	r1, r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	1e5a      	subs	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800122a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800122c:	7cfb      	ldrb	r3, [r7, #19]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d003      	beq.n	800123a <HAL_CAN_ConfigFilter+0x26>
 8001232:	7cfb      	ldrb	r3, [r7, #19]
 8001234:	2b02      	cmp	r3, #2
 8001236:	f040 80be 	bne.w	80013b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800123c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001244:	f043 0201 	orr.w	r2, r3, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001254:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	431a      	orrs	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	2201      	movs	r2, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	401a      	ands	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d123      	bne.n	80012e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3248      	adds	r2, #72	; 0x48
 80012c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012da:	6979      	ldr	r1, [r7, #20]
 80012dc:	3348      	adds	r3, #72	; 0x48
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	440b      	add	r3, r1
 80012e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d122      	bne.n	8001332 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	431a      	orrs	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800130c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3248      	adds	r2, #72	; 0x48
 8001312:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001326:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001328:	6979      	ldr	r1, [r7, #20]
 800132a:	3348      	adds	r3, #72	; 0x48
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	440b      	add	r3, r1
 8001330:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43db      	mvns	r3, r3
 8001344:	401a      	ands	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800134c:	e007      	b.n	800135e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	431a      	orrs	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d109      	bne.n	800137a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43db      	mvns	r3, r3
 8001370:	401a      	ands	r2, r3
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001378:	e007      	b.n	800138a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	431a      	orrs	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d107      	bne.n	80013a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	431a      	orrs	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013a8:	f023 0201 	bic.w	r2, r3, #1
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e006      	b.n	80013c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
  }
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40006400 	.word	0x40006400

080013d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d12e      	bne.n	8001446 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2202      	movs	r2, #2
 80013ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001400:	f7ff fddc 	bl	8000fbc <HAL_GetTick>
 8001404:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001406:	e012      	b.n	800142e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001408:	f7ff fdd8 	bl	8000fbc <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b0a      	cmp	r3, #10
 8001414:	d90b      	bls.n	800142e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2205      	movs	r2, #5
 8001426:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e012      	b.n	8001454 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1e5      	bne.n	8001408 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e006      	b.n	8001454 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
  }
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001470:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800147a:	7ffb      	ldrb	r3, [r7, #31]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d003      	beq.n	8001488 <HAL_CAN_AddTxMessage+0x2c>
 8001480:	7ffb      	ldrb	r3, [r7, #31]
 8001482:	2b02      	cmp	r3, #2
 8001484:	f040 80b8 	bne.w	80015f8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10a      	bne.n	80014a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001498:	2b00      	cmp	r3, #0
 800149a:	d105      	bne.n	80014a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 80a0 	beq.w	80015e8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	0e1b      	lsrs	r3, r3, #24
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d907      	bls.n	80014c8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e09e      	b.n	8001606 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014c8:	2201      	movs	r2, #1
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	409a      	lsls	r2, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10d      	bne.n	80014f6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014e4:	68f9      	ldr	r1, [r7, #12]
 80014e6:	6809      	ldr	r1, [r1, #0]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3318      	adds	r3, #24
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	440b      	add	r3, r1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e00f      	b.n	8001516 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001500:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001506:	68f9      	ldr	r1, [r7, #12]
 8001508:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800150a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3318      	adds	r3, #24
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	440b      	add	r3, r1
 8001514:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6819      	ldr	r1, [r3, #0]
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3318      	adds	r3, #24
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	440b      	add	r3, r1
 8001526:	3304      	adds	r3, #4
 8001528:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	7d1b      	ldrb	r3, [r3, #20]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d111      	bne.n	8001556 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3318      	adds	r3, #24
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	4413      	add	r3, r2
 800153e:	3304      	adds	r3, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	6811      	ldr	r1, [r2, #0]
 8001546:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3318      	adds	r3, #24
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	440b      	add	r3, r1
 8001552:	3304      	adds	r3, #4
 8001554:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3307      	adds	r3, #7
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	061a      	lsls	r2, r3, #24
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3306      	adds	r3, #6
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	041b      	lsls	r3, r3, #16
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3305      	adds	r3, #5
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	4313      	orrs	r3, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	3204      	adds	r2, #4
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	4610      	mov	r0, r2
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	6811      	ldr	r1, [r2, #0]
 800157e:	ea43 0200 	orr.w	r2, r3, r0
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	440b      	add	r3, r1
 8001588:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800158c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3303      	adds	r3, #3
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	061a      	lsls	r2, r3, #24
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3302      	adds	r3, #2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	041b      	lsls	r3, r3, #16
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3301      	adds	r3, #1
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	4313      	orrs	r3, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	7812      	ldrb	r2, [r2, #0]
 80015ae:	4610      	mov	r0, r2
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	6811      	ldr	r1, [r2, #0]
 80015b4:	ea43 0200 	orr.w	r2, r3, r0
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	440b      	add	r3, r1
 80015be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80015c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3318      	adds	r3, #24
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	4413      	add	r3, r2
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	6811      	ldr	r1, [r2, #0]
 80015d6:	f043 0201 	orr.w	r2, r3, #1
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3318      	adds	r3, #24
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	440b      	add	r3, r1
 80015e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e00e      	b.n	8001606 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e006      	b.n	8001606 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
  }
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001612:	b480      	push	{r7}
 8001614:	b087      	sub	sp, #28
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001626:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d003      	beq.n	8001636 <HAL_CAN_GetRxMessage+0x24>
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	2b02      	cmp	r3, #2
 8001632:	f040 80f3 	bne.w	800181c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10e      	bne.n	800165a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d116      	bne.n	8001678 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0e7      	b.n	800182a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d107      	bne.n	8001678 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0d8      	b.n	800182a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	331b      	adds	r3, #27
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	4413      	add	r3, r2
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0204 	and.w	r2, r3, #4
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10c      	bne.n	80016b0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	331b      	adds	r3, #27
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4413      	add	r3, r2
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	0d5b      	lsrs	r3, r3, #21
 80016a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e00b      	b.n	80016c8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	331b      	adds	r3, #27
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4413      	add	r3, r2
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	331b      	adds	r3, #27
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	4413      	add	r3, r2
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0202 	and.w	r2, r3, #2
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	331b      	adds	r3, #27
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	4413      	add	r3, r2
 80016ea:	3304      	adds	r3, #4
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 020f 	and.w	r2, r3, #15
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	331b      	adds	r3, #27
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	4413      	add	r3, r2
 8001702:	3304      	adds	r3, #4
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	b2da      	uxtb	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	331b      	adds	r3, #27
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4413      	add	r3, r2
 800171a:	3304      	adds	r3, #4
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	0c1b      	lsrs	r3, r3, #16
 8001720:	b29a      	uxth	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	4413      	add	r3, r2
 8001730:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	4413      	add	r3, r2
 8001746:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	0a1a      	lsrs	r2, r3, #8
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	4413      	add	r3, r2
 8001760:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	0c1a      	lsrs	r2, r3, #16
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	3302      	adds	r3, #2
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	4413      	add	r3, r2
 800177a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	0e1a      	lsrs	r2, r3, #24
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	3303      	adds	r3, #3
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	4413      	add	r3, r2
 8001794:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	3304      	adds	r3, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0a1a      	lsrs	r2, r3, #8
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	3305      	adds	r3, #5
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0c1a      	lsrs	r2, r3, #16
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	3306      	adds	r3, #6
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	4413      	add	r3, r2
 80017e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	0e1a      	lsrs	r2, r3, #24
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	3307      	adds	r3, #7
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d108      	bne.n	8001808 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0220 	orr.w	r2, r2, #32
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	e007      	b.n	8001818 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0220 	orr.w	r2, r2, #32
 8001816:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e006      	b.n	800182a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
  }
}
 800182a:	4618      	mov	r0, r3
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001836:	b480      	push	{r7}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001846:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d002      	beq.n	8001854 <HAL_CAN_ActivateNotification+0x1e>
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d109      	bne.n	8001868 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6959      	ldr	r1, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	e006      	b.n	8001876 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
  }
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b08a      	sub	sp, #40	; 0x28
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d07c      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d023      	beq.n	800191a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2201      	movs	r2, #1
 80018d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f983 	bl	8001bf0 <HAL_CAN_TxMailbox0CompleteCallback>
 80018ea:	e016      	b.n	800191a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d004      	beq.n	8001900 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
 80018fe:	e00c      	b.n	800191a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
 8001912:	e002      	b.n	800191a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f989 	bl	8001c2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d024      	beq.n	800196e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800192c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f963 	bl	8001c04 <HAL_CAN_TxMailbox1CompleteCallback>
 800193e:	e016      	b.n	800196e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
 8001952:	e00c      	b.n	800196e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	e002      	b.n	800196e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f969 	bl	8001c40 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d024      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001980:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f943 	bl	8001c18 <HAL_CAN_TxMailbox2CompleteCallback>
 8001992:	e016      	b.n	80019c2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
 80019a6:	e00c      	b.n	80019c2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ba:	e002      	b.n	80019c2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f949 	bl	8001c54 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00c      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2210      	movs	r2, #16
 80019e4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00b      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2208      	movs	r2, #8
 8001a00:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f930 	bl	8001c68 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7fe fdcd 	bl	80005c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00c      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2210      	movs	r2, #16
 8001a48:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	f003 0320 	and.w	r3, r3, #32
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00b      	beq.n	8001a6c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2208      	movs	r2, #8
 8001a64:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f912 	bl	8001c90 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f8f9 	bl	8001c7c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00b      	beq.n	8001aac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f8fc 	bl	8001ca4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f8f5 	bl	8001cb8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d07b      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d072      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d043      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d03e      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b50:	2b60      	cmp	r3, #96	; 0x60
 8001b52:	d02b      	beq.n	8001bac <HAL_CAN_IRQHandler+0x32a>
 8001b54:	2b60      	cmp	r3, #96	; 0x60
 8001b56:	d82e      	bhi.n	8001bb6 <HAL_CAN_IRQHandler+0x334>
 8001b58:	2b50      	cmp	r3, #80	; 0x50
 8001b5a:	d022      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x320>
 8001b5c:	2b50      	cmp	r3, #80	; 0x50
 8001b5e:	d82a      	bhi.n	8001bb6 <HAL_CAN_IRQHandler+0x334>
 8001b60:	2b40      	cmp	r3, #64	; 0x40
 8001b62:	d019      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x316>
 8001b64:	2b40      	cmp	r3, #64	; 0x40
 8001b66:	d826      	bhi.n	8001bb6 <HAL_CAN_IRQHandler+0x334>
 8001b68:	2b30      	cmp	r3, #48	; 0x30
 8001b6a:	d010      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x30c>
 8001b6c:	2b30      	cmp	r3, #48	; 0x30
 8001b6e:	d822      	bhi.n	8001bb6 <HAL_CAN_IRQHandler+0x334>
 8001b70:	2b10      	cmp	r3, #16
 8001b72:	d002      	beq.n	8001b7a <HAL_CAN_IRQHandler+0x2f8>
 8001b74:	2b20      	cmp	r3, #32
 8001b76:	d005      	beq.n	8001b84 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b78:	e01d      	b.n	8001bb6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b82:	e019      	b.n	8001bb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	f043 0310 	orr.w	r3, r3, #16
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b8c:	e014      	b.n	8001bb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	f043 0320 	orr.w	r3, r3, #32
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b96:	e00f      	b.n	8001bb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ba0:	e00a      	b.n	8001bb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001baa:	e005      	b.n	8001bb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bb4:	e000      	b.n	8001bb8 <HAL_CAN_IRQHandler+0x336>
            break;
 8001bb6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001bc6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2204      	movs	r2, #4
 8001bce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f872 	bl	8001ccc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff29 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff3e 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff8e 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff31 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e177      	b.n	8002210 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f20:	2201      	movs	r2, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f040 8166 	bne.w	800220a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d005      	beq.n	8001f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d130      	bne.n	8001fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 0201 	and.w	r2, r3, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d017      	beq.n	8001ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d123      	bne.n	8002048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	08da      	lsrs	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3208      	adds	r2, #8
 8002008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	220f      	movs	r2, #15
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	69b9      	ldr	r1, [r7, #24]
 8002044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	2203      	movs	r2, #3
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0203 	and.w	r2, r3, #3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80c0 	beq.w	800220a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b66      	ldr	r3, [pc, #408]	; (8002228 <HAL_GPIO_Init+0x324>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a65      	ldr	r2, [pc, #404]	; (8002228 <HAL_GPIO_Init+0x324>)
 8002094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_GPIO_Init+0x324>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a6:	4a61      	ldr	r2, [pc, #388]	; (800222c <HAL_GPIO_Init+0x328>)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	220f      	movs	r2, #15
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a58      	ldr	r2, [pc, #352]	; (8002230 <HAL_GPIO_Init+0x32c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d037      	beq.n	8002142 <HAL_GPIO_Init+0x23e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a57      	ldr	r2, [pc, #348]	; (8002234 <HAL_GPIO_Init+0x330>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d031      	beq.n	800213e <HAL_GPIO_Init+0x23a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a56      	ldr	r2, [pc, #344]	; (8002238 <HAL_GPIO_Init+0x334>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d02b      	beq.n	800213a <HAL_GPIO_Init+0x236>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a55      	ldr	r2, [pc, #340]	; (800223c <HAL_GPIO_Init+0x338>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d025      	beq.n	8002136 <HAL_GPIO_Init+0x232>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a54      	ldr	r2, [pc, #336]	; (8002240 <HAL_GPIO_Init+0x33c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01f      	beq.n	8002132 <HAL_GPIO_Init+0x22e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a53      	ldr	r2, [pc, #332]	; (8002244 <HAL_GPIO_Init+0x340>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d019      	beq.n	800212e <HAL_GPIO_Init+0x22a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a52      	ldr	r2, [pc, #328]	; (8002248 <HAL_GPIO_Init+0x344>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0x226>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a51      	ldr	r2, [pc, #324]	; (800224c <HAL_GPIO_Init+0x348>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_GPIO_Init+0x222>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a50      	ldr	r2, [pc, #320]	; (8002250 <HAL_GPIO_Init+0x34c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <HAL_GPIO_Init+0x21e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4f      	ldr	r2, [pc, #316]	; (8002254 <HAL_GPIO_Init+0x350>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_GPIO_Init+0x21a>
 800211a:	2309      	movs	r3, #9
 800211c:	e012      	b.n	8002144 <HAL_GPIO_Init+0x240>
 800211e:	230a      	movs	r3, #10
 8002120:	e010      	b.n	8002144 <HAL_GPIO_Init+0x240>
 8002122:	2308      	movs	r3, #8
 8002124:	e00e      	b.n	8002144 <HAL_GPIO_Init+0x240>
 8002126:	2307      	movs	r3, #7
 8002128:	e00c      	b.n	8002144 <HAL_GPIO_Init+0x240>
 800212a:	2306      	movs	r3, #6
 800212c:	e00a      	b.n	8002144 <HAL_GPIO_Init+0x240>
 800212e:	2305      	movs	r3, #5
 8002130:	e008      	b.n	8002144 <HAL_GPIO_Init+0x240>
 8002132:	2304      	movs	r3, #4
 8002134:	e006      	b.n	8002144 <HAL_GPIO_Init+0x240>
 8002136:	2303      	movs	r3, #3
 8002138:	e004      	b.n	8002144 <HAL_GPIO_Init+0x240>
 800213a:	2302      	movs	r3, #2
 800213c:	e002      	b.n	8002144 <HAL_GPIO_Init+0x240>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_GPIO_Init+0x240>
 8002142:	2300      	movs	r3, #0
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	f002 0203 	and.w	r2, r2, #3
 800214a:	0092      	lsls	r2, r2, #2
 800214c:	4093      	lsls	r3, r2
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002154:	4935      	ldr	r1, [pc, #212]	; (800222c <HAL_GPIO_Init+0x328>)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	3302      	adds	r3, #2
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002162:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <HAL_GPIO_Init+0x354>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002186:	4a34      	ldr	r2, [pc, #208]	; (8002258 <HAL_GPIO_Init+0x354>)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800218c:	4b32      	ldr	r3, [pc, #200]	; (8002258 <HAL_GPIO_Init+0x354>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b0:	4a29      	ldr	r2, [pc, #164]	; (8002258 <HAL_GPIO_Init+0x354>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021b6:	4b28      	ldr	r3, [pc, #160]	; (8002258 <HAL_GPIO_Init+0x354>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021da:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <HAL_GPIO_Init+0x354>)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_GPIO_Init+0x354>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <HAL_GPIO_Init+0x354>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3301      	adds	r3, #1
 800220e:	61fb      	str	r3, [r7, #28]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	2b0f      	cmp	r3, #15
 8002214:	f67f ae84 	bls.w	8001f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	40013800 	.word	0x40013800
 8002230:	40020000 	.word	0x40020000
 8002234:	40020400 	.word	0x40020400
 8002238:	40020800 	.word	0x40020800
 800223c:	40020c00 	.word	0x40020c00
 8002240:	40021000 	.word	0x40021000
 8002244:	40021400 	.word	0x40021400
 8002248:	40021800 	.word	0x40021800
 800224c:	40021c00 	.word	0x40021c00
 8002250:	40022000 	.word	0x40022000
 8002254:	40022400 	.word	0x40022400
 8002258:	40013c00 	.word	0x40013c00

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002278:	e003      	b.n	8002282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	041a      	lsls	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	619a      	str	r2, [r3, #24]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800228e:	b480      	push	{r7}
 8002290:	b085      	sub	sp, #20
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022a0:	887a      	ldrh	r2, [r7, #2]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4013      	ands	r3, r2
 80022a6:	041a      	lsls	r2, r3, #16
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43d9      	mvns	r1, r3
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	400b      	ands	r3, r1
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	619a      	str	r2, [r3, #24]
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e267      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d075      	beq.n	80023ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022e2:	4b88      	ldr	r3, [pc, #544]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d00c      	beq.n	8002308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ee:	4b85      	ldr	r3, [pc, #532]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d112      	bne.n	8002320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fa:	4b82      	ldr	r3, [pc, #520]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002306:	d10b      	bne.n	8002320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	4b7e      	ldr	r3, [pc, #504]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d05b      	beq.n	80023cc <HAL_RCC_OscConfig+0x108>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d157      	bne.n	80023cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e242      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002328:	d106      	bne.n	8002338 <HAL_RCC_OscConfig+0x74>
 800232a:	4b76      	ldr	r3, [pc, #472]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a75      	ldr	r2, [pc, #468]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e01d      	b.n	8002374 <HAL_RCC_OscConfig+0xb0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x98>
 8002342:	4b70      	ldr	r3, [pc, #448]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6f      	ldr	r2, [pc, #444]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b6d      	ldr	r3, [pc, #436]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a6c      	ldr	r2, [pc, #432]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0xb0>
 800235c:	4b69      	ldr	r3, [pc, #420]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a68      	ldr	r2, [pc, #416]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b66      	ldr	r3, [pc, #408]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a65      	ldr	r2, [pc, #404]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 800236e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe fe1e 	bl	8000fbc <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe fe1a 	bl	8000fbc <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e207      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b5b      	ldr	r3, [pc, #364]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0xc0>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fe0a 	bl	8000fbc <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ac:	f7fe fe06 	bl	8000fbc <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e1f3      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	4b51      	ldr	r3, [pc, #324]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0xe8>
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d063      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023da:	4b4a      	ldr	r3, [pc, #296]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e6:	4b47      	ldr	r3, [pc, #284]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d11c      	bne.n	800242c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f2:	4b44      	ldr	r3, [pc, #272]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d116      	bne.n	800242c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	4b41      	ldr	r3, [pc, #260]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_RCC_OscConfig+0x152>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e1c7      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002416:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4937      	ldr	r1, [pc, #220]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242a:	e03a      	b.n	80024a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002434:	4b34      	ldr	r3, [pc, #208]	; (8002508 <HAL_RCC_OscConfig+0x244>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fe fdbf 	bl	8000fbc <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002442:	f7fe fdbb 	bl	8000fbc <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e1a8      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002454:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002460:	4b28      	ldr	r3, [pc, #160]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4925      	ldr	r1, [pc, #148]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
 8002474:	e015      	b.n	80024a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_OscConfig+0x244>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe fd9e 	bl	8000fbc <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002484:	f7fe fd9a 	bl	8000fbc <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e187      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d036      	beq.n	800251c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d016      	beq.n	80024e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_RCC_OscConfig+0x248>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7fe fd7e 	bl	8000fbc <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c4:	f7fe fd7a 	bl	8000fbc <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e167      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCC_OscConfig+0x240>)
 80024d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x200>
 80024e2:	e01b      	b.n	800251c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_OscConfig+0x248>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ea:	f7fe fd67 	bl	8000fbc <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f0:	e00e      	b.n	8002510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f2:	f7fe fd63 	bl	8000fbc <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d907      	bls.n	8002510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e150      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
 8002504:	40023800 	.word	0x40023800
 8002508:	42470000 	.word	0x42470000
 800250c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	4b88      	ldr	r3, [pc, #544]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ea      	bne.n	80024f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8097 	beq.w	8002658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252e:	4b81      	ldr	r3, [pc, #516]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	4b7d      	ldr	r3, [pc, #500]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a7c      	ldr	r2, [pc, #496]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b7a      	ldr	r3, [pc, #488]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002556:	2301      	movs	r3, #1
 8002558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255a:	4b77      	ldr	r3, [pc, #476]	; (8002738 <HAL_RCC_OscConfig+0x474>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d118      	bne.n	8002598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002566:	4b74      	ldr	r3, [pc, #464]	; (8002738 <HAL_RCC_OscConfig+0x474>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a73      	ldr	r2, [pc, #460]	; (8002738 <HAL_RCC_OscConfig+0x474>)
 800256c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002572:	f7fe fd23 	bl	8000fbc <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257a:	f7fe fd1f 	bl	8000fbc <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e10c      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	4b6a      	ldr	r3, [pc, #424]	; (8002738 <HAL_RCC_OscConfig+0x474>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x2ea>
 80025a0:	4b64      	ldr	r3, [pc, #400]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	4a63      	ldr	r2, [pc, #396]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6713      	str	r3, [r2, #112]	; 0x70
 80025ac:	e01c      	b.n	80025e8 <HAL_RCC_OscConfig+0x324>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x30c>
 80025b6:	4b5f      	ldr	r3, [pc, #380]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ba:	4a5e      	ldr	r2, [pc, #376]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025bc:	f043 0304 	orr.w	r3, r3, #4
 80025c0:	6713      	str	r3, [r2, #112]	; 0x70
 80025c2:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a5b      	ldr	r2, [pc, #364]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
 80025ce:	e00b      	b.n	80025e8 <HAL_RCC_OscConfig+0x324>
 80025d0:	4b58      	ldr	r3, [pc, #352]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	4a57      	ldr	r2, [pc, #348]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025d6:	f023 0301 	bic.w	r3, r3, #1
 80025da:	6713      	str	r3, [r2, #112]	; 0x70
 80025dc:	4b55      	ldr	r3, [pc, #340]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a54      	ldr	r2, [pc, #336]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80025e2:	f023 0304 	bic.w	r3, r3, #4
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d015      	beq.n	800261c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7fe fce4 	bl	8000fbc <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f6:	e00a      	b.n	800260e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f8:	f7fe fce0 	bl	8000fbc <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	; 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e0cb      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260e:	4b49      	ldr	r3, [pc, #292]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0ee      	beq.n	80025f8 <HAL_RCC_OscConfig+0x334>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261c:	f7fe fcce 	bl	8000fbc <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002622:	e00a      	b.n	800263a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7fe fcca 	bl	8000fbc <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e0b5      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263a:	4b3e      	ldr	r3, [pc, #248]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ee      	bne.n	8002624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002646:	7dfb      	ldrb	r3, [r7, #23]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264c:	4b39      	ldr	r3, [pc, #228]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	4a38      	ldr	r2, [pc, #224]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80a1 	beq.w	80027a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002662:	4b34      	ldr	r3, [pc, #208]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b08      	cmp	r3, #8
 800266c:	d05c      	beq.n	8002728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d141      	bne.n	80026fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_RCC_OscConfig+0x478>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fc9e 	bl	8000fbc <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fc9a 	bl	8000fbc <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e087      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002696:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69da      	ldr	r2, [r3, #28]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	019b      	lsls	r3, r3, #6
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	3b01      	subs	r3, #1
 80026bc:	041b      	lsls	r3, r3, #16
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	061b      	lsls	r3, r3, #24
 80026c6:	491b      	ldr	r1, [pc, #108]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x478>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7fe fc73 	bl	8000fbc <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026da:	f7fe fc6f 	bl	8000fbc <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e05c      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x416>
 80026f8:	e054      	b.n	80027a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_RCC_OscConfig+0x478>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7fe fc5c 	bl	8000fbc <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002708:	f7fe fc58 	bl	8000fbc <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e045      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_RCC_OscConfig+0x470>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x444>
 8002726:	e03d      	b.n	80027a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d107      	bne.n	8002740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e038      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
 8002734:	40023800 	.word	0x40023800
 8002738:	40007000 	.word	0x40007000
 800273c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_RCC_OscConfig+0x4ec>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d028      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d121      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d11a      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002770:	4013      	ands	r3, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002778:	4293      	cmp	r3, r2
 800277a:	d111      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	3b01      	subs	r3, #1
 800278a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800

080027b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0cc      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c8:	4b68      	ldr	r3, [pc, #416]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d90c      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b65      	ldr	r3, [pc, #404]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b63      	ldr	r3, [pc, #396]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0b8      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002808:	4b59      	ldr	r3, [pc, #356]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a58      	ldr	r2, [pc, #352]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002820:	4b53      	ldr	r3, [pc, #332]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	4a52      	ldr	r2, [pc, #328]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800282a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800282c:	4b50      	ldr	r3, [pc, #320]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	494d      	ldr	r1, [pc, #308]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d044      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d119      	bne.n	8002892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e07f      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d003      	beq.n	8002872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286e:	2b03      	cmp	r3, #3
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002872:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e06f      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002882:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e067      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002892:	4b37      	ldr	r3, [pc, #220]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f023 0203 	bic.w	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4934      	ldr	r1, [pc, #208]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a4:	f7fe fb8a 	bl	8000fbc <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ac:	f7fe fb86 	bl	8000fbc <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e04f      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c2:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 020c 	and.w	r2, r3, #12
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d1eb      	bne.n	80028ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d20c      	bcs.n	80028fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b22      	ldr	r3, [pc, #136]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e032      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4916      	ldr	r1, [pc, #88]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	490e      	ldr	r1, [pc, #56]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800293a:	f000 f821 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 800293e:	4602      	mov	r2, r0
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	490a      	ldr	r1, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	5ccb      	ldrb	r3, [r1, r3]
 800294e:	fa22 f303 	lsr.w	r3, r2, r3
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1c8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe faea 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023c00 	.word	0x40023c00
 8002970:	40023800 	.word	0x40023800
 8002974:	08004310 	.word	0x08004310
 8002978:	20000000 	.word	0x20000000
 800297c:	20000004 	.word	0x20000004

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002984:	b090      	sub	sp, #64	; 0x40
 8002986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
 800298c:	2300      	movs	r3, #0
 800298e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002990:	2300      	movs	r3, #0
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002998:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x180>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d00d      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0x40>
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	f200 80a1 	bhi.w	8002aec <HAL_RCC_GetSysClockFreq+0x16c>
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x34>
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x3a>
 80029b2:	e09b      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b4:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x184>)
 80029b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80029b8:	e09b      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ba:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x188>)
 80029bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029be:	e098      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c0:	4b4f      	ldr	r3, [pc, #316]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x180>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ca:	4b4d      	ldr	r3, [pc, #308]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x180>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d028      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d6:	4b4a      	ldr	r3, [pc, #296]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x180>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	099b      	lsrs	r3, r3, #6
 80029dc:	2200      	movs	r2, #0
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	627a      	str	r2, [r7, #36]	; 0x24
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029e8:	2100      	movs	r1, #0
 80029ea:	4b47      	ldr	r3, [pc, #284]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x188>)
 80029ec:	fb03 f201 	mul.w	r2, r3, r1
 80029f0:	2300      	movs	r3, #0
 80029f2:	fb00 f303 	mul.w	r3, r0, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	4a43      	ldr	r2, [pc, #268]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x188>)
 80029fa:	fba0 1202 	umull	r1, r2, r0, r2
 80029fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a00:	460a      	mov	r2, r1
 8002a02:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a06:	4413      	add	r3, r2
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	61fa      	str	r2, [r7, #28]
 8002a12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a1a:	f7fd fc39 	bl	8000290 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4613      	mov	r3, r2
 8002a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a26:	e053      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a28:	4b35      	ldr	r3, [pc, #212]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	2200      	movs	r2, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	617a      	str	r2, [r7, #20]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a3a:	f04f 0b00 	mov.w	fp, #0
 8002a3e:	4652      	mov	r2, sl
 8002a40:	465b      	mov	r3, fp
 8002a42:	f04f 0000 	mov.w	r0, #0
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	0159      	lsls	r1, r3, #5
 8002a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a50:	0150      	lsls	r0, r2, #5
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	ebb2 080a 	subs.w	r8, r2, sl
 8002a5a:	eb63 090b 	sbc.w	r9, r3, fp
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a72:	ebb2 0408 	subs.w	r4, r2, r8
 8002a76:	eb63 0509 	sbc.w	r5, r3, r9
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	00eb      	lsls	r3, r5, #3
 8002a84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a88:	00e2      	lsls	r2, r4, #3
 8002a8a:	4614      	mov	r4, r2
 8002a8c:	461d      	mov	r5, r3
 8002a8e:	eb14 030a 	adds.w	r3, r4, sl
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	eb45 030b 	adc.w	r3, r5, fp
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	028b      	lsls	r3, r1, #10
 8002aaa:	4621      	mov	r1, r4
 8002aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	028a      	lsls	r2, r1, #10
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aba:	2200      	movs	r2, #0
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	60fa      	str	r2, [r7, #12]
 8002ac0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ac4:	f7fd fbe4 	bl	8000290 <__aeabi_uldivmod>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4613      	mov	r3, r2
 8002ace:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	3301      	adds	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ae0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aea:	e002      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3740      	adds	r7, #64	; 0x40
 8002af8:	46bd      	mov	sp, r7
 8002afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	00f42400 	.word	0x00f42400
 8002b08:	017d7840 	.word	0x017d7840

08002b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000000 	.word	0x20000000

08002b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b28:	f7ff fff0 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0a9b      	lsrs	r3, r3, #10
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4903      	ldr	r1, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08004320 	.word	0x08004320

08002b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b50:	f7ff ffdc 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	0b5b      	lsrs	r3, r3, #13
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4903      	ldr	r1, [pc, #12]	; (8002b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	08004320 	.word	0x08004320

08002b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e03f      	b.n	8002c06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe f86a 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2224      	movs	r2, #36	; 0x24
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f929 	bl	8002e10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b08a      	sub	sp, #40	; 0x28
 8002c12:	af02      	add	r7, sp, #8
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	d17c      	bne.n	8002d28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_UART_Transmit+0x2c>
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e075      	b.n	8002d2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_UART_Transmit+0x3e>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e06e      	b.n	8002d2a <HAL_UART_Transmit+0x11c>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2221      	movs	r2, #33	; 0x21
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c62:	f7fe f9ab 	bl	8000fbc <HAL_GetTick>
 8002c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	88fa      	ldrh	r2, [r7, #6]
 8002c72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7c:	d108      	bne.n	8002c90 <HAL_UART_Transmit+0x82>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d104      	bne.n	8002c90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	e003      	b.n	8002c98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ca0:	e02a      	b.n	8002cf8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f840 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e036      	b.n	8002d2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10b      	bne.n	8002cda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	e007      	b.n	8002cea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1cf      	bne.n	8002ca2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2140      	movs	r1, #64	; 0x40
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f810 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e006      	b.n	8002d2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e000      	b.n	8002d2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
  }
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b090      	sub	sp, #64	; 0x40
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d42:	e050      	b.n	8002de6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d4a:	d04c      	beq.n	8002de6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d52:	f7fe f933 	bl	8000fbc <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d241      	bcs.n	8002de6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	330c      	adds	r3, #12
 8002d80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d82:	637a      	str	r2, [r7, #52]	; 0x34
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e5      	bne.n	8002d62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3314      	adds	r3, #20
 8002d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	e853 3f00 	ldrex	r3, [r3]
 8002da4:	613b      	str	r3, [r7, #16]
   return(result);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3314      	adds	r3, #20
 8002db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002db6:	623a      	str	r2, [r7, #32]
 8002db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	69f9      	ldr	r1, [r7, #28]
 8002dbc:	6a3a      	ldr	r2, [r7, #32]
 8002dbe:	e841 2300 	strex	r3, r2, [r1]
 8002dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1e5      	bne.n	8002d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e00f      	b.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4013      	ands	r3, r2
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	bf0c      	ite	eq
 8002df6:	2301      	moveq	r3, #1
 8002df8:	2300      	movne	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d09f      	beq.n	8002d44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3740      	adds	r7, #64	; 0x40
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e14:	b0c0      	sub	sp, #256	; 0x100
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2c:	68d9      	ldr	r1, [r3, #12]
 8002e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	ea40 0301 	orr.w	r3, r0, r1
 8002e38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e68:	f021 010c 	bic.w	r1, r1, #12
 8002e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e76:	430b      	orrs	r3, r1
 8002e78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8a:	6999      	ldr	r1, [r3, #24]
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	ea40 0301 	orr.w	r3, r0, r1
 8002e96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b8f      	ldr	r3, [pc, #572]	; (80030dc <UART_SetConfig+0x2cc>)
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d005      	beq.n	8002eb0 <UART_SetConfig+0xa0>
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4b8d      	ldr	r3, [pc, #564]	; (80030e0 <UART_SetConfig+0x2d0>)
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d104      	bne.n	8002eba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eb0:	f7ff fe4c 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 8002eb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002eb8:	e003      	b.n	8002ec2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eba:	f7ff fe33 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8002ebe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ecc:	f040 810c 	bne.w	80030e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002eda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ede:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	1891      	adds	r1, r2, r2
 8002ee8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002eea:	415b      	adcs	r3, r3
 8002eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	eb12 0801 	adds.w	r8, r2, r1
 8002ef8:	4629      	mov	r1, r5
 8002efa:	eb43 0901 	adc.w	r9, r3, r1
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f12:	4690      	mov	r8, r2
 8002f14:	4699      	mov	r9, r3
 8002f16:	4623      	mov	r3, r4
 8002f18:	eb18 0303 	adds.w	r3, r8, r3
 8002f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f20:	462b      	mov	r3, r5
 8002f22:	eb49 0303 	adc.w	r3, r9, r3
 8002f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f3e:	460b      	mov	r3, r1
 8002f40:	18db      	adds	r3, r3, r3
 8002f42:	653b      	str	r3, [r7, #80]	; 0x50
 8002f44:	4613      	mov	r3, r2
 8002f46:	eb42 0303 	adc.w	r3, r2, r3
 8002f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f54:	f7fd f99c 	bl	8000290 <__aeabi_uldivmod>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4b61      	ldr	r3, [pc, #388]	; (80030e4 <UART_SetConfig+0x2d4>)
 8002f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	011c      	lsls	r4, r3, #4
 8002f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f78:	4642      	mov	r2, r8
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	1891      	adds	r1, r2, r2
 8002f7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f80:	415b      	adcs	r3, r3
 8002f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f88:	4641      	mov	r1, r8
 8002f8a:	eb12 0a01 	adds.w	sl, r2, r1
 8002f8e:	4649      	mov	r1, r9
 8002f90:	eb43 0b01 	adc.w	fp, r3, r1
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fa8:	4692      	mov	sl, r2
 8002faa:	469b      	mov	fp, r3
 8002fac:	4643      	mov	r3, r8
 8002fae:	eb1a 0303 	adds.w	r3, sl, r3
 8002fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	18db      	adds	r3, r3, r3
 8002fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8002fda:	4613      	mov	r3, r2
 8002fdc:	eb42 0303 	adc.w	r3, r2, r3
 8002fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fe6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002fea:	f7fd f951 	bl	8000290 <__aeabi_uldivmod>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <UART_SetConfig+0x2d4>)
 8002ff6:	fba3 2301 	umull	r2, r3, r3, r1
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2264      	movs	r2, #100	; 0x64
 8002ffe:	fb02 f303 	mul.w	r3, r2, r3
 8003002:	1acb      	subs	r3, r1, r3
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800300a:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <UART_SetConfig+0x2d4>)
 800300c:	fba3 2302 	umull	r2, r3, r3, r2
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003018:	441c      	add	r4, r3
 800301a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800301e:	2200      	movs	r2, #0
 8003020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003024:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003028:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800302c:	4642      	mov	r2, r8
 800302e:	464b      	mov	r3, r9
 8003030:	1891      	adds	r1, r2, r2
 8003032:	63b9      	str	r1, [r7, #56]	; 0x38
 8003034:	415b      	adcs	r3, r3
 8003036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003038:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800303c:	4641      	mov	r1, r8
 800303e:	1851      	adds	r1, r2, r1
 8003040:	6339      	str	r1, [r7, #48]	; 0x30
 8003042:	4649      	mov	r1, r9
 8003044:	414b      	adcs	r3, r1
 8003046:	637b      	str	r3, [r7, #52]	; 0x34
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003054:	4659      	mov	r1, fp
 8003056:	00cb      	lsls	r3, r1, #3
 8003058:	4651      	mov	r1, sl
 800305a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800305e:	4651      	mov	r1, sl
 8003060:	00ca      	lsls	r2, r1, #3
 8003062:	4610      	mov	r0, r2
 8003064:	4619      	mov	r1, r3
 8003066:	4603      	mov	r3, r0
 8003068:	4642      	mov	r2, r8
 800306a:	189b      	adds	r3, r3, r2
 800306c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003070:	464b      	mov	r3, r9
 8003072:	460a      	mov	r2, r1
 8003074:	eb42 0303 	adc.w	r3, r2, r3
 8003078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003088:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800308c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003090:	460b      	mov	r3, r1
 8003092:	18db      	adds	r3, r3, r3
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
 8003096:	4613      	mov	r3, r2
 8003098:	eb42 0303 	adc.w	r3, r2, r3
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030a6:	f7fd f8f3 	bl	8000290 <__aeabi_uldivmod>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <UART_SetConfig+0x2d4>)
 80030b0:	fba3 1302 	umull	r1, r3, r3, r2
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	2164      	movs	r1, #100	; 0x64
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	3332      	adds	r3, #50	; 0x32
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <UART_SetConfig+0x2d4>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	f003 0207 	and.w	r2, r3, #7
 80030ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4422      	add	r2, r4
 80030d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030d8:	e105      	b.n	80032e6 <UART_SetConfig+0x4d6>
 80030da:	bf00      	nop
 80030dc:	40011000 	.word	0x40011000
 80030e0:	40011400 	.word	0x40011400
 80030e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030fa:	4642      	mov	r2, r8
 80030fc:	464b      	mov	r3, r9
 80030fe:	1891      	adds	r1, r2, r2
 8003100:	6239      	str	r1, [r7, #32]
 8003102:	415b      	adcs	r3, r3
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800310a:	4641      	mov	r1, r8
 800310c:	1854      	adds	r4, r2, r1
 800310e:	4649      	mov	r1, r9
 8003110:	eb43 0501 	adc.w	r5, r3, r1
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	00eb      	lsls	r3, r5, #3
 800311e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003122:	00e2      	lsls	r2, r4, #3
 8003124:	4614      	mov	r4, r2
 8003126:	461d      	mov	r5, r3
 8003128:	4643      	mov	r3, r8
 800312a:	18e3      	adds	r3, r4, r3
 800312c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003130:	464b      	mov	r3, r9
 8003132:	eb45 0303 	adc.w	r3, r5, r3
 8003136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800313a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003146:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003156:	4629      	mov	r1, r5
 8003158:	008b      	lsls	r3, r1, #2
 800315a:	4621      	mov	r1, r4
 800315c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003160:	4621      	mov	r1, r4
 8003162:	008a      	lsls	r2, r1, #2
 8003164:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003168:	f7fd f892 	bl	8000290 <__aeabi_uldivmod>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <UART_SetConfig+0x4e4>)
 8003172:	fba3 2302 	umull	r2, r3, r3, r2
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	011c      	lsls	r4, r3, #4
 800317a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800317e:	2200      	movs	r2, #0
 8003180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003184:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003188:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800318c:	4642      	mov	r2, r8
 800318e:	464b      	mov	r3, r9
 8003190:	1891      	adds	r1, r2, r2
 8003192:	61b9      	str	r1, [r7, #24]
 8003194:	415b      	adcs	r3, r3
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800319c:	4641      	mov	r1, r8
 800319e:	1851      	adds	r1, r2, r1
 80031a0:	6139      	str	r1, [r7, #16]
 80031a2:	4649      	mov	r1, r9
 80031a4:	414b      	adcs	r3, r1
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b4:	4659      	mov	r1, fp
 80031b6:	00cb      	lsls	r3, r1, #3
 80031b8:	4651      	mov	r1, sl
 80031ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031be:	4651      	mov	r1, sl
 80031c0:	00ca      	lsls	r2, r1, #3
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	4642      	mov	r2, r8
 80031ca:	189b      	adds	r3, r3, r2
 80031cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031d0:	464b      	mov	r3, r9
 80031d2:	460a      	mov	r2, r1
 80031d4:	eb42 0303 	adc.w	r3, r2, r3
 80031d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80031e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031f4:	4649      	mov	r1, r9
 80031f6:	008b      	lsls	r3, r1, #2
 80031f8:	4641      	mov	r1, r8
 80031fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031fe:	4641      	mov	r1, r8
 8003200:	008a      	lsls	r2, r1, #2
 8003202:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003206:	f7fd f843 	bl	8000290 <__aeabi_uldivmod>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <UART_SetConfig+0x4e4>)
 8003210:	fba3 1302 	umull	r1, r3, r3, r2
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	2164      	movs	r1, #100	; 0x64
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	3332      	adds	r3, #50	; 0x32
 8003222:	4a34      	ldr	r2, [pc, #208]	; (80032f4 <UART_SetConfig+0x4e4>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800322e:	441c      	add	r4, r3
 8003230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003234:	2200      	movs	r2, #0
 8003236:	673b      	str	r3, [r7, #112]	; 0x70
 8003238:	677a      	str	r2, [r7, #116]	; 0x74
 800323a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800323e:	4642      	mov	r2, r8
 8003240:	464b      	mov	r3, r9
 8003242:	1891      	adds	r1, r2, r2
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	415b      	adcs	r3, r3
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800324e:	4641      	mov	r1, r8
 8003250:	1851      	adds	r1, r2, r1
 8003252:	6039      	str	r1, [r7, #0]
 8003254:	4649      	mov	r1, r9
 8003256:	414b      	adcs	r3, r1
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003266:	4659      	mov	r1, fp
 8003268:	00cb      	lsls	r3, r1, #3
 800326a:	4651      	mov	r1, sl
 800326c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003270:	4651      	mov	r1, sl
 8003272:	00ca      	lsls	r2, r1, #3
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	4603      	mov	r3, r0
 800327a:	4642      	mov	r2, r8
 800327c:	189b      	adds	r3, r3, r2
 800327e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003280:	464b      	mov	r3, r9
 8003282:	460a      	mov	r2, r1
 8003284:	eb42 0303 	adc.w	r3, r2, r3
 8003288:	66fb      	str	r3, [r7, #108]	; 0x6c
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	663b      	str	r3, [r7, #96]	; 0x60
 8003294:	667a      	str	r2, [r7, #100]	; 0x64
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032a2:	4649      	mov	r1, r9
 80032a4:	008b      	lsls	r3, r1, #2
 80032a6:	4641      	mov	r1, r8
 80032a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ac:	4641      	mov	r1, r8
 80032ae:	008a      	lsls	r2, r1, #2
 80032b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032b4:	f7fc ffec 	bl	8000290 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <UART_SetConfig+0x4e4>)
 80032be:	fba3 1302 	umull	r1, r3, r3, r2
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	2164      	movs	r1, #100	; 0x64
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	3332      	adds	r3, #50	; 0x32
 80032d0:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <UART_SetConfig+0x4e4>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4422      	add	r2, r4
 80032e4:	609a      	str	r2, [r3, #8]
}
 80032e6:	bf00      	nop
 80032e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032ec:	46bd      	mov	sp, r7
 80032ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f2:	bf00      	nop
 80032f4:	51eb851f 	.word	0x51eb851f

080032f8 <__errno>:
 80032f8:	4b01      	ldr	r3, [pc, #4]	; (8003300 <__errno+0x8>)
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	2000000c 	.word	0x2000000c

08003304 <__libc_init_array>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	4d0d      	ldr	r5, [pc, #52]	; (800333c <__libc_init_array+0x38>)
 8003308:	4c0d      	ldr	r4, [pc, #52]	; (8003340 <__libc_init_array+0x3c>)
 800330a:	1b64      	subs	r4, r4, r5
 800330c:	10a4      	asrs	r4, r4, #2
 800330e:	2600      	movs	r6, #0
 8003310:	42a6      	cmp	r6, r4
 8003312:	d109      	bne.n	8003328 <__libc_init_array+0x24>
 8003314:	4d0b      	ldr	r5, [pc, #44]	; (8003344 <__libc_init_array+0x40>)
 8003316:	4c0c      	ldr	r4, [pc, #48]	; (8003348 <__libc_init_array+0x44>)
 8003318:	f000 ffae 	bl	8004278 <_init>
 800331c:	1b64      	subs	r4, r4, r5
 800331e:	10a4      	asrs	r4, r4, #2
 8003320:	2600      	movs	r6, #0
 8003322:	42a6      	cmp	r6, r4
 8003324:	d105      	bne.n	8003332 <__libc_init_array+0x2e>
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	f855 3b04 	ldr.w	r3, [r5], #4
 800332c:	4798      	blx	r3
 800332e:	3601      	adds	r6, #1
 8003330:	e7ee      	b.n	8003310 <__libc_init_array+0xc>
 8003332:	f855 3b04 	ldr.w	r3, [r5], #4
 8003336:	4798      	blx	r3
 8003338:	3601      	adds	r6, #1
 800333a:	e7f2      	b.n	8003322 <__libc_init_array+0x1e>
 800333c:	080043c8 	.word	0x080043c8
 8003340:	080043c8 	.word	0x080043c8
 8003344:	080043c8 	.word	0x080043c8
 8003348:	080043cc 	.word	0x080043cc

0800334c <memset>:
 800334c:	4402      	add	r2, r0
 800334e:	4603      	mov	r3, r0
 8003350:	4293      	cmp	r3, r2
 8003352:	d100      	bne.n	8003356 <memset+0xa>
 8003354:	4770      	bx	lr
 8003356:	f803 1b01 	strb.w	r1, [r3], #1
 800335a:	e7f9      	b.n	8003350 <memset+0x4>

0800335c <iprintf>:
 800335c:	b40f      	push	{r0, r1, r2, r3}
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <iprintf+0x2c>)
 8003360:	b513      	push	{r0, r1, r4, lr}
 8003362:	681c      	ldr	r4, [r3, #0]
 8003364:	b124      	cbz	r4, 8003370 <iprintf+0x14>
 8003366:	69a3      	ldr	r3, [r4, #24]
 8003368:	b913      	cbnz	r3, 8003370 <iprintf+0x14>
 800336a:	4620      	mov	r0, r4
 800336c:	f000 f9e8 	bl	8003740 <__sinit>
 8003370:	ab05      	add	r3, sp, #20
 8003372:	9a04      	ldr	r2, [sp, #16]
 8003374:	68a1      	ldr	r1, [r4, #8]
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	4620      	mov	r0, r4
 800337a:	f000 fbf1 	bl	8003b60 <_vfiprintf_r>
 800337e:	b002      	add	sp, #8
 8003380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003384:	b004      	add	sp, #16
 8003386:	4770      	bx	lr
 8003388:	2000000c 	.word	0x2000000c

0800338c <__swbuf_r>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	460e      	mov	r6, r1
 8003390:	4614      	mov	r4, r2
 8003392:	4605      	mov	r5, r0
 8003394:	b118      	cbz	r0, 800339e <__swbuf_r+0x12>
 8003396:	6983      	ldr	r3, [r0, #24]
 8003398:	b90b      	cbnz	r3, 800339e <__swbuf_r+0x12>
 800339a:	f000 f9d1 	bl	8003740 <__sinit>
 800339e:	4b21      	ldr	r3, [pc, #132]	; (8003424 <__swbuf_r+0x98>)
 80033a0:	429c      	cmp	r4, r3
 80033a2:	d12b      	bne.n	80033fc <__swbuf_r+0x70>
 80033a4:	686c      	ldr	r4, [r5, #4]
 80033a6:	69a3      	ldr	r3, [r4, #24]
 80033a8:	60a3      	str	r3, [r4, #8]
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	071a      	lsls	r2, r3, #28
 80033ae:	d52f      	bpl.n	8003410 <__swbuf_r+0x84>
 80033b0:	6923      	ldr	r3, [r4, #16]
 80033b2:	b36b      	cbz	r3, 8003410 <__swbuf_r+0x84>
 80033b4:	6923      	ldr	r3, [r4, #16]
 80033b6:	6820      	ldr	r0, [r4, #0]
 80033b8:	1ac0      	subs	r0, r0, r3
 80033ba:	6963      	ldr	r3, [r4, #20]
 80033bc:	b2f6      	uxtb	r6, r6
 80033be:	4283      	cmp	r3, r0
 80033c0:	4637      	mov	r7, r6
 80033c2:	dc04      	bgt.n	80033ce <__swbuf_r+0x42>
 80033c4:	4621      	mov	r1, r4
 80033c6:	4628      	mov	r0, r5
 80033c8:	f000 f926 	bl	8003618 <_fflush_r>
 80033cc:	bb30      	cbnz	r0, 800341c <__swbuf_r+0x90>
 80033ce:	68a3      	ldr	r3, [r4, #8]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	60a3      	str	r3, [r4, #8]
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	6022      	str	r2, [r4, #0]
 80033da:	701e      	strb	r6, [r3, #0]
 80033dc:	6963      	ldr	r3, [r4, #20]
 80033de:	3001      	adds	r0, #1
 80033e0:	4283      	cmp	r3, r0
 80033e2:	d004      	beq.n	80033ee <__swbuf_r+0x62>
 80033e4:	89a3      	ldrh	r3, [r4, #12]
 80033e6:	07db      	lsls	r3, r3, #31
 80033e8:	d506      	bpl.n	80033f8 <__swbuf_r+0x6c>
 80033ea:	2e0a      	cmp	r6, #10
 80033ec:	d104      	bne.n	80033f8 <__swbuf_r+0x6c>
 80033ee:	4621      	mov	r1, r4
 80033f0:	4628      	mov	r0, r5
 80033f2:	f000 f911 	bl	8003618 <_fflush_r>
 80033f6:	b988      	cbnz	r0, 800341c <__swbuf_r+0x90>
 80033f8:	4638      	mov	r0, r7
 80033fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <__swbuf_r+0x9c>)
 80033fe:	429c      	cmp	r4, r3
 8003400:	d101      	bne.n	8003406 <__swbuf_r+0x7a>
 8003402:	68ac      	ldr	r4, [r5, #8]
 8003404:	e7cf      	b.n	80033a6 <__swbuf_r+0x1a>
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <__swbuf_r+0xa0>)
 8003408:	429c      	cmp	r4, r3
 800340a:	bf08      	it	eq
 800340c:	68ec      	ldreq	r4, [r5, #12]
 800340e:	e7ca      	b.n	80033a6 <__swbuf_r+0x1a>
 8003410:	4621      	mov	r1, r4
 8003412:	4628      	mov	r0, r5
 8003414:	f000 f80c 	bl	8003430 <__swsetup_r>
 8003418:	2800      	cmp	r0, #0
 800341a:	d0cb      	beq.n	80033b4 <__swbuf_r+0x28>
 800341c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003420:	e7ea      	b.n	80033f8 <__swbuf_r+0x6c>
 8003422:	bf00      	nop
 8003424:	0800434c 	.word	0x0800434c
 8003428:	0800436c 	.word	0x0800436c
 800342c:	0800432c 	.word	0x0800432c

08003430 <__swsetup_r>:
 8003430:	4b32      	ldr	r3, [pc, #200]	; (80034fc <__swsetup_r+0xcc>)
 8003432:	b570      	push	{r4, r5, r6, lr}
 8003434:	681d      	ldr	r5, [r3, #0]
 8003436:	4606      	mov	r6, r0
 8003438:	460c      	mov	r4, r1
 800343a:	b125      	cbz	r5, 8003446 <__swsetup_r+0x16>
 800343c:	69ab      	ldr	r3, [r5, #24]
 800343e:	b913      	cbnz	r3, 8003446 <__swsetup_r+0x16>
 8003440:	4628      	mov	r0, r5
 8003442:	f000 f97d 	bl	8003740 <__sinit>
 8003446:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <__swsetup_r+0xd0>)
 8003448:	429c      	cmp	r4, r3
 800344a:	d10f      	bne.n	800346c <__swsetup_r+0x3c>
 800344c:	686c      	ldr	r4, [r5, #4]
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003454:	0719      	lsls	r1, r3, #28
 8003456:	d42c      	bmi.n	80034b2 <__swsetup_r+0x82>
 8003458:	06dd      	lsls	r5, r3, #27
 800345a:	d411      	bmi.n	8003480 <__swsetup_r+0x50>
 800345c:	2309      	movs	r3, #9
 800345e:	6033      	str	r3, [r6, #0]
 8003460:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003464:	81a3      	strh	r3, [r4, #12]
 8003466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800346a:	e03e      	b.n	80034ea <__swsetup_r+0xba>
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <__swsetup_r+0xd4>)
 800346e:	429c      	cmp	r4, r3
 8003470:	d101      	bne.n	8003476 <__swsetup_r+0x46>
 8003472:	68ac      	ldr	r4, [r5, #8]
 8003474:	e7eb      	b.n	800344e <__swsetup_r+0x1e>
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <__swsetup_r+0xd8>)
 8003478:	429c      	cmp	r4, r3
 800347a:	bf08      	it	eq
 800347c:	68ec      	ldreq	r4, [r5, #12]
 800347e:	e7e6      	b.n	800344e <__swsetup_r+0x1e>
 8003480:	0758      	lsls	r0, r3, #29
 8003482:	d512      	bpl.n	80034aa <__swsetup_r+0x7a>
 8003484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003486:	b141      	cbz	r1, 800349a <__swsetup_r+0x6a>
 8003488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800348c:	4299      	cmp	r1, r3
 800348e:	d002      	beq.n	8003496 <__swsetup_r+0x66>
 8003490:	4630      	mov	r0, r6
 8003492:	f000 fa5b 	bl	800394c <_free_r>
 8003496:	2300      	movs	r3, #0
 8003498:	6363      	str	r3, [r4, #52]	; 0x34
 800349a:	89a3      	ldrh	r3, [r4, #12]
 800349c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034a0:	81a3      	strh	r3, [r4, #12]
 80034a2:	2300      	movs	r3, #0
 80034a4:	6063      	str	r3, [r4, #4]
 80034a6:	6923      	ldr	r3, [r4, #16]
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	f043 0308 	orr.w	r3, r3, #8
 80034b0:	81a3      	strh	r3, [r4, #12]
 80034b2:	6923      	ldr	r3, [r4, #16]
 80034b4:	b94b      	cbnz	r3, 80034ca <__swsetup_r+0x9a>
 80034b6:	89a3      	ldrh	r3, [r4, #12]
 80034b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80034bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c0:	d003      	beq.n	80034ca <__swsetup_r+0x9a>
 80034c2:	4621      	mov	r1, r4
 80034c4:	4630      	mov	r0, r6
 80034c6:	f000 fa01 	bl	80038cc <__smakebuf_r>
 80034ca:	89a0      	ldrh	r0, [r4, #12]
 80034cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034d0:	f010 0301 	ands.w	r3, r0, #1
 80034d4:	d00a      	beq.n	80034ec <__swsetup_r+0xbc>
 80034d6:	2300      	movs	r3, #0
 80034d8:	60a3      	str	r3, [r4, #8]
 80034da:	6963      	ldr	r3, [r4, #20]
 80034dc:	425b      	negs	r3, r3
 80034de:	61a3      	str	r3, [r4, #24]
 80034e0:	6923      	ldr	r3, [r4, #16]
 80034e2:	b943      	cbnz	r3, 80034f6 <__swsetup_r+0xc6>
 80034e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034e8:	d1ba      	bne.n	8003460 <__swsetup_r+0x30>
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
 80034ec:	0781      	lsls	r1, r0, #30
 80034ee:	bf58      	it	pl
 80034f0:	6963      	ldrpl	r3, [r4, #20]
 80034f2:	60a3      	str	r3, [r4, #8]
 80034f4:	e7f4      	b.n	80034e0 <__swsetup_r+0xb0>
 80034f6:	2000      	movs	r0, #0
 80034f8:	e7f7      	b.n	80034ea <__swsetup_r+0xba>
 80034fa:	bf00      	nop
 80034fc:	2000000c 	.word	0x2000000c
 8003500:	0800434c 	.word	0x0800434c
 8003504:	0800436c 	.word	0x0800436c
 8003508:	0800432c 	.word	0x0800432c

0800350c <__sflush_r>:
 800350c:	898a      	ldrh	r2, [r1, #12]
 800350e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003512:	4605      	mov	r5, r0
 8003514:	0710      	lsls	r0, r2, #28
 8003516:	460c      	mov	r4, r1
 8003518:	d458      	bmi.n	80035cc <__sflush_r+0xc0>
 800351a:	684b      	ldr	r3, [r1, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	dc05      	bgt.n	800352c <__sflush_r+0x20>
 8003520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	dc02      	bgt.n	800352c <__sflush_r+0x20>
 8003526:	2000      	movs	r0, #0
 8003528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800352c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800352e:	2e00      	cmp	r6, #0
 8003530:	d0f9      	beq.n	8003526 <__sflush_r+0x1a>
 8003532:	2300      	movs	r3, #0
 8003534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003538:	682f      	ldr	r7, [r5, #0]
 800353a:	602b      	str	r3, [r5, #0]
 800353c:	d032      	beq.n	80035a4 <__sflush_r+0x98>
 800353e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003540:	89a3      	ldrh	r3, [r4, #12]
 8003542:	075a      	lsls	r2, r3, #29
 8003544:	d505      	bpl.n	8003552 <__sflush_r+0x46>
 8003546:	6863      	ldr	r3, [r4, #4]
 8003548:	1ac0      	subs	r0, r0, r3
 800354a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800354c:	b10b      	cbz	r3, 8003552 <__sflush_r+0x46>
 800354e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003550:	1ac0      	subs	r0, r0, r3
 8003552:	2300      	movs	r3, #0
 8003554:	4602      	mov	r2, r0
 8003556:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003558:	6a21      	ldr	r1, [r4, #32]
 800355a:	4628      	mov	r0, r5
 800355c:	47b0      	blx	r6
 800355e:	1c43      	adds	r3, r0, #1
 8003560:	89a3      	ldrh	r3, [r4, #12]
 8003562:	d106      	bne.n	8003572 <__sflush_r+0x66>
 8003564:	6829      	ldr	r1, [r5, #0]
 8003566:	291d      	cmp	r1, #29
 8003568:	d82c      	bhi.n	80035c4 <__sflush_r+0xb8>
 800356a:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <__sflush_r+0x108>)
 800356c:	40ca      	lsrs	r2, r1
 800356e:	07d6      	lsls	r6, r2, #31
 8003570:	d528      	bpl.n	80035c4 <__sflush_r+0xb8>
 8003572:	2200      	movs	r2, #0
 8003574:	6062      	str	r2, [r4, #4]
 8003576:	04d9      	lsls	r1, r3, #19
 8003578:	6922      	ldr	r2, [r4, #16]
 800357a:	6022      	str	r2, [r4, #0]
 800357c:	d504      	bpl.n	8003588 <__sflush_r+0x7c>
 800357e:	1c42      	adds	r2, r0, #1
 8003580:	d101      	bne.n	8003586 <__sflush_r+0x7a>
 8003582:	682b      	ldr	r3, [r5, #0]
 8003584:	b903      	cbnz	r3, 8003588 <__sflush_r+0x7c>
 8003586:	6560      	str	r0, [r4, #84]	; 0x54
 8003588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800358a:	602f      	str	r7, [r5, #0]
 800358c:	2900      	cmp	r1, #0
 800358e:	d0ca      	beq.n	8003526 <__sflush_r+0x1a>
 8003590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003594:	4299      	cmp	r1, r3
 8003596:	d002      	beq.n	800359e <__sflush_r+0x92>
 8003598:	4628      	mov	r0, r5
 800359a:	f000 f9d7 	bl	800394c <_free_r>
 800359e:	2000      	movs	r0, #0
 80035a0:	6360      	str	r0, [r4, #52]	; 0x34
 80035a2:	e7c1      	b.n	8003528 <__sflush_r+0x1c>
 80035a4:	6a21      	ldr	r1, [r4, #32]
 80035a6:	2301      	movs	r3, #1
 80035a8:	4628      	mov	r0, r5
 80035aa:	47b0      	blx	r6
 80035ac:	1c41      	adds	r1, r0, #1
 80035ae:	d1c7      	bne.n	8003540 <__sflush_r+0x34>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0c4      	beq.n	8003540 <__sflush_r+0x34>
 80035b6:	2b1d      	cmp	r3, #29
 80035b8:	d001      	beq.n	80035be <__sflush_r+0xb2>
 80035ba:	2b16      	cmp	r3, #22
 80035bc:	d101      	bne.n	80035c2 <__sflush_r+0xb6>
 80035be:	602f      	str	r7, [r5, #0]
 80035c0:	e7b1      	b.n	8003526 <__sflush_r+0x1a>
 80035c2:	89a3      	ldrh	r3, [r4, #12]
 80035c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c8:	81a3      	strh	r3, [r4, #12]
 80035ca:	e7ad      	b.n	8003528 <__sflush_r+0x1c>
 80035cc:	690f      	ldr	r7, [r1, #16]
 80035ce:	2f00      	cmp	r7, #0
 80035d0:	d0a9      	beq.n	8003526 <__sflush_r+0x1a>
 80035d2:	0793      	lsls	r3, r2, #30
 80035d4:	680e      	ldr	r6, [r1, #0]
 80035d6:	bf08      	it	eq
 80035d8:	694b      	ldreq	r3, [r1, #20]
 80035da:	600f      	str	r7, [r1, #0]
 80035dc:	bf18      	it	ne
 80035de:	2300      	movne	r3, #0
 80035e0:	eba6 0807 	sub.w	r8, r6, r7
 80035e4:	608b      	str	r3, [r1, #8]
 80035e6:	f1b8 0f00 	cmp.w	r8, #0
 80035ea:	dd9c      	ble.n	8003526 <__sflush_r+0x1a>
 80035ec:	6a21      	ldr	r1, [r4, #32]
 80035ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035f0:	4643      	mov	r3, r8
 80035f2:	463a      	mov	r2, r7
 80035f4:	4628      	mov	r0, r5
 80035f6:	47b0      	blx	r6
 80035f8:	2800      	cmp	r0, #0
 80035fa:	dc06      	bgt.n	800360a <__sflush_r+0xfe>
 80035fc:	89a3      	ldrh	r3, [r4, #12]
 80035fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003602:	81a3      	strh	r3, [r4, #12]
 8003604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003608:	e78e      	b.n	8003528 <__sflush_r+0x1c>
 800360a:	4407      	add	r7, r0
 800360c:	eba8 0800 	sub.w	r8, r8, r0
 8003610:	e7e9      	b.n	80035e6 <__sflush_r+0xda>
 8003612:	bf00      	nop
 8003614:	20400001 	.word	0x20400001

08003618 <_fflush_r>:
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	690b      	ldr	r3, [r1, #16]
 800361c:	4605      	mov	r5, r0
 800361e:	460c      	mov	r4, r1
 8003620:	b913      	cbnz	r3, 8003628 <_fflush_r+0x10>
 8003622:	2500      	movs	r5, #0
 8003624:	4628      	mov	r0, r5
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	b118      	cbz	r0, 8003632 <_fflush_r+0x1a>
 800362a:	6983      	ldr	r3, [r0, #24]
 800362c:	b90b      	cbnz	r3, 8003632 <_fflush_r+0x1a>
 800362e:	f000 f887 	bl	8003740 <__sinit>
 8003632:	4b14      	ldr	r3, [pc, #80]	; (8003684 <_fflush_r+0x6c>)
 8003634:	429c      	cmp	r4, r3
 8003636:	d11b      	bne.n	8003670 <_fflush_r+0x58>
 8003638:	686c      	ldr	r4, [r5, #4]
 800363a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0ef      	beq.n	8003622 <_fflush_r+0xa>
 8003642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003644:	07d0      	lsls	r0, r2, #31
 8003646:	d404      	bmi.n	8003652 <_fflush_r+0x3a>
 8003648:	0599      	lsls	r1, r3, #22
 800364a:	d402      	bmi.n	8003652 <_fflush_r+0x3a>
 800364c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800364e:	f000 f915 	bl	800387c <__retarget_lock_acquire_recursive>
 8003652:	4628      	mov	r0, r5
 8003654:	4621      	mov	r1, r4
 8003656:	f7ff ff59 	bl	800350c <__sflush_r>
 800365a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800365c:	07da      	lsls	r2, r3, #31
 800365e:	4605      	mov	r5, r0
 8003660:	d4e0      	bmi.n	8003624 <_fflush_r+0xc>
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	059b      	lsls	r3, r3, #22
 8003666:	d4dd      	bmi.n	8003624 <_fflush_r+0xc>
 8003668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800366a:	f000 f908 	bl	800387e <__retarget_lock_release_recursive>
 800366e:	e7d9      	b.n	8003624 <_fflush_r+0xc>
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <_fflush_r+0x70>)
 8003672:	429c      	cmp	r4, r3
 8003674:	d101      	bne.n	800367a <_fflush_r+0x62>
 8003676:	68ac      	ldr	r4, [r5, #8]
 8003678:	e7df      	b.n	800363a <_fflush_r+0x22>
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <_fflush_r+0x74>)
 800367c:	429c      	cmp	r4, r3
 800367e:	bf08      	it	eq
 8003680:	68ec      	ldreq	r4, [r5, #12]
 8003682:	e7da      	b.n	800363a <_fflush_r+0x22>
 8003684:	0800434c 	.word	0x0800434c
 8003688:	0800436c 	.word	0x0800436c
 800368c:	0800432c 	.word	0x0800432c

08003690 <std>:
 8003690:	2300      	movs	r3, #0
 8003692:	b510      	push	{r4, lr}
 8003694:	4604      	mov	r4, r0
 8003696:	e9c0 3300 	strd	r3, r3, [r0]
 800369a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800369e:	6083      	str	r3, [r0, #8]
 80036a0:	8181      	strh	r1, [r0, #12]
 80036a2:	6643      	str	r3, [r0, #100]	; 0x64
 80036a4:	81c2      	strh	r2, [r0, #14]
 80036a6:	6183      	str	r3, [r0, #24]
 80036a8:	4619      	mov	r1, r3
 80036aa:	2208      	movs	r2, #8
 80036ac:	305c      	adds	r0, #92	; 0x5c
 80036ae:	f7ff fe4d 	bl	800334c <memset>
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <std+0x38>)
 80036b4:	6263      	str	r3, [r4, #36]	; 0x24
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <std+0x3c>)
 80036b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <std+0x40>)
 80036bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <std+0x44>)
 80036c0:	6224      	str	r4, [r4, #32]
 80036c2:	6323      	str	r3, [r4, #48]	; 0x30
 80036c4:	bd10      	pop	{r4, pc}
 80036c6:	bf00      	nop
 80036c8:	08004109 	.word	0x08004109
 80036cc:	0800412b 	.word	0x0800412b
 80036d0:	08004163 	.word	0x08004163
 80036d4:	08004187 	.word	0x08004187

080036d8 <_cleanup_r>:
 80036d8:	4901      	ldr	r1, [pc, #4]	; (80036e0 <_cleanup_r+0x8>)
 80036da:	f000 b8af 	b.w	800383c <_fwalk_reent>
 80036de:	bf00      	nop
 80036e0:	08003619 	.word	0x08003619

080036e4 <__sfmoreglue>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	2268      	movs	r2, #104	; 0x68
 80036e8:	1e4d      	subs	r5, r1, #1
 80036ea:	4355      	muls	r5, r2
 80036ec:	460e      	mov	r6, r1
 80036ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80036f2:	f000 f997 	bl	8003a24 <_malloc_r>
 80036f6:	4604      	mov	r4, r0
 80036f8:	b140      	cbz	r0, 800370c <__sfmoreglue+0x28>
 80036fa:	2100      	movs	r1, #0
 80036fc:	e9c0 1600 	strd	r1, r6, [r0]
 8003700:	300c      	adds	r0, #12
 8003702:	60a0      	str	r0, [r4, #8]
 8003704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003708:	f7ff fe20 	bl	800334c <memset>
 800370c:	4620      	mov	r0, r4
 800370e:	bd70      	pop	{r4, r5, r6, pc}

08003710 <__sfp_lock_acquire>:
 8003710:	4801      	ldr	r0, [pc, #4]	; (8003718 <__sfp_lock_acquire+0x8>)
 8003712:	f000 b8b3 	b.w	800387c <__retarget_lock_acquire_recursive>
 8003716:	bf00      	nop
 8003718:	200001a9 	.word	0x200001a9

0800371c <__sfp_lock_release>:
 800371c:	4801      	ldr	r0, [pc, #4]	; (8003724 <__sfp_lock_release+0x8>)
 800371e:	f000 b8ae 	b.w	800387e <__retarget_lock_release_recursive>
 8003722:	bf00      	nop
 8003724:	200001a9 	.word	0x200001a9

08003728 <__sinit_lock_acquire>:
 8003728:	4801      	ldr	r0, [pc, #4]	; (8003730 <__sinit_lock_acquire+0x8>)
 800372a:	f000 b8a7 	b.w	800387c <__retarget_lock_acquire_recursive>
 800372e:	bf00      	nop
 8003730:	200001aa 	.word	0x200001aa

08003734 <__sinit_lock_release>:
 8003734:	4801      	ldr	r0, [pc, #4]	; (800373c <__sinit_lock_release+0x8>)
 8003736:	f000 b8a2 	b.w	800387e <__retarget_lock_release_recursive>
 800373a:	bf00      	nop
 800373c:	200001aa 	.word	0x200001aa

08003740 <__sinit>:
 8003740:	b510      	push	{r4, lr}
 8003742:	4604      	mov	r4, r0
 8003744:	f7ff fff0 	bl	8003728 <__sinit_lock_acquire>
 8003748:	69a3      	ldr	r3, [r4, #24]
 800374a:	b11b      	cbz	r3, 8003754 <__sinit+0x14>
 800374c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003750:	f7ff bff0 	b.w	8003734 <__sinit_lock_release>
 8003754:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003758:	6523      	str	r3, [r4, #80]	; 0x50
 800375a:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <__sinit+0x68>)
 800375c:	4a13      	ldr	r2, [pc, #76]	; (80037ac <__sinit+0x6c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	62a2      	str	r2, [r4, #40]	; 0x28
 8003762:	42a3      	cmp	r3, r4
 8003764:	bf04      	itt	eq
 8003766:	2301      	moveq	r3, #1
 8003768:	61a3      	streq	r3, [r4, #24]
 800376a:	4620      	mov	r0, r4
 800376c:	f000 f820 	bl	80037b0 <__sfp>
 8003770:	6060      	str	r0, [r4, #4]
 8003772:	4620      	mov	r0, r4
 8003774:	f000 f81c 	bl	80037b0 <__sfp>
 8003778:	60a0      	str	r0, [r4, #8]
 800377a:	4620      	mov	r0, r4
 800377c:	f000 f818 	bl	80037b0 <__sfp>
 8003780:	2200      	movs	r2, #0
 8003782:	60e0      	str	r0, [r4, #12]
 8003784:	2104      	movs	r1, #4
 8003786:	6860      	ldr	r0, [r4, #4]
 8003788:	f7ff ff82 	bl	8003690 <std>
 800378c:	68a0      	ldr	r0, [r4, #8]
 800378e:	2201      	movs	r2, #1
 8003790:	2109      	movs	r1, #9
 8003792:	f7ff ff7d 	bl	8003690 <std>
 8003796:	68e0      	ldr	r0, [r4, #12]
 8003798:	2202      	movs	r2, #2
 800379a:	2112      	movs	r1, #18
 800379c:	f7ff ff78 	bl	8003690 <std>
 80037a0:	2301      	movs	r3, #1
 80037a2:	61a3      	str	r3, [r4, #24]
 80037a4:	e7d2      	b.n	800374c <__sinit+0xc>
 80037a6:	bf00      	nop
 80037a8:	08004328 	.word	0x08004328
 80037ac:	080036d9 	.word	0x080036d9

080037b0 <__sfp>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	4607      	mov	r7, r0
 80037b4:	f7ff ffac 	bl	8003710 <__sfp_lock_acquire>
 80037b8:	4b1e      	ldr	r3, [pc, #120]	; (8003834 <__sfp+0x84>)
 80037ba:	681e      	ldr	r6, [r3, #0]
 80037bc:	69b3      	ldr	r3, [r6, #24]
 80037be:	b913      	cbnz	r3, 80037c6 <__sfp+0x16>
 80037c0:	4630      	mov	r0, r6
 80037c2:	f7ff ffbd 	bl	8003740 <__sinit>
 80037c6:	3648      	adds	r6, #72	; 0x48
 80037c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	d503      	bpl.n	80037d8 <__sfp+0x28>
 80037d0:	6833      	ldr	r3, [r6, #0]
 80037d2:	b30b      	cbz	r3, 8003818 <__sfp+0x68>
 80037d4:	6836      	ldr	r6, [r6, #0]
 80037d6:	e7f7      	b.n	80037c8 <__sfp+0x18>
 80037d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80037dc:	b9d5      	cbnz	r5, 8003814 <__sfp+0x64>
 80037de:	4b16      	ldr	r3, [pc, #88]	; (8003838 <__sfp+0x88>)
 80037e0:	60e3      	str	r3, [r4, #12]
 80037e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80037e6:	6665      	str	r5, [r4, #100]	; 0x64
 80037e8:	f000 f847 	bl	800387a <__retarget_lock_init_recursive>
 80037ec:	f7ff ff96 	bl	800371c <__sfp_lock_release>
 80037f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80037f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80037f8:	6025      	str	r5, [r4, #0]
 80037fa:	61a5      	str	r5, [r4, #24]
 80037fc:	2208      	movs	r2, #8
 80037fe:	4629      	mov	r1, r5
 8003800:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003804:	f7ff fda2 	bl	800334c <memset>
 8003808:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800380c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003810:	4620      	mov	r0, r4
 8003812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003814:	3468      	adds	r4, #104	; 0x68
 8003816:	e7d9      	b.n	80037cc <__sfp+0x1c>
 8003818:	2104      	movs	r1, #4
 800381a:	4638      	mov	r0, r7
 800381c:	f7ff ff62 	bl	80036e4 <__sfmoreglue>
 8003820:	4604      	mov	r4, r0
 8003822:	6030      	str	r0, [r6, #0]
 8003824:	2800      	cmp	r0, #0
 8003826:	d1d5      	bne.n	80037d4 <__sfp+0x24>
 8003828:	f7ff ff78 	bl	800371c <__sfp_lock_release>
 800382c:	230c      	movs	r3, #12
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	e7ee      	b.n	8003810 <__sfp+0x60>
 8003832:	bf00      	nop
 8003834:	08004328 	.word	0x08004328
 8003838:	ffff0001 	.word	0xffff0001

0800383c <_fwalk_reent>:
 800383c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003840:	4606      	mov	r6, r0
 8003842:	4688      	mov	r8, r1
 8003844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003848:	2700      	movs	r7, #0
 800384a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800384e:	f1b9 0901 	subs.w	r9, r9, #1
 8003852:	d505      	bpl.n	8003860 <_fwalk_reent+0x24>
 8003854:	6824      	ldr	r4, [r4, #0]
 8003856:	2c00      	cmp	r4, #0
 8003858:	d1f7      	bne.n	800384a <_fwalk_reent+0xe>
 800385a:	4638      	mov	r0, r7
 800385c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003860:	89ab      	ldrh	r3, [r5, #12]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d907      	bls.n	8003876 <_fwalk_reent+0x3a>
 8003866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800386a:	3301      	adds	r3, #1
 800386c:	d003      	beq.n	8003876 <_fwalk_reent+0x3a>
 800386e:	4629      	mov	r1, r5
 8003870:	4630      	mov	r0, r6
 8003872:	47c0      	blx	r8
 8003874:	4307      	orrs	r7, r0
 8003876:	3568      	adds	r5, #104	; 0x68
 8003878:	e7e9      	b.n	800384e <_fwalk_reent+0x12>

0800387a <__retarget_lock_init_recursive>:
 800387a:	4770      	bx	lr

0800387c <__retarget_lock_acquire_recursive>:
 800387c:	4770      	bx	lr

0800387e <__retarget_lock_release_recursive>:
 800387e:	4770      	bx	lr

08003880 <__swhatbuf_r>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	460e      	mov	r6, r1
 8003884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003888:	2900      	cmp	r1, #0
 800388a:	b096      	sub	sp, #88	; 0x58
 800388c:	4614      	mov	r4, r2
 800388e:	461d      	mov	r5, r3
 8003890:	da08      	bge.n	80038a4 <__swhatbuf_r+0x24>
 8003892:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	602a      	str	r2, [r5, #0]
 800389a:	061a      	lsls	r2, r3, #24
 800389c:	d410      	bmi.n	80038c0 <__swhatbuf_r+0x40>
 800389e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038a2:	e00e      	b.n	80038c2 <__swhatbuf_r+0x42>
 80038a4:	466a      	mov	r2, sp
 80038a6:	f000 fc95 	bl	80041d4 <_fstat_r>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	dbf1      	blt.n	8003892 <__swhatbuf_r+0x12>
 80038ae:	9a01      	ldr	r2, [sp, #4]
 80038b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80038b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80038b8:	425a      	negs	r2, r3
 80038ba:	415a      	adcs	r2, r3
 80038bc:	602a      	str	r2, [r5, #0]
 80038be:	e7ee      	b.n	800389e <__swhatbuf_r+0x1e>
 80038c0:	2340      	movs	r3, #64	; 0x40
 80038c2:	2000      	movs	r0, #0
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	b016      	add	sp, #88	; 0x58
 80038c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080038cc <__smakebuf_r>:
 80038cc:	898b      	ldrh	r3, [r1, #12]
 80038ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038d0:	079d      	lsls	r5, r3, #30
 80038d2:	4606      	mov	r6, r0
 80038d4:	460c      	mov	r4, r1
 80038d6:	d507      	bpl.n	80038e8 <__smakebuf_r+0x1c>
 80038d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	6123      	str	r3, [r4, #16]
 80038e0:	2301      	movs	r3, #1
 80038e2:	6163      	str	r3, [r4, #20]
 80038e4:	b002      	add	sp, #8
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
 80038e8:	ab01      	add	r3, sp, #4
 80038ea:	466a      	mov	r2, sp
 80038ec:	f7ff ffc8 	bl	8003880 <__swhatbuf_r>
 80038f0:	9900      	ldr	r1, [sp, #0]
 80038f2:	4605      	mov	r5, r0
 80038f4:	4630      	mov	r0, r6
 80038f6:	f000 f895 	bl	8003a24 <_malloc_r>
 80038fa:	b948      	cbnz	r0, 8003910 <__smakebuf_r+0x44>
 80038fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003900:	059a      	lsls	r2, r3, #22
 8003902:	d4ef      	bmi.n	80038e4 <__smakebuf_r+0x18>
 8003904:	f023 0303 	bic.w	r3, r3, #3
 8003908:	f043 0302 	orr.w	r3, r3, #2
 800390c:	81a3      	strh	r3, [r4, #12]
 800390e:	e7e3      	b.n	80038d8 <__smakebuf_r+0xc>
 8003910:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <__smakebuf_r+0x7c>)
 8003912:	62b3      	str	r3, [r6, #40]	; 0x28
 8003914:	89a3      	ldrh	r3, [r4, #12]
 8003916:	6020      	str	r0, [r4, #0]
 8003918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391c:	81a3      	strh	r3, [r4, #12]
 800391e:	9b00      	ldr	r3, [sp, #0]
 8003920:	6163      	str	r3, [r4, #20]
 8003922:	9b01      	ldr	r3, [sp, #4]
 8003924:	6120      	str	r0, [r4, #16]
 8003926:	b15b      	cbz	r3, 8003940 <__smakebuf_r+0x74>
 8003928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800392c:	4630      	mov	r0, r6
 800392e:	f000 fc63 	bl	80041f8 <_isatty_r>
 8003932:	b128      	cbz	r0, 8003940 <__smakebuf_r+0x74>
 8003934:	89a3      	ldrh	r3, [r4, #12]
 8003936:	f023 0303 	bic.w	r3, r3, #3
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	81a3      	strh	r3, [r4, #12]
 8003940:	89a0      	ldrh	r0, [r4, #12]
 8003942:	4305      	orrs	r5, r0
 8003944:	81a5      	strh	r5, [r4, #12]
 8003946:	e7cd      	b.n	80038e4 <__smakebuf_r+0x18>
 8003948:	080036d9 	.word	0x080036d9

0800394c <_free_r>:
 800394c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800394e:	2900      	cmp	r1, #0
 8003950:	d044      	beq.n	80039dc <_free_r+0x90>
 8003952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003956:	9001      	str	r0, [sp, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	f1a1 0404 	sub.w	r4, r1, #4
 800395e:	bfb8      	it	lt
 8003960:	18e4      	addlt	r4, r4, r3
 8003962:	f000 fc6b 	bl	800423c <__malloc_lock>
 8003966:	4a1e      	ldr	r2, [pc, #120]	; (80039e0 <_free_r+0x94>)
 8003968:	9801      	ldr	r0, [sp, #4]
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	b933      	cbnz	r3, 800397c <_free_r+0x30>
 800396e:	6063      	str	r3, [r4, #4]
 8003970:	6014      	str	r4, [r2, #0]
 8003972:	b003      	add	sp, #12
 8003974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003978:	f000 bc66 	b.w	8004248 <__malloc_unlock>
 800397c:	42a3      	cmp	r3, r4
 800397e:	d908      	bls.n	8003992 <_free_r+0x46>
 8003980:	6825      	ldr	r5, [r4, #0]
 8003982:	1961      	adds	r1, r4, r5
 8003984:	428b      	cmp	r3, r1
 8003986:	bf01      	itttt	eq
 8003988:	6819      	ldreq	r1, [r3, #0]
 800398a:	685b      	ldreq	r3, [r3, #4]
 800398c:	1949      	addeq	r1, r1, r5
 800398e:	6021      	streq	r1, [r4, #0]
 8003990:	e7ed      	b.n	800396e <_free_r+0x22>
 8003992:	461a      	mov	r2, r3
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	b10b      	cbz	r3, 800399c <_free_r+0x50>
 8003998:	42a3      	cmp	r3, r4
 800399a:	d9fa      	bls.n	8003992 <_free_r+0x46>
 800399c:	6811      	ldr	r1, [r2, #0]
 800399e:	1855      	adds	r5, r2, r1
 80039a0:	42a5      	cmp	r5, r4
 80039a2:	d10b      	bne.n	80039bc <_free_r+0x70>
 80039a4:	6824      	ldr	r4, [r4, #0]
 80039a6:	4421      	add	r1, r4
 80039a8:	1854      	adds	r4, r2, r1
 80039aa:	42a3      	cmp	r3, r4
 80039ac:	6011      	str	r1, [r2, #0]
 80039ae:	d1e0      	bne.n	8003972 <_free_r+0x26>
 80039b0:	681c      	ldr	r4, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	6053      	str	r3, [r2, #4]
 80039b6:	4421      	add	r1, r4
 80039b8:	6011      	str	r1, [r2, #0]
 80039ba:	e7da      	b.n	8003972 <_free_r+0x26>
 80039bc:	d902      	bls.n	80039c4 <_free_r+0x78>
 80039be:	230c      	movs	r3, #12
 80039c0:	6003      	str	r3, [r0, #0]
 80039c2:	e7d6      	b.n	8003972 <_free_r+0x26>
 80039c4:	6825      	ldr	r5, [r4, #0]
 80039c6:	1961      	adds	r1, r4, r5
 80039c8:	428b      	cmp	r3, r1
 80039ca:	bf04      	itt	eq
 80039cc:	6819      	ldreq	r1, [r3, #0]
 80039ce:	685b      	ldreq	r3, [r3, #4]
 80039d0:	6063      	str	r3, [r4, #4]
 80039d2:	bf04      	itt	eq
 80039d4:	1949      	addeq	r1, r1, r5
 80039d6:	6021      	streq	r1, [r4, #0]
 80039d8:	6054      	str	r4, [r2, #4]
 80039da:	e7ca      	b.n	8003972 <_free_r+0x26>
 80039dc:	b003      	add	sp, #12
 80039de:	bd30      	pop	{r4, r5, pc}
 80039e0:	200001ac 	.word	0x200001ac

080039e4 <sbrk_aligned>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	4e0e      	ldr	r6, [pc, #56]	; (8003a20 <sbrk_aligned+0x3c>)
 80039e8:	460c      	mov	r4, r1
 80039ea:	6831      	ldr	r1, [r6, #0]
 80039ec:	4605      	mov	r5, r0
 80039ee:	b911      	cbnz	r1, 80039f6 <sbrk_aligned+0x12>
 80039f0:	f000 fb7a 	bl	80040e8 <_sbrk_r>
 80039f4:	6030      	str	r0, [r6, #0]
 80039f6:	4621      	mov	r1, r4
 80039f8:	4628      	mov	r0, r5
 80039fa:	f000 fb75 	bl	80040e8 <_sbrk_r>
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	d00a      	beq.n	8003a18 <sbrk_aligned+0x34>
 8003a02:	1cc4      	adds	r4, r0, #3
 8003a04:	f024 0403 	bic.w	r4, r4, #3
 8003a08:	42a0      	cmp	r0, r4
 8003a0a:	d007      	beq.n	8003a1c <sbrk_aligned+0x38>
 8003a0c:	1a21      	subs	r1, r4, r0
 8003a0e:	4628      	mov	r0, r5
 8003a10:	f000 fb6a 	bl	80040e8 <_sbrk_r>
 8003a14:	3001      	adds	r0, #1
 8003a16:	d101      	bne.n	8003a1c <sbrk_aligned+0x38>
 8003a18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	200001b0 	.word	0x200001b0

08003a24 <_malloc_r>:
 8003a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a28:	1ccd      	adds	r5, r1, #3
 8003a2a:	f025 0503 	bic.w	r5, r5, #3
 8003a2e:	3508      	adds	r5, #8
 8003a30:	2d0c      	cmp	r5, #12
 8003a32:	bf38      	it	cc
 8003a34:	250c      	movcc	r5, #12
 8003a36:	2d00      	cmp	r5, #0
 8003a38:	4607      	mov	r7, r0
 8003a3a:	db01      	blt.n	8003a40 <_malloc_r+0x1c>
 8003a3c:	42a9      	cmp	r1, r5
 8003a3e:	d905      	bls.n	8003a4c <_malloc_r+0x28>
 8003a40:	230c      	movs	r3, #12
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	2600      	movs	r6, #0
 8003a46:	4630      	mov	r0, r6
 8003a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a4c:	4e2e      	ldr	r6, [pc, #184]	; (8003b08 <_malloc_r+0xe4>)
 8003a4e:	f000 fbf5 	bl	800423c <__malloc_lock>
 8003a52:	6833      	ldr	r3, [r6, #0]
 8003a54:	461c      	mov	r4, r3
 8003a56:	bb34      	cbnz	r4, 8003aa6 <_malloc_r+0x82>
 8003a58:	4629      	mov	r1, r5
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	f7ff ffc2 	bl	80039e4 <sbrk_aligned>
 8003a60:	1c43      	adds	r3, r0, #1
 8003a62:	4604      	mov	r4, r0
 8003a64:	d14d      	bne.n	8003b02 <_malloc_r+0xde>
 8003a66:	6834      	ldr	r4, [r6, #0]
 8003a68:	4626      	mov	r6, r4
 8003a6a:	2e00      	cmp	r6, #0
 8003a6c:	d140      	bne.n	8003af0 <_malloc_r+0xcc>
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	4631      	mov	r1, r6
 8003a72:	4638      	mov	r0, r7
 8003a74:	eb04 0803 	add.w	r8, r4, r3
 8003a78:	f000 fb36 	bl	80040e8 <_sbrk_r>
 8003a7c:	4580      	cmp	r8, r0
 8003a7e:	d13a      	bne.n	8003af6 <_malloc_r+0xd2>
 8003a80:	6821      	ldr	r1, [r4, #0]
 8003a82:	3503      	adds	r5, #3
 8003a84:	1a6d      	subs	r5, r5, r1
 8003a86:	f025 0503 	bic.w	r5, r5, #3
 8003a8a:	3508      	adds	r5, #8
 8003a8c:	2d0c      	cmp	r5, #12
 8003a8e:	bf38      	it	cc
 8003a90:	250c      	movcc	r5, #12
 8003a92:	4629      	mov	r1, r5
 8003a94:	4638      	mov	r0, r7
 8003a96:	f7ff ffa5 	bl	80039e4 <sbrk_aligned>
 8003a9a:	3001      	adds	r0, #1
 8003a9c:	d02b      	beq.n	8003af6 <_malloc_r+0xd2>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	442b      	add	r3, r5
 8003aa2:	6023      	str	r3, [r4, #0]
 8003aa4:	e00e      	b.n	8003ac4 <_malloc_r+0xa0>
 8003aa6:	6822      	ldr	r2, [r4, #0]
 8003aa8:	1b52      	subs	r2, r2, r5
 8003aaa:	d41e      	bmi.n	8003aea <_malloc_r+0xc6>
 8003aac:	2a0b      	cmp	r2, #11
 8003aae:	d916      	bls.n	8003ade <_malloc_r+0xba>
 8003ab0:	1961      	adds	r1, r4, r5
 8003ab2:	42a3      	cmp	r3, r4
 8003ab4:	6025      	str	r5, [r4, #0]
 8003ab6:	bf18      	it	ne
 8003ab8:	6059      	strne	r1, [r3, #4]
 8003aba:	6863      	ldr	r3, [r4, #4]
 8003abc:	bf08      	it	eq
 8003abe:	6031      	streq	r1, [r6, #0]
 8003ac0:	5162      	str	r2, [r4, r5]
 8003ac2:	604b      	str	r3, [r1, #4]
 8003ac4:	4638      	mov	r0, r7
 8003ac6:	f104 060b 	add.w	r6, r4, #11
 8003aca:	f000 fbbd 	bl	8004248 <__malloc_unlock>
 8003ace:	f026 0607 	bic.w	r6, r6, #7
 8003ad2:	1d23      	adds	r3, r4, #4
 8003ad4:	1af2      	subs	r2, r6, r3
 8003ad6:	d0b6      	beq.n	8003a46 <_malloc_r+0x22>
 8003ad8:	1b9b      	subs	r3, r3, r6
 8003ada:	50a3      	str	r3, [r4, r2]
 8003adc:	e7b3      	b.n	8003a46 <_malloc_r+0x22>
 8003ade:	6862      	ldr	r2, [r4, #4]
 8003ae0:	42a3      	cmp	r3, r4
 8003ae2:	bf0c      	ite	eq
 8003ae4:	6032      	streq	r2, [r6, #0]
 8003ae6:	605a      	strne	r2, [r3, #4]
 8003ae8:	e7ec      	b.n	8003ac4 <_malloc_r+0xa0>
 8003aea:	4623      	mov	r3, r4
 8003aec:	6864      	ldr	r4, [r4, #4]
 8003aee:	e7b2      	b.n	8003a56 <_malloc_r+0x32>
 8003af0:	4634      	mov	r4, r6
 8003af2:	6876      	ldr	r6, [r6, #4]
 8003af4:	e7b9      	b.n	8003a6a <_malloc_r+0x46>
 8003af6:	230c      	movs	r3, #12
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4638      	mov	r0, r7
 8003afc:	f000 fba4 	bl	8004248 <__malloc_unlock>
 8003b00:	e7a1      	b.n	8003a46 <_malloc_r+0x22>
 8003b02:	6025      	str	r5, [r4, #0]
 8003b04:	e7de      	b.n	8003ac4 <_malloc_r+0xa0>
 8003b06:	bf00      	nop
 8003b08:	200001ac 	.word	0x200001ac

08003b0c <__sfputc_r>:
 8003b0c:	6893      	ldr	r3, [r2, #8]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	b410      	push	{r4}
 8003b14:	6093      	str	r3, [r2, #8]
 8003b16:	da08      	bge.n	8003b2a <__sfputc_r+0x1e>
 8003b18:	6994      	ldr	r4, [r2, #24]
 8003b1a:	42a3      	cmp	r3, r4
 8003b1c:	db01      	blt.n	8003b22 <__sfputc_r+0x16>
 8003b1e:	290a      	cmp	r1, #10
 8003b20:	d103      	bne.n	8003b2a <__sfputc_r+0x1e>
 8003b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b26:	f7ff bc31 	b.w	800338c <__swbuf_r>
 8003b2a:	6813      	ldr	r3, [r2, #0]
 8003b2c:	1c58      	adds	r0, r3, #1
 8003b2e:	6010      	str	r0, [r2, #0]
 8003b30:	7019      	strb	r1, [r3, #0]
 8003b32:	4608      	mov	r0, r1
 8003b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <__sfputs_r>:
 8003b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3c:	4606      	mov	r6, r0
 8003b3e:	460f      	mov	r7, r1
 8003b40:	4614      	mov	r4, r2
 8003b42:	18d5      	adds	r5, r2, r3
 8003b44:	42ac      	cmp	r4, r5
 8003b46:	d101      	bne.n	8003b4c <__sfputs_r+0x12>
 8003b48:	2000      	movs	r0, #0
 8003b4a:	e007      	b.n	8003b5c <__sfputs_r+0x22>
 8003b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b50:	463a      	mov	r2, r7
 8003b52:	4630      	mov	r0, r6
 8003b54:	f7ff ffda 	bl	8003b0c <__sfputc_r>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d1f3      	bne.n	8003b44 <__sfputs_r+0xa>
 8003b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b60 <_vfiprintf_r>:
 8003b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b64:	460d      	mov	r5, r1
 8003b66:	b09d      	sub	sp, #116	; 0x74
 8003b68:	4614      	mov	r4, r2
 8003b6a:	4698      	mov	r8, r3
 8003b6c:	4606      	mov	r6, r0
 8003b6e:	b118      	cbz	r0, 8003b78 <_vfiprintf_r+0x18>
 8003b70:	6983      	ldr	r3, [r0, #24]
 8003b72:	b90b      	cbnz	r3, 8003b78 <_vfiprintf_r+0x18>
 8003b74:	f7ff fde4 	bl	8003740 <__sinit>
 8003b78:	4b89      	ldr	r3, [pc, #548]	; (8003da0 <_vfiprintf_r+0x240>)
 8003b7a:	429d      	cmp	r5, r3
 8003b7c:	d11b      	bne.n	8003bb6 <_vfiprintf_r+0x56>
 8003b7e:	6875      	ldr	r5, [r6, #4]
 8003b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b82:	07d9      	lsls	r1, r3, #31
 8003b84:	d405      	bmi.n	8003b92 <_vfiprintf_r+0x32>
 8003b86:	89ab      	ldrh	r3, [r5, #12]
 8003b88:	059a      	lsls	r2, r3, #22
 8003b8a:	d402      	bmi.n	8003b92 <_vfiprintf_r+0x32>
 8003b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b8e:	f7ff fe75 	bl	800387c <__retarget_lock_acquire_recursive>
 8003b92:	89ab      	ldrh	r3, [r5, #12]
 8003b94:	071b      	lsls	r3, r3, #28
 8003b96:	d501      	bpl.n	8003b9c <_vfiprintf_r+0x3c>
 8003b98:	692b      	ldr	r3, [r5, #16]
 8003b9a:	b9eb      	cbnz	r3, 8003bd8 <_vfiprintf_r+0x78>
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	f7ff fc46 	bl	8003430 <__swsetup_r>
 8003ba4:	b1c0      	cbz	r0, 8003bd8 <_vfiprintf_r+0x78>
 8003ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ba8:	07dc      	lsls	r4, r3, #31
 8003baa:	d50e      	bpl.n	8003bca <_vfiprintf_r+0x6a>
 8003bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bb0:	b01d      	add	sp, #116	; 0x74
 8003bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb6:	4b7b      	ldr	r3, [pc, #492]	; (8003da4 <_vfiprintf_r+0x244>)
 8003bb8:	429d      	cmp	r5, r3
 8003bba:	d101      	bne.n	8003bc0 <_vfiprintf_r+0x60>
 8003bbc:	68b5      	ldr	r5, [r6, #8]
 8003bbe:	e7df      	b.n	8003b80 <_vfiprintf_r+0x20>
 8003bc0:	4b79      	ldr	r3, [pc, #484]	; (8003da8 <_vfiprintf_r+0x248>)
 8003bc2:	429d      	cmp	r5, r3
 8003bc4:	bf08      	it	eq
 8003bc6:	68f5      	ldreq	r5, [r6, #12]
 8003bc8:	e7da      	b.n	8003b80 <_vfiprintf_r+0x20>
 8003bca:	89ab      	ldrh	r3, [r5, #12]
 8003bcc:	0598      	lsls	r0, r3, #22
 8003bce:	d4ed      	bmi.n	8003bac <_vfiprintf_r+0x4c>
 8003bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bd2:	f7ff fe54 	bl	800387e <__retarget_lock_release_recursive>
 8003bd6:	e7e9      	b.n	8003bac <_vfiprintf_r+0x4c>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	9309      	str	r3, [sp, #36]	; 0x24
 8003bdc:	2320      	movs	r3, #32
 8003bde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003be2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003be6:	2330      	movs	r3, #48	; 0x30
 8003be8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003dac <_vfiprintf_r+0x24c>
 8003bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bf0:	f04f 0901 	mov.w	r9, #1
 8003bf4:	4623      	mov	r3, r4
 8003bf6:	469a      	mov	sl, r3
 8003bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bfc:	b10a      	cbz	r2, 8003c02 <_vfiprintf_r+0xa2>
 8003bfe:	2a25      	cmp	r2, #37	; 0x25
 8003c00:	d1f9      	bne.n	8003bf6 <_vfiprintf_r+0x96>
 8003c02:	ebba 0b04 	subs.w	fp, sl, r4
 8003c06:	d00b      	beq.n	8003c20 <_vfiprintf_r+0xc0>
 8003c08:	465b      	mov	r3, fp
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f7ff ff93 	bl	8003b3a <__sfputs_r>
 8003c14:	3001      	adds	r0, #1
 8003c16:	f000 80aa 	beq.w	8003d6e <_vfiprintf_r+0x20e>
 8003c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c1c:	445a      	add	r2, fp
 8003c1e:	9209      	str	r2, [sp, #36]	; 0x24
 8003c20:	f89a 3000 	ldrb.w	r3, [sl]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80a2 	beq.w	8003d6e <_vfiprintf_r+0x20e>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c34:	f10a 0a01 	add.w	sl, sl, #1
 8003c38:	9304      	str	r3, [sp, #16]
 8003c3a:	9307      	str	r3, [sp, #28]
 8003c3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c40:	931a      	str	r3, [sp, #104]	; 0x68
 8003c42:	4654      	mov	r4, sl
 8003c44:	2205      	movs	r2, #5
 8003c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c4a:	4858      	ldr	r0, [pc, #352]	; (8003dac <_vfiprintf_r+0x24c>)
 8003c4c:	f7fc fad0 	bl	80001f0 <memchr>
 8003c50:	9a04      	ldr	r2, [sp, #16]
 8003c52:	b9d8      	cbnz	r0, 8003c8c <_vfiprintf_r+0x12c>
 8003c54:	06d1      	lsls	r1, r2, #27
 8003c56:	bf44      	itt	mi
 8003c58:	2320      	movmi	r3, #32
 8003c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c5e:	0713      	lsls	r3, r2, #28
 8003c60:	bf44      	itt	mi
 8003c62:	232b      	movmi	r3, #43	; 0x2b
 8003c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c68:	f89a 3000 	ldrb.w	r3, [sl]
 8003c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c6e:	d015      	beq.n	8003c9c <_vfiprintf_r+0x13c>
 8003c70:	9a07      	ldr	r2, [sp, #28]
 8003c72:	4654      	mov	r4, sl
 8003c74:	2000      	movs	r0, #0
 8003c76:	f04f 0c0a 	mov.w	ip, #10
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c80:	3b30      	subs	r3, #48	; 0x30
 8003c82:	2b09      	cmp	r3, #9
 8003c84:	d94e      	bls.n	8003d24 <_vfiprintf_r+0x1c4>
 8003c86:	b1b0      	cbz	r0, 8003cb6 <_vfiprintf_r+0x156>
 8003c88:	9207      	str	r2, [sp, #28]
 8003c8a:	e014      	b.n	8003cb6 <_vfiprintf_r+0x156>
 8003c8c:	eba0 0308 	sub.w	r3, r0, r8
 8003c90:	fa09 f303 	lsl.w	r3, r9, r3
 8003c94:	4313      	orrs	r3, r2
 8003c96:	9304      	str	r3, [sp, #16]
 8003c98:	46a2      	mov	sl, r4
 8003c9a:	e7d2      	b.n	8003c42 <_vfiprintf_r+0xe2>
 8003c9c:	9b03      	ldr	r3, [sp, #12]
 8003c9e:	1d19      	adds	r1, r3, #4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	9103      	str	r1, [sp, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bfbb      	ittet	lt
 8003ca8:	425b      	neglt	r3, r3
 8003caa:	f042 0202 	orrlt.w	r2, r2, #2
 8003cae:	9307      	strge	r3, [sp, #28]
 8003cb0:	9307      	strlt	r3, [sp, #28]
 8003cb2:	bfb8      	it	lt
 8003cb4:	9204      	strlt	r2, [sp, #16]
 8003cb6:	7823      	ldrb	r3, [r4, #0]
 8003cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8003cba:	d10c      	bne.n	8003cd6 <_vfiprintf_r+0x176>
 8003cbc:	7863      	ldrb	r3, [r4, #1]
 8003cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc0:	d135      	bne.n	8003d2e <_vfiprintf_r+0x1ce>
 8003cc2:	9b03      	ldr	r3, [sp, #12]
 8003cc4:	1d1a      	adds	r2, r3, #4
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	9203      	str	r2, [sp, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bfb8      	it	lt
 8003cce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003cd2:	3402      	adds	r4, #2
 8003cd4:	9305      	str	r3, [sp, #20]
 8003cd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003dbc <_vfiprintf_r+0x25c>
 8003cda:	7821      	ldrb	r1, [r4, #0]
 8003cdc:	2203      	movs	r2, #3
 8003cde:	4650      	mov	r0, sl
 8003ce0:	f7fc fa86 	bl	80001f0 <memchr>
 8003ce4:	b140      	cbz	r0, 8003cf8 <_vfiprintf_r+0x198>
 8003ce6:	2340      	movs	r3, #64	; 0x40
 8003ce8:	eba0 000a 	sub.w	r0, r0, sl
 8003cec:	fa03 f000 	lsl.w	r0, r3, r0
 8003cf0:	9b04      	ldr	r3, [sp, #16]
 8003cf2:	4303      	orrs	r3, r0
 8003cf4:	3401      	adds	r4, #1
 8003cf6:	9304      	str	r3, [sp, #16]
 8003cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cfc:	482c      	ldr	r0, [pc, #176]	; (8003db0 <_vfiprintf_r+0x250>)
 8003cfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d02:	2206      	movs	r2, #6
 8003d04:	f7fc fa74 	bl	80001f0 <memchr>
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d03f      	beq.n	8003d8c <_vfiprintf_r+0x22c>
 8003d0c:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <_vfiprintf_r+0x254>)
 8003d0e:	bb1b      	cbnz	r3, 8003d58 <_vfiprintf_r+0x1f8>
 8003d10:	9b03      	ldr	r3, [sp, #12]
 8003d12:	3307      	adds	r3, #7
 8003d14:	f023 0307 	bic.w	r3, r3, #7
 8003d18:	3308      	adds	r3, #8
 8003d1a:	9303      	str	r3, [sp, #12]
 8003d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d1e:	443b      	add	r3, r7
 8003d20:	9309      	str	r3, [sp, #36]	; 0x24
 8003d22:	e767      	b.n	8003bf4 <_vfiprintf_r+0x94>
 8003d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d28:	460c      	mov	r4, r1
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	e7a5      	b.n	8003c7a <_vfiprintf_r+0x11a>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	3401      	adds	r4, #1
 8003d32:	9305      	str	r3, [sp, #20]
 8003d34:	4619      	mov	r1, r3
 8003d36:	f04f 0c0a 	mov.w	ip, #10
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d40:	3a30      	subs	r2, #48	; 0x30
 8003d42:	2a09      	cmp	r2, #9
 8003d44:	d903      	bls.n	8003d4e <_vfiprintf_r+0x1ee>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0c5      	beq.n	8003cd6 <_vfiprintf_r+0x176>
 8003d4a:	9105      	str	r1, [sp, #20]
 8003d4c:	e7c3      	b.n	8003cd6 <_vfiprintf_r+0x176>
 8003d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d52:	4604      	mov	r4, r0
 8003d54:	2301      	movs	r3, #1
 8003d56:	e7f0      	b.n	8003d3a <_vfiprintf_r+0x1da>
 8003d58:	ab03      	add	r3, sp, #12
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	462a      	mov	r2, r5
 8003d5e:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <_vfiprintf_r+0x258>)
 8003d60:	a904      	add	r1, sp, #16
 8003d62:	4630      	mov	r0, r6
 8003d64:	f3af 8000 	nop.w
 8003d68:	4607      	mov	r7, r0
 8003d6a:	1c78      	adds	r0, r7, #1
 8003d6c:	d1d6      	bne.n	8003d1c <_vfiprintf_r+0x1bc>
 8003d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d70:	07d9      	lsls	r1, r3, #31
 8003d72:	d405      	bmi.n	8003d80 <_vfiprintf_r+0x220>
 8003d74:	89ab      	ldrh	r3, [r5, #12]
 8003d76:	059a      	lsls	r2, r3, #22
 8003d78:	d402      	bmi.n	8003d80 <_vfiprintf_r+0x220>
 8003d7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d7c:	f7ff fd7f 	bl	800387e <__retarget_lock_release_recursive>
 8003d80:	89ab      	ldrh	r3, [r5, #12]
 8003d82:	065b      	lsls	r3, r3, #25
 8003d84:	f53f af12 	bmi.w	8003bac <_vfiprintf_r+0x4c>
 8003d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d8a:	e711      	b.n	8003bb0 <_vfiprintf_r+0x50>
 8003d8c:	ab03      	add	r3, sp, #12
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	462a      	mov	r2, r5
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <_vfiprintf_r+0x258>)
 8003d94:	a904      	add	r1, sp, #16
 8003d96:	4630      	mov	r0, r6
 8003d98:	f000 f880 	bl	8003e9c <_printf_i>
 8003d9c:	e7e4      	b.n	8003d68 <_vfiprintf_r+0x208>
 8003d9e:	bf00      	nop
 8003da0:	0800434c 	.word	0x0800434c
 8003da4:	0800436c 	.word	0x0800436c
 8003da8:	0800432c 	.word	0x0800432c
 8003dac:	0800438c 	.word	0x0800438c
 8003db0:	08004396 	.word	0x08004396
 8003db4:	00000000 	.word	0x00000000
 8003db8:	08003b3b 	.word	0x08003b3b
 8003dbc:	08004392 	.word	0x08004392

08003dc0 <_printf_common>:
 8003dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc4:	4616      	mov	r6, r2
 8003dc6:	4699      	mov	r9, r3
 8003dc8:	688a      	ldr	r2, [r1, #8]
 8003dca:	690b      	ldr	r3, [r1, #16]
 8003dcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	bfb8      	it	lt
 8003dd4:	4613      	movlt	r3, r2
 8003dd6:	6033      	str	r3, [r6, #0]
 8003dd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ddc:	4607      	mov	r7, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	b10a      	cbz	r2, 8003de6 <_printf_common+0x26>
 8003de2:	3301      	adds	r3, #1
 8003de4:	6033      	str	r3, [r6, #0]
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	0699      	lsls	r1, r3, #26
 8003dea:	bf42      	ittt	mi
 8003dec:	6833      	ldrmi	r3, [r6, #0]
 8003dee:	3302      	addmi	r3, #2
 8003df0:	6033      	strmi	r3, [r6, #0]
 8003df2:	6825      	ldr	r5, [r4, #0]
 8003df4:	f015 0506 	ands.w	r5, r5, #6
 8003df8:	d106      	bne.n	8003e08 <_printf_common+0x48>
 8003dfa:	f104 0a19 	add.w	sl, r4, #25
 8003dfe:	68e3      	ldr	r3, [r4, #12]
 8003e00:	6832      	ldr	r2, [r6, #0]
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	42ab      	cmp	r3, r5
 8003e06:	dc26      	bgt.n	8003e56 <_printf_common+0x96>
 8003e08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e0c:	1e13      	subs	r3, r2, #0
 8003e0e:	6822      	ldr	r2, [r4, #0]
 8003e10:	bf18      	it	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	0692      	lsls	r2, r2, #26
 8003e16:	d42b      	bmi.n	8003e70 <_printf_common+0xb0>
 8003e18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	4638      	mov	r0, r7
 8003e20:	47c0      	blx	r8
 8003e22:	3001      	adds	r0, #1
 8003e24:	d01e      	beq.n	8003e64 <_printf_common+0xa4>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	68e5      	ldr	r5, [r4, #12]
 8003e2a:	6832      	ldr	r2, [r6, #0]
 8003e2c:	f003 0306 	and.w	r3, r3, #6
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	bf08      	it	eq
 8003e34:	1aad      	subeq	r5, r5, r2
 8003e36:	68a3      	ldr	r3, [r4, #8]
 8003e38:	6922      	ldr	r2, [r4, #16]
 8003e3a:	bf0c      	ite	eq
 8003e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e40:	2500      	movne	r5, #0
 8003e42:	4293      	cmp	r3, r2
 8003e44:	bfc4      	itt	gt
 8003e46:	1a9b      	subgt	r3, r3, r2
 8003e48:	18ed      	addgt	r5, r5, r3
 8003e4a:	2600      	movs	r6, #0
 8003e4c:	341a      	adds	r4, #26
 8003e4e:	42b5      	cmp	r5, r6
 8003e50:	d11a      	bne.n	8003e88 <_printf_common+0xc8>
 8003e52:	2000      	movs	r0, #0
 8003e54:	e008      	b.n	8003e68 <_printf_common+0xa8>
 8003e56:	2301      	movs	r3, #1
 8003e58:	4652      	mov	r2, sl
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	47c0      	blx	r8
 8003e60:	3001      	adds	r0, #1
 8003e62:	d103      	bne.n	8003e6c <_printf_common+0xac>
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e6c:	3501      	adds	r5, #1
 8003e6e:	e7c6      	b.n	8003dfe <_printf_common+0x3e>
 8003e70:	18e1      	adds	r1, r4, r3
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	2030      	movs	r0, #48	; 0x30
 8003e76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e7a:	4422      	add	r2, r4
 8003e7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e84:	3302      	adds	r3, #2
 8003e86:	e7c7      	b.n	8003e18 <_printf_common+0x58>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	4638      	mov	r0, r7
 8003e90:	47c0      	blx	r8
 8003e92:	3001      	adds	r0, #1
 8003e94:	d0e6      	beq.n	8003e64 <_printf_common+0xa4>
 8003e96:	3601      	adds	r6, #1
 8003e98:	e7d9      	b.n	8003e4e <_printf_common+0x8e>
	...

08003e9c <_printf_i>:
 8003e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea0:	7e0f      	ldrb	r7, [r1, #24]
 8003ea2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ea4:	2f78      	cmp	r7, #120	; 0x78
 8003ea6:	4691      	mov	r9, r2
 8003ea8:	4680      	mov	r8, r0
 8003eaa:	460c      	mov	r4, r1
 8003eac:	469a      	mov	sl, r3
 8003eae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003eb2:	d807      	bhi.n	8003ec4 <_printf_i+0x28>
 8003eb4:	2f62      	cmp	r7, #98	; 0x62
 8003eb6:	d80a      	bhi.n	8003ece <_printf_i+0x32>
 8003eb8:	2f00      	cmp	r7, #0
 8003eba:	f000 80d8 	beq.w	800406e <_printf_i+0x1d2>
 8003ebe:	2f58      	cmp	r7, #88	; 0x58
 8003ec0:	f000 80a3 	beq.w	800400a <_printf_i+0x16e>
 8003ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ec8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ecc:	e03a      	b.n	8003f44 <_printf_i+0xa8>
 8003ece:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ed2:	2b15      	cmp	r3, #21
 8003ed4:	d8f6      	bhi.n	8003ec4 <_printf_i+0x28>
 8003ed6:	a101      	add	r1, pc, #4	; (adr r1, 8003edc <_printf_i+0x40>)
 8003ed8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003edc:	08003f35 	.word	0x08003f35
 8003ee0:	08003f49 	.word	0x08003f49
 8003ee4:	08003ec5 	.word	0x08003ec5
 8003ee8:	08003ec5 	.word	0x08003ec5
 8003eec:	08003ec5 	.word	0x08003ec5
 8003ef0:	08003ec5 	.word	0x08003ec5
 8003ef4:	08003f49 	.word	0x08003f49
 8003ef8:	08003ec5 	.word	0x08003ec5
 8003efc:	08003ec5 	.word	0x08003ec5
 8003f00:	08003ec5 	.word	0x08003ec5
 8003f04:	08003ec5 	.word	0x08003ec5
 8003f08:	08004055 	.word	0x08004055
 8003f0c:	08003f79 	.word	0x08003f79
 8003f10:	08004037 	.word	0x08004037
 8003f14:	08003ec5 	.word	0x08003ec5
 8003f18:	08003ec5 	.word	0x08003ec5
 8003f1c:	08004077 	.word	0x08004077
 8003f20:	08003ec5 	.word	0x08003ec5
 8003f24:	08003f79 	.word	0x08003f79
 8003f28:	08003ec5 	.word	0x08003ec5
 8003f2c:	08003ec5 	.word	0x08003ec5
 8003f30:	0800403f 	.word	0x0800403f
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	1d1a      	adds	r2, r3, #4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	602a      	str	r2, [r5, #0]
 8003f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0a3      	b.n	8004090 <_printf_i+0x1f4>
 8003f48:	6820      	ldr	r0, [r4, #0]
 8003f4a:	6829      	ldr	r1, [r5, #0]
 8003f4c:	0606      	lsls	r6, r0, #24
 8003f4e:	f101 0304 	add.w	r3, r1, #4
 8003f52:	d50a      	bpl.n	8003f6a <_printf_i+0xce>
 8003f54:	680e      	ldr	r6, [r1, #0]
 8003f56:	602b      	str	r3, [r5, #0]
 8003f58:	2e00      	cmp	r6, #0
 8003f5a:	da03      	bge.n	8003f64 <_printf_i+0xc8>
 8003f5c:	232d      	movs	r3, #45	; 0x2d
 8003f5e:	4276      	negs	r6, r6
 8003f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f64:	485e      	ldr	r0, [pc, #376]	; (80040e0 <_printf_i+0x244>)
 8003f66:	230a      	movs	r3, #10
 8003f68:	e019      	b.n	8003f9e <_printf_i+0x102>
 8003f6a:	680e      	ldr	r6, [r1, #0]
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f72:	bf18      	it	ne
 8003f74:	b236      	sxthne	r6, r6
 8003f76:	e7ef      	b.n	8003f58 <_printf_i+0xbc>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	6820      	ldr	r0, [r4, #0]
 8003f7c:	1d19      	adds	r1, r3, #4
 8003f7e:	6029      	str	r1, [r5, #0]
 8003f80:	0601      	lsls	r1, r0, #24
 8003f82:	d501      	bpl.n	8003f88 <_printf_i+0xec>
 8003f84:	681e      	ldr	r6, [r3, #0]
 8003f86:	e002      	b.n	8003f8e <_printf_i+0xf2>
 8003f88:	0646      	lsls	r6, r0, #25
 8003f8a:	d5fb      	bpl.n	8003f84 <_printf_i+0xe8>
 8003f8c:	881e      	ldrh	r6, [r3, #0]
 8003f8e:	4854      	ldr	r0, [pc, #336]	; (80040e0 <_printf_i+0x244>)
 8003f90:	2f6f      	cmp	r7, #111	; 0x6f
 8003f92:	bf0c      	ite	eq
 8003f94:	2308      	moveq	r3, #8
 8003f96:	230a      	movne	r3, #10
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f9e:	6865      	ldr	r5, [r4, #4]
 8003fa0:	60a5      	str	r5, [r4, #8]
 8003fa2:	2d00      	cmp	r5, #0
 8003fa4:	bfa2      	ittt	ge
 8003fa6:	6821      	ldrge	r1, [r4, #0]
 8003fa8:	f021 0104 	bicge.w	r1, r1, #4
 8003fac:	6021      	strge	r1, [r4, #0]
 8003fae:	b90e      	cbnz	r6, 8003fb4 <_printf_i+0x118>
 8003fb0:	2d00      	cmp	r5, #0
 8003fb2:	d04d      	beq.n	8004050 <_printf_i+0x1b4>
 8003fb4:	4615      	mov	r5, r2
 8003fb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003fba:	fb03 6711 	mls	r7, r3, r1, r6
 8003fbe:	5dc7      	ldrb	r7, [r0, r7]
 8003fc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fc4:	4637      	mov	r7, r6
 8003fc6:	42bb      	cmp	r3, r7
 8003fc8:	460e      	mov	r6, r1
 8003fca:	d9f4      	bls.n	8003fb6 <_printf_i+0x11a>
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d10b      	bne.n	8003fe8 <_printf_i+0x14c>
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	07de      	lsls	r6, r3, #31
 8003fd4:	d508      	bpl.n	8003fe8 <_printf_i+0x14c>
 8003fd6:	6923      	ldr	r3, [r4, #16]
 8003fd8:	6861      	ldr	r1, [r4, #4]
 8003fda:	4299      	cmp	r1, r3
 8003fdc:	bfde      	ittt	le
 8003fde:	2330      	movle	r3, #48	; 0x30
 8003fe0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fe4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003fe8:	1b52      	subs	r2, r2, r5
 8003fea:	6122      	str	r2, [r4, #16]
 8003fec:	f8cd a000 	str.w	sl, [sp]
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	aa03      	add	r2, sp, #12
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	f7ff fee2 	bl	8003dc0 <_printf_common>
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d14c      	bne.n	800409a <_printf_i+0x1fe>
 8004000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004004:	b004      	add	sp, #16
 8004006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400a:	4835      	ldr	r0, [pc, #212]	; (80040e0 <_printf_i+0x244>)
 800400c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004010:	6829      	ldr	r1, [r5, #0]
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	f851 6b04 	ldr.w	r6, [r1], #4
 8004018:	6029      	str	r1, [r5, #0]
 800401a:	061d      	lsls	r5, r3, #24
 800401c:	d514      	bpl.n	8004048 <_printf_i+0x1ac>
 800401e:	07df      	lsls	r7, r3, #31
 8004020:	bf44      	itt	mi
 8004022:	f043 0320 	orrmi.w	r3, r3, #32
 8004026:	6023      	strmi	r3, [r4, #0]
 8004028:	b91e      	cbnz	r6, 8004032 <_printf_i+0x196>
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	f023 0320 	bic.w	r3, r3, #32
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	2310      	movs	r3, #16
 8004034:	e7b0      	b.n	8003f98 <_printf_i+0xfc>
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	f043 0320 	orr.w	r3, r3, #32
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	2378      	movs	r3, #120	; 0x78
 8004040:	4828      	ldr	r0, [pc, #160]	; (80040e4 <_printf_i+0x248>)
 8004042:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004046:	e7e3      	b.n	8004010 <_printf_i+0x174>
 8004048:	0659      	lsls	r1, r3, #25
 800404a:	bf48      	it	mi
 800404c:	b2b6      	uxthmi	r6, r6
 800404e:	e7e6      	b.n	800401e <_printf_i+0x182>
 8004050:	4615      	mov	r5, r2
 8004052:	e7bb      	b.n	8003fcc <_printf_i+0x130>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	6826      	ldr	r6, [r4, #0]
 8004058:	6961      	ldr	r1, [r4, #20]
 800405a:	1d18      	adds	r0, r3, #4
 800405c:	6028      	str	r0, [r5, #0]
 800405e:	0635      	lsls	r5, r6, #24
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	d501      	bpl.n	8004068 <_printf_i+0x1cc>
 8004064:	6019      	str	r1, [r3, #0]
 8004066:	e002      	b.n	800406e <_printf_i+0x1d2>
 8004068:	0670      	lsls	r0, r6, #25
 800406a:	d5fb      	bpl.n	8004064 <_printf_i+0x1c8>
 800406c:	8019      	strh	r1, [r3, #0]
 800406e:	2300      	movs	r3, #0
 8004070:	6123      	str	r3, [r4, #16]
 8004072:	4615      	mov	r5, r2
 8004074:	e7ba      	b.n	8003fec <_printf_i+0x150>
 8004076:	682b      	ldr	r3, [r5, #0]
 8004078:	1d1a      	adds	r2, r3, #4
 800407a:	602a      	str	r2, [r5, #0]
 800407c:	681d      	ldr	r5, [r3, #0]
 800407e:	6862      	ldr	r2, [r4, #4]
 8004080:	2100      	movs	r1, #0
 8004082:	4628      	mov	r0, r5
 8004084:	f7fc f8b4 	bl	80001f0 <memchr>
 8004088:	b108      	cbz	r0, 800408e <_printf_i+0x1f2>
 800408a:	1b40      	subs	r0, r0, r5
 800408c:	6060      	str	r0, [r4, #4]
 800408e:	6863      	ldr	r3, [r4, #4]
 8004090:	6123      	str	r3, [r4, #16]
 8004092:	2300      	movs	r3, #0
 8004094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004098:	e7a8      	b.n	8003fec <_printf_i+0x150>
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	462a      	mov	r2, r5
 800409e:	4649      	mov	r1, r9
 80040a0:	4640      	mov	r0, r8
 80040a2:	47d0      	blx	sl
 80040a4:	3001      	adds	r0, #1
 80040a6:	d0ab      	beq.n	8004000 <_printf_i+0x164>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	079b      	lsls	r3, r3, #30
 80040ac:	d413      	bmi.n	80040d6 <_printf_i+0x23a>
 80040ae:	68e0      	ldr	r0, [r4, #12]
 80040b0:	9b03      	ldr	r3, [sp, #12]
 80040b2:	4298      	cmp	r0, r3
 80040b4:	bfb8      	it	lt
 80040b6:	4618      	movlt	r0, r3
 80040b8:	e7a4      	b.n	8004004 <_printf_i+0x168>
 80040ba:	2301      	movs	r3, #1
 80040bc:	4632      	mov	r2, r6
 80040be:	4649      	mov	r1, r9
 80040c0:	4640      	mov	r0, r8
 80040c2:	47d0      	blx	sl
 80040c4:	3001      	adds	r0, #1
 80040c6:	d09b      	beq.n	8004000 <_printf_i+0x164>
 80040c8:	3501      	adds	r5, #1
 80040ca:	68e3      	ldr	r3, [r4, #12]
 80040cc:	9903      	ldr	r1, [sp, #12]
 80040ce:	1a5b      	subs	r3, r3, r1
 80040d0:	42ab      	cmp	r3, r5
 80040d2:	dcf2      	bgt.n	80040ba <_printf_i+0x21e>
 80040d4:	e7eb      	b.n	80040ae <_printf_i+0x212>
 80040d6:	2500      	movs	r5, #0
 80040d8:	f104 0619 	add.w	r6, r4, #25
 80040dc:	e7f5      	b.n	80040ca <_printf_i+0x22e>
 80040de:	bf00      	nop
 80040e0:	0800439d 	.word	0x0800439d
 80040e4:	080043ae 	.word	0x080043ae

080040e8 <_sbrk_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4d06      	ldr	r5, [pc, #24]	; (8004104 <_sbrk_r+0x1c>)
 80040ec:	2300      	movs	r3, #0
 80040ee:	4604      	mov	r4, r0
 80040f0:	4608      	mov	r0, r1
 80040f2:	602b      	str	r3, [r5, #0]
 80040f4:	f7fc fe8a 	bl	8000e0c <_sbrk>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d102      	bne.n	8004102 <_sbrk_r+0x1a>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	b103      	cbz	r3, 8004102 <_sbrk_r+0x1a>
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	200001b4 	.word	0x200001b4

08004108 <__sread>:
 8004108:	b510      	push	{r4, lr}
 800410a:	460c      	mov	r4, r1
 800410c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004110:	f000 f8a0 	bl	8004254 <_read_r>
 8004114:	2800      	cmp	r0, #0
 8004116:	bfab      	itete	ge
 8004118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800411a:	89a3      	ldrhlt	r3, [r4, #12]
 800411c:	181b      	addge	r3, r3, r0
 800411e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004122:	bfac      	ite	ge
 8004124:	6563      	strge	r3, [r4, #84]	; 0x54
 8004126:	81a3      	strhlt	r3, [r4, #12]
 8004128:	bd10      	pop	{r4, pc}

0800412a <__swrite>:
 800412a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800412e:	461f      	mov	r7, r3
 8004130:	898b      	ldrh	r3, [r1, #12]
 8004132:	05db      	lsls	r3, r3, #23
 8004134:	4605      	mov	r5, r0
 8004136:	460c      	mov	r4, r1
 8004138:	4616      	mov	r6, r2
 800413a:	d505      	bpl.n	8004148 <__swrite+0x1e>
 800413c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004140:	2302      	movs	r3, #2
 8004142:	2200      	movs	r2, #0
 8004144:	f000 f868 	bl	8004218 <_lseek_r>
 8004148:	89a3      	ldrh	r3, [r4, #12]
 800414a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800414e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004152:	81a3      	strh	r3, [r4, #12]
 8004154:	4632      	mov	r2, r6
 8004156:	463b      	mov	r3, r7
 8004158:	4628      	mov	r0, r5
 800415a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800415e:	f000 b817 	b.w	8004190 <_write_r>

08004162 <__sseek>:
 8004162:	b510      	push	{r4, lr}
 8004164:	460c      	mov	r4, r1
 8004166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800416a:	f000 f855 	bl	8004218 <_lseek_r>
 800416e:	1c43      	adds	r3, r0, #1
 8004170:	89a3      	ldrh	r3, [r4, #12]
 8004172:	bf15      	itete	ne
 8004174:	6560      	strne	r0, [r4, #84]	; 0x54
 8004176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800417a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800417e:	81a3      	strheq	r3, [r4, #12]
 8004180:	bf18      	it	ne
 8004182:	81a3      	strhne	r3, [r4, #12]
 8004184:	bd10      	pop	{r4, pc}

08004186 <__sclose>:
 8004186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800418a:	f000 b813 	b.w	80041b4 <_close_r>
	...

08004190 <_write_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4d07      	ldr	r5, [pc, #28]	; (80041b0 <_write_r+0x20>)
 8004194:	4604      	mov	r4, r0
 8004196:	4608      	mov	r0, r1
 8004198:	4611      	mov	r1, r2
 800419a:	2200      	movs	r2, #0
 800419c:	602a      	str	r2, [r5, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	f7fc f9f8 	bl	8000594 <_write>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	d102      	bne.n	80041ae <_write_r+0x1e>
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	b103      	cbz	r3, 80041ae <_write_r+0x1e>
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	200001b4 	.word	0x200001b4

080041b4 <_close_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4d06      	ldr	r5, [pc, #24]	; (80041d0 <_close_r+0x1c>)
 80041b8:	2300      	movs	r3, #0
 80041ba:	4604      	mov	r4, r0
 80041bc:	4608      	mov	r0, r1
 80041be:	602b      	str	r3, [r5, #0]
 80041c0:	f7fc fdef 	bl	8000da2 <_close>
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	d102      	bne.n	80041ce <_close_r+0x1a>
 80041c8:	682b      	ldr	r3, [r5, #0]
 80041ca:	b103      	cbz	r3, 80041ce <_close_r+0x1a>
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	bd38      	pop	{r3, r4, r5, pc}
 80041d0:	200001b4 	.word	0x200001b4

080041d4 <_fstat_r>:
 80041d4:	b538      	push	{r3, r4, r5, lr}
 80041d6:	4d07      	ldr	r5, [pc, #28]	; (80041f4 <_fstat_r+0x20>)
 80041d8:	2300      	movs	r3, #0
 80041da:	4604      	mov	r4, r0
 80041dc:	4608      	mov	r0, r1
 80041de:	4611      	mov	r1, r2
 80041e0:	602b      	str	r3, [r5, #0]
 80041e2:	f7fc fdea 	bl	8000dba <_fstat>
 80041e6:	1c43      	adds	r3, r0, #1
 80041e8:	d102      	bne.n	80041f0 <_fstat_r+0x1c>
 80041ea:	682b      	ldr	r3, [r5, #0]
 80041ec:	b103      	cbz	r3, 80041f0 <_fstat_r+0x1c>
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	bd38      	pop	{r3, r4, r5, pc}
 80041f2:	bf00      	nop
 80041f4:	200001b4 	.word	0x200001b4

080041f8 <_isatty_r>:
 80041f8:	b538      	push	{r3, r4, r5, lr}
 80041fa:	4d06      	ldr	r5, [pc, #24]	; (8004214 <_isatty_r+0x1c>)
 80041fc:	2300      	movs	r3, #0
 80041fe:	4604      	mov	r4, r0
 8004200:	4608      	mov	r0, r1
 8004202:	602b      	str	r3, [r5, #0]
 8004204:	f7fc fde9 	bl	8000dda <_isatty>
 8004208:	1c43      	adds	r3, r0, #1
 800420a:	d102      	bne.n	8004212 <_isatty_r+0x1a>
 800420c:	682b      	ldr	r3, [r5, #0]
 800420e:	b103      	cbz	r3, 8004212 <_isatty_r+0x1a>
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	bd38      	pop	{r3, r4, r5, pc}
 8004214:	200001b4 	.word	0x200001b4

08004218 <_lseek_r>:
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	4d07      	ldr	r5, [pc, #28]	; (8004238 <_lseek_r+0x20>)
 800421c:	4604      	mov	r4, r0
 800421e:	4608      	mov	r0, r1
 8004220:	4611      	mov	r1, r2
 8004222:	2200      	movs	r2, #0
 8004224:	602a      	str	r2, [r5, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	f7fc fde2 	bl	8000df0 <_lseek>
 800422c:	1c43      	adds	r3, r0, #1
 800422e:	d102      	bne.n	8004236 <_lseek_r+0x1e>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	b103      	cbz	r3, 8004236 <_lseek_r+0x1e>
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	bd38      	pop	{r3, r4, r5, pc}
 8004238:	200001b4 	.word	0x200001b4

0800423c <__malloc_lock>:
 800423c:	4801      	ldr	r0, [pc, #4]	; (8004244 <__malloc_lock+0x8>)
 800423e:	f7ff bb1d 	b.w	800387c <__retarget_lock_acquire_recursive>
 8004242:	bf00      	nop
 8004244:	200001a8 	.word	0x200001a8

08004248 <__malloc_unlock>:
 8004248:	4801      	ldr	r0, [pc, #4]	; (8004250 <__malloc_unlock+0x8>)
 800424a:	f7ff bb18 	b.w	800387e <__retarget_lock_release_recursive>
 800424e:	bf00      	nop
 8004250:	200001a8 	.word	0x200001a8

08004254 <_read_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	4d07      	ldr	r5, [pc, #28]	; (8004274 <_read_r+0x20>)
 8004258:	4604      	mov	r4, r0
 800425a:	4608      	mov	r0, r1
 800425c:	4611      	mov	r1, r2
 800425e:	2200      	movs	r2, #0
 8004260:	602a      	str	r2, [r5, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	f7fc fd80 	bl	8000d68 <_read>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_read_r+0x1e>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	b103      	cbz	r3, 8004272 <_read_r+0x1e>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	200001b4 	.word	0x200001b4

08004278 <_init>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	bf00      	nop
 800427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427e:	bc08      	pop	{r3}
 8004280:	469e      	mov	lr, r3
 8004282:	4770      	bx	lr

08004284 <_fini>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	bf00      	nop
 8004288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428a:	bc08      	pop	{r3}
 800428c:	469e      	mov	lr, r3
 800428e:	4770      	bx	lr
