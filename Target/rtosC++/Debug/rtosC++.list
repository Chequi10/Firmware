
rtosC++.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006670  08006670  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006678  08006678  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006680  08006680  00016680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004230  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004240  20004240  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017320  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003421  00000000  00000000  00037360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0003a788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001298  00000000  00000000  0003bb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004cf4  00000000  00000000  0003cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d38  00000000  00000000  00041ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e66d3  00000000  00000000  0005781c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013deef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052d4  00000000  00000000  0013df40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006594 	.word	0x08006594

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08006594 	.word	0x08006594

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <vApplicationGetIdleTaskMemory+0x2c>)
 8000514:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <vApplicationGetIdleTaskMemory+0x30>)
 800051a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	2000002c 	.word	0x2000002c
 8000534:	20000080 	.word	0x20000080

08000538 <_Z10calc_crc16PKhh>:
uint8_t buffer[100];
uint8_t buffer1[20];
uint8_t buffer3[10];
uint16_t calc_crc16(const uint8_t *data_p, uint8_t length);

uint16_t calc_crc16(const uint8_t *data_p, uint8_t length) {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	70fb      	strb	r3, [r7, #3]
	uint8_t x;
	uint16_t crc = 0xFFFF;
 8000544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000548:	81fb      	strh	r3, [r7, #14]
	while (length--) {
 800054a:	78fb      	ldrb	r3, [r7, #3]
 800054c:	1e5a      	subs	r2, r3, #1
 800054e:	70fa      	strb	r2, [r7, #3]
 8000550:	2b00      	cmp	r3, #0
 8000552:	bf14      	ite	ne
 8000554:	2301      	movne	r3, #1
 8000556:	2300      	moveq	r3, #0
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d026      	beq.n	80005ac <_Z10calc_crc16PKhh+0x74>
		x = crc >> 8 ^ *data_p++;
 800055e:	89fb      	ldrh	r3, [r7, #14]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	b29b      	uxth	r3, r3
 8000564:	b2da      	uxtb	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	1c59      	adds	r1, r3, #1
 800056a:	6079      	str	r1, [r7, #4]
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	4053      	eors	r3, r2
 8000570:	737b      	strb	r3, [r7, #13]
		x ^= x >> 4;
 8000572:	7b7b      	ldrb	r3, [r7, #13]
 8000574:	091b      	lsrs	r3, r3, #4
 8000576:	b2da      	uxtb	r2, r3
 8000578:	7b7b      	ldrb	r3, [r7, #13]
 800057a:	4053      	eors	r3, r2
 800057c:	737b      	strb	r3, [r7, #13]
		crc = (crc << 8) ^ ((uint16_t) (x << 12)) ^ ((uint16_t) (x << 5))
 800057e:	89fb      	ldrh	r3, [r7, #14]
 8000580:	021b      	lsls	r3, r3, #8
 8000582:	b21a      	sxth	r2, r3
 8000584:	7b7b      	ldrb	r3, [r7, #13]
 8000586:	b29b      	uxth	r3, r3
 8000588:	031b      	lsls	r3, r3, #12
 800058a:	b29b      	uxth	r3, r3
 800058c:	b21b      	sxth	r3, r3
 800058e:	4053      	eors	r3, r2
 8000590:	b21a      	sxth	r2, r3
 8000592:	7b7b      	ldrb	r3, [r7, #13]
 8000594:	b29b      	uxth	r3, r3
 8000596:	015b      	lsls	r3, r3, #5
 8000598:	b29b      	uxth	r3, r3
 800059a:	b21b      	sxth	r3, r3
 800059c:	4053      	eors	r3, r2
 800059e:	b21a      	sxth	r2, r3
				^ ((uint16_t) x);
 80005a0:	7b7b      	ldrb	r3, [r7, #13]
 80005a2:	b21b      	sxth	r3, r3
 80005a4:	4053      	eors	r3, r2
 80005a6:	b21b      	sxth	r3, r3
		crc = (crc << 8) ^ ((uint16_t) (x << 12)) ^ ((uint16_t) (x << 5))
 80005a8:	81fb      	strh	r3, [r7, #14]
	while (length--) {
 80005aa:	e7ce      	b.n	800054a <_Z10calc_crc16PKhh+0x12>
	}
	return crc;
 80005ac:	89fb      	ldrh	r3, [r7, #14]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <_Z19serial_read_commandPv>:

void serial_read_command(void *taskParmPtr) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	while (1) {
		buffer[0] = 'P';
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <_Z19serial_read_commandPv+0x94>)
 80005c6:	2250      	movs	r2, #80	; 0x50
 80005c8:	701a      	strb	r2, [r3, #0]
		buffer[1] = 'K';
 80005ca:	4b21      	ldr	r3, [pc, #132]	; (8000650 <_Z19serial_read_commandPv+0x94>)
 80005cc:	224b      	movs	r2, #75	; 0x4b
 80005ce:	705a      	strb	r2, [r3, #1]
		buffer[2] = 'T';
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <_Z19serial_read_commandPv+0x94>)
 80005d2:	2254      	movs	r2, #84	; 0x54
 80005d4:	709a      	strb	r2, [r3, #2]
		buffer[3] = '!';
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <_Z19serial_read_commandPv+0x94>)
 80005d8:	2221      	movs	r2, #33	; 0x21
 80005da:	70da      	strb	r2, [r3, #3]
		buffer[4] = 0x6;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <_Z19serial_read_commandPv+0x94>)
 80005de:	2206      	movs	r2, #6
 80005e0:	711a      	strb	r2, [r3, #4]
		buffer[5] = '0';
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <_Z19serial_read_commandPv+0x94>)
 80005e4:	2230      	movs	r2, #48	; 0x30
 80005e6:	715a      	strb	r2, [r3, #5]
		for (uint8_t sdf = 6; sdf <= 10; sdf++) {
 80005e8:	2306      	movs	r3, #6
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	2b0a      	cmp	r3, #10
 80005f0:	d821      	bhi.n	8000636 <_Z19serial_read_commandPv+0x7a>
			buffer1[5] = '0';
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <_Z19serial_read_commandPv+0x98>)
 80005f4:	2230      	movs	r2, #48	; 0x30
 80005f6:	715a      	strb	r2, [r3, #5]
			buffer1[sdf] = 0x66 + sdf - 6;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	7bfa      	ldrb	r2, [r7, #15]
 80005fc:	3260      	adds	r2, #96	; 0x60
 80005fe:	b2d1      	uxtb	r1, r2
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <_Z19serial_read_commandPv+0x98>)
 8000602:	54d1      	strb	r1, [r2, r3]
			uint16_t crc = calc_crc16(buffer1, 5);
 8000604:	2105      	movs	r1, #5
 8000606:	4813      	ldr	r0, [pc, #76]	; (8000654 <_Z19serial_read_commandPv+0x98>)
 8000608:	f7ff ff96 	bl	8000538 <_Z10calc_crc16PKhh>
 800060c:	4603      	mov	r3, r0
 800060e:	81bb      	strh	r3, [r7, #12]
			buffer[sdf] = buffer1[sdf];
 8000610:	7bfa      	ldrb	r2, [r7, #15]
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	490f      	ldr	r1, [pc, #60]	; (8000654 <_Z19serial_read_commandPv+0x98>)
 8000616:	5c89      	ldrb	r1, [r1, r2]
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <_Z19serial_read_commandPv+0x94>)
 800061a:	54d1      	strb	r1, [r2, r3]
			buffer[11] = 0b10110011;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <_Z19serial_read_commandPv+0x94>)
 800061e:	22b3      	movs	r2, #179	; 0xb3
 8000620:	72da      	strb	r2, [r3, #11]
			//	buffer[11]=(crc >> 8) & 0xFF;
			//	buffer[12]=crc & 0xFF;
			buffer[12] = 0b10101110;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <_Z19serial_read_commandPv+0x94>)
 8000624:	22ae      	movs	r2, #174	; 0xae
 8000626:	731a      	strb	r2, [r3, #12]
			buffer[13] = '\n';
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <_Z19serial_read_commandPv+0x94>)
 800062a:	220a      	movs	r2, #10
 800062c:	735a      	strb	r2, [r3, #13]
		for (uint8_t sdf = 6; sdf <= 10; sdf++) {
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	3301      	adds	r3, #1
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	e7da      	b.n	80005ec <_Z19serial_read_commandPv+0x30>
		}
		xSemaphoreTake(BinarySemaphoreHandle, portMAX_DELAY);
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <_Z19serial_read_commandPv+0x9c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fa54 	bl	8004aec <xQueueSemaphoreTake>
		imprime.vPrintString((char*) buffer);
 8000644:	4902      	ldr	r1, [pc, #8]	; (8000650 <_Z19serial_read_commandPv+0x94>)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <_Z19serial_read_commandPv+0xa0>)
 8000648:	f000 fc22 	bl	8000e90 <_ZN7printer12vPrintStringEPKc>

	}
 800064c:	e7ba      	b.n	80005c4 <_Z19serial_read_commandPv+0x8>
 800064e:	bf00      	nop
 8000650:	20000424 	.word	0x20000424
 8000654:	20000488 	.word	0x20000488
 8000658:	2000037c 	.word	0x2000037c
 800065c:	20000280 	.word	0x20000280

08000660 <_Z14can1_send_syncPv>:

}
void can1_send_sync(void *taskParmPtr) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	while (1) {
		for (a = 49; a < 58; a++) {
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <_Z14can1_send_syncPv+0x5c>)
 800066a:	2231      	movs	r2, #49	; 0x31
 800066c:	701a      	strb	r2, [r3, #0]
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <_Z14can1_send_syncPv+0x5c>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b39      	cmp	r3, #57	; 0x39
 8000674:	d8f8      	bhi.n	8000668 <_Z14can1_send_syncPv+0x8>
			TxData[0] = a;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <_Z14can1_send_syncPv+0x5c>)
 8000678:	781a      	ldrb	r2, [r3, #0]
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <_Z14can1_send_syncPv+0x60>)
 800067c:	701a      	strb	r2, [r3, #0]
			if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <_Z14can1_send_syncPv+0x64>)
 8000680:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <_Z14can1_send_syncPv+0x60>)
 8000682:	4911      	ldr	r1, [pc, #68]	; (80006c8 <_Z14can1_send_syncPv+0x68>)
 8000684:	4811      	ldr	r0, [pc, #68]	; (80006cc <_Z14can1_send_syncPv+0x6c>)
 8000686:	f001 f869 	bl	800175c <HAL_CAN_AddTxMessage>
 800068a:	4603      	mov	r3, r0
					!= HAL_OK) {
 800068c:	2b00      	cmp	r3, #0
 800068e:	bf14      	ite	ne
 8000690:	2301      	movne	r3, #1
 8000692:	2300      	moveq	r3, #0
 8000694:	b2db      	uxtb	r3, r3
			if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <_Z14can1_send_syncPv+0x3e>
				Error_Handler();
 800069a:	f000 fba3 	bl	8000de4 <Error_Handler>
			}

			HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <_Z14can1_send_syncPv+0x70>)
 80006a2:	f001 ffd6 	bl	8002652 <HAL_GPIO_TogglePin>
			vTaskDelay( LED_RATE_MS / portTICK_RATE_MS);
 80006a6:	2032      	movs	r0, #50	; 0x32
 80006a8:	f004 fd40 	bl	800512c <vTaskDelay>
		for (a = 49; a < 58; a++) {
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <_Z14can1_send_syncPv+0x5c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b01      	ldr	r3, [pc, #4]	; (80006bc <_Z14can1_send_syncPv+0x5c>)
 80006b6:	701a      	strb	r2, [r3, #0]
 80006b8:	e7d9      	b.n	800066e <_Z14can1_send_syncPv+0xe>
 80006ba:	bf00      	nop
 80006bc:	20000420 	.word	0x20000420
 80006c0:	20000414 	.word	0x20000414
 80006c4:	20000410 	.word	0x20000410
 80006c8:	20000380 	.word	0x20000380
 80006cc:	200002c4 	.word	0x200002c4
 80006d0:	40020400 	.word	0x40020400

080006d4 <_Z17can2_read_messagePv>:
		}

	}
}
void can2_read_message(void *taskParmPtr) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	while (1) {
		if (datacheck == 1) {
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <_Z17can2_read_messagePv+0x20>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d1fb      	bne.n	80006dc <_Z17can2_read_messagePv+0x8>
			HAL_GPIO_TogglePin(Amarillo_GPIO_Port, Amarillo_Pin);
 80006e4:	2101      	movs	r1, #1
 80006e6:	4804      	ldr	r0, [pc, #16]	; (80006f8 <_Z17can2_read_messagePv+0x24>)
 80006e8:	f001 ffb3 	bl	8002652 <HAL_GPIO_TogglePin>
			datacheck = 0;
 80006ec:	4b01      	ldr	r3, [pc, #4]	; (80006f4 <_Z17can2_read_messagePv+0x20>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
		if (datacheck == 1) {
 80006f2:	e7f3      	b.n	80006dc <_Z17can2_read_messagePv+0x8>
 80006f4:	2000041c 	.word	0x2000041c
 80006f8:	40020400 	.word	0x40020400

080006fc <HAL_CAN_RxFifo0MsgPendingCallback>:
		}

	}
}
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan2) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO0, &RxHeader2, RxData)
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000708:	2100      	movs	r1, #0
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f001 f901 	bl	8001912 <HAL_CAN_GetRxMessage>
 8000710:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000712:	2b00      	cmp	r3, #0
 8000714:	bf14      	ite	ne
 8000716:	2301      	movne	r3, #1
 8000718:	2300      	moveq	r3, #0
 800071a:	b2db      	uxtb	r3, r3
	if (HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO0, &RxHeader2, RxData)
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		Error_Handler();
 8000720:	f000 fb60 	bl	8000de4 <Error_Handler>
	}

	if ((RxHeader2.StdId == 146)) {
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b92      	cmp	r3, #146	; 0x92
 800072a:	d102      	bne.n	8000732 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
		datacheck = 1;
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]
	}

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000418 	.word	0x20000418
 8000740:	200003cc 	.word	0x200003cc
 8000744:	2000041c 	.word	0x2000041c

08000748 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <HAL_UART_RxCpltCallback+0x58>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d11e      	bne.n	8000798 <HAL_UART_RxCpltCallback+0x50>
		BaseType_t xHigherPriorityTaskWoken;

		xHigherPriorityTaskWoken = pdFALSE;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]

		xSemaphoreGiveFromISR(BinarySemaphoreHandle, &xHigherPriorityTaskWoken);
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <HAL_UART_RxCpltCallback+0x5c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f107 020c 	add.w	r2, r7, #12
 8000766:	4611      	mov	r1, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f004 f932 	bl	80049d2 <xQueueGiveFromISR>

		HAL_GPIO_TogglePin(Rojo_GPIO_Port, Rojo_Pin);
 800076e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <HAL_UART_RxCpltCallback+0x60>)
 8000774:	f001 ff6d 	bl	8002652 <HAL_GPIO_TogglePin>

		HAL_UART_Receive_IT(&huart3, cadena, 12);
 8000778:	220c      	movs	r2, #12
 800077a:	490c      	ldr	r1, [pc, #48]	; (80007ac <HAL_UART_RxCpltCallback+0x64>)
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <HAL_UART_RxCpltCallback+0x68>)
 800077e:	f002 ff9a 	bl	80036b6 <HAL_UART_Receive_IT>

		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d007      	beq.n	8000798 <HAL_UART_RxCpltCallback+0x50>
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <HAL_UART_RxCpltCallback+0x6c>)
 800078a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	f3bf 8f4f 	dsb	sy
 8000794:	f3bf 8f6f 	isb	sy

	}

}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40004800 	.word	0x40004800
 80007a4:	2000037c 	.word	0x2000037c
 80007a8:	40020400 	.word	0x40020400
 80007ac:	20000364 	.word	0x20000364
 80007b0:	20000314 	.word	0x20000314
 80007b4:	e000ed04 	.word	0xe000ed04

080007b8 <_Z6configv>:

void config(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af02      	add	r7, sp, #8
	BaseType_t res1 = xTaskCreate(serial_read_command, // Funcion de la tarea a ejecutar
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <_Z6configv+0x88>)
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	2302      	movs	r3, #2
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2300      	movs	r3, #0
 80007c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007cc:	491d      	ldr	r1, [pc, #116]	; (8000844 <_Z6configv+0x8c>)
 80007ce:	481e      	ldr	r0, [pc, #120]	; (8000848 <_Z6configv+0x90>)
 80007d0:	f004 fb75 	bl	8004ebe <xTaskCreate>
 80007d4:	60f8      	str	r0, [r7, #12]
			NULL,                       // Parametros de tarea
			tskIDLE_PRIORITY + 2,         // Prioridad de la tarea
			&task_handle_task_1       // Puntero a la tarea creada en el sistema
			);

	BaseType_t res2 = xTaskCreate(can1_send_sync, // Funcion de la tarea a ejecutar
 80007d6:	4b1d      	ldr	r3, [pc, #116]	; (800084c <_Z6configv+0x94>)
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	2303      	movs	r3, #3
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2300      	movs	r3, #0
 80007e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e4:	491a      	ldr	r1, [pc, #104]	; (8000850 <_Z6configv+0x98>)
 80007e6:	481b      	ldr	r0, [pc, #108]	; (8000854 <_Z6configv+0x9c>)
 80007e8:	f004 fb69 	bl	8004ebe <xTaskCreate>
 80007ec:	60b8      	str	r0, [r7, #8]
			NULL,                       // Parametros de tarea
			tskIDLE_PRIORITY + 3,         // Prioridad de la tarea
			&task_handle_task_2       // Puntero a la tarea creada en el sistema
			);

	BaseType_t res3 = xTaskCreate(can2_read_message, // Funcion de la tarea a ejecutar
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <_Z6configv+0xa0>)
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	2301      	movs	r3, #1
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2300      	movs	r3, #0
 80007f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007fc:	4917      	ldr	r1, [pc, #92]	; (800085c <_Z6configv+0xa4>)
 80007fe:	4818      	ldr	r0, [pc, #96]	; (8000860 <_Z6configv+0xa8>)
 8000800:	f004 fb5d 	bl	8004ebe <xTaskCreate>
 8000804:	6078      	str	r0, [r7, #4]
			NULL,                       // Parametros de tarea
			tskIDLE_PRIORITY + 1,         // Prioridad de la tarea
			&task_handle_task_3       // Puntero a la tarea creada en el sistema
			);

	configASSERT(res1 == pdPASS && res2 == pdPASS && res3 == pdPASS);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d107      	bne.n	800081c <_Z6configv+0x64>
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d104      	bne.n	800081c <_Z6configv+0x64>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d101      	bne.n	800081c <_Z6configv+0x64>
 8000818:	2301      	movs	r3, #1
 800081a:	e000      	b.n	800081e <_Z6configv+0x66>
 800081c:	2300      	movs	r3, #0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d10a      	bne.n	8000838 <_Z6configv+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000826:	f383 8811 	msr	BASEPRI, r3
 800082a:	f3bf 8f6f 	isb	sy
 800082e:	f3bf 8f4f 	dsb	sy
 8000832:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000834:	bf00      	nop
 8000836:	e7fe      	b.n	8000836 <_Z6configv+0x7e>
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000370 	.word	0x20000370
 8000844:	080065c4 	.word	0x080065c4
 8000848:	080005bd 	.word	0x080005bd
 800084c:	20000374 	.word	0x20000374
 8000850:	080065d8 	.word	0x080065d8
 8000854:	08000661 	.word	0x08000661
 8000858:	20000378 	.word	0x20000378
 800085c:	080065e8 	.word	0x080065e8
 8000860:	080006d5 	.word	0x080006d5

08000864 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	b096      	sub	sp, #88	; 0x58
 8000868:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800086a:	f000 fd15 	bl	8001298 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800086e:	f000 f8b1 	bl	80009d4 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000872:	f000 fa3b 	bl	8000cec <_ZL12MX_GPIO_Initv>
	MX_CAN1_Init();
 8000876:	f000 f917 	bl	8000aa8 <_ZL12MX_CAN1_Initv>
	MX_CAN2_Init();
 800087a:	f000 f98f 	bl	8000b9c <_ZL12MX_CAN2_Initv>
	MX_USART3_UART_Init();
 800087e:	f000 fa07 	bl	8000c90 <_ZL19MX_USART3_UART_Initv>
	HAL_UART_Receive_IT(&huart3, cadena, 10);
 8000882:	220a      	movs	r2, #10
 8000884:	4946      	ldr	r1, [pc, #280]	; (80009a0 <main+0x13c>)
 8000886:	4847      	ldr	r0, [pc, #284]	; (80009a4 <main+0x140>)
 8000888:	f002 ff15 	bl	80036b6 <HAL_UART_Receive_IT>
	/* USER CODE BEGIN 2 */
	//  imprime.vPrintString("Protocolo de Comuncacion CAN activo:\n\rCAN 1: PB8=Rx PB9=Tx\n\rCAN 2: PB5=Rx PB6=Tx \n\r");
	TxHeader.IDE = CAN_ID_STD;
 800088c:	4b46      	ldr	r3, [pc, #280]	; (80009a8 <main+0x144>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = 146;
 8000892:	4b45      	ldr	r3, [pc, #276]	; (80009a8 <main+0x144>)
 8000894:	2292      	movs	r2, #146	; 0x92
 8000896:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000898:	4b43      	ldr	r3, [pc, #268]	; (80009a8 <main+0x144>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 1;
 800089e:	4b42      	ldr	r3, [pc, #264]	; (80009a8 <main+0x144>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80008a4:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <main+0x144>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	751a      	strb	r2, [r3, #20]

	RxHeader.IDE = CAN_ID_STD;
 80008aa:	4b40      	ldr	r3, [pc, #256]	; (80009ac <main+0x148>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
	RxHeader.StdId = 146;
 80008b0:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <main+0x148>)
 80008b2:	2292      	movs	r2, #146	; 0x92
 80008b4:	601a      	str	r2, [r3, #0]
	RxHeader.RTR = CAN_RTR_DATA;
 80008b6:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <main+0x148>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
	RxHeader.DLC = 1;
 80008bc:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <main+0x148>)
 80008be:	2201      	movs	r2, #1
 80008c0:	611a      	str	r2, [r3, #16]

	TxHeader2.IDE = CAN_ID_STD;
 80008c2:	4b3b      	ldr	r3, [pc, #236]	; (80009b0 <main+0x14c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	TxHeader2.StdId = 20;
 80008c8:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <main+0x14c>)
 80008ca:	2214      	movs	r2, #20
 80008cc:	601a      	str	r2, [r3, #0]
	TxHeader2.RTR = CAN_RTR_DATA;
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <main+0x14c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
	TxHeader2.DLC = 1;
 80008d4:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <main+0x14c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	611a      	str	r2, [r3, #16]
	TxHeader2.TransmitGlobalTime = DISABLE;
 80008da:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <main+0x14c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	751a      	strb	r2, [r3, #20]

	RxHeader2.IDE = CAN_ID_STD;
 80008e0:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <main+0x150>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
	RxHeader2.StdId = 20;
 80008e6:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <main+0x150>)
 80008e8:	2214      	movs	r2, #20
 80008ea:	601a      	str	r2, [r3, #0]
	RxHeader2.RTR = CAN_RTR_DATA;
 80008ec:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <main+0x150>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
	RxHeader2.DLC = 1;
 80008f2:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <main+0x150>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	611a      	str	r2, [r3, #16]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	BinarySemaphoreHandle = xSemaphoreCreateBinary();
 80008f8:	2203      	movs	r2, #3
 80008fa:	2100      	movs	r1, #0
 80008fc:	2001      	movs	r0, #1
 80008fe:	f004 f80f 	bl	8004920 <xQueueGenericCreate>
 8000902:	4603      	mov	r3, r0
 8000904:	4a2c      	ldr	r2, [pc, #176]	; (80009b8 <main+0x154>)
 8000906:	6013      	str	r3, [r2, #0]
	configASSERT(BinarySemaphoreHandle != NULL);
 8000908:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <main+0x154>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10a      	bne.n	8000926 <main+0xc2>
	__asm volatile
 8000910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000914:	f383 8811 	msr	BASEPRI, r3
 8000918:	f3bf 8f6f 	isb	sy
 800091c:	f3bf 8f4f 	dsb	sy
 8000920:	657b      	str	r3, [r7, #84]	; 0x54
}
 8000922:	bf00      	nop
 8000924:	e7fe      	b.n	8000924 <main+0xc0>
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Tarea_1 */

	osThreadDef(Tarea_1, StartTask01, osPriorityNormal, 0, 128);
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <main+0x158>)
 8000928:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800092c:	461d      	mov	r5, r3
 800092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000932:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Tarea_1Handle = osThreadCreate(osThread(Tarea_1), NULL);
 800093a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f003 fe70 	bl	8004626 <osThreadCreate>
 8000946:	4603      	mov	r3, r0
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <main+0x15c>)
 800094a:	6013      	str	r3, [r2, #0]

	/* definition and creation of Tarea_2 */
	osThreadDef(Tarea_2, StartTask02, osPriorityNormal, 0, 128);
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <main+0x160>)
 800094e:	f107 041c 	add.w	r4, r7, #28
 8000952:	461d      	mov	r5, r3
 8000954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000958:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800095c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Tarea_2Handle = osThreadCreate(osThread(Tarea_2), NULL);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f003 fe5d 	bl	8004626 <osThreadCreate>
 800096c:	4603      	mov	r3, r0
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <main+0x164>)
 8000970:	6013      	str	r3, [r2, #0]

	/* definition and creation of Tarea_3 */
	osThreadDef(Tarea_3, StartTask03, osPriorityNormal, 0, 128);
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <main+0x168>)
 8000974:	463c      	mov	r4, r7
 8000976:	461d      	mov	r5, r3
 8000978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000980:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Tarea_3Handle = osThreadCreate(osThread(Tarea_3), NULL);
 8000984:	463b      	mov	r3, r7
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fe4c 	bl	8004626 <osThreadCreate>
 800098e:	4603      	mov	r3, r0
 8000990:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <main+0x16c>)
 8000992:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	config();
 8000994:	f7ff ff10 	bl	80007b8 <_Z6configv>
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000998:	f003 fe3e 	bl	8004618 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800099c:	e7fe      	b.n	800099c <main+0x138>
 800099e:	bf00      	nop
 80009a0:	20000364 	.word	0x20000364
 80009a4:	20000314 	.word	0x20000314
 80009a8:	20000380 	.word	0x20000380
 80009ac:	200003b0 	.word	0x200003b0
 80009b0:	20000398 	.word	0x20000398
 80009b4:	200003cc 	.word	0x200003cc
 80009b8:	2000037c 	.word	0x2000037c
 80009bc:	080065fc 	.word	0x080065fc
 80009c0:	20000358 	.word	0x20000358
 80009c4:	08006618 	.word	0x08006618
 80009c8:	2000035c 	.word	0x2000035c
 80009cc:	08006634 	.word	0x08006634
 80009d0:	20000360 	.word	0x20000360

080009d4 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	2230      	movs	r2, #48	; 0x30
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f005 fdce 	bl	8006584 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <_Z18SystemClock_Configv+0xcc>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a27      	ldr	r2, [pc, #156]	; (8000aa0 <_Z18SystemClock_Configv+0xcc>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <_Z18SystemClock_Configv+0xcc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <_Z18SystemClock_Configv+0xd0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a20:	4a20      	ldr	r2, [pc, #128]	; (8000aa4 <_Z18SystemClock_Configv+0xd0>)
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <_Z18SystemClock_Configv+0xd0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a34:	2302      	movs	r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a44:	f107 0320 	add.w	r3, r7, #32
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 fe1d 	bl	8002688 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf14      	ite	ne
 8000a54:	2301      	movne	r3, #1
 8000a56:	2300      	moveq	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <_Z18SystemClock_Configv+0x8e>
		Error_Handler();
 8000a5e:	f000 f9c1 	bl	8000de4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a62:	230f      	movs	r3, #15
 8000a64:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 f87b 	bl	8002b78 <HAL_RCC_ClockConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf14      	ite	ne
 8000a88:	2301      	movne	r3, #1
 8000a8a:	2300      	moveq	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <_Z18SystemClock_Configv+0xc2>
		Error_Handler();
 8000a92:	f000 f9a7 	bl	8000de4 <Error_Handler>
	}
}
 8000a96:	bf00      	nop
 8000a98:	3750      	adds	r7, #80	; 0x50
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40007000 	.word	0x40007000

08000aa8 <_ZL12MX_CAN1_Initv>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000aac:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000aae:	4a39      	ldr	r2, [pc, #228]	; (8000b94 <_ZL12MX_CAN1_Initv+0xec>)
 8000ab0:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8000ab2:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000ab4:	2210      	movs	r2, #16
 8000ab6:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ab8:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000abe:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ac4:	4b32      	ldr	r3, [pc, #200]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000ac6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000aca:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000acc:	4b30      	ldr	r3, [pc, #192]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000ade:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000ae4:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000af0:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000af6:	4826      	ldr	r0, [pc, #152]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000af8:	f000 fc10 	bl	800131c <HAL_CAN_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf14      	ite	ne
 8000b02:	2301      	movne	r3, #1
 8000b04:	2300      	moveq	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <_ZL12MX_CAN1_Initv+0x68>
		Error_Handler();
 8000b0c:	f000 f96a 	bl	8000de4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	sFilterConfig.FilterBank = 0;
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <_ZL12MX_CAN1_Initv+0xf0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <_ZL12MX_CAN1_Initv+0xf0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <_ZL12MX_CAN1_Initv+0xf0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <_ZL12MX_CAN1_Initv+0xf0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <_ZL12MX_CAN1_Initv+0xf0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <_ZL12MX_CAN1_Initv+0xf0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <_ZL12MX_CAN1_Initv+0xf0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <_ZL12MX_CAN1_Initv+0xf0>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <_ZL12MX_CAN1_Initv+0xf0>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <_ZL12MX_CAN1_Initv+0xf0>)
 8000b48:	220e      	movs	r2, #14
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000b4c:	4912      	ldr	r1, [pc, #72]	; (8000b98 <_ZL12MX_CAN1_Initv+0xf0>)
 8000b4e:	4810      	ldr	r0, [pc, #64]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000b50:	f000 fce0 	bl	8001514 <HAL_CAN_ConfigFilter>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf14      	ite	ne
 8000b5a:	2301      	movne	r3, #1
 8000b5c:	2300      	moveq	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <_ZL12MX_CAN1_Initv+0xc0>
		/* Filter configuration Error */
		Error_Handler();
 8000b64:	f000 f93e 	bl	8000de4 <Error_Handler>
	}

	HAL_CAN_Start(&hcan1);
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000b6a:	f000 fdb3 	bl	80016d4 <HAL_CAN_Start>

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <_ZL12MX_CAN1_Initv+0xe8>)
 8000b72:	f000 ffe0 	bl	8001b36 <HAL_CAN_ActivateNotification>
 8000b76:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	bf14      	ite	ne
 8000b7c:	2301      	movne	r3, #1
 8000b7e:	2300      	moveq	r3, #0
 8000b80:	b2db      	uxtb	r3, r3
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <_ZL12MX_CAN1_Initv+0xe2>
		/* Notification Error */
		Error_Handler();
 8000b86:	f000 f92d 	bl	8000de4 <Error_Handler>
	}
	/* USER CODE END CAN1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200002c4 	.word	0x200002c4
 8000b94:	40006400 	.word	0x40006400
 8000b98:	200003e8 	.word	0x200003e8

08000b9c <_ZL12MX_CAN2_Initv>:
/**
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000ba0:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000ba2:	4a39      	ldr	r2, [pc, #228]	; (8000c88 <_ZL12MX_CAN2_Initv+0xec>)
 8000ba4:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 8000ba6:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000ba8:	2210      	movs	r2, #16
 8000baa:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000bac:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bb2:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000bb8:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000bba:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000bbe:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bc0:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000bcc:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8000bea:	4826      	ldr	r0, [pc, #152]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000bec:	f000 fb96 	bl	800131c <HAL_CAN_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <_ZL12MX_CAN2_Initv+0x68>
		Error_Handler();
 8000c00:	f000 f8f0 	bl	8000de4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */
	sFilterConfig.FilterBank = 14;
 8000c04:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <_ZL12MX_CAN2_Initv+0xf0>)
 8000c06:	220e      	movs	r2, #14
 8000c08:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <_ZL12MX_CAN2_Initv+0xf0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <_ZL12MX_CAN2_Initv+0xf0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0;
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <_ZL12MX_CAN2_Initv+0xf0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <_ZL12MX_CAN2_Initv+0xf0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <_ZL12MX_CAN2_Initv+0xf0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <_ZL12MX_CAN2_Initv+0xf0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <_ZL12MX_CAN2_Initv+0xf0>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_ZL12MX_CAN2_Initv+0xf0>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <_ZL12MX_CAN2_Initv+0xf0>)
 8000c3c:	220e      	movs	r2, #14
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8000c40:	4912      	ldr	r1, [pc, #72]	; (8000c8c <_ZL12MX_CAN2_Initv+0xf0>)
 8000c42:	4810      	ldr	r0, [pc, #64]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000c44:	f000 fc66 	bl	8001514 <HAL_CAN_ConfigFilter>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bf14      	ite	ne
 8000c4e:	2301      	movne	r3, #1
 8000c50:	2300      	moveq	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <_ZL12MX_CAN2_Initv+0xc0>
		/* Filter configuration Error */
		Error_Handler();
 8000c58:	f000 f8c4 	bl	8000de4 <Error_Handler>
	}

	HAL_CAN_Start(&hcan2);
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000c5e:	f000 fd39 	bl	80016d4 <HAL_CAN_Start>

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000c62:	2102      	movs	r1, #2
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <_ZL12MX_CAN2_Initv+0xe8>)
 8000c66:	f000 ff66 	bl	8001b36 <HAL_CAN_ActivateNotification>
 8000c6a:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	bf14      	ite	ne
 8000c70:	2301      	movne	r3, #1
 8000c72:	2300      	moveq	r3, #0
 8000c74:	b2db      	uxtb	r3, r3
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <_ZL12MX_CAN2_Initv+0xe2>
		/* Notification Error */
		Error_Handler();
 8000c7a:	f000 f8b3 	bl	8000de4 <Error_Handler>
	}
	/* USER CODE END CAN2_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200002ec 	.word	0x200002ec
 8000c88:	40006800 	.word	0x40006800
 8000c8c:	200003e8 	.word	0x200003e8

08000c90 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000c96:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8000c98:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000cc6:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000cc8:	f002 fc16 	bl	80034f8 <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf14      	ite	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	2300      	moveq	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <_ZL19MX_USART3_UART_Initv+0x50>
		Error_Handler();
 8000cdc:	f000 f882 	bl	8000de4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000314 	.word	0x20000314
 8000ce8:	40004800 	.word	0x40004800

08000cec <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <_ZL12MX_GPIO_Initv+0x9c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <_ZL12MX_GPIO_Initv+0x9c>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <_ZL12MX_GPIO_Initv+0x9c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <_ZL12MX_GPIO_Initv+0x9c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <_ZL12MX_GPIO_Initv+0x9c>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <_ZL12MX_GPIO_Initv+0x9c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <_ZL12MX_GPIO_Initv+0x9c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a11      	ldr	r2, [pc, #68]	; (8000d88 <_ZL12MX_GPIO_Initv+0x9c>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <_ZL12MX_GPIO_Initv+0x9c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Amarillo_Pin | Rojo_Pin | Azul_Pin,
 8000d56:	2200      	movs	r2, #0
 8000d58:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <_ZL12MX_GPIO_Initv+0xa0>)
 8000d5e:	f001 fc5f 	bl	8002620 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : Amarillo_Pin Rojo_Pin Azul_Pin */
	GPIO_InitStruct.Pin = Amarillo_Pin | Rojo_Pin | Azul_Pin;
 8000d62:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d66:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <_ZL12MX_GPIO_Initv+0xa0>)
 8000d7c:	f001 faa4 	bl	80022c8 <HAL_GPIO_Init>

}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020400 	.word	0x40020400

08000d90 <_Z11StartTask01PKv>:
 * @brief  Function implementing the Tarea_1 thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const *argument) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f003 fc90 	bl	80046be <osDelay>
 8000d9e:	e7fb      	b.n	8000d98 <_Z11StartTask01PKv+0x8>

08000da0 <_Z11StartTask02PKv>:
 * @brief Function implementing the Tarea_2 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f003 fc88 	bl	80046be <osDelay>
 8000dae:	e7fb      	b.n	8000da8 <_Z11StartTask02PKv+0x8>

08000db0 <_Z11StartTask03PKv>:
 * @brief Function implementing the Tarea_3 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f003 fc80 	bl	80046be <osDelay>
 8000dbe:	e7fb      	b.n	8000db8 <_Z11StartTask03PKv+0x8>

08000dc0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d101      	bne.n	8000dd6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000dd2:	f000 fa83 	bl	80012dc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40001400 	.word	0x40001400

08000de4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
}
 8000dea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000dec:	e7fe      	b.n	8000dec <Error_Handler+0x8>
	...

08000df0 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d107      	bne.n	8000e10 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d102      	bne.n	8000e10 <_Z41__static_initialization_and_destruction_0ii+0x20>
printer imprime;
 8000e0a:	4803      	ldr	r0, [pc, #12]	; (8000e18 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000e0c:	f000 f80e 	bl	8000e2c <_ZN7printerC1Ev>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000280 	.word	0x20000280

08000e1c <_GLOBAL__sub_I_imprime>:
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e24:	2001      	movs	r0, #1
 8000e26:	f7ff ffe3 	bl	8000df0 <_Z41__static_initialization_and_destruction_0ii>
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <_ZN7printerC1Ev>:
#include "cmsis_os.h"
#include <string.h>
#include "printscreen.h"
#include <stdbool.h>

printer::printer () {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	  huart3.Instance = USART3;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <_ZN7printerC1Ev+0x60>)
 8000e38:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = 115200;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 fb45 	bl	80034f8 <HAL_UART_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bf14      	ite	ne
 8000e74:	2301      	movne	r3, #1
 8000e76:	2300      	moveq	r3, #0
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <_ZN7printerC1Ev+0x56>
	  {
	    Error_Handler();
 8000e7e:	f7ff ffb1 	bl	8000de4 <Error_Handler>
	  }
}
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40004800 	.word	0x40004800

08000e90 <_ZN7printer12vPrintStringEPKc>:

void printer::vPrintString( const char *pcString )
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */

	taskENTER_CRITICAL();
 8000e9a:	f005 f843 	bl	8005f24 <vPortEnterCritical>

		HAL_UART_Transmit( &huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), HAL_MAX_DELAY );
 8000e9e:	687c      	ldr	r4, [r7, #4]
 8000ea0:	6838      	ldr	r0, [r7, #0]
 8000ea2:	f7ff f9a5 	bl	80001f0 <strlen>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eae:	6839      	ldr	r1, [r7, #0]
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f002 fb6e 	bl	8003592 <HAL_UART_Transmit>

	taskEXIT_CRITICAL();
 8000eb6:	f005 f865 	bl	8005f84 <vPortExitCritical>
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd90      	pop	{r4, r7, pc}
	...

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_MspInit+0x54>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <HAL_MspInit+0x54>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_MspInit+0x54>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_MspInit+0x54>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_MspInit+0x54>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_MspInit+0x54>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	210f      	movs	r1, #15
 8000f06:	f06f 0001 	mvn.w	r0, #1
 8000f0a:	f001 f921 	bl	8002150 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a46      	ldr	r2, [pc, #280]	; (8001054 <HAL_CAN_MspInit+0x138>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d136      	bne.n	8000fac <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f3e:	4b46      	ldr	r3, [pc, #280]	; (8001058 <HAL_CAN_MspInit+0x13c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a44      	ldr	r2, [pc, #272]	; (8001058 <HAL_CAN_MspInit+0x13c>)
 8000f46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f48:	4b43      	ldr	r3, [pc, #268]	; (8001058 <HAL_CAN_MspInit+0x13c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d10d      	bne.n	8000f6c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	4b41      	ldr	r3, [pc, #260]	; (800105c <HAL_CAN_MspInit+0x140>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	4a40      	ldr	r2, [pc, #256]	; (800105c <HAL_CAN_MspInit+0x140>)
 8000f5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f60:	4b3e      	ldr	r3, [pc, #248]	; (800105c <HAL_CAN_MspInit+0x140>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	4b3a      	ldr	r3, [pc, #232]	; (800105c <HAL_CAN_MspInit+0x140>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	4a39      	ldr	r2, [pc, #228]	; (800105c <HAL_CAN_MspInit+0x140>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7c:	4b37      	ldr	r3, [pc, #220]	; (800105c <HAL_CAN_MspInit+0x140>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f9a:	2309      	movs	r3, #9
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	482e      	ldr	r0, [pc, #184]	; (8001060 <HAL_CAN_MspInit+0x144>)
 8000fa6:	f001 f98f 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000faa:	e04f      	b.n	800104c <HAL_CAN_MspInit+0x130>
  else if(hcan->Instance==CAN2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a2c      	ldr	r2, [pc, #176]	; (8001064 <HAL_CAN_MspInit+0x148>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d14a      	bne.n	800104c <HAL_CAN_MspInit+0x130>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <HAL_CAN_MspInit+0x140>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a27      	ldr	r2, [pc, #156]	; (800105c <HAL_CAN_MspInit+0x140>)
 8000fc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <HAL_CAN_MspInit+0x140>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <HAL_CAN_MspInit+0x13c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <HAL_CAN_MspInit+0x13c>)
 8000fda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <HAL_CAN_MspInit+0x13c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d10d      	bne.n	8001000 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_CAN_MspInit+0x140>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <HAL_CAN_MspInit+0x140>)
 8000fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_CAN_MspInit+0x140>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_CAN_MspInit+0x140>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <HAL_CAN_MspInit+0x140>)
 800100a:	f043 0302 	orr.w	r3, r3, #2
 800100e:	6313      	str	r3, [r2, #48]	; 0x30
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_CAN_MspInit+0x140>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800101c:	2360      	movs	r3, #96	; 0x60
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800102c:	2309      	movs	r3, #9
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	480a      	ldr	r0, [pc, #40]	; (8001060 <HAL_CAN_MspInit+0x144>)
 8001038:	f001 f946 	bl	80022c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2105      	movs	r1, #5
 8001040:	2040      	movs	r0, #64	; 0x40
 8001042:	f001 f885 	bl	8002150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001046:	2040      	movs	r0, #64	; 0x40
 8001048:	f001 f89e 	bl	8002188 <HAL_NVIC_EnableIRQ>
}
 800104c:	bf00      	nop
 800104e:	3730      	adds	r7, #48	; 0x30
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40006400 	.word	0x40006400
 8001058:	2000049c 	.word	0x2000049c
 800105c:	40023800 	.word	0x40023800
 8001060:	40020400 	.word	0x40020400
 8001064:	40006800 	.word	0x40006800

08001068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <HAL_UART_MspInit+0x94>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d134      	bne.n	80010f4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <HAL_UART_MspInit+0x98>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <HAL_UART_MspInit+0x98>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_UART_MspInit+0x98>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_UART_MspInit+0x98>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_UART_MspInit+0x98>)
 80010b0:	f043 0308 	orr.w	r3, r3, #8
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_UART_MspInit+0x98>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d4:	2307      	movs	r3, #7
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4809      	ldr	r0, [pc, #36]	; (8001104 <HAL_UART_MspInit+0x9c>)
 80010e0:	f001 f8f2 	bl	80022c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2105      	movs	r1, #5
 80010e8:	2027      	movs	r0, #39	; 0x27
 80010ea:	f001 f831 	bl	8002150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010ee:	2027      	movs	r0, #39	; 0x27
 80010f0:	f001 f84a 	bl	8002188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40004800 	.word	0x40004800
 8001100:	40023800 	.word	0x40023800
 8001104:	40020c00 	.word	0x40020c00

08001108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	2037      	movs	r0, #55	; 0x37
 800111e:	f001 f817 	bl	8002150 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001122:	2037      	movs	r0, #55	; 0x37
 8001124:	f001 f830 	bl	8002188 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <HAL_InitTick+0xa0>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <HAL_InitTick+0xa0>)
 8001132:	f043 0320 	orr.w	r3, r3, #32
 8001136:	6413      	str	r3, [r2, #64]	; 0x40
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_InitTick+0xa0>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f003 0320 	and.w	r3, r3, #32
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001144:	f107 0210 	add.w	r2, r7, #16
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4611      	mov	r1, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fef2 	bl	8002f38 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001154:	f001 fec8 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8001158:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800115a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <HAL_InitTick+0xa4>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	0c9b      	lsrs	r3, r3, #18
 8001164:	3b01      	subs	r3, #1
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_InitTick+0xa8>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <HAL_InitTick+0xac>)
 800116c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_InitTick+0xa8>)
 8001170:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001174:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_InitTick+0xa8>)
 8001178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_InitTick+0xa8>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_InitTick+0xa8>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <HAL_InitTick+0xa8>)
 800118a:	f001 ff07 	bl	8002f9c <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d104      	bne.n	800119e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <HAL_InitTick+0xa8>)
 8001196:	f001 ff5b 	bl	8003050 <HAL_TIM_Base_Start_IT>
 800119a:	4603      	mov	r3, r0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3730      	adds	r7, #48	; 0x30
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	431bde83 	.word	0x431bde83
 80011b0:	200004a0 	.word	0x200004a0
 80011b4:	40001400 	.word	0x40001400

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <NMI_Handler+0x4>

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler+0x4>

080011ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <USART3_IRQHandler+0x10>)
 80011ea:	f002 fa95 	bl	8003718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000314 	.word	0x20000314

080011f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <TIM7_IRQHandler+0x10>)
 80011fe:	f001 ff97 	bl	8003130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200004a0 	.word	0x200004a0

0800120c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <CAN2_RX0_IRQHandler+0x10>)
 8001212:	f000 fcb6 	bl	8001b82 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200002ec 	.word	0x200002ec

08001220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <SystemInit+0x20>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <SystemInit+0x20>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800127c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800124a:	490e      	ldr	r1, [pc, #56]	; (8001284 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800124c:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001260:	4c0b      	ldr	r4, [pc, #44]	; (8001290 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800126e:	f7ff ffd7 	bl	8001220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001272:	f005 f963 	bl	800653c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001276:	f7ff faf5 	bl	8000864 <main>
  bx  lr    
 800127a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800127c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001284:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001288:	08006684 	.word	0x08006684
  ldr r2, =_sbss
 800128c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001290:	20004240 	.word	0x20004240

08001294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC_IRQHandler>
	...

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_Init+0x40>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_Init+0x40>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x40>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 ff3a 	bl	800213a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	200f      	movs	r0, #15
 80012c8:	f7ff ff1e 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fdfa 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00

080012dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x20>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x24>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_IncTick+0x24>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008
 8001300:	200004e8 	.word	0x200004e8

08001304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	200004e8 	.word	0x200004e8

0800131c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e0ed      	b.n	800150a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fdee 	bl	8000f1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001350:	f7ff ffd8 	bl	8001304 <HAL_GetTick>
 8001354:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001356:	e012      	b.n	800137e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001358:	f7ff ffd4 	bl	8001304 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b0a      	cmp	r3, #10
 8001364:	d90b      	bls.n	800137e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2205      	movs	r2, #5
 8001376:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e0c5      	b.n	800150a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0e5      	beq.n	8001358 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0202 	bic.w	r2, r2, #2
 800139a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800139c:	f7ff ffb2 	bl	8001304 <HAL_GetTick>
 80013a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013a2:	e012      	b.n	80013ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013a4:	f7ff ffae 	bl	8001304 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b0a      	cmp	r3, #10
 80013b0:	d90b      	bls.n	80013ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2205      	movs	r2, #5
 80013c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e09f      	b.n	800150a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1e5      	bne.n	80013a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7e1b      	ldrb	r3, [r3, #24]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d108      	bne.n	80013f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	e007      	b.n	8001402 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001400:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7e5b      	ldrb	r3, [r3, #25]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d108      	bne.n	800141c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e007      	b.n	800142c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800142a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7e9b      	ldrb	r3, [r3, #26]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d108      	bne.n	8001446 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0220 	orr.w	r2, r2, #32
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e007      	b.n	8001456 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0220 	bic.w	r2, r2, #32
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7edb      	ldrb	r3, [r3, #27]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d108      	bne.n	8001470 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0210 	bic.w	r2, r2, #16
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	e007      	b.n	8001480 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0210 	orr.w	r2, r2, #16
 800147e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7f1b      	ldrb	r3, [r3, #28]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d108      	bne.n	800149a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0208 	orr.w	r2, r2, #8
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e007      	b.n	80014aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0208 	bic.w	r2, r2, #8
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	7f5b      	ldrb	r3, [r3, #29]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d108      	bne.n	80014c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0204 	orr.w	r2, r2, #4
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e007      	b.n	80014d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0204 	bic.w	r2, r2, #4
 80014d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	ea42 0103 	orr.w	r1, r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	1e5a      	subs	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800152c:	7cfb      	ldrb	r3, [r7, #19]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d003      	beq.n	800153a <HAL_CAN_ConfigFilter+0x26>
 8001532:	7cfb      	ldrb	r3, [r7, #19]
 8001534:	2b02      	cmp	r3, #2
 8001536:	f040 80be 	bne.w	80016b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800153a:	4b65      	ldr	r3, [pc, #404]	; (80016d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800153c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001554:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	431a      	orrs	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	2201      	movs	r2, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43db      	mvns	r3, r3
 800158c:	401a      	ands	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d123      	bne.n	80015e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3248      	adds	r2, #72	; 0x48
 80015c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015da:	6979      	ldr	r1, [r7, #20]
 80015dc:	3348      	adds	r3, #72	; 0x48
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	440b      	add	r3, r1
 80015e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d122      	bne.n	8001632 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	431a      	orrs	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800160c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3248      	adds	r2, #72	; 0x48
 8001612:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001626:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001628:	6979      	ldr	r1, [r7, #20]
 800162a:	3348      	adds	r3, #72	; 0x48
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	43db      	mvns	r3, r3
 8001644:	401a      	ands	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800164c:	e007      	b.n	800165e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	431a      	orrs	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	401a      	ands	r2, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001678:	e007      	b.n	800168a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	431a      	orrs	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d107      	bne.n	80016a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	431a      	orrs	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016a8:	f023 0201 	bic.w	r2, r3, #1
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e006      	b.n	80016c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
  }
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40006400 	.word	0x40006400

080016d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d12e      	bne.n	8001746 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2202      	movs	r2, #2
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001700:	f7ff fe00 	bl	8001304 <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001706:	e012      	b.n	800172e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001708:	f7ff fdfc 	bl	8001304 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b0a      	cmp	r3, #10
 8001714:	d90b      	bls.n	800172e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2205      	movs	r2, #5
 8001726:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e012      	b.n	8001754 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1e5      	bne.n	8001708 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	e006      	b.n	8001754 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
  }
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001770:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d003      	beq.n	8001788 <HAL_CAN_AddTxMessage+0x2c>
 8001780:	7ffb      	ldrb	r3, [r7, #31]
 8001782:	2b02      	cmp	r3, #2
 8001784:	f040 80b8 	bne.w	80018f8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10a      	bne.n	80017a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80a0 	beq.w	80018e8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	0e1b      	lsrs	r3, r3, #24
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d907      	bls.n	80017c8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e09e      	b.n	8001906 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80017c8:	2201      	movs	r2, #1
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	409a      	lsls	r2, r3
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10d      	bne.n	80017f6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	6809      	ldr	r1, [r1, #0]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3318      	adds	r3, #24
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	440b      	add	r3, r1
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	e00f      	b.n	8001816 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001800:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001806:	68f9      	ldr	r1, [r7, #12]
 8001808:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800180a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3318      	adds	r3, #24
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	440b      	add	r3, r1
 8001814:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3318      	adds	r3, #24
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	440b      	add	r3, r1
 8001826:	3304      	adds	r3, #4
 8001828:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	7d1b      	ldrb	r3, [r3, #20]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d111      	bne.n	8001856 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3318      	adds	r3, #24
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	4413      	add	r3, r2
 800183e:	3304      	adds	r3, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	6811      	ldr	r1, [r2, #0]
 8001846:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3318      	adds	r3, #24
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	440b      	add	r3, r1
 8001852:	3304      	adds	r3, #4
 8001854:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3307      	adds	r3, #7
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	061a      	lsls	r2, r3, #24
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3306      	adds	r3, #6
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	041b      	lsls	r3, r3, #16
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3305      	adds	r3, #5
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	4313      	orrs	r3, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	3204      	adds	r2, #4
 8001876:	7812      	ldrb	r2, [r2, #0]
 8001878:	4610      	mov	r0, r2
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	6811      	ldr	r1, [r2, #0]
 800187e:	ea43 0200 	orr.w	r2, r3, r0
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	440b      	add	r3, r1
 8001888:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800188c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3303      	adds	r3, #3
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	061a      	lsls	r2, r3, #24
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3302      	adds	r3, #2
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	041b      	lsls	r3, r3, #16
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3301      	adds	r3, #1
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	4313      	orrs	r3, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	7812      	ldrb	r2, [r2, #0]
 80018ae:	4610      	mov	r0, r2
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	6811      	ldr	r1, [r2, #0]
 80018b4:	ea43 0200 	orr.w	r2, r3, r0
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	440b      	add	r3, r1
 80018be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80018c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3318      	adds	r3, #24
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	4413      	add	r3, r2
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	6811      	ldr	r1, [r2, #0]
 80018d6:	f043 0201 	orr.w	r2, r3, #1
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3318      	adds	r3, #24
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	440b      	add	r3, r1
 80018e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e00e      	b.n	8001906 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e006      	b.n	8001906 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
  }
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001912:	b480      	push	{r7}
 8001914:	b087      	sub	sp, #28
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001926:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d003      	beq.n	8001936 <HAL_CAN_GetRxMessage+0x24>
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b02      	cmp	r3, #2
 8001932:	f040 80f3 	bne.w	8001b1c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10e      	bne.n	800195a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d116      	bne.n	8001978 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0e7      	b.n	8001b2a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d107      	bne.n	8001978 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0d8      	b.n	8001b2a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	331b      	adds	r3, #27
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	4413      	add	r3, r2
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0204 	and.w	r2, r3, #4
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	331b      	adds	r3, #27
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	4413      	add	r3, r2
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0d5b      	lsrs	r3, r3, #21
 80019a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e00b      	b.n	80019c8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	331b      	adds	r3, #27
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	4413      	add	r3, r2
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	08db      	lsrs	r3, r3, #3
 80019c0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	331b      	adds	r3, #27
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4413      	add	r3, r2
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0202 	and.w	r2, r3, #2
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	331b      	adds	r3, #27
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4413      	add	r3, r2
 80019ea:	3304      	adds	r3, #4
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 020f 	and.w	r2, r3, #15
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	331b      	adds	r3, #27
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	4413      	add	r3, r2
 8001a02:	3304      	adds	r3, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	331b      	adds	r3, #27
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0c1b      	lsrs	r3, r3, #16
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4413      	add	r3, r2
 8001a30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0a1a      	lsrs	r2, r3, #8
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	3301      	adds	r3, #1
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0c1a      	lsrs	r2, r3, #16
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0e1a      	lsrs	r2, r3, #24
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	3303      	adds	r3, #3
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	4413      	add	r3, r2
 8001a94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0a1a      	lsrs	r2, r3, #8
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	3305      	adds	r3, #5
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0c1a      	lsrs	r2, r3, #16
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	3306      	adds	r3, #6
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0e1a      	lsrs	r2, r3, #24
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	3307      	adds	r3, #7
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d108      	bne.n	8001b08 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0220 	orr.w	r2, r2, #32
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	e007      	b.n	8001b18 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0220 	orr.w	r2, r2, #32
 8001b16:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e006      	b.n	8001b2a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
  }
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b085      	sub	sp, #20
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b46:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d002      	beq.n	8001b54 <HAL_CAN_ActivateNotification+0x1e>
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d109      	bne.n	8001b68 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6959      	ldr	r1, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e006      	b.n	8001b76 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
  }
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b08a      	sub	sp, #40	; 0x28
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d07c      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d023      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f983 	bl	8001ef0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001bea:	e016      	b.n	8001c1a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d004      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfe:	e00c      	b.n	8001c1a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d004      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	e002      	b.n	8001c1a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f989 	bl	8001f2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d024      	beq.n	8001c6e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f963 	bl	8001f04 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c3e:	e016      	b.n	8001c6e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d004      	beq.n	8001c54 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
 8001c52:	e00c      	b.n	8001c6e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
 8001c66:	e002      	b.n	8001c6e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f969 	bl	8001f40 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d024      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f943 	bl	8001f18 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c92:	e016      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d004      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca6:	e00c      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	e002      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f949 	bl	8001f54 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00c      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00b      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2208      	movs	r2, #8
 8001d00:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f930 	bl	8001f68 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7fe fceb 	bl	80006fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00c      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2210      	movs	r2, #16
 8001d48:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00b      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d006      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2208      	movs	r2, #8
 8001d64:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f912 	bl	8001f90 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f8f9 	bl	8001f7c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00b      	beq.n	8001dac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2210      	movs	r2, #16
 8001da4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8fc 	bl	8001fa4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8f5 	bl	8001fb8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d07b      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d072      	beq.n	8001ec8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d043      	beq.n	8001ec8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d03e      	beq.n	8001ec8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e50:	2b60      	cmp	r3, #96	; 0x60
 8001e52:	d02b      	beq.n	8001eac <HAL_CAN_IRQHandler+0x32a>
 8001e54:	2b60      	cmp	r3, #96	; 0x60
 8001e56:	d82e      	bhi.n	8001eb6 <HAL_CAN_IRQHandler+0x334>
 8001e58:	2b50      	cmp	r3, #80	; 0x50
 8001e5a:	d022      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x320>
 8001e5c:	2b50      	cmp	r3, #80	; 0x50
 8001e5e:	d82a      	bhi.n	8001eb6 <HAL_CAN_IRQHandler+0x334>
 8001e60:	2b40      	cmp	r3, #64	; 0x40
 8001e62:	d019      	beq.n	8001e98 <HAL_CAN_IRQHandler+0x316>
 8001e64:	2b40      	cmp	r3, #64	; 0x40
 8001e66:	d826      	bhi.n	8001eb6 <HAL_CAN_IRQHandler+0x334>
 8001e68:	2b30      	cmp	r3, #48	; 0x30
 8001e6a:	d010      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x30c>
 8001e6c:	2b30      	cmp	r3, #48	; 0x30
 8001e6e:	d822      	bhi.n	8001eb6 <HAL_CAN_IRQHandler+0x334>
 8001e70:	2b10      	cmp	r3, #16
 8001e72:	d002      	beq.n	8001e7a <HAL_CAN_IRQHandler+0x2f8>
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d005      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e78:	e01d      	b.n	8001eb6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e82:	e019      	b.n	8001eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	f043 0310 	orr.w	r3, r3, #16
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e8c:	e014      	b.n	8001eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	f043 0320 	orr.w	r3, r3, #32
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e96:	e00f      	b.n	8001eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ea0:	e00a      	b.n	8001eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eaa:	e005      	b.n	8001eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eb4:	e000      	b.n	8001eb8 <HAL_CAN_IRQHandler+0x336>
            break;
 8001eb6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699a      	ldr	r2, [r3, #24]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ec6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2204      	movs	r2, #4
 8001ece:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f872 	bl	8001fcc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3728      	adds	r7, #40	; 0x28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800200c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002012:	4a04      	ldr	r2, [pc, #16]	; (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60d3      	str	r3, [r2, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <__NVIC_GetPriorityGrouping+0x18>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	f003 0307 	and.w	r3, r3, #7
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	2b00      	cmp	r3, #0
 8002054:	db0b      	blt.n	800206e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	f003 021f 	and.w	r2, r3, #31
 800205c:	4907      	ldr	r1, [pc, #28]	; (800207c <__NVIC_EnableIRQ+0x38>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2001      	movs	r0, #1
 8002066:	fa00 f202 	lsl.w	r2, r0, r2
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000e100 	.word	0xe000e100

08002080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	db0a      	blt.n	80020aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	490c      	ldr	r1, [pc, #48]	; (80020cc <__NVIC_SetPriority+0x4c>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	0112      	lsls	r2, r2, #4
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	440b      	add	r3, r1
 80020a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a8:	e00a      	b.n	80020c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4908      	ldr	r1, [pc, #32]	; (80020d0 <__NVIC_SetPriority+0x50>)
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	3b04      	subs	r3, #4
 80020b8:	0112      	lsls	r2, r2, #4
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	440b      	add	r3, r1
 80020be:	761a      	strb	r2, [r3, #24]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000e100 	.word	0xe000e100
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f1c3 0307 	rsb	r3, r3, #7
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	bf28      	it	cs
 80020f2:	2304      	movcs	r3, #4
 80020f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3304      	adds	r3, #4
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d902      	bls.n	8002104 <NVIC_EncodePriority+0x30>
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3b03      	subs	r3, #3
 8002102:	e000      	b.n	8002106 <NVIC_EncodePriority+0x32>
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	401a      	ands	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800211c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	43d9      	mvns	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	4313      	orrs	r3, r2
         );
}
 800212e:	4618      	mov	r0, r3
 8002130:	3724      	adds	r7, #36	; 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ff4c 	bl	8001fe0 <__NVIC_SetPriorityGrouping>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002162:	f7ff ff61 	bl	8002028 <__NVIC_GetPriorityGrouping>
 8002166:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68b9      	ldr	r1, [r7, #8]
 800216c:	6978      	ldr	r0, [r7, #20]
 800216e:	f7ff ffb1 	bl	80020d4 <NVIC_EncodePriority>
 8002172:	4602      	mov	r2, r0
 8002174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff80 	bl	8002080 <__NVIC_SetPriority>
}
 8002180:	bf00      	nop
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff54 	bl	8002044 <__NVIC_EnableIRQ>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021b2:	f7ff f8a7 	bl	8001304 <HAL_GetTick>
 80021b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d008      	beq.n	80021d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2280      	movs	r2, #128	; 0x80
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e052      	b.n	800227c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0216 	bic.w	r2, r2, #22
 80021e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <HAL_DMA_Abort+0x62>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0208 	bic.w	r2, r2, #8
 8002214:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0201 	bic.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002226:	e013      	b.n	8002250 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002228:	f7ff f86c 	bl	8001304 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b05      	cmp	r3, #5
 8002234:	d90c      	bls.n	8002250 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2220      	movs	r2, #32
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2203      	movs	r2, #3
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e015      	b.n	800227c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1e4      	bne.n	8002228 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	223f      	movs	r2, #63	; 0x3f
 8002264:	409a      	lsls	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d004      	beq.n	80022a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2280      	movs	r2, #128	; 0x80
 800229c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e00c      	b.n	80022bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2205      	movs	r2, #5
 80022a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0201 	bic.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e177      	b.n	80025d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	f040 8166 	bne.w	80025ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b01      	cmp	r3, #1
 800230c:	d005      	beq.n	800231a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002316:	2b02      	cmp	r3, #2
 8002318:	d130      	bne.n	800237c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002350:	2201      	movs	r2, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 0201 	and.w	r2, r3, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b03      	cmp	r3, #3
 8002386:	d017      	beq.n	80023b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d123      	bne.n	800240c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	08da      	lsrs	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3208      	adds	r2, #8
 80023cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	220f      	movs	r2, #15
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	08da      	lsrs	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3208      	adds	r2, #8
 8002406:	69b9      	ldr	r1, [r7, #24]
 8002408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0203 	and.w	r2, r3, #3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80c0 	beq.w	80025ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b66      	ldr	r3, [pc, #408]	; (80025ec <HAL_GPIO_Init+0x324>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	4a65      	ldr	r2, [pc, #404]	; (80025ec <HAL_GPIO_Init+0x324>)
 8002458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245c:	6453      	str	r3, [r2, #68]	; 0x44
 800245e:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_GPIO_Init+0x324>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800246a:	4a61      	ldr	r2, [pc, #388]	; (80025f0 <HAL_GPIO_Init+0x328>)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	3302      	adds	r3, #2
 8002472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	220f      	movs	r2, #15
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a58      	ldr	r2, [pc, #352]	; (80025f4 <HAL_GPIO_Init+0x32c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d037      	beq.n	8002506 <HAL_GPIO_Init+0x23e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a57      	ldr	r2, [pc, #348]	; (80025f8 <HAL_GPIO_Init+0x330>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d031      	beq.n	8002502 <HAL_GPIO_Init+0x23a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a56      	ldr	r2, [pc, #344]	; (80025fc <HAL_GPIO_Init+0x334>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d02b      	beq.n	80024fe <HAL_GPIO_Init+0x236>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a55      	ldr	r2, [pc, #340]	; (8002600 <HAL_GPIO_Init+0x338>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d025      	beq.n	80024fa <HAL_GPIO_Init+0x232>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a54      	ldr	r2, [pc, #336]	; (8002604 <HAL_GPIO_Init+0x33c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01f      	beq.n	80024f6 <HAL_GPIO_Init+0x22e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a53      	ldr	r2, [pc, #332]	; (8002608 <HAL_GPIO_Init+0x340>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d019      	beq.n	80024f2 <HAL_GPIO_Init+0x22a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a52      	ldr	r2, [pc, #328]	; (800260c <HAL_GPIO_Init+0x344>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <HAL_GPIO_Init+0x226>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a51      	ldr	r2, [pc, #324]	; (8002610 <HAL_GPIO_Init+0x348>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00d      	beq.n	80024ea <HAL_GPIO_Init+0x222>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a50      	ldr	r2, [pc, #320]	; (8002614 <HAL_GPIO_Init+0x34c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d007      	beq.n	80024e6 <HAL_GPIO_Init+0x21e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4f      	ldr	r2, [pc, #316]	; (8002618 <HAL_GPIO_Init+0x350>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d101      	bne.n	80024e2 <HAL_GPIO_Init+0x21a>
 80024de:	2309      	movs	r3, #9
 80024e0:	e012      	b.n	8002508 <HAL_GPIO_Init+0x240>
 80024e2:	230a      	movs	r3, #10
 80024e4:	e010      	b.n	8002508 <HAL_GPIO_Init+0x240>
 80024e6:	2308      	movs	r3, #8
 80024e8:	e00e      	b.n	8002508 <HAL_GPIO_Init+0x240>
 80024ea:	2307      	movs	r3, #7
 80024ec:	e00c      	b.n	8002508 <HAL_GPIO_Init+0x240>
 80024ee:	2306      	movs	r3, #6
 80024f0:	e00a      	b.n	8002508 <HAL_GPIO_Init+0x240>
 80024f2:	2305      	movs	r3, #5
 80024f4:	e008      	b.n	8002508 <HAL_GPIO_Init+0x240>
 80024f6:	2304      	movs	r3, #4
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x240>
 80024fa:	2303      	movs	r3, #3
 80024fc:	e004      	b.n	8002508 <HAL_GPIO_Init+0x240>
 80024fe:	2302      	movs	r3, #2
 8002500:	e002      	b.n	8002508 <HAL_GPIO_Init+0x240>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_GPIO_Init+0x240>
 8002506:	2300      	movs	r3, #0
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	f002 0203 	and.w	r2, r2, #3
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	4093      	lsls	r3, r2
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002518:	4935      	ldr	r1, [pc, #212]	; (80025f0 <HAL_GPIO_Init+0x328>)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_GPIO_Init+0x354>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254a:	4a34      	ldr	r2, [pc, #208]	; (800261c <HAL_GPIO_Init+0x354>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002550:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_GPIO_Init+0x354>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002574:	4a29      	ldr	r2, [pc, #164]	; (800261c <HAL_GPIO_Init+0x354>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800257a:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_GPIO_Init+0x354>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259e:	4a1f      	ldr	r2, [pc, #124]	; (800261c <HAL_GPIO_Init+0x354>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_GPIO_Init+0x354>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c8:	4a14      	ldr	r2, [pc, #80]	; (800261c <HAL_GPIO_Init+0x354>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3301      	adds	r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	f67f ae84 	bls.w	80022e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021000 	.word	0x40021000
 8002608:	40021400 	.word	0x40021400
 800260c:	40021800 	.word	0x40021800
 8002610:	40021c00 	.word	0x40021c00
 8002614:	40022000 	.word	0x40022000
 8002618:	40022400 	.word	0x40022400
 800261c:	40013c00 	.word	0x40013c00

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800263c:	e003      	b.n	8002646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002664:	887a      	ldrh	r2, [r7, #2]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4013      	ands	r3, r2
 800266a:	041a      	lsls	r2, r3, #16
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43d9      	mvns	r1, r3
 8002670:	887b      	ldrh	r3, [r7, #2]
 8002672:	400b      	ands	r3, r1
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	619a      	str	r2, [r3, #24]
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e267      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d075      	beq.n	8002792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a6:	4b88      	ldr	r3, [pc, #544]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d00c      	beq.n	80026cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b2:	4b85      	ldr	r3, [pc, #532]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d112      	bne.n	80026e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026be:	4b82      	ldr	r3, [pc, #520]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ca:	d10b      	bne.n	80026e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	4b7e      	ldr	r3, [pc, #504]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d05b      	beq.n	8002790 <HAL_RCC_OscConfig+0x108>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d157      	bne.n	8002790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e242      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ec:	d106      	bne.n	80026fc <HAL_RCC_OscConfig+0x74>
 80026ee:	4b76      	ldr	r3, [pc, #472]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a75      	ldr	r2, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e01d      	b.n	8002738 <HAL_RCC_OscConfig+0xb0>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x98>
 8002706:	4b70      	ldr	r3, [pc, #448]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a6f      	ldr	r2, [pc, #444]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 800270c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a6c      	ldr	r2, [pc, #432]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0xb0>
 8002720:	4b69      	ldr	r3, [pc, #420]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a68      	ldr	r2, [pc, #416]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a65      	ldr	r2, [pc, #404]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe fde0 	bl	8001304 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002748:	f7fe fddc 	bl	8001304 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e207      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b5b      	ldr	r3, [pc, #364]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0xc0>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fdcc 	bl	8001304 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002770:	f7fe fdc8 	bl	8001304 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e1f3      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002782:	4b51      	ldr	r3, [pc, #324]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0xe8>
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d063      	beq.n	8002866 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279e:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d11c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b6:	4b44      	ldr	r3, [pc, #272]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d116      	bne.n	80027f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_RCC_OscConfig+0x152>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e1c7      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027da:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4937      	ldr	r1, [pc, #220]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ee:	e03a      	b.n	8002866 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d020      	beq.n	800283a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f8:	4b34      	ldr	r3, [pc, #208]	; (80028cc <HAL_RCC_OscConfig+0x244>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fd81 	bl	8001304 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002806:	f7fe fd7d 	bl	8001304 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e1a8      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002824:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4925      	ldr	r1, [pc, #148]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]
 8002838:	e015      	b.n	8002866 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283a:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_RCC_OscConfig+0x244>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fd60 	bl	8001304 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002848:	f7fe fd5c 	bl	8001304 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e187      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d036      	beq.n	80028e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d016      	beq.n	80028a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_RCC_OscConfig+0x248>)
 800287c:	2201      	movs	r2, #1
 800287e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7fe fd40 	bl	8001304 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002888:	f7fe fd3c 	bl	8001304 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e167      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_OscConfig+0x240>)
 800289c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x200>
 80028a6:	e01b      	b.n	80028e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_RCC_OscConfig+0x248>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ae:	f7fe fd29 	bl	8001304 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b4:	e00e      	b.n	80028d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b6:	f7fe fd25 	bl	8001304 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d907      	bls.n	80028d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e150      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
 80028c8:	40023800 	.word	0x40023800
 80028cc:	42470000 	.word	0x42470000
 80028d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	4b88      	ldr	r3, [pc, #544]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 80028d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ea      	bne.n	80028b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8097 	beq.w	8002a1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f2:	4b81      	ldr	r3, [pc, #516]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10f      	bne.n	800291e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	4b7d      	ldr	r3, [pc, #500]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4a7c      	ldr	r2, [pc, #496]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290c:	6413      	str	r3, [r2, #64]	; 0x40
 800290e:	4b7a      	ldr	r3, [pc, #488]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291a:	2301      	movs	r3, #1
 800291c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b77      	ldr	r3, [pc, #476]	; (8002afc <HAL_RCC_OscConfig+0x474>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d118      	bne.n	800295c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292a:	4b74      	ldr	r3, [pc, #464]	; (8002afc <HAL_RCC_OscConfig+0x474>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a73      	ldr	r2, [pc, #460]	; (8002afc <HAL_RCC_OscConfig+0x474>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002936:	f7fe fce5 	bl	8001304 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293e:	f7fe fce1 	bl	8001304 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e10c      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	4b6a      	ldr	r3, [pc, #424]	; (8002afc <HAL_RCC_OscConfig+0x474>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x2ea>
 8002964:	4b64      	ldr	r3, [pc, #400]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	4a63      	ldr	r2, [pc, #396]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6713      	str	r3, [r2, #112]	; 0x70
 8002970:	e01c      	b.n	80029ac <HAL_RCC_OscConfig+0x324>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b05      	cmp	r3, #5
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x30c>
 800297a:	4b5f      	ldr	r3, [pc, #380]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	4a5e      	ldr	r2, [pc, #376]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6713      	str	r3, [r2, #112]	; 0x70
 8002986:	4b5c      	ldr	r3, [pc, #368]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298a:	4a5b      	ldr	r2, [pc, #364]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6713      	str	r3, [r2, #112]	; 0x70
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0x324>
 8002994:	4b58      	ldr	r3, [pc, #352]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	4a57      	ldr	r2, [pc, #348]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	6713      	str	r3, [r2, #112]	; 0x70
 80029a0:	4b55      	ldr	r3, [pc, #340]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	4a54      	ldr	r2, [pc, #336]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 80029a6:	f023 0304 	bic.w	r3, r3, #4
 80029aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d015      	beq.n	80029e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fca6 	bl	8001304 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe fca2 	bl	8001304 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0cb      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d2:	4b49      	ldr	r3, [pc, #292]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0ee      	beq.n	80029bc <HAL_RCC_OscConfig+0x334>
 80029de:	e014      	b.n	8002a0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e0:	f7fe fc90 	bl	8001304 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e8:	f7fe fc8c 	bl	8001304 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e0b5      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fe:	4b3e      	ldr	r3, [pc, #248]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1ee      	bne.n	80029e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a10:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	4a38      	ldr	r2, [pc, #224]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80a1 	beq.w	8002b68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a26:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d05c      	beq.n	8002aec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d141      	bne.n	8002abe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3a:	4b31      	ldr	r3, [pc, #196]	; (8002b00 <HAL_RCC_OscConfig+0x478>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fe fc60 	bl	8001304 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe fc5c 	bl	8001304 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e087      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	019b      	lsls	r3, r3, #6
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	491b      	ldr	r1, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_RCC_OscConfig+0x478>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a96:	f7fe fc35 	bl	8001304 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7fe fc31 	bl	8001304 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e05c      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x416>
 8002abc:	e054      	b.n	8002b68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_RCC_OscConfig+0x478>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fc1e 	bl	8001304 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe fc1a 	bl	8001304 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e045      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x444>
 8002aea:	e03d      	b.n	8002b68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e038      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40007000 	.word	0x40007000
 8002b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <HAL_RCC_OscConfig+0x4ec>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d028      	beq.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d121      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d11a      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d111      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800

08002b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0cc      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b8c:	4b68      	ldr	r3, [pc, #416]	; (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d90c      	bls.n	8002bb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	4b65      	ldr	r3, [pc, #404]	; (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b63      	ldr	r3, [pc, #396]	; (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0b8      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bcc:	4b59      	ldr	r3, [pc, #356]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4a58      	ldr	r2, [pc, #352]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be4:	4b53      	ldr	r3, [pc, #332]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a52      	ldr	r2, [pc, #328]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf0:	4b50      	ldr	r3, [pc, #320]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	494d      	ldr	r1, [pc, #308]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d044      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	4b47      	ldr	r3, [pc, #284]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d119      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e07f      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d003      	beq.n	8002c36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c36:	4b3f      	ldr	r3, [pc, #252]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e06f      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c46:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e067      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c56:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f023 0203 	bic.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4934      	ldr	r1, [pc, #208]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c68:	f7fe fb4c 	bl	8001304 <HAL_GetTick>
 8002c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c70:	f7fe fb48 	bl	8001304 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e04f      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 020c 	and.w	r2, r3, #12
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d1eb      	bne.n	8002c70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c98:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d20c      	bcs.n	8002cc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e032      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4916      	ldr	r1, [pc, #88]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	490e      	ldr	r1, [pc, #56]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cfe:	f000 f821 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8002d02:	4602      	mov	r2, r0
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	490a      	ldr	r1, [pc, #40]	; (8002d38 <HAL_RCC_ClockConfig+0x1c0>)
 8002d10:	5ccb      	ldrb	r3, [r1, r3]
 8002d12:	fa22 f303 	lsr.w	r3, r2, r3
 8002d16:	4a09      	ldr	r2, [pc, #36]	; (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe f9f2 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023c00 	.word	0x40023c00
 8002d34:	40023800 	.word	0x40023800
 8002d38:	08006658 	.word	0x08006658
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	20000004 	.word	0x20000004

08002d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d48:	b090      	sub	sp, #64	; 0x40
 8002d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d50:	2300      	movs	r3, #0
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d54:	2300      	movs	r3, #0
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d00d      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x40>
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	f200 80a1 	bhi.w	8002eb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x34>
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d003      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d76:	e09b      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d78:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d7c:	e09b      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d7e:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x188>)
 8002d80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d82:	e098      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d84:	4b4f      	ldr	r3, [pc, #316]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d8e:	4b4d      	ldr	r3, [pc, #308]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d028      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9a:	4b4a      	ldr	r3, [pc, #296]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	099b      	lsrs	r3, r3, #6
 8002da0:	2200      	movs	r2, #0
 8002da2:	623b      	str	r3, [r7, #32]
 8002da4:	627a      	str	r2, [r7, #36]	; 0x24
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002dac:	2100      	movs	r1, #0
 8002dae:	4b47      	ldr	r3, [pc, #284]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x188>)
 8002db0:	fb03 f201 	mul.w	r2, r3, r1
 8002db4:	2300      	movs	r3, #0
 8002db6:	fb00 f303 	mul.w	r3, r0, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	4a43      	ldr	r2, [pc, #268]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x188>)
 8002dbe:	fba0 1202 	umull	r1, r2, r0, r2
 8002dc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dca:	4413      	add	r3, r2
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	61fa      	str	r2, [r7, #28]
 8002dd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dde:	f7fd fa0f 	bl	8000200 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4613      	mov	r3, r2
 8002de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dea:	e053      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dec:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	099b      	lsrs	r3, r3, #6
 8002df2:	2200      	movs	r2, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	617a      	str	r2, [r7, #20]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dfe:	f04f 0b00 	mov.w	fp, #0
 8002e02:	4652      	mov	r2, sl
 8002e04:	465b      	mov	r3, fp
 8002e06:	f04f 0000 	mov.w	r0, #0
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	0159      	lsls	r1, r3, #5
 8002e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e14:	0150      	lsls	r0, r2, #5
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	ebb2 080a 	subs.w	r8, r2, sl
 8002e1e:	eb63 090b 	sbc.w	r9, r3, fp
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e36:	ebb2 0408 	subs.w	r4, r2, r8
 8002e3a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	00eb      	lsls	r3, r5, #3
 8002e48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4c:	00e2      	lsls	r2, r4, #3
 8002e4e:	4614      	mov	r4, r2
 8002e50:	461d      	mov	r5, r3
 8002e52:	eb14 030a 	adds.w	r3, r4, sl
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	eb45 030b 	adc.w	r3, r5, fp
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	028b      	lsls	r3, r1, #10
 8002e6e:	4621      	mov	r1, r4
 8002e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e74:	4621      	mov	r1, r4
 8002e76:	028a      	lsls	r2, r1, #10
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7e:	2200      	movs	r2, #0
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	60fa      	str	r2, [r7, #12]
 8002e84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e88:	f7fd f9ba 	bl	8000200 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4613      	mov	r3, r2
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eae:	e002      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eb2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3740      	adds	r7, #64	; 0x40
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	00f42400 	.word	0x00f42400
 8002ecc:	017d7840 	.word	0x017d7840

08002ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000000 	.word	0x20000000

08002ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eec:	f7ff fff0 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0a9b      	lsrs	r3, r3, #10
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4903      	ldr	r1, [pc, #12]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	08006668 	.word	0x08006668

08002f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f14:	f7ff ffdc 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	0b5b      	lsrs	r3, r3, #13
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	4903      	ldr	r1, [pc, #12]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f26:	5ccb      	ldrb	r3, [r1, r3]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40023800 	.word	0x40023800
 8002f34:	08006668 	.word	0x08006668

08002f38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	220f      	movs	r2, #15
 8002f46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_RCC_GetClockConfig+0x5c>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0203 	and.w	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_RCC_GetClockConfig+0x5c>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <HAL_RCC_GetClockConfig+0x5c>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_GetClockConfig+0x5c>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	08db      	lsrs	r3, r3, #3
 8002f72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f7a:	4b07      	ldr	r3, [pc, #28]	; (8002f98 <HAL_RCC_GetClockConfig+0x60>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 020f 	and.w	r2, r3, #15
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	601a      	str	r2, [r3, #0]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40023c00 	.word	0x40023c00

08002f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e041      	b.n	8003032 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f839 	bl	800303a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f000 f9d8 	bl	8003390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d001      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e04e      	b.n	8003106 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a23      	ldr	r2, [pc, #140]	; (8003114 <HAL_TIM_Base_Start_IT+0xc4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d022      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003092:	d01d      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1f      	ldr	r2, [pc, #124]	; (8003118 <HAL_TIM_Base_Start_IT+0xc8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d018      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1e      	ldr	r2, [pc, #120]	; (800311c <HAL_TIM_Base_Start_IT+0xcc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d013      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <HAL_TIM_Base_Start_IT+0xd0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00e      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <HAL_TIM_Base_Start_IT+0xd4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d009      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <HAL_TIM_Base_Start_IT+0xd8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_TIM_Base_Start_IT+0xdc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d111      	bne.n	80030f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d010      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0201 	orr.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f2:	e007      	b.n	8003104 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40010000 	.word	0x40010000
 8003118:	40000400 	.word	0x40000400
 800311c:	40000800 	.word	0x40000800
 8003120:	40000c00 	.word	0x40000c00
 8003124:	40010400 	.word	0x40010400
 8003128:	40014000 	.word	0x40014000
 800312c:	40001800 	.word	0x40001800

08003130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d122      	bne.n	800318c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b02      	cmp	r3, #2
 8003152:	d11b      	bne.n	800318c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0202 	mvn.w	r2, #2
 800315c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8ee 	bl	8003354 <HAL_TIM_IC_CaptureCallback>
 8003178:	e005      	b.n	8003186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f8e0 	bl	8003340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f8f1 	bl	8003368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d122      	bne.n	80031e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d11b      	bne.n	80031e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0204 	mvn.w	r2, #4
 80031b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8c4 	bl	8003354 <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f8b6 	bl	8003340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f8c7 	bl	8003368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d122      	bne.n	8003234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d11b      	bne.n	8003234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0208 	mvn.w	r2, #8
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2204      	movs	r2, #4
 800320a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f89a 	bl	8003354 <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f88c 	bl	8003340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f89d 	bl	8003368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b10      	cmp	r3, #16
 8003240:	d122      	bne.n	8003288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b10      	cmp	r3, #16
 800324e:	d11b      	bne.n	8003288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0210 	mvn.w	r2, #16
 8003258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2208      	movs	r2, #8
 800325e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f870 	bl	8003354 <HAL_TIM_IC_CaptureCallback>
 8003274:	e005      	b.n	8003282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f862 	bl	8003340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f873 	bl	8003368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d10e      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0201 	mvn.w	r2, #1
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd fd86 	bl	8000dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d10e      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032cc:	2b80      	cmp	r3, #128	; 0x80
 80032ce:	d107      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f902 	bl	80034e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	d10e      	bne.n	800330c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d107      	bne.n	800330c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f838 	bl	800337c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b20      	cmp	r3, #32
 8003318:	d10e      	bne.n	8003338 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b20      	cmp	r3, #32
 8003326:	d107      	bne.n	8003338 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0220 	mvn.w	r2, #32
 8003330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f8cc 	bl	80034d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a40      	ldr	r2, [pc, #256]	; (80034a4 <TIM_Base_SetConfig+0x114>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <TIM_Base_SetConfig+0x40>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ae:	d00f      	beq.n	80033d0 <TIM_Base_SetConfig+0x40>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a3d      	ldr	r2, [pc, #244]	; (80034a8 <TIM_Base_SetConfig+0x118>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00b      	beq.n	80033d0 <TIM_Base_SetConfig+0x40>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a3c      	ldr	r2, [pc, #240]	; (80034ac <TIM_Base_SetConfig+0x11c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d007      	beq.n	80033d0 <TIM_Base_SetConfig+0x40>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a3b      	ldr	r2, [pc, #236]	; (80034b0 <TIM_Base_SetConfig+0x120>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d003      	beq.n	80033d0 <TIM_Base_SetConfig+0x40>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a3a      	ldr	r2, [pc, #232]	; (80034b4 <TIM_Base_SetConfig+0x124>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d108      	bne.n	80033e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <TIM_Base_SetConfig+0x114>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d02b      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f0:	d027      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a2c      	ldr	r2, [pc, #176]	; (80034a8 <TIM_Base_SetConfig+0x118>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d023      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a2b      	ldr	r2, [pc, #172]	; (80034ac <TIM_Base_SetConfig+0x11c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d01f      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <TIM_Base_SetConfig+0x120>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d01b      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <TIM_Base_SetConfig+0x124>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d017      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a28      	ldr	r2, [pc, #160]	; (80034b8 <TIM_Base_SetConfig+0x128>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a27      	ldr	r2, [pc, #156]	; (80034bc <TIM_Base_SetConfig+0x12c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00f      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <TIM_Base_SetConfig+0x130>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00b      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a25      	ldr	r2, [pc, #148]	; (80034c4 <TIM_Base_SetConfig+0x134>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a24      	ldr	r2, [pc, #144]	; (80034c8 <TIM_Base_SetConfig+0x138>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d003      	beq.n	8003442 <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a23      	ldr	r2, [pc, #140]	; (80034cc <TIM_Base_SetConfig+0x13c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d108      	bne.n	8003454 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <TIM_Base_SetConfig+0x114>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_Base_SetConfig+0xf8>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <TIM_Base_SetConfig+0x124>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d103      	bne.n	8003490 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	615a      	str	r2, [r3, #20]
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40010000 	.word	0x40010000
 80034a8:	40000400 	.word	0x40000400
 80034ac:	40000800 	.word	0x40000800
 80034b0:	40000c00 	.word	0x40000c00
 80034b4:	40010400 	.word	0x40010400
 80034b8:	40014000 	.word	0x40014000
 80034bc:	40014400 	.word	0x40014400
 80034c0:	40014800 	.word	0x40014800
 80034c4:	40001800 	.word	0x40001800
 80034c8:	40001c00 	.word	0x40001c00
 80034cc:	40002000 	.word	0x40002000

080034d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e03f      	b.n	800358a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd fda2 	bl	8001068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2224      	movs	r2, #36	; 0x24
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800353a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fddf 	bl	8004100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b08a      	sub	sp, #40	; 0x28
 8003596:	af02      	add	r7, sp, #8
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	4613      	mov	r3, r2
 80035a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d17c      	bne.n	80036ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HAL_UART_Transmit+0x2c>
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e075      	b.n	80036ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_UART_Transmit+0x3e>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e06e      	b.n	80036ae <HAL_UART_Transmit+0x11c>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2221      	movs	r2, #33	; 0x21
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035e6:	f7fd fe8d 	bl	8001304 <HAL_GetTick>
 80035ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003600:	d108      	bne.n	8003614 <HAL_UART_Transmit+0x82>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d104      	bne.n	8003614 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	e003      	b.n	800361c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003624:	e02a      	b.n	800367c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	2180      	movs	r1, #128	; 0x80
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fb1f 	bl	8003c74 <UART_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e036      	b.n	80036ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10b      	bne.n	800365e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003654:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	3302      	adds	r3, #2
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	e007      	b.n	800366e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	781a      	ldrb	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	3301      	adds	r3, #1
 800366c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1cf      	bne.n	8003626 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2200      	movs	r2, #0
 800368e:	2140      	movs	r1, #64	; 0x40
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 faef 	bl	8003c74 <UART_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e006      	b.n	80036ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e000      	b.n	80036ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	4613      	mov	r3, r2
 80036c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d11d      	bne.n	800370c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_UART_Receive_IT+0x26>
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e016      	b.n	800370e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_UART_Receive_IT+0x38>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e00f      	b.n	800370e <HAL_UART_Receive_IT+0x58>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	461a      	mov	r2, r3
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fb24 	bl	8003d50 <UART_Start_Receive_IT>
 8003708:	4603      	mov	r3, r0
 800370a:	e000      	b.n	800370e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b0ba      	sub	sp, #232	; 0xe8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800374a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10f      	bne.n	800377e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <HAL_UART_IRQHandler+0x66>
 800376a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fc07 	bl	8003f8a <UART_Receive_IT>
      return;
 800377c:	e256      	b.n	8003c2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800377e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80de 	beq.w	8003944 <HAL_UART_IRQHandler+0x22c>
 8003788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003798:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80d1 	beq.w	8003944 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_UART_IRQHandler+0xae>
 80037ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0201 	orr.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_UART_IRQHandler+0xd2>
 80037d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f043 0202 	orr.w	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <HAL_UART_IRQHandler+0xf6>
 80037f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f043 0204 	orr.w	r2, r3, #4
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800380e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d011      	beq.n	800383e <HAL_UART_IRQHandler+0x126>
 800381a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d105      	bne.n	8003832 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f043 0208 	orr.w	r2, r3, #8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 81ed 	beq.w	8003c22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_UART_IRQHandler+0x14e>
 8003854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fb92 	bl	8003f8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b40      	cmp	r3, #64	; 0x40
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <HAL_UART_IRQHandler+0x17a>
 800388a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d04f      	beq.n	8003932 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fa9a 	bl	8003dcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b40      	cmp	r3, #64	; 0x40
 80038a4:	d141      	bne.n	800392a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3314      	adds	r3, #20
 80038ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3314      	adds	r3, #20
 80038ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1d9      	bne.n	80038a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d013      	beq.n	8003922 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	4a7d      	ldr	r2, [pc, #500]	; (8003af4 <HAL_UART_IRQHandler+0x3dc>)
 8003900:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe fcbc 	bl	8002284 <HAL_DMA_Abort_IT>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d016      	beq.n	8003940 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800391c:	4610      	mov	r0, r2
 800391e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	e00e      	b.n	8003940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f990 	bl	8003c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	e00a      	b.n	8003940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f98c 	bl	8003c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003930:	e006      	b.n	8003940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f988 	bl	8003c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800393e:	e170      	b.n	8003c22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003940:	bf00      	nop
    return;
 8003942:	e16e      	b.n	8003c22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	2b01      	cmp	r3, #1
 800394a:	f040 814a 	bne.w	8003be2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800394e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003952:	f003 0310 	and.w	r3, r3, #16
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8143 	beq.w	8003be2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800395c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 813c 	beq.w	8003be2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800396a:	2300      	movs	r3, #0
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	f040 80b4 	bne.w	8003af8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800399c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8140 	beq.w	8003c26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039ae:	429a      	cmp	r2, r3
 80039b0:	f080 8139 	bcs.w	8003c26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c6:	f000 8088 	beq.w	8003ada <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	330c      	adds	r3, #12
 80039d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	330c      	adds	r3, #12
 80039f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1d9      	bne.n	80039ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3314      	adds	r3, #20
 8003a1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3314      	adds	r3, #20
 8003a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e1      	bne.n	8003a16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3314      	adds	r3, #20
 8003a58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3314      	adds	r3, #20
 8003a72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e3      	bne.n	8003a52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aaa:	f023 0310 	bic.w	r3, r3, #16
 8003aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003abc:	65ba      	str	r2, [r7, #88]	; 0x58
 8003abe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e3      	bne.n	8003a98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe fb65 	bl	80021a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8b6 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003af0:	e099      	b.n	8003c26 <HAL_UART_IRQHandler+0x50e>
 8003af2:	bf00      	nop
 8003af4:	08003e93 	.word	0x08003e93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 808b 	beq.w	8003c2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8086 	beq.w	8003c2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	330c      	adds	r3, #12
 8003b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b42:	647a      	str	r2, [r7, #68]	; 0x44
 8003b44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e3      	bne.n	8003b1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3314      	adds	r3, #20
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	623b      	str	r3, [r7, #32]
   return(result);
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3314      	adds	r3, #20
 8003b76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b7a:	633a      	str	r2, [r7, #48]	; 0x30
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e3      	bne.n	8003b56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0310 	bic.w	r3, r3, #16
 8003bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003bc0:	61fa      	str	r2, [r7, #28]
 8003bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	69b9      	ldr	r1, [r7, #24]
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e3      	bne.n	8003b9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bd8:	4619      	mov	r1, r3
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f83e 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003be0:	e023      	b.n	8003c2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_UART_IRQHandler+0x4ea>
 8003bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f95d 	bl	8003eba <UART_Transmit_IT>
    return;
 8003c00:	e014      	b.n	8003c2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00e      	beq.n	8003c2c <HAL_UART_IRQHandler+0x514>
 8003c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f99d 	bl	8003f5a <UART_EndTransmit_IT>
    return;
 8003c20:	e004      	b.n	8003c2c <HAL_UART_IRQHandler+0x514>
    return;
 8003c22:	bf00      	nop
 8003c24:	e002      	b.n	8003c2c <HAL_UART_IRQHandler+0x514>
      return;
 8003c26:	bf00      	nop
 8003c28:	e000      	b.n	8003c2c <HAL_UART_IRQHandler+0x514>
      return;
 8003c2a:	bf00      	nop
  }
}
 8003c2c:	37e8      	adds	r7, #232	; 0xe8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop

08003c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b090      	sub	sp, #64	; 0x40
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c84:	e050      	b.n	8003d28 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c8c:	d04c      	beq.n	8003d28 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c94:	f7fd fb36 	bl	8001304 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d241      	bcs.n	8003d28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cc4:	637a      	str	r2, [r7, #52]	; 0x34
 8003cc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e5      	bne.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3314      	adds	r3, #20
 8003cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cf8:	623a      	str	r2, [r7, #32]
 8003cfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	69f9      	ldr	r1, [r7, #28]
 8003cfe:	6a3a      	ldr	r2, [r7, #32]
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e5      	bne.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e00f      	b.n	8003d48 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4013      	ands	r3, r2
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d09f      	beq.n	8003c86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3740      	adds	r7, #64	; 0x40
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	88fa      	ldrh	r2, [r7, #6]
 8003d68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	88fa      	ldrh	r2, [r7, #6]
 8003d6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2222      	movs	r2, #34	; 0x22
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0220 	orr.w	r2, r2, #32
 8003dbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b095      	sub	sp, #84	; 0x54
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003df4:	643a      	str	r2, [r7, #64]	; 0x40
 8003df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e5      	bne.n	8003dd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3314      	adds	r3, #20
 8003e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3314      	adds	r3, #20
 8003e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e30:	e841 2300 	strex	r3, r2, [r1]
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e5      	bne.n	8003e08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d119      	bne.n	8003e78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f023 0310 	bic.w	r3, r3, #16
 8003e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e64:	61ba      	str	r2, [r7, #24]
 8003e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	6979      	ldr	r1, [r7, #20]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	e841 2300 	strex	r3, r2, [r1]
 8003e70:	613b      	str	r3, [r7, #16]
   return(result);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e5      	bne.n	8003e44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e86:	bf00      	nop
 8003e88:	3754      	adds	r7, #84	; 0x54
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff fecb 	bl	8003c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b21      	cmp	r3, #33	; 0x21
 8003ecc:	d13e      	bne.n	8003f4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed6:	d114      	bne.n	8003f02 <UART_Transmit_IT+0x48>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d110      	bne.n	8003f02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	1c9a      	adds	r2, r3, #2
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	621a      	str	r2, [r3, #32]
 8003f00:	e008      	b.n	8003f14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	1c59      	adds	r1, r3, #1
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6211      	str	r1, [r2, #32]
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4619      	mov	r1, r3
 8003f22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10f      	bne.n	8003f48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e000      	b.n	8003f4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
  }
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff fe5a 	bl	8003c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b08c      	sub	sp, #48	; 0x30
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b22      	cmp	r3, #34	; 0x22
 8003f9c:	f040 80ab 	bne.w	80040f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa8:	d117      	bne.n	8003fda <UART_Receive_IT+0x50>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d113      	bne.n	8003fda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	1c9a      	adds	r2, r3, #2
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fd8:	e026      	b.n	8004028 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	d007      	beq.n	8003ffe <UART_Receive_IT+0x74>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <UART_Receive_IT+0x82>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	e008      	b.n	800401e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004018:	b2da      	uxtb	r2, r3
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29b      	uxth	r3, r3
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4619      	mov	r1, r3
 8004036:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004038:	2b00      	cmp	r3, #0
 800403a:	d15a      	bne.n	80040f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0220 	bic.w	r2, r2, #32
 800404a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800405a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	2b01      	cmp	r3, #1
 800407a:	d135      	bne.n	80040e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	613b      	str	r3, [r7, #16]
   return(result);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f023 0310 	bic.w	r3, r3, #16
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	330c      	adds	r3, #12
 80040a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a2:	623a      	str	r2, [r7, #32]
 80040a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	69f9      	ldr	r1, [r7, #28]
 80040a8:	6a3a      	ldr	r2, [r7, #32]
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e5      	bne.n	8004082 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	d10a      	bne.n	80040da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040de:	4619      	mov	r1, r3
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fdbb 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
 80040e6:	e002      	b.n	80040ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fc fb2d 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e002      	b.n	80040f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e000      	b.n	80040f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
  }
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3730      	adds	r7, #48	; 0x30
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004104:	b0c0      	sub	sp, #256	; 0x100
 8004106:	af00      	add	r7, sp, #0
 8004108:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	68d9      	ldr	r1, [r3, #12]
 800411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	ea40 0301 	orr.w	r3, r0, r1
 8004128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800412a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	431a      	orrs	r2, r3
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	431a      	orrs	r2, r3
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004158:	f021 010c 	bic.w	r1, r1, #12
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004166:	430b      	orrs	r3, r1
 8004168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417a:	6999      	ldr	r1, [r3, #24]
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	ea40 0301 	orr.w	r3, r0, r1
 8004186:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b8f      	ldr	r3, [pc, #572]	; (80043cc <UART_SetConfig+0x2cc>)
 8004190:	429a      	cmp	r2, r3
 8004192:	d005      	beq.n	80041a0 <UART_SetConfig+0xa0>
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4b8d      	ldr	r3, [pc, #564]	; (80043d0 <UART_SetConfig+0x2d0>)
 800419c:	429a      	cmp	r2, r3
 800419e:	d104      	bne.n	80041aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041a0:	f7fe feb6 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 80041a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041a8:	e003      	b.n	80041b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041aa:	f7fe fe9d 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 80041ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041bc:	f040 810c 	bne.w	80043d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041d2:	4622      	mov	r2, r4
 80041d4:	462b      	mov	r3, r5
 80041d6:	1891      	adds	r1, r2, r2
 80041d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80041da:	415b      	adcs	r3, r3
 80041dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041e2:	4621      	mov	r1, r4
 80041e4:	eb12 0801 	adds.w	r8, r2, r1
 80041e8:	4629      	mov	r1, r5
 80041ea:	eb43 0901 	adc.w	r9, r3, r1
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004202:	4690      	mov	r8, r2
 8004204:	4699      	mov	r9, r3
 8004206:	4623      	mov	r3, r4
 8004208:	eb18 0303 	adds.w	r3, r8, r3
 800420c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004210:	462b      	mov	r3, r5
 8004212:	eb49 0303 	adc.w	r3, r9, r3
 8004216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004226:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800422a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800422e:	460b      	mov	r3, r1
 8004230:	18db      	adds	r3, r3, r3
 8004232:	653b      	str	r3, [r7, #80]	; 0x50
 8004234:	4613      	mov	r3, r2
 8004236:	eb42 0303 	adc.w	r3, r2, r3
 800423a:	657b      	str	r3, [r7, #84]	; 0x54
 800423c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004240:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004244:	f7fb ffdc 	bl	8000200 <__aeabi_uldivmod>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <UART_SetConfig+0x2d4>)
 800424e:	fba3 2302 	umull	r2, r3, r3, r2
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	011c      	lsls	r4, r3, #4
 8004256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800425a:	2200      	movs	r2, #0
 800425c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004260:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004264:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004268:	4642      	mov	r2, r8
 800426a:	464b      	mov	r3, r9
 800426c:	1891      	adds	r1, r2, r2
 800426e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004270:	415b      	adcs	r3, r3
 8004272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004278:	4641      	mov	r1, r8
 800427a:	eb12 0a01 	adds.w	sl, r2, r1
 800427e:	4649      	mov	r1, r9
 8004280:	eb43 0b01 	adc.w	fp, r3, r1
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004290:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004298:	4692      	mov	sl, r2
 800429a:	469b      	mov	fp, r3
 800429c:	4643      	mov	r3, r8
 800429e:	eb1a 0303 	adds.w	r3, sl, r3
 80042a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042a6:	464b      	mov	r3, r9
 80042a8:	eb4b 0303 	adc.w	r3, fp, r3
 80042ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042c4:	460b      	mov	r3, r1
 80042c6:	18db      	adds	r3, r3, r3
 80042c8:	643b      	str	r3, [r7, #64]	; 0x40
 80042ca:	4613      	mov	r3, r2
 80042cc:	eb42 0303 	adc.w	r3, r2, r3
 80042d0:	647b      	str	r3, [r7, #68]	; 0x44
 80042d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042da:	f7fb ff91 	bl	8000200 <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4611      	mov	r1, r2
 80042e4:	4b3b      	ldr	r3, [pc, #236]	; (80043d4 <UART_SetConfig+0x2d4>)
 80042e6:	fba3 2301 	umull	r2, r3, r3, r1
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	2264      	movs	r2, #100	; 0x64
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
 80042f2:	1acb      	subs	r3, r1, r3
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042fa:	4b36      	ldr	r3, [pc, #216]	; (80043d4 <UART_SetConfig+0x2d4>)
 80042fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004308:	441c      	add	r4, r3
 800430a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800430e:	2200      	movs	r2, #0
 8004310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004314:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004318:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800431c:	4642      	mov	r2, r8
 800431e:	464b      	mov	r3, r9
 8004320:	1891      	adds	r1, r2, r2
 8004322:	63b9      	str	r1, [r7, #56]	; 0x38
 8004324:	415b      	adcs	r3, r3
 8004326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800432c:	4641      	mov	r1, r8
 800432e:	1851      	adds	r1, r2, r1
 8004330:	6339      	str	r1, [r7, #48]	; 0x30
 8004332:	4649      	mov	r1, r9
 8004334:	414b      	adcs	r3, r1
 8004336:	637b      	str	r3, [r7, #52]	; 0x34
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004344:	4659      	mov	r1, fp
 8004346:	00cb      	lsls	r3, r1, #3
 8004348:	4651      	mov	r1, sl
 800434a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800434e:	4651      	mov	r1, sl
 8004350:	00ca      	lsls	r2, r1, #3
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	4603      	mov	r3, r0
 8004358:	4642      	mov	r2, r8
 800435a:	189b      	adds	r3, r3, r2
 800435c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004360:	464b      	mov	r3, r9
 8004362:	460a      	mov	r2, r1
 8004364:	eb42 0303 	adc.w	r3, r2, r3
 8004368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004378:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800437c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004380:	460b      	mov	r3, r1
 8004382:	18db      	adds	r3, r3, r3
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
 8004386:	4613      	mov	r3, r2
 8004388:	eb42 0303 	adc.w	r3, r2, r3
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800438e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004392:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004396:	f7fb ff33 	bl	8000200 <__aeabi_uldivmod>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <UART_SetConfig+0x2d4>)
 80043a0:	fba3 1302 	umull	r1, r3, r3, r2
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	2164      	movs	r1, #100	; 0x64
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	3332      	adds	r3, #50	; 0x32
 80043b2:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <UART_SetConfig+0x2d4>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	f003 0207 	and.w	r2, r3, #7
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4422      	add	r2, r4
 80043c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043c8:	e105      	b.n	80045d6 <UART_SetConfig+0x4d6>
 80043ca:	bf00      	nop
 80043cc:	40011000 	.word	0x40011000
 80043d0:	40011400 	.word	0x40011400
 80043d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043dc:	2200      	movs	r2, #0
 80043de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043ea:	4642      	mov	r2, r8
 80043ec:	464b      	mov	r3, r9
 80043ee:	1891      	adds	r1, r2, r2
 80043f0:	6239      	str	r1, [r7, #32]
 80043f2:	415b      	adcs	r3, r3
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
 80043f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043fa:	4641      	mov	r1, r8
 80043fc:	1854      	adds	r4, r2, r1
 80043fe:	4649      	mov	r1, r9
 8004400:	eb43 0501 	adc.w	r5, r3, r1
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	00eb      	lsls	r3, r5, #3
 800440e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004412:	00e2      	lsls	r2, r4, #3
 8004414:	4614      	mov	r4, r2
 8004416:	461d      	mov	r5, r3
 8004418:	4643      	mov	r3, r8
 800441a:	18e3      	adds	r3, r4, r3
 800441c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004420:	464b      	mov	r3, r9
 8004422:	eb45 0303 	adc.w	r3, r5, r3
 8004426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004446:	4629      	mov	r1, r5
 8004448:	008b      	lsls	r3, r1, #2
 800444a:	4621      	mov	r1, r4
 800444c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004450:	4621      	mov	r1, r4
 8004452:	008a      	lsls	r2, r1, #2
 8004454:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004458:	f7fb fed2 	bl	8000200 <__aeabi_uldivmod>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4b60      	ldr	r3, [pc, #384]	; (80045e4 <UART_SetConfig+0x4e4>)
 8004462:	fba3 2302 	umull	r2, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	011c      	lsls	r4, r3, #4
 800446a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800446e:	2200      	movs	r2, #0
 8004470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004474:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004478:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800447c:	4642      	mov	r2, r8
 800447e:	464b      	mov	r3, r9
 8004480:	1891      	adds	r1, r2, r2
 8004482:	61b9      	str	r1, [r7, #24]
 8004484:	415b      	adcs	r3, r3
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800448c:	4641      	mov	r1, r8
 800448e:	1851      	adds	r1, r2, r1
 8004490:	6139      	str	r1, [r7, #16]
 8004492:	4649      	mov	r1, r9
 8004494:	414b      	adcs	r3, r1
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044a4:	4659      	mov	r1, fp
 80044a6:	00cb      	lsls	r3, r1, #3
 80044a8:	4651      	mov	r1, sl
 80044aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ae:	4651      	mov	r1, sl
 80044b0:	00ca      	lsls	r2, r1, #3
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	4642      	mov	r2, r8
 80044ba:	189b      	adds	r3, r3, r2
 80044bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044c0:	464b      	mov	r3, r9
 80044c2:	460a      	mov	r2, r1
 80044c4:	eb42 0303 	adc.w	r3, r2, r3
 80044c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80044d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044e4:	4649      	mov	r1, r9
 80044e6:	008b      	lsls	r3, r1, #2
 80044e8:	4641      	mov	r1, r8
 80044ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ee:	4641      	mov	r1, r8
 80044f0:	008a      	lsls	r2, r1, #2
 80044f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044f6:	f7fb fe83 	bl	8000200 <__aeabi_uldivmod>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4b39      	ldr	r3, [pc, #228]	; (80045e4 <UART_SetConfig+0x4e4>)
 8004500:	fba3 1302 	umull	r1, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	2164      	movs	r1, #100	; 0x64
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	3332      	adds	r3, #50	; 0x32
 8004512:	4a34      	ldr	r2, [pc, #208]	; (80045e4 <UART_SetConfig+0x4e4>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800451e:	441c      	add	r4, r3
 8004520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004524:	2200      	movs	r2, #0
 8004526:	673b      	str	r3, [r7, #112]	; 0x70
 8004528:	677a      	str	r2, [r7, #116]	; 0x74
 800452a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800452e:	4642      	mov	r2, r8
 8004530:	464b      	mov	r3, r9
 8004532:	1891      	adds	r1, r2, r2
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	415b      	adcs	r3, r3
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800453e:	4641      	mov	r1, r8
 8004540:	1851      	adds	r1, r2, r1
 8004542:	6039      	str	r1, [r7, #0]
 8004544:	4649      	mov	r1, r9
 8004546:	414b      	adcs	r3, r1
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004556:	4659      	mov	r1, fp
 8004558:	00cb      	lsls	r3, r1, #3
 800455a:	4651      	mov	r1, sl
 800455c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004560:	4651      	mov	r1, sl
 8004562:	00ca      	lsls	r2, r1, #3
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	4603      	mov	r3, r0
 800456a:	4642      	mov	r2, r8
 800456c:	189b      	adds	r3, r3, r2
 800456e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004570:	464b      	mov	r3, r9
 8004572:	460a      	mov	r2, r1
 8004574:	eb42 0303 	adc.w	r3, r2, r3
 8004578:	66fb      	str	r3, [r7, #108]	; 0x6c
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	663b      	str	r3, [r7, #96]	; 0x60
 8004584:	667a      	str	r2, [r7, #100]	; 0x64
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004592:	4649      	mov	r1, r9
 8004594:	008b      	lsls	r3, r1, #2
 8004596:	4641      	mov	r1, r8
 8004598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800459c:	4641      	mov	r1, r8
 800459e:	008a      	lsls	r2, r1, #2
 80045a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045a4:	f7fb fe2c 	bl	8000200 <__aeabi_uldivmod>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <UART_SetConfig+0x4e4>)
 80045ae:	fba3 1302 	umull	r1, r3, r3, r2
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	2164      	movs	r1, #100	; 0x64
 80045b6:	fb01 f303 	mul.w	r3, r1, r3
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	3332      	adds	r3, #50	; 0x32
 80045c0:	4a08      	ldr	r2, [pc, #32]	; (80045e4 <UART_SetConfig+0x4e4>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	f003 020f 	and.w	r2, r3, #15
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4422      	add	r2, r4
 80045d4:	609a      	str	r2, [r3, #8]
}
 80045d6:	bf00      	nop
 80045d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045dc:	46bd      	mov	sp, r7
 80045de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e2:	bf00      	nop
 80045e4:	51eb851f 	.word	0x51eb851f

080045e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045fa:	2b84      	cmp	r3, #132	; 0x84
 80045fc:	d005      	beq.n	800460a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4413      	add	r3, r2
 8004606:	3303      	adds	r3, #3
 8004608:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800460a:	68fb      	ldr	r3, [r7, #12]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800461c:	f000 fdba 	bl	8005194 <vTaskStartScheduler>
  
  return osOK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	bd80      	pop	{r7, pc}

08004626 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004628:	b089      	sub	sp, #36	; 0x24
 800462a:	af04      	add	r7, sp, #16
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d020      	beq.n	800467a <osThreadCreate+0x54>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01c      	beq.n	800467a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685c      	ldr	r4, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681d      	ldr	r5, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691e      	ldr	r6, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff ffc8 	bl	80045e8 <makeFreeRtosPriority>
 8004658:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004662:	9202      	str	r2, [sp, #8]
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	9100      	str	r1, [sp, #0]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	4632      	mov	r2, r6
 800466c:	4629      	mov	r1, r5
 800466e:	4620      	mov	r0, r4
 8004670:	f000 fbc8 	bl	8004e04 <xTaskCreateStatic>
 8004674:	4603      	mov	r3, r0
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	e01c      	b.n	80046b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685c      	ldr	r4, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004686:	b29e      	uxth	r6, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ffaa 	bl	80045e8 <makeFreeRtosPriority>
 8004694:	4602      	mov	r2, r0
 8004696:	f107 030c 	add.w	r3, r7, #12
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	9200      	str	r2, [sp, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	4632      	mov	r2, r6
 80046a2:	4629      	mov	r1, r5
 80046a4:	4620      	mov	r0, r4
 80046a6:	f000 fc0a 	bl	8004ebe <xTaskCreate>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d001      	beq.n	80046b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046b4:	68fb      	ldr	r3, [r7, #12]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <osDelay+0x16>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	e000      	b.n	80046d6 <osDelay+0x18>
 80046d4:	2301      	movs	r3, #1
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fd28 	bl	800512c <vTaskDelay>
  
  return osOK;
 80046dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f103 0208 	add.w	r2, r3, #8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f103 0208 	add.w	r2, r3, #8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f103 0208 	add.w	r2, r3, #8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	601a      	str	r2, [r3, #0]
}
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800479e:	d103      	bne.n	80047a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e00c      	b.n	80047c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3308      	adds	r3, #8
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e002      	b.n	80047b6 <vListInsert+0x2e>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d2f6      	bcs.n	80047b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6892      	ldr	r2, [r2, #8]
 8004810:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6852      	ldr	r2, [r2, #4]
 800481a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	d103      	bne.n	800482e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	1e5a      	subs	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <xQueueGenericReset+0x2a>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	60bb      	str	r3, [r7, #8]
}
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800487a:	f001 fb53 	bl	8005f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004886:	68f9      	ldr	r1, [r7, #12]
 8004888:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	441a      	add	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	3b01      	subs	r3, #1
 80048ac:	68f9      	ldr	r1, [r7, #12]
 80048ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	441a      	add	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	22ff      	movs	r2, #255	; 0xff
 80048be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	22ff      	movs	r2, #255	; 0xff
 80048c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d114      	bne.n	80048fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01a      	beq.n	800490e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3310      	adds	r3, #16
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fe9b 	bl	8005618 <xTaskRemoveFromEventList>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d012      	beq.n	800490e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <xQueueGenericReset+0xcc>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	e009      	b.n	800490e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3310      	adds	r3, #16
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff fef1 	bl	80046e6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3324      	adds	r3, #36	; 0x24
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff feec 	bl	80046e6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800490e:	f001 fb39 	bl	8005f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004912:	2301      	movs	r3, #1
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	e000ed04 	.word	0xe000ed04

08004920 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	; 0x28
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	4613      	mov	r3, r2
 800492c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	613b      	str	r3, [r7, #16]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	3348      	adds	r3, #72	; 0x48
 8004958:	4618      	mov	r0, r3
 800495a:	f001 fc05 	bl	8006168 <pvPortMalloc>
 800495e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d011      	beq.n	800498a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	3348      	adds	r3, #72	; 0x48
 800496e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004978:	79fa      	ldrb	r2, [r7, #7]
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	68b9      	ldr	r1, [r7, #8]
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f805 	bl	8004994 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800498a:	69bb      	ldr	r3, [r7, #24]
	}
 800498c:	4618      	mov	r0, r3
 800498e:	3720      	adds	r7, #32
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d103      	bne.n	80049b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e002      	b.n	80049b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049c2:	2101      	movs	r1, #1
 80049c4:	69b8      	ldr	r0, [r7, #24]
 80049c6:	f7ff ff43 	bl	8004850 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b08e      	sub	sp, #56	; 0x38
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	623b      	str	r3, [r7, #32]
}
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <xQueueGiveFromISR+0x48>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	61fb      	str	r3, [r7, #28]
}
 8004a16:	bf00      	nop
 8004a18:	e7fe      	b.n	8004a18 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d103      	bne.n	8004a2a <xQueueGiveFromISR+0x58>
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <xQueueGiveFromISR+0x5c>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <xQueueGiveFromISR+0x5e>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <xQueueGiveFromISR+0x78>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	61bb      	str	r3, [r7, #24]
}
 8004a46:	bf00      	nop
 8004a48:	e7fe      	b.n	8004a48 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a4a:	f001 fb4d 	bl	80060e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a4e:	f3ef 8211 	mrs	r2, BASEPRI
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	617a      	str	r2, [r7, #20]
 8004a64:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a66:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d22b      	bcs.n	8004ad2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a94:	d112      	bne.n	8004abc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d016      	beq.n	8004acc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	3324      	adds	r3, #36	; 0x24
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fdb8 	bl	8005618 <xTaskRemoveFromEventList>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00e      	beq.n	8004acc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00b      	beq.n	8004acc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e007      	b.n	8004acc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	b25a      	sxtb	r2, r3
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004acc:	2301      	movs	r3, #1
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad0:	e001      	b.n	8004ad6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ae0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3738      	adds	r7, #56	; 0x38
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08e      	sub	sp, #56	; 0x38
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004af6:	2300      	movs	r3, #0
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	623b      	str	r3, [r7, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	61fb      	str	r3, [r7, #28]
}
 8004b38:	bf00      	nop
 8004b3a:	e7fe      	b.n	8004b3a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b3c:	f000 ff28 	bl	8005990 <xTaskGetSchedulerState>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <xQueueSemaphoreTake+0x60>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <xQueueSemaphoreTake+0x64>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <xQueueSemaphoreTake+0x66>
 8004b50:	2300      	movs	r3, #0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	61bb      	str	r3, [r7, #24]
}
 8004b68:	bf00      	nop
 8004b6a:	e7fe      	b.n	8004b6a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b6c:	f001 f9da 	bl	8005f24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d024      	beq.n	8004bc6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	1e5a      	subs	r2, r3, #1
 8004b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d104      	bne.n	8004b96 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004b8c:	f001 f822 	bl	8005bd4 <pvTaskIncrementMutexHeldCount>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00f      	beq.n	8004bbe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	3310      	adds	r3, #16
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fd38 	bl	8005618 <xTaskRemoveFromEventList>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bae:	4b54      	ldr	r3, [pc, #336]	; (8004d00 <xQueueSemaphoreTake+0x214>)
 8004bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bbe:	f001 f9e1 	bl	8005f84 <vPortExitCritical>
				return pdPASS;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e097      	b.n	8004cf6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d111      	bne.n	8004bf0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	617b      	str	r3, [r7, #20]
}
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004be8:	f001 f9cc 	bl	8005f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e082      	b.n	8004cf6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bf6:	f107 030c 	add.w	r3, r7, #12
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fd6e 	bl	80056dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c00:	2301      	movs	r3, #1
 8004c02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c04:	f001 f9be 	bl	8005f84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c08:	f000 fb24 	bl	8005254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c0c:	f001 f98a 	bl	8005f24 <vPortEnterCritical>
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c16:	b25b      	sxtb	r3, r3
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c1c:	d103      	bne.n	8004c26 <xQueueSemaphoreTake+0x13a>
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c2c:	b25b      	sxtb	r3, r3
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c32:	d103      	bne.n	8004c3c <xQueueSemaphoreTake+0x150>
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c3c:	f001 f9a2 	bl	8005f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c40:	463a      	mov	r2, r7
 8004c42:	f107 030c 	add.w	r3, r7, #12
 8004c46:	4611      	mov	r1, r2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fd5d 	bl	8005708 <xTaskCheckForTimeOut>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d132      	bne.n	8004cba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c56:	f000 f8bf 	bl	8004dd8 <prvIsQueueEmpty>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d026      	beq.n	8004cae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d109      	bne.n	8004c7c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004c68:	f001 f95c 	bl	8005f24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 feab 	bl	80059cc <xTaskPriorityInherit>
 8004c76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004c78:	f001 f984 	bl	8005f84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7e:	3324      	adds	r3, #36	; 0x24
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	4611      	mov	r1, r2
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fca3 	bl	80055d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c8c:	f000 f852 	bl	8004d34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c90:	f000 faee 	bl	8005270 <xTaskResumeAll>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f47f af68 	bne.w	8004b6c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004c9c:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <xQueueSemaphoreTake+0x214>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	e75e      	b.n	8004b6c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cb0:	f000 f840 	bl	8004d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cb4:	f000 fadc 	bl	8005270 <xTaskResumeAll>
 8004cb8:	e758      	b.n	8004b6c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cbc:	f000 f83a 	bl	8004d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cc0:	f000 fad6 	bl	8005270 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cc6:	f000 f887 	bl	8004dd8 <prvIsQueueEmpty>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f43f af4d 	beq.w	8004b6c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00d      	beq.n	8004cf4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004cd8:	f001 f924 	bl	8005f24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cde:	f000 f811 	bl	8004d04 <prvGetDisinheritPriorityAfterTimeout>
 8004ce2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fee4 	bl	8005ab8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004cf0:	f001 f948 	bl	8005f84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3738      	adds	r7, #56	; 0x38
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	e000ed04 	.word	0xe000ed04

08004d04 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f1c3 0307 	rsb	r3, r3, #7
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	e001      	b.n	8004d26 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d26:	68fb      	ldr	r3, [r7, #12]
	}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d3c:	f001 f8f2 	bl	8005f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d48:	e011      	b.n	8004d6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d012      	beq.n	8004d78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3324      	adds	r3, #36	; 0x24
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fc5e 	bl	8005618 <xTaskRemoveFromEventList>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d62:	f000 fd33 	bl	80057cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	dce9      	bgt.n	8004d4a <prvUnlockQueue+0x16>
 8004d76:	e000      	b.n	8004d7a <prvUnlockQueue+0x46>
					break;
 8004d78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	22ff      	movs	r2, #255	; 0xff
 8004d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d82:	f001 f8ff 	bl	8005f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d86:	f001 f8cd 	bl	8005f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d92:	e011      	b.n	8004db8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d012      	beq.n	8004dc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3310      	adds	r3, #16
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fc39 	bl	8005618 <xTaskRemoveFromEventList>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004dac:	f000 fd0e 	bl	80057cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004db0:	7bbb      	ldrb	r3, [r7, #14]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	dce9      	bgt.n	8004d94 <prvUnlockQueue+0x60>
 8004dc0:	e000      	b.n	8004dc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004dc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	22ff      	movs	r2, #255	; 0xff
 8004dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004dcc:	f001 f8da 	bl	8005f84 <vPortExitCritical>
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004de0:	f001 f8a0 	bl	8005f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dec:	2301      	movs	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	e001      	b.n	8004df6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004df6:	f001 f8c5 	bl	8005f84 <vPortExitCritical>

	return xReturn;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08e      	sub	sp, #56	; 0x38
 8004e08:	af04      	add	r7, sp, #16
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10a      	bne.n	8004e2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	623b      	str	r3, [r7, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	e7fe      	b.n	8004e2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10a      	bne.n	8004e4a <xTaskCreateStatic+0x46>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	61fb      	str	r3, [r7, #28]
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e4a:	2354      	movs	r3, #84	; 0x54
 8004e4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2b54      	cmp	r3, #84	; 0x54
 8004e52:	d00a      	beq.n	8004e6a <xTaskCreateStatic+0x66>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	61bb      	str	r3, [r7, #24]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d01e      	beq.n	8004eb0 <xTaskCreateStatic+0xac>
 8004e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01b      	beq.n	8004eb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9303      	str	r3, [sp, #12]
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	9302      	str	r3, [sp, #8]
 8004e92:	f107 0314 	add.w	r3, r7, #20
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f850 	bl	8004f48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eaa:	f000 f8d5 	bl	8005058 <prvAddNewTaskToReadyList>
 8004eae:	e001      	b.n	8004eb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004eb4:	697b      	ldr	r3, [r7, #20]
	}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3728      	adds	r7, #40	; 0x28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b08c      	sub	sp, #48	; 0x30
 8004ec2:	af04      	add	r7, sp, #16
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	603b      	str	r3, [r7, #0]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 f948 	bl	8006168 <pvPortMalloc>
 8004ed8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00e      	beq.n	8004efe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ee0:	2054      	movs	r0, #84	; 0x54
 8004ee2:	f001 f941 	bl	8006168 <pvPortMalloc>
 8004ee6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ef4:	e005      	b.n	8004f02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ef6:	6978      	ldr	r0, [r7, #20]
 8004ef8:	f001 fa02 	bl	8006300 <vPortFree>
 8004efc:	e001      	b.n	8004f02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d017      	beq.n	8004f38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f10:	88fa      	ldrh	r2, [r7, #6]
 8004f12:	2300      	movs	r3, #0
 8004f14:	9303      	str	r3, [sp, #12]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	9302      	str	r3, [sp, #8]
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	9301      	str	r3, [sp, #4]
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f80e 	bl	8004f48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f2c:	69f8      	ldr	r0, [r7, #28]
 8004f2e:	f000 f893 	bl	8005058 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f32:	2301      	movs	r3, #1
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	e002      	b.n	8004f3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f60:	3b01      	subs	r3, #1
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f023 0307 	bic.w	r3, r3, #7
 8004f6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	617b      	str	r3, [r7, #20]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01f      	beq.n	8004fd6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	e012      	b.n	8004fc2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	7819      	ldrb	r1, [r3, #0]
 8004fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	3334      	adds	r3, #52	; 0x34
 8004fac:	460a      	mov	r2, r1
 8004fae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d006      	beq.n	8004fca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2b0f      	cmp	r3, #15
 8004fc6:	d9e9      	bls.n	8004f9c <prvInitialiseNewTask+0x54>
 8004fc8:	e000      	b.n	8004fcc <prvInitialiseNewTask+0x84>
			{
				break;
 8004fca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fd4:	e003      	b.n	8004fde <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	2b06      	cmp	r3, #6
 8004fe2:	d901      	bls.n	8004fe8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fe4:	2306      	movs	r3, #6
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fb91 	bl	8004726 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	3318      	adds	r3, #24
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fb8c 	bl	8004726 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005012:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	f1c3 0207 	rsb	r2, r3, #7
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005022:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	2200      	movs	r2, #0
 8005028:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	68f9      	ldr	r1, [r7, #12]
 8005036:	69b8      	ldr	r0, [r7, #24]
 8005038:	f000 fe46 	bl	8005cc8 <pxPortInitialiseStack>
 800503c:	4602      	mov	r2, r0
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800504c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800504e:	bf00      	nop
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005060:	f000 ff60 	bl	8005f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005064:	4b2a      	ldr	r3, [pc, #168]	; (8005110 <prvAddNewTaskToReadyList+0xb8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3301      	adds	r3, #1
 800506a:	4a29      	ldr	r2, [pc, #164]	; (8005110 <prvAddNewTaskToReadyList+0xb8>)
 800506c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800506e:	4b29      	ldr	r3, [pc, #164]	; (8005114 <prvAddNewTaskToReadyList+0xbc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005076:	4a27      	ldr	r2, [pc, #156]	; (8005114 <prvAddNewTaskToReadyList+0xbc>)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800507c:	4b24      	ldr	r3, [pc, #144]	; (8005110 <prvAddNewTaskToReadyList+0xb8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d110      	bne.n	80050a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005084:	f000 fbc6 	bl	8005814 <prvInitialiseTaskLists>
 8005088:	e00d      	b.n	80050a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800508a:	4b23      	ldr	r3, [pc, #140]	; (8005118 <prvAddNewTaskToReadyList+0xc0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005092:	4b20      	ldr	r3, [pc, #128]	; (8005114 <prvAddNewTaskToReadyList+0xbc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	429a      	cmp	r2, r3
 800509e:	d802      	bhi.n	80050a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050a0:	4a1c      	ldr	r2, [pc, #112]	; (8005114 <prvAddNewTaskToReadyList+0xbc>)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050a6:	4b1d      	ldr	r3, [pc, #116]	; (800511c <prvAddNewTaskToReadyList+0xc4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3301      	adds	r3, #1
 80050ac:	4a1b      	ldr	r2, [pc, #108]	; (800511c <prvAddNewTaskToReadyList+0xc4>)
 80050ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	2201      	movs	r2, #1
 80050b6:	409a      	lsls	r2, r3
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <prvAddNewTaskToReadyList+0xc8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4313      	orrs	r3, r2
 80050be:	4a18      	ldr	r2, [pc, #96]	; (8005120 <prvAddNewTaskToReadyList+0xc8>)
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4a15      	ldr	r2, [pc, #84]	; (8005124 <prvAddNewTaskToReadyList+0xcc>)
 80050d0:	441a      	add	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3304      	adds	r3, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f7ff fb31 	bl	8004740 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050de:	f000 ff51 	bl	8005f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050e2:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <prvAddNewTaskToReadyList+0xc0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00e      	beq.n	8005108 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050ea:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <prvAddNewTaskToReadyList+0xbc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d207      	bcs.n	8005108 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050f8:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <prvAddNewTaskToReadyList+0xd0>)
 80050fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	200005ec 	.word	0x200005ec
 8005114:	200004ec 	.word	0x200004ec
 8005118:	200005f8 	.word	0x200005f8
 800511c:	20000608 	.word	0x20000608
 8005120:	200005f4 	.word	0x200005f4
 8005124:	200004f0 	.word	0x200004f0
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d017      	beq.n	800516e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800513e:	4b13      	ldr	r3, [pc, #76]	; (800518c <vTaskDelay+0x60>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <vTaskDelay+0x30>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	60bb      	str	r3, [r7, #8]
}
 8005158:	bf00      	nop
 800515a:	e7fe      	b.n	800515a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800515c:	f000 f87a 	bl	8005254 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005160:	2100      	movs	r1, #0
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fd4a 	bl	8005bfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005168:	f000 f882 	bl	8005270 <xTaskResumeAll>
 800516c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d107      	bne.n	8005184 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005174:	4b06      	ldr	r3, [pc, #24]	; (8005190 <vTaskDelay+0x64>)
 8005176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000614 	.word	0x20000614
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	; 0x28
 8005198:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800519a:	2300      	movs	r3, #0
 800519c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051a2:	463a      	mov	r2, r7
 80051a4:	1d39      	adds	r1, r7, #4
 80051a6:	f107 0308 	add.w	r3, r7, #8
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fb f9aa 	bl	8000504 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051b0:	6839      	ldr	r1, [r7, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	9202      	str	r2, [sp, #8]
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	2300      	movs	r3, #0
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	2300      	movs	r3, #0
 80051c0:	460a      	mov	r2, r1
 80051c2:	491e      	ldr	r1, [pc, #120]	; (800523c <vTaskStartScheduler+0xa8>)
 80051c4:	481e      	ldr	r0, [pc, #120]	; (8005240 <vTaskStartScheduler+0xac>)
 80051c6:	f7ff fe1d 	bl	8004e04 <xTaskCreateStatic>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <vTaskStartScheduler+0xb0>)
 80051ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051d0:	4b1c      	ldr	r3, [pc, #112]	; (8005244 <vTaskStartScheduler+0xb0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051d8:	2301      	movs	r3, #1
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	e001      	b.n	80051e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d116      	bne.n	8005216 <vTaskStartScheduler+0x82>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	613b      	str	r3, [r7, #16]
}
 80051fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051fc:	4b12      	ldr	r3, [pc, #72]	; (8005248 <vTaskStartScheduler+0xb4>)
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005202:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005204:	4b11      	ldr	r3, [pc, #68]	; (800524c <vTaskStartScheduler+0xb8>)
 8005206:	2201      	movs	r2, #1
 8005208:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800520a:	4b11      	ldr	r3, [pc, #68]	; (8005250 <vTaskStartScheduler+0xbc>)
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005210:	f000 fde6 	bl	8005de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005214:	e00e      	b.n	8005234 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800521c:	d10a      	bne.n	8005234 <vTaskStartScheduler+0xa0>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	60fb      	str	r3, [r7, #12]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <vTaskStartScheduler+0x9e>
}
 8005234:	bf00      	nop
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	08006650 	.word	0x08006650
 8005240:	080057e5 	.word	0x080057e5
 8005244:	20000610 	.word	0x20000610
 8005248:	2000060c 	.word	0x2000060c
 800524c:	200005f8 	.word	0x200005f8
 8005250:	200005f0 	.word	0x200005f0

08005254 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005258:	4b04      	ldr	r3, [pc, #16]	; (800526c <vTaskSuspendAll+0x18>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	4a03      	ldr	r2, [pc, #12]	; (800526c <vTaskSuspendAll+0x18>)
 8005260:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005262:	bf00      	nop
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	20000614 	.word	0x20000614

08005270 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800527a:	2300      	movs	r3, #0
 800527c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800527e:	4b41      	ldr	r3, [pc, #260]	; (8005384 <xTaskResumeAll+0x114>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <xTaskResumeAll+0x2c>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	603b      	str	r3, [r7, #0]
}
 8005298:	bf00      	nop
 800529a:	e7fe      	b.n	800529a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800529c:	f000 fe42 	bl	8005f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052a0:	4b38      	ldr	r3, [pc, #224]	; (8005384 <xTaskResumeAll+0x114>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	4a37      	ldr	r2, [pc, #220]	; (8005384 <xTaskResumeAll+0x114>)
 80052a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052aa:	4b36      	ldr	r3, [pc, #216]	; (8005384 <xTaskResumeAll+0x114>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d161      	bne.n	8005376 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052b2:	4b35      	ldr	r3, [pc, #212]	; (8005388 <xTaskResumeAll+0x118>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d05d      	beq.n	8005376 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052ba:	e02e      	b.n	800531a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052bc:	4b33      	ldr	r3, [pc, #204]	; (800538c <xTaskResumeAll+0x11c>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3318      	adds	r3, #24
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fa96 	bl	80047fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff fa91 	bl	80047fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	2201      	movs	r2, #1
 80052de:	409a      	lsls	r2, r3
 80052e0:	4b2b      	ldr	r3, [pc, #172]	; (8005390 <xTaskResumeAll+0x120>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	4a2a      	ldr	r2, [pc, #168]	; (8005390 <xTaskResumeAll+0x120>)
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4a27      	ldr	r2, [pc, #156]	; (8005394 <xTaskResumeAll+0x124>)
 80052f8:	441a      	add	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3304      	adds	r3, #4
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f7ff fa1d 	bl	8004740 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530a:	4b23      	ldr	r3, [pc, #140]	; (8005398 <xTaskResumeAll+0x128>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	429a      	cmp	r2, r3
 8005312:	d302      	bcc.n	800531a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005314:	4b21      	ldr	r3, [pc, #132]	; (800539c <xTaskResumeAll+0x12c>)
 8005316:	2201      	movs	r2, #1
 8005318:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800531a:	4b1c      	ldr	r3, [pc, #112]	; (800538c <xTaskResumeAll+0x11c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1cc      	bne.n	80052bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005328:	f000 fb12 	bl	8005950 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800532c:	4b1c      	ldr	r3, [pc, #112]	; (80053a0 <xTaskResumeAll+0x130>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d010      	beq.n	800535a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005338:	f000 f836 	bl	80053a8 <xTaskIncrementTick>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005342:	4b16      	ldr	r3, [pc, #88]	; (800539c <xTaskResumeAll+0x12c>)
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3b01      	subs	r3, #1
 800534c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1f1      	bne.n	8005338 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005354:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <xTaskResumeAll+0x130>)
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800535a:	4b10      	ldr	r3, [pc, #64]	; (800539c <xTaskResumeAll+0x12c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d009      	beq.n	8005376 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005362:	2301      	movs	r3, #1
 8005364:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <xTaskResumeAll+0x134>)
 8005368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005376:	f000 fe05 	bl	8005f84 <vPortExitCritical>

	return xAlreadyYielded;
 800537a:	68bb      	ldr	r3, [r7, #8]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	20000614 	.word	0x20000614
 8005388:	200005ec 	.word	0x200005ec
 800538c:	200005ac 	.word	0x200005ac
 8005390:	200005f4 	.word	0x200005f4
 8005394:	200004f0 	.word	0x200004f0
 8005398:	200004ec 	.word	0x200004ec
 800539c:	20000600 	.word	0x20000600
 80053a0:	200005fc 	.word	0x200005fc
 80053a4:	e000ed04 	.word	0xe000ed04

080053a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053b2:	4b4e      	ldr	r3, [pc, #312]	; (80054ec <xTaskIncrementTick+0x144>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f040 808e 	bne.w	80054d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053bc:	4b4c      	ldr	r3, [pc, #304]	; (80054f0 <xTaskIncrementTick+0x148>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3301      	adds	r3, #1
 80053c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053c4:	4a4a      	ldr	r2, [pc, #296]	; (80054f0 <xTaskIncrementTick+0x148>)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d120      	bne.n	8005412 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80053d0:	4b48      	ldr	r3, [pc, #288]	; (80054f4 <xTaskIncrementTick+0x14c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	603b      	str	r3, [r7, #0]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <xTaskIncrementTick+0x46>
 80053f0:	4b40      	ldr	r3, [pc, #256]	; (80054f4 <xTaskIncrementTick+0x14c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	4b40      	ldr	r3, [pc, #256]	; (80054f8 <xTaskIncrementTick+0x150>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a3e      	ldr	r2, [pc, #248]	; (80054f4 <xTaskIncrementTick+0x14c>)
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4a3e      	ldr	r2, [pc, #248]	; (80054f8 <xTaskIncrementTick+0x150>)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4b3d      	ldr	r3, [pc, #244]	; (80054fc <xTaskIncrementTick+0x154>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3301      	adds	r3, #1
 800540a:	4a3c      	ldr	r2, [pc, #240]	; (80054fc <xTaskIncrementTick+0x154>)
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	f000 fa9f 	bl	8005950 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005412:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <xTaskIncrementTick+0x158>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	429a      	cmp	r2, r3
 800541a:	d348      	bcc.n	80054ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800541c:	4b35      	ldr	r3, [pc, #212]	; (80054f4 <xTaskIncrementTick+0x14c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005426:	4b36      	ldr	r3, [pc, #216]	; (8005500 <xTaskIncrementTick+0x158>)
 8005428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800542c:	601a      	str	r2, [r3, #0]
					break;
 800542e:	e03e      	b.n	80054ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005430:	4b30      	ldr	r3, [pc, #192]	; (80054f4 <xTaskIncrementTick+0x14c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	429a      	cmp	r2, r3
 8005446:	d203      	bcs.n	8005450 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005448:	4a2d      	ldr	r2, [pc, #180]	; (8005500 <xTaskIncrementTick+0x158>)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800544e:	e02e      	b.n	80054ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	3304      	adds	r3, #4
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff f9d0 	bl	80047fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	2b00      	cmp	r3, #0
 8005460:	d004      	beq.n	800546c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	3318      	adds	r3, #24
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff f9c7 	bl	80047fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	2201      	movs	r2, #1
 8005472:	409a      	lsls	r2, r3
 8005474:	4b23      	ldr	r3, [pc, #140]	; (8005504 <xTaskIncrementTick+0x15c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4313      	orrs	r3, r2
 800547a:	4a22      	ldr	r2, [pc, #136]	; (8005504 <xTaskIncrementTick+0x15c>)
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4a1f      	ldr	r2, [pc, #124]	; (8005508 <xTaskIncrementTick+0x160>)
 800548c:	441a      	add	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	3304      	adds	r3, #4
 8005492:	4619      	mov	r1, r3
 8005494:	4610      	mov	r0, r2
 8005496:	f7ff f953 	bl	8004740 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549e:	4b1b      	ldr	r3, [pc, #108]	; (800550c <xTaskIncrementTick+0x164>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d3b9      	bcc.n	800541c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80054a8:	2301      	movs	r3, #1
 80054aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054ac:	e7b6      	b.n	800541c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054ae:	4b17      	ldr	r3, [pc, #92]	; (800550c <xTaskIncrementTick+0x164>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b4:	4914      	ldr	r1, [pc, #80]	; (8005508 <xTaskIncrementTick+0x160>)
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d901      	bls.n	80054ca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80054c6:	2301      	movs	r3, #1
 80054c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80054ca:	4b11      	ldr	r3, [pc, #68]	; (8005510 <xTaskIncrementTick+0x168>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d007      	beq.n	80054e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80054d2:	2301      	movs	r3, #1
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	e004      	b.n	80054e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80054d8:	4b0e      	ldr	r3, [pc, #56]	; (8005514 <xTaskIncrementTick+0x16c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3301      	adds	r3, #1
 80054de:	4a0d      	ldr	r2, [pc, #52]	; (8005514 <xTaskIncrementTick+0x16c>)
 80054e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80054e2:	697b      	ldr	r3, [r7, #20]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20000614 	.word	0x20000614
 80054f0:	200005f0 	.word	0x200005f0
 80054f4:	200005a4 	.word	0x200005a4
 80054f8:	200005a8 	.word	0x200005a8
 80054fc:	20000604 	.word	0x20000604
 8005500:	2000060c 	.word	0x2000060c
 8005504:	200005f4 	.word	0x200005f4
 8005508:	200004f0 	.word	0x200004f0
 800550c:	200004ec 	.word	0x200004ec
 8005510:	20000600 	.word	0x20000600
 8005514:	200005fc 	.word	0x200005fc

08005518 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800551e:	4b27      	ldr	r3, [pc, #156]	; (80055bc <vTaskSwitchContext+0xa4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005526:	4b26      	ldr	r3, [pc, #152]	; (80055c0 <vTaskSwitchContext+0xa8>)
 8005528:	2201      	movs	r2, #1
 800552a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800552c:	e03f      	b.n	80055ae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800552e:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <vTaskSwitchContext+0xa8>)
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005534:	4b23      	ldr	r3, [pc, #140]	; (80055c4 <vTaskSwitchContext+0xac>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	fab3 f383 	clz	r3, r3
 8005540:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005542:	7afb      	ldrb	r3, [r7, #11]
 8005544:	f1c3 031f 	rsb	r3, r3, #31
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	491f      	ldr	r1, [pc, #124]	; (80055c8 <vTaskSwitchContext+0xb0>)
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <vTaskSwitchContext+0x5c>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	607b      	str	r3, [r7, #4]
}
 8005570:	bf00      	nop
 8005572:	e7fe      	b.n	8005572 <vTaskSwitchContext+0x5a>
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4a12      	ldr	r2, [pc, #72]	; (80055c8 <vTaskSwitchContext+0xb0>)
 8005580:	4413      	add	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	605a      	str	r2, [r3, #4]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	3308      	adds	r3, #8
 8005596:	429a      	cmp	r2, r3
 8005598:	d104      	bne.n	80055a4 <vTaskSwitchContext+0x8c>
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	605a      	str	r2, [r3, #4]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	4a08      	ldr	r2, [pc, #32]	; (80055cc <vTaskSwitchContext+0xb4>)
 80055ac:	6013      	str	r3, [r2, #0]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000614 	.word	0x20000614
 80055c0:	20000600 	.word	0x20000600
 80055c4:	200005f4 	.word	0x200005f4
 80055c8:	200004f0 	.word	0x200004f0
 80055cc:	200004ec 	.word	0x200004ec

080055d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60fb      	str	r3, [r7, #12]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055f6:	4b07      	ldr	r3, [pc, #28]	; (8005614 <vTaskPlaceOnEventList+0x44>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3318      	adds	r3, #24
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff f8c2 	bl	8004788 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005604:	2101      	movs	r1, #1
 8005606:	6838      	ldr	r0, [r7, #0]
 8005608:	f000 faf8 	bl	8005bfc <prvAddCurrentTaskToDelayedList>
}
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	200004ec 	.word	0x200004ec

08005618 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10a      	bne.n	8005644 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	60fb      	str	r3, [r7, #12]
}
 8005640:	bf00      	nop
 8005642:	e7fe      	b.n	8005642 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	3318      	adds	r3, #24
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff f8d6 	bl	80047fa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564e:	4b1d      	ldr	r3, [pc, #116]	; (80056c4 <xTaskRemoveFromEventList+0xac>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d11c      	bne.n	8005690 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3304      	adds	r3, #4
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff f8cd 	bl	80047fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	2201      	movs	r2, #1
 8005666:	409a      	lsls	r2, r3
 8005668:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <xTaskRemoveFromEventList+0xb0>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4313      	orrs	r3, r2
 800566e:	4a16      	ldr	r2, [pc, #88]	; (80056c8 <xTaskRemoveFromEventList+0xb0>)
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4a13      	ldr	r2, [pc, #76]	; (80056cc <xTaskRemoveFromEventList+0xb4>)
 8005680:	441a      	add	r2, r3
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	3304      	adds	r3, #4
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f7ff f859 	bl	8004740 <vListInsertEnd>
 800568e:	e005      	b.n	800569c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	3318      	adds	r3, #24
 8005694:	4619      	mov	r1, r3
 8005696:	480e      	ldr	r0, [pc, #56]	; (80056d0 <xTaskRemoveFromEventList+0xb8>)
 8005698:	f7ff f852 	bl	8004740 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <xTaskRemoveFromEventList+0xbc>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d905      	bls.n	80056b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056aa:	2301      	movs	r3, #1
 80056ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056ae:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <xTaskRemoveFromEventList+0xc0>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e001      	b.n	80056ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056ba:	697b      	ldr	r3, [r7, #20]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20000614 	.word	0x20000614
 80056c8:	200005f4 	.word	0x200005f4
 80056cc:	200004f0 	.word	0x200004f0
 80056d0:	200005ac 	.word	0x200005ac
 80056d4:	200004ec 	.word	0x200004ec
 80056d8:	20000600 	.word	0x20000600

080056dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056e4:	4b06      	ldr	r3, [pc, #24]	; (8005700 <vTaskInternalSetTimeOutState+0x24>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <vTaskInternalSetTimeOutState+0x28>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	605a      	str	r2, [r3, #4]
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	20000604 	.word	0x20000604
 8005704:	200005f0 	.word	0x200005f0

08005708 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	613b      	str	r3, [r7, #16]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	60fb      	str	r3, [r7, #12]
}
 8005746:	bf00      	nop
 8005748:	e7fe      	b.n	8005748 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800574a:	f000 fbeb 	bl	8005f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800574e:	4b1d      	ldr	r3, [pc, #116]	; (80057c4 <xTaskCheckForTimeOut+0xbc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005766:	d102      	bne.n	800576e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005768:	2300      	movs	r3, #0
 800576a:	61fb      	str	r3, [r7, #28]
 800576c:	e023      	b.n	80057b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <xTaskCheckForTimeOut+0xc0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d007      	beq.n	800578a <xTaskCheckForTimeOut+0x82>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	429a      	cmp	r2, r3
 8005782:	d302      	bcc.n	800578a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005784:	2301      	movs	r3, #1
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	e015      	b.n	80057b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	429a      	cmp	r2, r3
 8005792:	d20b      	bcs.n	80057ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	1ad2      	subs	r2, r2, r3
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff ff9b 	bl	80056dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
 80057aa:	e004      	b.n	80057b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057b2:	2301      	movs	r3, #1
 80057b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057b6:	f000 fbe5 	bl	8005f84 <vPortExitCritical>

	return xReturn;
 80057ba:	69fb      	ldr	r3, [r7, #28]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3720      	adds	r7, #32
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	200005f0 	.word	0x200005f0
 80057c8:	20000604 	.word	0x20000604

080057cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057d0:	4b03      	ldr	r3, [pc, #12]	; (80057e0 <vTaskMissedYield+0x14>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	601a      	str	r2, [r3, #0]
}
 80057d6:	bf00      	nop
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	20000600 	.word	0x20000600

080057e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057ec:	f000 f852 	bl	8005894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057f0:	4b06      	ldr	r3, [pc, #24]	; (800580c <prvIdleTask+0x28>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d9f9      	bls.n	80057ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80057f8:	4b05      	ldr	r3, [pc, #20]	; (8005810 <prvIdleTask+0x2c>)
 80057fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005808:	e7f0      	b.n	80057ec <prvIdleTask+0x8>
 800580a:	bf00      	nop
 800580c:	200004f0 	.word	0x200004f0
 8005810:	e000ed04 	.word	0xe000ed04

08005814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
 800581e:	e00c      	b.n	800583a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4a12      	ldr	r2, [pc, #72]	; (8005874 <prvInitialiseTaskLists+0x60>)
 800582c:	4413      	add	r3, r2
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe ff59 	bl	80046e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3301      	adds	r3, #1
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b06      	cmp	r3, #6
 800583e:	d9ef      	bls.n	8005820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005840:	480d      	ldr	r0, [pc, #52]	; (8005878 <prvInitialiseTaskLists+0x64>)
 8005842:	f7fe ff50 	bl	80046e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005846:	480d      	ldr	r0, [pc, #52]	; (800587c <prvInitialiseTaskLists+0x68>)
 8005848:	f7fe ff4d 	bl	80046e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800584c:	480c      	ldr	r0, [pc, #48]	; (8005880 <prvInitialiseTaskLists+0x6c>)
 800584e:	f7fe ff4a 	bl	80046e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005852:	480c      	ldr	r0, [pc, #48]	; (8005884 <prvInitialiseTaskLists+0x70>)
 8005854:	f7fe ff47 	bl	80046e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005858:	480b      	ldr	r0, [pc, #44]	; (8005888 <prvInitialiseTaskLists+0x74>)
 800585a:	f7fe ff44 	bl	80046e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800585e:	4b0b      	ldr	r3, [pc, #44]	; (800588c <prvInitialiseTaskLists+0x78>)
 8005860:	4a05      	ldr	r2, [pc, #20]	; (8005878 <prvInitialiseTaskLists+0x64>)
 8005862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005864:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <prvInitialiseTaskLists+0x7c>)
 8005866:	4a05      	ldr	r2, [pc, #20]	; (800587c <prvInitialiseTaskLists+0x68>)
 8005868:	601a      	str	r2, [r3, #0]
}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	200004f0 	.word	0x200004f0
 8005878:	2000057c 	.word	0x2000057c
 800587c:	20000590 	.word	0x20000590
 8005880:	200005ac 	.word	0x200005ac
 8005884:	200005c0 	.word	0x200005c0
 8005888:	200005d8 	.word	0x200005d8
 800588c:	200005a4 	.word	0x200005a4
 8005890:	200005a8 	.word	0x200005a8

08005894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800589a:	e019      	b.n	80058d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800589c:	f000 fb42 	bl	8005f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a0:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <prvCheckTasksWaitingTermination+0x50>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe ffa4 	bl	80047fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058b2:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <prvCheckTasksWaitingTermination+0x54>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	4a0b      	ldr	r2, [pc, #44]	; (80058e8 <prvCheckTasksWaitingTermination+0x54>)
 80058ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058bc:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <prvCheckTasksWaitingTermination+0x58>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <prvCheckTasksWaitingTermination+0x58>)
 80058c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058c6:	f000 fb5d 	bl	8005f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f810 	bl	80058f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <prvCheckTasksWaitingTermination+0x58>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e1      	bne.n	800589c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	200005c0 	.word	0x200005c0
 80058e8:	200005ec 	.word	0x200005ec
 80058ec:	200005d4 	.word	0x200005d4

080058f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d108      	bne.n	8005914 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fcfa 	bl	8006300 <vPortFree>
				vPortFree( pxTCB );
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fcf7 	bl	8006300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005912:	e018      	b.n	8005946 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800591a:	2b01      	cmp	r3, #1
 800591c:	d103      	bne.n	8005926 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fcee 	bl	8006300 <vPortFree>
	}
 8005924:	e00f      	b.n	8005946 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800592c:	2b02      	cmp	r3, #2
 800592e:	d00a      	beq.n	8005946 <prvDeleteTCB+0x56>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	60fb      	str	r3, [r7, #12]
}
 8005942:	bf00      	nop
 8005944:	e7fe      	b.n	8005944 <prvDeleteTCB+0x54>
	}
 8005946:	bf00      	nop
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005956:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <prvResetNextTaskUnblockTime+0x38>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005960:	4b0a      	ldr	r3, [pc, #40]	; (800598c <prvResetNextTaskUnblockTime+0x3c>)
 8005962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005966:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005968:	e008      	b.n	800597c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800596a:	4b07      	ldr	r3, [pc, #28]	; (8005988 <prvResetNextTaskUnblockTime+0x38>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	4a04      	ldr	r2, [pc, #16]	; (800598c <prvResetNextTaskUnblockTime+0x3c>)
 800597a:	6013      	str	r3, [r2, #0]
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	200005a4 	.word	0x200005a4
 800598c:	2000060c 	.word	0x2000060c

08005990 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <xTaskGetSchedulerState+0x34>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800599e:	2301      	movs	r3, #1
 80059a0:	607b      	str	r3, [r7, #4]
 80059a2:	e008      	b.n	80059b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059a4:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <xTaskGetSchedulerState+0x38>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059ac:	2302      	movs	r3, #2
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	e001      	b.n	80059b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059b2:	2300      	movs	r3, #0
 80059b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059b6:	687b      	ldr	r3, [r7, #4]
	}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	200005f8 	.word	0x200005f8
 80059c8:	20000614 	.word	0x20000614

080059cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d05e      	beq.n	8005aa0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e6:	4b31      	ldr	r3, [pc, #196]	; (8005aac <xTaskPriorityInherit+0xe0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d24e      	bcs.n	8005a8e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	db06      	blt.n	8005a06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f8:	4b2c      	ldr	r3, [pc, #176]	; (8005aac <xTaskPriorityInherit+0xe0>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	f1c3 0207 	rsb	r2, r3, #7
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6959      	ldr	r1, [r3, #20]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4a26      	ldr	r2, [pc, #152]	; (8005ab0 <xTaskPriorityInherit+0xe4>)
 8005a18:	4413      	add	r3, r2
 8005a1a:	4299      	cmp	r1, r3
 8005a1c:	d12f      	bne.n	8005a7e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	3304      	adds	r3, #4
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe fee9 	bl	80047fa <uxListRemove>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	2201      	movs	r2, #1
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	43da      	mvns	r2, r3
 8005a3a:	4b1e      	ldr	r3, [pc, #120]	; (8005ab4 <xTaskPriorityInherit+0xe8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	4a1c      	ldr	r2, [pc, #112]	; (8005ab4 <xTaskPriorityInherit+0xe8>)
 8005a42:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a44:	4b19      	ldr	r3, [pc, #100]	; (8005aac <xTaskPriorityInherit+0xe0>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	2201      	movs	r2, #1
 8005a54:	409a      	lsls	r2, r3
 8005a56:	4b17      	ldr	r3, [pc, #92]	; (8005ab4 <xTaskPriorityInherit+0xe8>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <xTaskPriorityInherit+0xe8>)
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4a10      	ldr	r2, [pc, #64]	; (8005ab0 <xTaskPriorityInherit+0xe4>)
 8005a6e:	441a      	add	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f7fe fe62 	bl	8004740 <vListInsertEnd>
 8005a7c:	e004      	b.n	8005a88 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <xTaskPriorityInherit+0xe0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	e008      	b.n	8005aa0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a92:	4b06      	ldr	r3, [pc, #24]	; (8005aac <xTaskPriorityInherit+0xe0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d201      	bcs.n	8005aa0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
	}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	200004ec 	.word	0x200004ec
 8005ab0:	200004f0 	.word	0x200004f0
 8005ab4:	200005f4 	.word	0x200005f4

08005ab8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d077      	beq.n	8005bc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	60fb      	str	r3, [r7, #12]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d902      	bls.n	8005afe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	e002      	b.n	8005b04 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b02:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d058      	beq.n	8005bc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d153      	bne.n	8005bc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005b18:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d10a      	bne.n	8005b38 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	60bb      	str	r3, [r7, #8]
}
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	db04      	blt.n	8005b56 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f1c3 0207 	rsb	r2, r3, #7
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	6959      	ldr	r1, [r3, #20]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005b66:	4413      	add	r3, r2
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	d129      	bne.n	8005bc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fe fe42 	bl	80047fa <uxListRemove>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	2201      	movs	r2, #1
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	43da      	mvns	r2, r3
 8005b88:	4b11      	ldr	r3, [pc, #68]	; (8005bd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	4a10      	ldr	r2, [pc, #64]	; (8005bd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b90:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	2201      	movs	r2, #1
 8005b98:	409a      	lsls	r2, r3
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	4a0b      	ldr	r2, [pc, #44]	; (8005bd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4a06      	ldr	r2, [pc, #24]	; (8005bcc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005bb2:	441a      	add	r2, r3
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f7fe fdc0 	bl	8004740 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bc0:	bf00      	nop
 8005bc2:	3720      	adds	r7, #32
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	200004ec 	.word	0x200004ec
 8005bcc:	200004f0 	.word	0x200004f0
 8005bd0:	200005f4 	.word	0x200005f4

08005bd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005bd8:	4b07      	ldr	r3, [pc, #28]	; (8005bf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d004      	beq.n	8005bea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005be6:	3201      	adds	r2, #1
 8005be8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005bea:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005bec:	681b      	ldr	r3, [r3, #0]
	}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	200004ec 	.word	0x200004ec

08005bfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c06:	4b29      	ldr	r3, [pc, #164]	; (8005cac <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c0c:	4b28      	ldr	r3, [pc, #160]	; (8005cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3304      	adds	r3, #4
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fe fdf1 	bl	80047fa <uxListRemove>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10b      	bne.n	8005c36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005c1e:	4b24      	ldr	r3, [pc, #144]	; (8005cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	2201      	movs	r2, #1
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	43da      	mvns	r2, r3
 8005c2c:	4b21      	ldr	r3, [pc, #132]	; (8005cb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4013      	ands	r3, r2
 8005c32:	4a20      	ldr	r2, [pc, #128]	; (8005cb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c3c:	d10a      	bne.n	8005c54 <prvAddCurrentTaskToDelayedList+0x58>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c44:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	481a      	ldr	r0, [pc, #104]	; (8005cb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c4e:	f7fe fd77 	bl	8004740 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c52:	e026      	b.n	8005ca2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4413      	add	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c5c:	4b14      	ldr	r3, [pc, #80]	; (8005cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d209      	bcs.n	8005c80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c6c:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3304      	adds	r3, #4
 8005c76:	4619      	mov	r1, r3
 8005c78:	4610      	mov	r0, r2
 8005c7a:	f7fe fd85 	bl	8004788 <vListInsert>
}
 8005c7e:	e010      	b.n	8005ca2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c80:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f7fe fd7b 	bl	8004788 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c92:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d202      	bcs.n	8005ca2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c9c:	4a09      	ldr	r2, [pc, #36]	; (8005cc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	6013      	str	r3, [r2, #0]
}
 8005ca2:	bf00      	nop
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	200005f0 	.word	0x200005f0
 8005cb0:	200004ec 	.word	0x200004ec
 8005cb4:	200005f4 	.word	0x200005f4
 8005cb8:	200005d8 	.word	0x200005d8
 8005cbc:	200005a8 	.word	0x200005a8
 8005cc0:	200005a4 	.word	0x200005a4
 8005cc4:	2000060c 	.word	0x2000060c

08005cc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3b04      	subs	r3, #4
 8005cd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3b04      	subs	r3, #4
 8005ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f023 0201 	bic.w	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3b04      	subs	r3, #4
 8005cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cf8:	4a0c      	ldr	r2, [pc, #48]	; (8005d2c <pxPortInitialiseStack+0x64>)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3b14      	subs	r3, #20
 8005d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3b04      	subs	r3, #4
 8005d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f06f 0202 	mvn.w	r2, #2
 8005d16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3b20      	subs	r3, #32
 8005d1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	08005d31 	.word	0x08005d31

08005d30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d3a:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <prvTaskExitError+0x54>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d42:	d00a      	beq.n	8005d5a <prvTaskExitError+0x2a>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	60fb      	str	r3, [r7, #12]
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <prvTaskExitError+0x28>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	60bb      	str	r3, [r7, #8]
}
 8005d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d6e:	bf00      	nop
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0fc      	beq.n	8005d70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d76:	bf00      	nop
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	2000000c 	.word	0x2000000c
	...

08005d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <pxCurrentTCBConst2>)
 8005d92:	6819      	ldr	r1, [r3, #0]
 8005d94:	6808      	ldr	r0, [r1, #0]
 8005d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9a:	f380 8809 	msr	PSP, r0
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f380 8811 	msr	BASEPRI, r0
 8005daa:	4770      	bx	lr
 8005dac:	f3af 8000 	nop.w

08005db0 <pxCurrentTCBConst2>:
 8005db0:	200004ec 	.word	0x200004ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop

08005db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005db8:	4808      	ldr	r0, [pc, #32]	; (8005ddc <prvPortStartFirstTask+0x24>)
 8005dba:	6800      	ldr	r0, [r0, #0]
 8005dbc:	6800      	ldr	r0, [r0, #0]
 8005dbe:	f380 8808 	msr	MSP, r0
 8005dc2:	f04f 0000 	mov.w	r0, #0
 8005dc6:	f380 8814 	msr	CONTROL, r0
 8005dca:	b662      	cpsie	i
 8005dcc:	b661      	cpsie	f
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	df00      	svc	0
 8005dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dda:	bf00      	nop
 8005ddc:	e000ed08 	.word	0xe000ed08

08005de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005de6:	4b46      	ldr	r3, [pc, #280]	; (8005f00 <xPortStartScheduler+0x120>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a46      	ldr	r2, [pc, #280]	; (8005f04 <xPortStartScheduler+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10a      	bne.n	8005e06 <xPortStartScheduler+0x26>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	613b      	str	r3, [r7, #16]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e06:	4b3e      	ldr	r3, [pc, #248]	; (8005f00 <xPortStartScheduler+0x120>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a3f      	ldr	r2, [pc, #252]	; (8005f08 <xPortStartScheduler+0x128>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10a      	bne.n	8005e26 <xPortStartScheduler+0x46>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60fb      	str	r3, [r7, #12]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e26:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <xPortStartScheduler+0x12c>)
 8005e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	22ff      	movs	r2, #255	; 0xff
 8005e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <xPortStartScheduler+0x130>)
 8005e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e4e:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e50:	2207      	movs	r2, #7
 8005e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e54:	e009      	b.n	8005e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e56:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	4a2d      	ldr	r2, [pc, #180]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e72:	2b80      	cmp	r3, #128	; 0x80
 8005e74:	d0ef      	beq.n	8005e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e76:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f1c3 0307 	rsb	r3, r3, #7
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d00a      	beq.n	8005e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60bb      	str	r3, [r7, #8]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e98:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <xPortStartScheduler+0x134>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <xPortStartScheduler+0x134>)
 8005ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ea2:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <xPortStartScheduler+0x134>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eaa:	4a1a      	ldr	r2, [pc, #104]	; (8005f14 <xPortStartScheduler+0x134>)
 8005eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005eb6:	4b18      	ldr	r3, [pc, #96]	; (8005f18 <xPortStartScheduler+0x138>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <xPortStartScheduler+0x138>)
 8005ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <xPortStartScheduler+0x138>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <xPortStartScheduler+0x138>)
 8005ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ece:	f000 f8dd 	bl	800608c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <xPortStartScheduler+0x13c>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ed8:	f000 f8fc 	bl	80060d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005edc:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <xPortStartScheduler+0x140>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a0f      	ldr	r2, [pc, #60]	; (8005f20 <xPortStartScheduler+0x140>)
 8005ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ee8:	f7ff ff66 	bl	8005db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005eec:	f7ff fb14 	bl	8005518 <vTaskSwitchContext>
	prvTaskExitError();
 8005ef0:	f7ff ff1e 	bl	8005d30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	e000ed00 	.word	0xe000ed00
 8005f04:	410fc271 	.word	0x410fc271
 8005f08:	410fc270 	.word	0x410fc270
 8005f0c:	e000e400 	.word	0xe000e400
 8005f10:	20000618 	.word	0x20000618
 8005f14:	2000061c 	.word	0x2000061c
 8005f18:	e000ed20 	.word	0xe000ed20
 8005f1c:	2000000c 	.word	0x2000000c
 8005f20:	e000ef34 	.word	0xe000ef34

08005f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	607b      	str	r3, [r7, #4]
}
 8005f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f3e:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <vPortEnterCritical+0x58>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3301      	adds	r3, #1
 8005f44:	4a0d      	ldr	r2, [pc, #52]	; (8005f7c <vPortEnterCritical+0x58>)
 8005f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f48:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <vPortEnterCritical+0x58>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d10f      	bne.n	8005f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <vPortEnterCritical+0x5c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	603b      	str	r3, [r7, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <vPortEnterCritical+0x4a>
	}
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	2000000c 	.word	0x2000000c
 8005f80:	e000ed04 	.word	0xe000ed04

08005f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <vPortExitCritical+0x50>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <vPortExitCritical+0x24>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	607b      	str	r3, [r7, #4]
}
 8005fa4:	bf00      	nop
 8005fa6:	e7fe      	b.n	8005fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <vPortExitCritical+0x50>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <vPortExitCritical+0x50>)
 8005fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fb2:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <vPortExitCritical+0x50>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <vPortExitCritical+0x42>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f383 8811 	msr	BASEPRI, r3
}
 8005fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	2000000c 	.word	0x2000000c
	...

08005fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fe0:	f3ef 8009 	mrs	r0, PSP
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4b15      	ldr	r3, [pc, #84]	; (8006040 <pxCurrentTCBConst>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	f01e 0f10 	tst.w	lr, #16
 8005ff0:	bf08      	it	eq
 8005ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006004:	f380 8811 	msr	BASEPRI, r0
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f7ff fa82 	bl	8005518 <vTaskSwitchContext>
 8006014:	f04f 0000 	mov.w	r0, #0
 8006018:	f380 8811 	msr	BASEPRI, r0
 800601c:	bc09      	pop	{r0, r3}
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	6808      	ldr	r0, [r1, #0]
 8006022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006026:	f01e 0f10 	tst.w	lr, #16
 800602a:	bf08      	it	eq
 800602c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006030:	f380 8809 	msr	PSP, r0
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	f3af 8000 	nop.w

08006040 <pxCurrentTCBConst>:
 8006040:	200004ec 	.word	0x200004ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop

08006048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	607b      	str	r3, [r7, #4]
}
 8006060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006062:	f7ff f9a1 	bl	80053a8 <xTaskIncrementTick>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <SysTick_Handler+0x40>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	2300      	movs	r3, #0
 8006076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f383 8811 	msr	BASEPRI, r3
}
 800607e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <vPortSetupTimerInterrupt+0x34>)
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006096:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <vPortSetupTimerInterrupt+0x38>)
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800609c:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <vPortSetupTimerInterrupt+0x3c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <vPortSetupTimerInterrupt+0x40>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	099b      	lsrs	r3, r3, #6
 80060a8:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <vPortSetupTimerInterrupt+0x44>)
 80060aa:	3b01      	subs	r3, #1
 80060ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ae:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <vPortSetupTimerInterrupt+0x34>)
 80060b0:	2207      	movs	r2, #7
 80060b2:	601a      	str	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	e000e010 	.word	0xe000e010
 80060c4:	e000e018 	.word	0xe000e018
 80060c8:	20000000 	.word	0x20000000
 80060cc:	10624dd3 	.word	0x10624dd3
 80060d0:	e000e014 	.word	0xe000e014

080060d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060e4 <vPortEnableVFP+0x10>
 80060d8:	6801      	ldr	r1, [r0, #0]
 80060da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060de:	6001      	str	r1, [r0, #0]
 80060e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060e2:	bf00      	nop
 80060e4:	e000ed88 	.word	0xe000ed88

080060e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ee:	f3ef 8305 	mrs	r3, IPSR
 80060f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	d914      	bls.n	8006124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060fa:	4a17      	ldr	r2, [pc, #92]	; (8006158 <vPortValidateInterruptPriority+0x70>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006104:	4b15      	ldr	r3, [pc, #84]	; (800615c <vPortValidateInterruptPriority+0x74>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	7afa      	ldrb	r2, [r7, #11]
 800610a:	429a      	cmp	r2, r3
 800610c:	d20a      	bcs.n	8006124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006124:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <vPortValidateInterruptPriority+0x78>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800612c:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <vPortValidateInterruptPriority+0x7c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d90a      	bls.n	800614a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	603b      	str	r3, [r7, #0]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <vPortValidateInterruptPriority+0x60>
	}
 800614a:	bf00      	nop
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	e000e3f0 	.word	0xe000e3f0
 800615c:	20000618 	.word	0x20000618
 8006160:	e000ed0c 	.word	0xe000ed0c
 8006164:	2000061c 	.word	0x2000061c

08006168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006170:	2300      	movs	r3, #0
 8006172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006174:	f7ff f86e 	bl	8005254 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006178:	4b5b      	ldr	r3, [pc, #364]	; (80062e8 <pvPortMalloc+0x180>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006180:	f000 f920 	bl	80063c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006184:	4b59      	ldr	r3, [pc, #356]	; (80062ec <pvPortMalloc+0x184>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	f040 8093 	bne.w	80062b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01d      	beq.n	80061d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006198:	2208      	movs	r2, #8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4413      	add	r3, r2
 800619e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d014      	beq.n	80061d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f023 0307 	bic.w	r3, r3, #7
 80061b0:	3308      	adds	r3, #8
 80061b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <pvPortMalloc+0x6c>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	617b      	str	r3, [r7, #20]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d06e      	beq.n	80062b8 <pvPortMalloc+0x150>
 80061da:	4b45      	ldr	r3, [pc, #276]	; (80062f0 <pvPortMalloc+0x188>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d869      	bhi.n	80062b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061e4:	4b43      	ldr	r3, [pc, #268]	; (80062f4 <pvPortMalloc+0x18c>)
 80061e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061e8:	4b42      	ldr	r3, [pc, #264]	; (80062f4 <pvPortMalloc+0x18c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061ee:	e004      	b.n	80061fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d903      	bls.n	800620c <pvPortMalloc+0xa4>
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f1      	bne.n	80061f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800620c:	4b36      	ldr	r3, [pc, #216]	; (80062e8 <pvPortMalloc+0x180>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006212:	429a      	cmp	r2, r3
 8006214:	d050      	beq.n	80062b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2208      	movs	r2, #8
 800621c:	4413      	add	r3, r2
 800621e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	2308      	movs	r3, #8
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	429a      	cmp	r2, r3
 8006236:	d91f      	bls.n	8006278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4413      	add	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <pvPortMalloc+0xf8>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	613b      	str	r3, [r7, #16]
}
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	1ad2      	subs	r2, r2, r3
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006272:	69b8      	ldr	r0, [r7, #24]
 8006274:	f000 f908 	bl	8006488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006278:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <pvPortMalloc+0x188>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	4a1b      	ldr	r2, [pc, #108]	; (80062f0 <pvPortMalloc+0x188>)
 8006284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006286:	4b1a      	ldr	r3, [pc, #104]	; (80062f0 <pvPortMalloc+0x188>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <pvPortMalloc+0x190>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d203      	bcs.n	800629a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006292:	4b17      	ldr	r3, [pc, #92]	; (80062f0 <pvPortMalloc+0x188>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <pvPortMalloc+0x190>)
 8006298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	4b13      	ldr	r3, [pc, #76]	; (80062ec <pvPortMalloc+0x184>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062ae:	4b13      	ldr	r3, [pc, #76]	; (80062fc <pvPortMalloc+0x194>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3301      	adds	r3, #1
 80062b4:	4a11      	ldr	r2, [pc, #68]	; (80062fc <pvPortMalloc+0x194>)
 80062b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062b8:	f7fe ffda 	bl	8005270 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <pvPortMalloc+0x174>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60fb      	str	r3, [r7, #12]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <pvPortMalloc+0x172>
	return pvReturn;
 80062dc:	69fb      	ldr	r3, [r7, #28]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3728      	adds	r7, #40	; 0x28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20004228 	.word	0x20004228
 80062ec:	2000423c 	.word	0x2000423c
 80062f0:	2000422c 	.word	0x2000422c
 80062f4:	20004220 	.word	0x20004220
 80062f8:	20004230 	.word	0x20004230
 80062fc:	20004234 	.word	0x20004234

08006300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d04d      	beq.n	80063ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006312:	2308      	movs	r3, #8
 8006314:	425b      	negs	r3, r3
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4413      	add	r3, r2
 800631a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <vPortFree+0xb8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4013      	ands	r3, r2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <vPortFree+0x44>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	60fb      	str	r3, [r7, #12]
}
 8006340:	bf00      	nop
 8006342:	e7fe      	b.n	8006342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <vPortFree+0x62>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60bb      	str	r3, [r7, #8]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <vPortFree+0xb8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01e      	beq.n	80063ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d11a      	bne.n	80063ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <vPortFree+0xb8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	43db      	mvns	r3, r3
 8006382:	401a      	ands	r2, r3
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006388:	f7fe ff64 	bl	8005254 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <vPortFree+0xbc>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4413      	add	r3, r2
 8006396:	4a09      	ldr	r2, [pc, #36]	; (80063bc <vPortFree+0xbc>)
 8006398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800639a:	6938      	ldr	r0, [r7, #16]
 800639c:	f000 f874 	bl	8006488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <vPortFree+0xc0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3301      	adds	r3, #1
 80063a6:	4a06      	ldr	r2, [pc, #24]	; (80063c0 <vPortFree+0xc0>)
 80063a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063aa:	f7fe ff61 	bl	8005270 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063ae:	bf00      	nop
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	2000423c 	.word	0x2000423c
 80063bc:	2000422c 	.word	0x2000422c
 80063c0:	20004238 	.word	0x20004238

080063c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063d0:	4b27      	ldr	r3, [pc, #156]	; (8006470 <prvHeapInit+0xac>)
 80063d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3307      	adds	r3, #7
 80063e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0307 	bic.w	r3, r3, #7
 80063ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	4a1f      	ldr	r2, [pc, #124]	; (8006470 <prvHeapInit+0xac>)
 80063f4:	4413      	add	r3, r2
 80063f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063fc:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <prvHeapInit+0xb0>)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006402:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <prvHeapInit+0xb0>)
 8006404:	2200      	movs	r2, #0
 8006406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4413      	add	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006410:	2208      	movs	r2, #8
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1a9b      	subs	r3, r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0307 	bic.w	r3, r3, #7
 800641e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a15      	ldr	r2, [pc, #84]	; (8006478 <prvHeapInit+0xb4>)
 8006424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006426:	4b14      	ldr	r3, [pc, #80]	; (8006478 <prvHeapInit+0xb4>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800642e:	4b12      	ldr	r3, [pc, #72]	; (8006478 <prvHeapInit+0xb4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	1ad2      	subs	r2, r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006444:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <prvHeapInit+0xb4>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4a0a      	ldr	r2, [pc, #40]	; (800647c <prvHeapInit+0xb8>)
 8006452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4a09      	ldr	r2, [pc, #36]	; (8006480 <prvHeapInit+0xbc>)
 800645a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800645c:	4b09      	ldr	r3, [pc, #36]	; (8006484 <prvHeapInit+0xc0>)
 800645e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006462:	601a      	str	r2, [r3, #0]
}
 8006464:	bf00      	nop
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	20000620 	.word	0x20000620
 8006474:	20004220 	.word	0x20004220
 8006478:	20004228 	.word	0x20004228
 800647c:	20004230 	.word	0x20004230
 8006480:	2000422c 	.word	0x2000422c
 8006484:	2000423c 	.word	0x2000423c

08006488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006490:	4b28      	ldr	r3, [pc, #160]	; (8006534 <prvInsertBlockIntoFreeList+0xac>)
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e002      	b.n	800649c <prvInsertBlockIntoFreeList+0x14>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d8f7      	bhi.n	8006496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	4413      	add	r3, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d108      	bne.n	80064ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	441a      	add	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	441a      	add	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d118      	bne.n	8006510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b15      	ldr	r3, [pc, #84]	; (8006538 <prvInsertBlockIntoFreeList+0xb0>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d00d      	beq.n	8006506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	441a      	add	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	e008      	b.n	8006518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006506:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <prvInsertBlockIntoFreeList+0xb0>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	e003      	b.n	8006518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d002      	beq.n	8006526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006526:	bf00      	nop
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20004220 	.word	0x20004220
 8006538:	20004228 	.word	0x20004228

0800653c <__libc_init_array>:
 800653c:	b570      	push	{r4, r5, r6, lr}
 800653e:	4d0d      	ldr	r5, [pc, #52]	; (8006574 <__libc_init_array+0x38>)
 8006540:	4c0d      	ldr	r4, [pc, #52]	; (8006578 <__libc_init_array+0x3c>)
 8006542:	1b64      	subs	r4, r4, r5
 8006544:	10a4      	asrs	r4, r4, #2
 8006546:	2600      	movs	r6, #0
 8006548:	42a6      	cmp	r6, r4
 800654a:	d109      	bne.n	8006560 <__libc_init_array+0x24>
 800654c:	4d0b      	ldr	r5, [pc, #44]	; (800657c <__libc_init_array+0x40>)
 800654e:	4c0c      	ldr	r4, [pc, #48]	; (8006580 <__libc_init_array+0x44>)
 8006550:	f000 f820 	bl	8006594 <_init>
 8006554:	1b64      	subs	r4, r4, r5
 8006556:	10a4      	asrs	r4, r4, #2
 8006558:	2600      	movs	r6, #0
 800655a:	42a6      	cmp	r6, r4
 800655c:	d105      	bne.n	800656a <__libc_init_array+0x2e>
 800655e:	bd70      	pop	{r4, r5, r6, pc}
 8006560:	f855 3b04 	ldr.w	r3, [r5], #4
 8006564:	4798      	blx	r3
 8006566:	3601      	adds	r6, #1
 8006568:	e7ee      	b.n	8006548 <__libc_init_array+0xc>
 800656a:	f855 3b04 	ldr.w	r3, [r5], #4
 800656e:	4798      	blx	r3
 8006570:	3601      	adds	r6, #1
 8006572:	e7f2      	b.n	800655a <__libc_init_array+0x1e>
 8006574:	08006678 	.word	0x08006678
 8006578:	08006678 	.word	0x08006678
 800657c:	08006678 	.word	0x08006678
 8006580:	08006680 	.word	0x08006680

08006584 <memset>:
 8006584:	4402      	add	r2, r0
 8006586:	4603      	mov	r3, r0
 8006588:	4293      	cmp	r3, r2
 800658a:	d100      	bne.n	800658e <memset+0xa>
 800658c:	4770      	bx	lr
 800658e:	f803 1b01 	strb.w	r1, [r3], #1
 8006592:	e7f9      	b.n	8006588 <memset+0x4>

08006594 <_init>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	bf00      	nop
 8006598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659a:	bc08      	pop	{r3}
 800659c:	469e      	mov	lr, r3
 800659e:	4770      	bx	lr

080065a0 <_fini>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	bf00      	nop
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr
