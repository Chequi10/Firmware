
rtosC++.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a94  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005c44  08005c44  00015c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da8  08005da8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db0  08005db0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004170  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200041e4  200041e4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ae5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ddf  00000000  00000000  00034b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00037968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001170  00000000  00000000  00038c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005c70  00000000  00000000  00039d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013aa2  00000000  00000000  0003f9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7080  00000000  00000000  00053482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a502  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000556c  00000000  00000000  0013a554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005c2c 	.word	0x08005c2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08005c2c 	.word	0x08005c2c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	200000e4 	.word	0x200000e4

080005c8 <_Z6Task_1Pv>:
	 HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
	 return len;
}

void Task_1( void* taskParmPtr )
		{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
			    while( 1 )
		    {
			    	for(a=49;a<58;a++)
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <_Z6Task_1Pv+0x84>)
 80005d2:	2231      	movs	r2, #49	; 0x31
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <_Z6Task_1Pv+0x84>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b39      	cmp	r3, #57	; 0x39
 80005dc:	dcf8      	bgt.n	80005d0 <_Z6Task_1Pv+0x8>
			    		  {  TxData[0] = a;
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <_Z6Task_1Pv+0x84>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <_Z6Task_1Pv+0x88>)
 80005e6:	701a      	strb	r2, [r3, #0]

			    				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <_Z6Task_1Pv+0x8c>)
 80005ea:	4a19      	ldr	r2, [pc, #100]	; (8000650 <_Z6Task_1Pv+0x88>)
 80005ec:	491a      	ldr	r1, [pc, #104]	; (8000658 <_Z6Task_1Pv+0x90>)
 80005ee:	481b      	ldr	r0, [pc, #108]	; (800065c <_Z6Task_1Pv+0x94>)
 80005f0:	f001 f814 	bl	800161c <HAL_CAN_AddTxMessage>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d005      	beq.n	8000610 <_Z6Task_1Pv+0x48>
			    		  		 	{
			    					   HAL_GPIO_TogglePin(Amarillo_GPIO_Port, Amarillo_Pin);
 8000604:	2101      	movs	r1, #1
 8000606:	4816      	ldr	r0, [pc, #88]	; (8000660 <_Z6Task_1Pv+0x98>)
 8000608:	f001 fef1 	bl	80023ee <HAL_GPIO_TogglePin>
			    		  		 	   Error_Handler ();
 800060c:	f000 fb22 	bl	8000c54 <Error_Handler>
			    		  		 	}
			    		//		printf("\nCAN2 RX:- CANID: %d, LEN: %d  RxData:%s\n\r",(char *)RxHeader2.StdId,( char *)RxHeader2.DLC,(uint8_t *)TxData);
			    				HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	4813      	ldr	r0, [pc, #76]	; (8000660 <_Z6Task_1Pv+0x98>)
 8000614:	f001 feeb 	bl	80023ee <HAL_GPIO_TogglePin>
			    				osDelay(500);
 8000618:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061c:	f003 f967 	bl	80038ee <osDelay>


			    		  if (datacheck)
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <_Z6Task_1Pv+0x9c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00b      	beq.n	8000640 <_Z6Task_1Pv+0x78>
			    		  {
			    			  HAL_GPIO_TogglePin(Rojo_GPIO_Port, Rojo_Pin);
 8000628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <_Z6Task_1Pv+0x98>)
 800062e:	f001 fede 	bl	80023ee <HAL_GPIO_TogglePin>
			    			  osDelay(500);
 8000632:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000636:	f003 f95a 	bl	80038ee <osDelay>

			    			  datacheck = 0;
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <_Z6Task_1Pv+0x9c>)
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
			    	for(a=49;a<58;a++)
 8000640:	4b02      	ldr	r3, [pc, #8]	; (800064c <_Z6Task_1Pv+0x84>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	4a01      	ldr	r2, [pc, #4]	; (800064c <_Z6Task_1Pv+0x84>)
 8000648:	6013      	str	r3, [r2, #0]
 800064a:	e7c4      	b.n	80005d6 <_Z6Task_1Pv+0xe>
 800064c:	20000428 	.word	0x20000428
 8000650:	2000041c 	.word	0x2000041c
 8000654:	20000418 	.word	0x20000418
 8000658:	20000388 	.word	0x20000388
 800065c:	200002e4 	.word	0x200002e4
 8000660:	40020400 	.word	0x40020400
 8000664:	20000424 	.word	0x20000424

08000668 <_Z6Task_2Pv>:
		}



void Task_2( void* taskParmPtr )
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	    while( 1 )
    {
       HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	4803      	ldr	r0, [pc, #12]	; (8000680 <_Z6Task_2Pv+0x18>)
 8000674:	f001 febb 	bl	80023ee <HAL_GPIO_TogglePin>
       osDelay(50);
 8000678:	2032      	movs	r0, #50	; 0x32
 800067a:	f003 f938 	bl	80038ee <osDelay>
       HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 800067e:	e7f7      	b.n	8000670 <_Z6Task_2Pv+0x8>
 8000680:	40020400 	.word	0x40020400

08000684 <HAL_CAN_RxFifo0MsgPendingCallback>:
    }
}

void  HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan2)
  {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Amarillo_GPIO_Port, Amarillo_Pin);
 800068c:	2101      	movs	r1, #1
 800068e:	480f      	ldr	r0, [pc, #60]	; (80006cc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000690:	f001 fead 	bl	80023ee <HAL_GPIO_TogglePin>

	if (HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO0, &RxHeader2, RxData) != HAL_OK)
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000696:	4a0f      	ldr	r2, [pc, #60]	; (80006d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000698:	2100      	movs	r1, #0
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f001 f899 	bl	80017d2 <HAL_CAN_GetRxMessage>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	bf14      	ite	ne
 80006a6:	2301      	movne	r3, #1
 80006a8:	2300      	moveq	r3, #0
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	  {
	    Error_Handler();
 80006b0:	f000 fad0 	bl	8000c54 <Error_Handler>
	  }

	  if ((RxHeader2.StdId == 146))
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b92      	cmp	r3, #146	; 0x92
 80006ba:	d102      	bne.n	80006c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
	  {
		  datacheck = 1;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
	  }
  }
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40020400 	.word	0x40020400
 80006d0:	20000420 	.word	0x20000420
 80006d4:	200003d4 	.word	0x200003d4
 80006d8:	20000424 	.word	0x20000424

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e2:	f000 fd39 	bl	8001158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e6:	f000 f8b5 	bl	8000854 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ea:	f000 fa3f 	bl	8000b6c <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 80006ee:	f000 f91b 	bl	8000928 <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 80006f2:	f000 f993 	bl	8000a1c <_ZL12MX_CAN2_Initv>
  MX_USART3_UART_Init();
 80006f6:	f000 fa0b 	bl	8000b10 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  printf("Protocolo de Comuncacion CAN activo:\n\rCAN 1: PB8=Rx PB9=Tx\n\rCAN 2: PB5=Rx PB6=Tx \n\r");
 80006fa:	4847      	ldr	r0, [pc, #284]	; (8000818 <main+0x13c>)
 80006fc:	f004 fb08 	bl	8004d10 <iprintf>

    TxHeader.IDE = CAN_ID_STD;
 8000700:	4b46      	ldr	r3, [pc, #280]	; (800081c <main+0x140>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
    TxHeader.StdId = 146;
 8000706:	4b45      	ldr	r3, [pc, #276]	; (800081c <main+0x140>)
 8000708:	2292      	movs	r2, #146	; 0x92
 800070a:	601a      	str	r2, [r3, #0]
    TxHeader.RTR = CAN_RTR_DATA;
 800070c:	4b43      	ldr	r3, [pc, #268]	; (800081c <main+0x140>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 1;
 8000712:	4b42      	ldr	r3, [pc, #264]	; (800081c <main+0x140>)
 8000714:	2201      	movs	r2, #1
 8000716:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000718:	4b40      	ldr	r3, [pc, #256]	; (800081c <main+0x140>)
 800071a:	2200      	movs	r2, #0
 800071c:	751a      	strb	r2, [r3, #20]

    RxHeader.IDE = CAN_ID_STD;
 800071e:	4b40      	ldr	r3, [pc, #256]	; (8000820 <main+0x144>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
    RxHeader.StdId = 146;
 8000724:	4b3e      	ldr	r3, [pc, #248]	; (8000820 <main+0x144>)
 8000726:	2292      	movs	r2, #146	; 0x92
 8000728:	601a      	str	r2, [r3, #0]
    RxHeader.RTR = CAN_RTR_DATA;
 800072a:	4b3d      	ldr	r3, [pc, #244]	; (8000820 <main+0x144>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
    RxHeader.DLC = 1;
 8000730:	4b3b      	ldr	r3, [pc, #236]	; (8000820 <main+0x144>)
 8000732:	2201      	movs	r2, #1
 8000734:	611a      	str	r2, [r3, #16]

    TxHeader2.IDE = CAN_ID_STD;
 8000736:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <main+0x148>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
    TxHeader2.StdId = 20;
 800073c:	4b39      	ldr	r3, [pc, #228]	; (8000824 <main+0x148>)
 800073e:	2214      	movs	r2, #20
 8000740:	601a      	str	r2, [r3, #0]
    TxHeader2.RTR = CAN_RTR_DATA;
 8000742:	4b38      	ldr	r3, [pc, #224]	; (8000824 <main+0x148>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
    TxHeader2.DLC = 1;
 8000748:	4b36      	ldr	r3, [pc, #216]	; (8000824 <main+0x148>)
 800074a:	2201      	movs	r2, #1
 800074c:	611a      	str	r2, [r3, #16]
    TxHeader2.TransmitGlobalTime = DISABLE;
 800074e:	4b35      	ldr	r3, [pc, #212]	; (8000824 <main+0x148>)
 8000750:	2200      	movs	r2, #0
 8000752:	751a      	strb	r2, [r3, #20]

    RxHeader2.IDE = CAN_ID_STD;
 8000754:	4b34      	ldr	r3, [pc, #208]	; (8000828 <main+0x14c>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    RxHeader2.StdId = 20;
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <main+0x14c>)
 800075c:	2214      	movs	r2, #20
 800075e:	601a      	str	r2, [r3, #0]
    RxHeader2.RTR = CAN_RTR_DATA;
 8000760:	4b31      	ldr	r3, [pc, #196]	; (8000828 <main+0x14c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
    RxHeader2.DLC = 1;
 8000766:	4b30      	ldr	r3, [pc, #192]	; (8000828 <main+0x14c>)
 8000768:	2201      	movs	r2, #1
 800076a:	611a      	str	r2, [r3, #16]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Tarea_1 */

  osThreadDef(Tarea_1, StartTask01, osPriorityNormal, 0, 128);
 800076c:	4b2f      	ldr	r3, [pc, #188]	; (800082c <main+0x150>)
 800076e:	f107 0420 	add.w	r4, r7, #32
 8000772:	461d      	mov	r5, r3
 8000774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000778:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Tarea_1Handle = osThreadCreate(osThread(Tarea_1), NULL);
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f003 f865 	bl	8003856 <osThreadCreate>
 800078c:	4603      	mov	r3, r0
 800078e:	4a28      	ldr	r2, [pc, #160]	; (8000830 <main+0x154>)
 8000790:	6013      	str	r3, [r2, #0]

  /* definition and creation of Tarea_2 */
  osThreadDef(Tarea_2, StartTask02, osPriorityNormal, 0, 128);
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <main+0x158>)
 8000794:	1d3c      	adds	r4, r7, #4
 8000796:	461d      	mov	r5, r3
 8000798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Tarea_2Handle = osThreadCreate(osThread(Tarea_2), NULL);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 f854 	bl	8003856 <osThreadCreate>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a21      	ldr	r2, [pc, #132]	; (8000838 <main+0x15c>)
 80007b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  BaseType_t res1 =
  			           xTaskCreate(
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <main+0x160>)
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	2301      	movs	r3, #1
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2300      	movs	r3, #0
 80007be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c2:	491f      	ldr	r1, [pc, #124]	; (8000840 <main+0x164>)
 80007c4:	481f      	ldr	r0, [pc, #124]	; (8000844 <main+0x168>)
 80007c6:	f003 f9b7 	bl	8003b38 <xTaskCreate>
 80007ca:	6478      	str	r0, [r7, #68]	; 0x44
  			               tskIDLE_PRIORITY+1,         // Prioridad de la tarea
  			    	   &task_handle_task_1            // Puntero a la tarea creada en el sistema
  			           );

  			      BaseType_t res2 =
  			           xTaskCreate(
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <main+0x16c>)
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	2301      	movs	r3, #1
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2300      	movs	r3, #0
 80007d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007da:	491c      	ldr	r1, [pc, #112]	; (800084c <main+0x170>)
 80007dc:	481c      	ldr	r0, [pc, #112]	; (8000850 <main+0x174>)
 80007de:	f003 f9ab 	bl	8003b38 <xTaskCreate>
 80007e2:	6438      	str	r0, [r7, #64]	; 0x40
  			               tskIDLE_PRIORITY+1,         // Prioridad de la tarea
  			    	   &task_handle_task_2           // Puntero a la tarea creada en el sistema
  			           );


  			      configASSERT( res1 == pdPASS && res2 == pdPASS);
 80007e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d104      	bne.n	80007f4 <main+0x118>
 80007ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d101      	bne.n	80007f4 <main+0x118>
 80007f0:	2301      	movs	r3, #1
 80007f2:	e000      	b.n	80007f6 <main+0x11a>
 80007f4:	2300      	movs	r3, #0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d10a      	bne.n	8000810 <main+0x134>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80007fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007fe:	f383 8811 	msr	BASEPRI, r3
 8000802:	f3bf 8f6f 	isb	sy
 8000806:	f3bf 8f4f 	dsb	sy
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800080c:	bf00      	nop
 800080e:	e7fe      	b.n	800080e <main+0x132>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000810:	f003 f81a 	bl	8003848 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000814:	e7fe      	b.n	8000814 <main+0x138>
 8000816:	bf00      	nop
 8000818:	08005c54 	.word	0x08005c54
 800081c:	20000388 	.word	0x20000388
 8000820:	200003b8 	.word	0x200003b8
 8000824:	200003a0 	.word	0x200003a0
 8000828:	200003d4 	.word	0x200003d4
 800082c:	08005cb8 	.word	0x08005cb8
 8000830:	20000378 	.word	0x20000378
 8000834:	08005cd4 	.word	0x08005cd4
 8000838:	2000037c 	.word	0x2000037c
 800083c:	20000380 	.word	0x20000380
 8000840:	08005ca8 	.word	0x08005ca8
 8000844:	080005c9 	.word	0x080005c9
 8000848:	20000384 	.word	0x20000384
 800084c:	08005cb0 	.word	0x08005cb0
 8000850:	08000669 	.word	0x08000669

08000854 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	2230      	movs	r2, #48	; 0x30
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f004 fa4c 	bl	8004d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <_Z18SystemClock_Configv+0xcc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a27      	ldr	r2, [pc, #156]	; (8000920 <_Z18SystemClock_Configv+0xcc>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <_Z18SystemClock_Configv+0xcc>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <_Z18SystemClock_Configv+0xd0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008a0:	4a20      	ldr	r2, [pc, #128]	; (8000924 <_Z18SystemClock_Configv+0xd0>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <_Z18SystemClock_Configv+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2310      	movs	r3, #16
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 fdab 	bl	8002424 <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	bf14      	ite	ne
 80008d4:	2301      	movne	r3, #1
 80008d6:	2300      	moveq	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 80008de:	f000 f9b9 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	230f      	movs	r3, #15
 80008e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 f809 	bl	8002914 <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	bf14      	ite	ne
 8000908:	2301      	movne	r3, #1
 800090a:	2300      	moveq	r3, #0
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000912:	f000 f99f 	bl	8000c54 <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3750      	adds	r7, #80	; 0x50
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800092c:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 800092e:	4a39      	ldr	r2, [pc, #228]	; (8000a14 <_ZL12MX_CAN1_Initv+0xec>)
 8000930:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000932:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 8000934:	2210      	movs	r2, #16
 8000936:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000938:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000944:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 8000946:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800094a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800094c:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000952:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 8000954:	2200      	movs	r2, #0
 8000956:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000958:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 800095a:	2200      	movs	r2, #0
 800095c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800095e:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 8000960:	2200      	movs	r2, #0
 8000962:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000964:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 8000966:	2200      	movs	r2, #0
 8000968:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 800096c:	2200      	movs	r2, #0
 800096e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000970:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 8000972:	2200      	movs	r2, #0
 8000974:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000976:	4826      	ldr	r0, [pc, #152]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 8000978:	f000 fc30 	bl	80011dc <HAL_CAN_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	bf14      	ite	ne
 8000982:	2301      	movne	r3, #1
 8000984:	2300      	moveq	r3, #0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 800098c:	f000 f962 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <_ZL12MX_CAN1_Initv+0xf0>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <_ZL12MX_CAN1_Initv+0xf0>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
	  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <_ZL12MX_CAN1_Initv+0xf0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterIdHigh=0;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <_ZL12MX_CAN1_Initv+0xf0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIdLow=0;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <_ZL12MX_CAN1_Initv+0xf0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterMaskIdHigh=0;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <_ZL12MX_CAN1_Initv+0xf0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterMaskIdLow=0;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <_ZL12MX_CAN1_Initv+0xf0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <_ZL12MX_CAN1_Initv+0xf0>)
 80009bc:	2201      	movs	r2, #1
 80009be:	61da      	str	r2, [r3, #28]
	  sFilterConfig.FilterActivation=ENABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <_ZL12MX_CAN1_Initv+0xf0>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	621a      	str	r2, [r3, #32]
      sFilterConfig.SlaveStartFilterBank = 14;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <_ZL12MX_CAN1_Initv+0xf0>)
 80009c8:	220e      	movs	r2, #14
 80009ca:	625a      	str	r2, [r3, #36]	; 0x24

      if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80009cc:	4912      	ldr	r1, [pc, #72]	; (8000a18 <_ZL12MX_CAN1_Initv+0xf0>)
 80009ce:	4810      	ldr	r0, [pc, #64]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 80009d0:	f000 fd00 	bl	80013d4 <HAL_CAN_ConfigFilter>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	bf14      	ite	ne
 80009da:	2301      	movne	r3, #1
 80009dc:	2300      	moveq	r3, #0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <_ZL12MX_CAN1_Initv+0xc0>
        {
          /* Filter configuration Error */
          Error_Handler();
 80009e4:	f000 f936 	bl	8000c54 <Error_Handler>
        }

      HAL_CAN_Start(&hcan1);
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 80009ea:	f000 fdd3 	bl	8001594 <HAL_CAN_Start>

        /*##-4- Activate CAN RX notification #######################################*/
        if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80009ee:	2102      	movs	r1, #2
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <_ZL12MX_CAN1_Initv+0xe8>)
 80009f2:	f001 f800 	bl	80019f6 <HAL_CAN_ActivateNotification>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	bf14      	ite	ne
 80009fc:	2301      	movne	r3, #1
 80009fe:	2300      	moveq	r3, #0
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <_ZL12MX_CAN1_Initv+0xe2>
        {
          /* Notification Error */
          Error_Handler();
 8000a06:	f000 f925 	bl	8000c54 <Error_Handler>
        }
  /* USER CODE END CAN1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200002e4 	.word	0x200002e4
 8000a14:	40006400 	.word	0x40006400
 8000a18:	200003f0 	.word	0x200003f0

08000a1c <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000a20:	4b38      	ldr	r3, [pc, #224]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000a22:	4a39      	ldr	r2, [pc, #228]	; (8000b08 <_ZL12MX_CAN2_Initv+0xec>)
 8000a24:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000a26:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000a28:	2210      	movs	r2, #16
 8000a2a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a2c:	4b35      	ldr	r3, [pc, #212]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a32:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000a38:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000a3a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a3e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a40:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a46:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000a4c:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000a52:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a5e:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a64:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a6a:	4826      	ldr	r0, [pc, #152]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000a6c:	f000 fbb6 	bl	80011dc <HAL_CAN_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 8000a80:	f000 f8e8 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  sFilterConfig.FilterBank = 14;
 8000a84:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <_ZL12MX_CAN2_Initv+0xf0>)
 8000a86:	220e      	movs	r2, #14
 8000a88:	615a      	str	r2, [r3, #20]
  		  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <_ZL12MX_CAN2_Initv+0xf0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  		  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000a90:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <_ZL12MX_CAN2_Initv+0xf0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  		  sFilterConfig.FilterIdHigh=0;
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <_ZL12MX_CAN2_Initv+0xf0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
  		  sFilterConfig.FilterIdLow=0;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <_ZL12MX_CAN2_Initv+0xf0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
  		  sFilterConfig.FilterMaskIdHigh=0;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <_ZL12MX_CAN2_Initv+0xf0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  		  sFilterConfig.FilterMaskIdLow=0;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <_ZL12MX_CAN2_Initv+0xf0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  		  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <_ZL12MX_CAN2_Initv+0xf0>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	61da      	str	r2, [r3, #28]
  		  sFilterConfig.FilterActivation=ENABLE;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <_ZL12MX_CAN2_Initv+0xf0>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	621a      	str	r2, [r3, #32]
  	      sFilterConfig.SlaveStartFilterBank = 14;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <_ZL12MX_CAN2_Initv+0xf0>)
 8000abc:	220e      	movs	r2, #14
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24

  	      if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8000ac0:	4912      	ldr	r1, [pc, #72]	; (8000b0c <_ZL12MX_CAN2_Initv+0xf0>)
 8000ac2:	4810      	ldr	r0, [pc, #64]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000ac4:	f000 fc86 	bl	80013d4 <HAL_CAN_ConfigFilter>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	bf14      	ite	ne
 8000ace:	2301      	movne	r3, #1
 8000ad0:	2300      	moveq	r3, #0
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <_ZL12MX_CAN2_Initv+0xc0>
  	        {
  	          /* Filter configuration Error */
  	          Error_Handler();
 8000ad8:	f000 f8bc 	bl	8000c54 <Error_Handler>
  	        }

  	      HAL_CAN_Start(&hcan2);
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000ade:	f000 fd59 	bl	8001594 <HAL_CAN_Start>

  	        /*##-4- Activate CAN RX notification #######################################*/
  	        if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <_ZL12MX_CAN2_Initv+0xe8>)
 8000ae6:	f000 ff86 	bl	80019f6 <HAL_CAN_ActivateNotification>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bf14      	ite	ne
 8000af0:	2301      	movne	r3, #1
 8000af2:	2300      	moveq	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <_ZL12MX_CAN2_Initv+0xe2>
  	        {
  	          /* Notification Error */
  	          Error_Handler();
 8000afa:	f000 f8ab 	bl	8000c54 <Error_Handler>
  	        }
  /* USER CODE END CAN2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000030c 	.word	0x2000030c
 8000b08:	40006800 	.word	0x40006800
 8000b0c:	200003f0 	.word	0x200003f0

08000b10 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b16:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <_ZL19MX_USART3_UART_Initv+0x58>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000b48:	f002 fba4 	bl	8003294 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	bf14      	ite	ne
 8000b52:	2301      	movne	r3, #1
 8000b54:	2300      	moveq	r3, #0
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8000b5c:	f000 f87a 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000334 	.word	0x20000334
 8000b68:	40004800 	.word	0x40004800

08000b6c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <_ZL12MX_GPIO_Initv+0x9c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <_ZL12MX_GPIO_Initv+0x9c>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <_ZL12MX_GPIO_Initv+0x9c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <_ZL12MX_GPIO_Initv+0x9c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <_ZL12MX_GPIO_Initv+0x9c>)
 8000ba8:	f043 0308 	orr.w	r3, r3, #8
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <_ZL12MX_GPIO_Initv+0x9c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <_ZL12MX_GPIO_Initv+0x9c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a11      	ldr	r2, [pc, #68]	; (8000c08 <_ZL12MX_GPIO_Initv+0x9c>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <_ZL12MX_GPIO_Initv+0x9c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Amarillo_Pin|Rojo_Pin|Azul_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <_ZL12MX_GPIO_Initv+0xa0>)
 8000bde:	f001 fbed 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Amarillo_Pin Rojo_Pin Azul_Pin */
  GPIO_InitStruct.Pin = Amarillo_Pin|Rojo_Pin|Azul_Pin;
 8000be2:	f244 0381 	movw	r3, #16513	; 0x4081
 8000be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <_ZL12MX_GPIO_Initv+0xa0>)
 8000bfc:	f001 fa32 	bl	8002064 <HAL_GPIO_Init>

}
 8000c00:	bf00      	nop
 8000c02:	3720      	adds	r7, #32
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020400 	.word	0x40020400

08000c10 <_Z11StartTask01PKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f002 fe68 	bl	80038ee <osDelay>
 8000c1e:	e7fb      	b.n	8000c18 <_Z11StartTask01PKv+0x8>

08000c20 <_Z11StartTask02PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f002 fe60 	bl	80038ee <osDelay>
 8000c2e:	e7fb      	b.n	8000c28 <_Z11StartTask02PKv+0x8>

08000c30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d101      	bne.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c42:	f000 faab 	bl	800119c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40001400 	.word	0x40001400

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <Error_Handler+0x8>
	...

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_MspInit+0x54>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	f06f 0001 	mvn.w	r0, #1
 8000ca6:	f001 f9b3 	bl	8002010 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a46      	ldr	r2, [pc, #280]	; (8000df0 <HAL_CAN_MspInit+0x138>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d136      	bne.n	8000d48 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000cda:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <HAL_CAN_MspInit+0x13c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	4a44      	ldr	r2, [pc, #272]	; (8000df4 <HAL_CAN_MspInit+0x13c>)
 8000ce2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ce4:	4b43      	ldr	r3, [pc, #268]	; (8000df4 <HAL_CAN_MspInit+0x13c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d10d      	bne.n	8000d08 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	4b41      	ldr	r3, [pc, #260]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a40      	ldr	r2, [pc, #256]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000cf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a39      	ldr	r2, [pc, #228]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d36:	2309      	movs	r3, #9
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	482e      	ldr	r0, [pc, #184]	; (8000dfc <HAL_CAN_MspInit+0x144>)
 8000d42:	f001 f98f 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000d46:	e04f      	b.n	8000de8 <HAL_CAN_MspInit+0x130>
  else if(hcan->Instance==CAN2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	; (8000e00 <HAL_CAN_MspInit+0x148>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d14a      	bne.n	8000de8 <HAL_CAN_MspInit+0x130>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a27      	ldr	r2, [pc, #156]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <HAL_CAN_MspInit+0x13c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	4a1f      	ldr	r2, [pc, #124]	; (8000df4 <HAL_CAN_MspInit+0x13c>)
 8000d76:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <HAL_CAN_MspInit+0x13c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d10d      	bne.n	8000d9c <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000d8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_CAN_MspInit+0x140>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000db8:	2360      	movs	r3, #96	; 0x60
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000dc8:	2309      	movs	r3, #9
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480a      	ldr	r0, [pc, #40]	; (8000dfc <HAL_CAN_MspInit+0x144>)
 8000dd4:	f001 f946 	bl	8002064 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2105      	movs	r1, #5
 8000ddc:	2040      	movs	r0, #64	; 0x40
 8000dde:	f001 f917 	bl	8002010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000de2:	2040      	movs	r0, #64	; 0x40
 8000de4:	f001 f930 	bl	8002048 <HAL_NVIC_EnableIRQ>
}
 8000de8:	bf00      	nop
 8000dea:	3730      	adds	r7, #48	; 0x30
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40006400 	.word	0x40006400
 8000df4:	2000042c 	.word	0x2000042c
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020400 	.word	0x40020400
 8000e00:	40006800 	.word	0x40006800

08000e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_UART_MspInit+0x84>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12c      	bne.n	8000e80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e4c:	f043 0308 	orr.w	r3, r3, #8
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_UART_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e70:	2307      	movs	r3, #7
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_UART_MspInit+0x8c>)
 8000e7c:	f001 f8f2 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	; 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40004800 	.word	0x40004800
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020c00 	.word	0x40020c00

08000e94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	2037      	movs	r0, #55	; 0x37
 8000eaa:	f001 f8b1 	bl	8002010 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000eae:	2037      	movs	r0, #55	; 0x37
 8000eb0:	f001 f8ca 	bl	8002048 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <HAL_InitTick+0xa0>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <HAL_InitTick+0xa0>)
 8000ebe:	f043 0320 	orr.w	r3, r3, #32
 8000ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_InitTick+0xa0>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed0:	f107 0210 	add.w	r2, r7, #16
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fefa 	bl	8002cd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ee0:	f001 fed0 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8000ee4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <HAL_InitTick+0xa4>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	0c9b      	lsrs	r3, r3, #18
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_InitTick+0xa8>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <HAL_InitTick+0xac>)
 8000ef8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_InitTick+0xa8>)
 8000efc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f00:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <HAL_InitTick+0xa8>)
 8000f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f06:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_InitTick+0xa8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_InitTick+0xa8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <HAL_InitTick+0xa8>)
 8000f16:	f001 ff0f 	bl	8002d38 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d104      	bne.n	8000f2a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000f20:	4806      	ldr	r0, [pc, #24]	; (8000f3c <HAL_InitTick+0xa8>)
 8000f22:	f001 ff63 	bl	8002dec <HAL_TIM_Base_Start_IT>
 8000f26:	4603      	mov	r3, r0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	431bde83 	.word	0x431bde83
 8000f3c:	20000430 	.word	0x20000430
 8000f40:	40001400 	.word	0x40001400

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM7_IRQHandler+0x10>)
 8000f76:	f001 ffa9 	bl	8002ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000430 	.word	0x20000430

08000f84 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <CAN2_RX0_IRQHandler+0x10>)
 8000f8a:	f000 fd5a 	bl	8001a42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000030c 	.word	0x2000030c

08000f98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	e00a      	b.n	8000fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000faa:	f3af 8000 	nop.w
 8000fae:	4601      	mov	r1, r0
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	b2ca      	uxtb	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf0      	blt.n	8000faa <_read+0x12>
	}

return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e009      	b.n	8000ff8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60ba      	str	r2, [r7, #8]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf1      	blt.n	8000fe4 <_write+0x12>
	}
	return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_close>:

int _close(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
	return -1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001032:	605a      	str	r2, [r3, #4]
	return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_isatty>:

int _isatty(int file)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
	return 1;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <_sbrk+0x5c>)
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <_sbrk+0x60>)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <_sbrk+0x64>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <_sbrk+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d207      	bcs.n	80010b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a4:	f003 fe02 	bl	8004cac <__errno>
 80010a8:	4603      	mov	r3, r0
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <_sbrk+0x64>)
 80010c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20030000 	.word	0x20030000
 80010d4:	00000400 	.word	0x00000400
 80010d8:	20000478 	.word	0x20000478
 80010dc:	200041e8 	.word	0x200041e8

080010e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <SystemInit+0x20>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <SystemInit+0x20>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800113c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800110a:	490e      	ldr	r1, [pc, #56]	; (8001144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001120:	4c0b      	ldr	r4, [pc, #44]	; (8001150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800112e:	f7ff ffd7 	bl	80010e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001132:	f003 fdc1 	bl	8004cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001136:	f7ff fad1 	bl	80006dc <main>
  bx  lr    
 800113a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800113c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001148:	08005db8 	.word	0x08005db8
  ldr r2, =_sbss
 800114c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001150:	200041e4 	.word	0x200041e4

08001154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC_IRQHandler>
	...

08001158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <HAL_Init+0x40>)
 8001162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <HAL_Init+0x40>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_Init+0x40>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 ff3a 	bl	8001ffa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	200f      	movs	r0, #15
 8001188:	f7ff fe84 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fd68 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023c00 	.word	0x40023c00

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008
 80011c0:	2000047c 	.word	0x2000047c

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000047c 	.word	0x2000047c

080011dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0ed      	b.n	80013ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fd5c 	bl	8000cb8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0201 	orr.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001210:	f7ff ffd8 	bl	80011c4 <HAL_GetTick>
 8001214:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001216:	e012      	b.n	800123e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001218:	f7ff ffd4 	bl	80011c4 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b0a      	cmp	r3, #10
 8001224:	d90b      	bls.n	800123e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2205      	movs	r2, #5
 8001236:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e0c5      	b.n	80013ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0e5      	beq.n	8001218 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0202 	bic.w	r2, r2, #2
 800125a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800125c:	f7ff ffb2 	bl	80011c4 <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001262:	e012      	b.n	800128a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001264:	f7ff ffae 	bl	80011c4 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b0a      	cmp	r3, #10
 8001270:	d90b      	bls.n	800128a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2205      	movs	r2, #5
 8001282:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e09f      	b.n	80013ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e5      	bne.n	8001264 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7e1b      	ldrb	r3, [r3, #24]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e007      	b.n	80012c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7e5b      	ldrb	r3, [r3, #25]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e007      	b.n	80012ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7e9b      	ldrb	r3, [r3, #26]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d108      	bne.n	8001306 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0220 	orr.w	r2, r2, #32
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	e007      	b.n	8001316 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0220 	bic.w	r2, r2, #32
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7edb      	ldrb	r3, [r3, #27]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d108      	bne.n	8001330 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0210 	bic.w	r2, r2, #16
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e007      	b.n	8001340 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0210 	orr.w	r2, r2, #16
 800133e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7f1b      	ldrb	r3, [r3, #28]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d108      	bne.n	800135a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0208 	orr.w	r2, r2, #8
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e007      	b.n	800136a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0208 	bic.w	r2, r2, #8
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7f5b      	ldrb	r3, [r3, #29]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d108      	bne.n	8001384 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0204 	orr.w	r2, r2, #4
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e007      	b.n	8001394 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0204 	bic.w	r2, r2, #4
 8001392:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	ea42 0103 	orr.w	r1, r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	1e5a      	subs	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013ec:	7cfb      	ldrb	r3, [r7, #19]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d003      	beq.n	80013fa <HAL_CAN_ConfigFilter+0x26>
 80013f2:	7cfb      	ldrb	r3, [r7, #19]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	f040 80be 	bne.w	8001576 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80013fa:	4b65      	ldr	r3, [pc, #404]	; (8001590 <HAL_CAN_ConfigFilter+0x1bc>)
 80013fc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001414:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	431a      	orrs	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	2201      	movs	r2, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43db      	mvns	r3, r3
 800144c:	401a      	ands	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d123      	bne.n	80014a4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43db      	mvns	r3, r3
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800147e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3248      	adds	r2, #72	; 0x48
 8001484:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001498:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800149a:	6979      	ldr	r1, [r7, #20]
 800149c:	3348      	adds	r3, #72	; 0x48
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d122      	bne.n	80014f2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3248      	adds	r2, #72	; 0x48
 80014d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014e8:	6979      	ldr	r1, [r7, #20]
 80014ea:	3348      	adds	r3, #72	; 0x48
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	43db      	mvns	r3, r3
 8001504:	401a      	ands	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800150c:	e007      	b.n	800151e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	431a      	orrs	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d109      	bne.n	800153a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43db      	mvns	r3, r3
 8001530:	401a      	ands	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001538:	e007      	b.n	800154a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	431a      	orrs	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d107      	bne.n	8001562 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	431a      	orrs	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001568:	f023 0201 	bic.w	r2, r3, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e006      	b.n	8001584 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
  }
}
 8001584:	4618      	mov	r0, r3
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40006400 	.word	0x40006400

08001594 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d12e      	bne.n	8001606 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2202      	movs	r2, #2
 80015ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015c0:	f7ff fe00 	bl	80011c4 <HAL_GetTick>
 80015c4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015c6:	e012      	b.n	80015ee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c8:	f7ff fdfc 	bl	80011c4 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b0a      	cmp	r3, #10
 80015d4:	d90b      	bls.n	80015ee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2205      	movs	r2, #5
 80015e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e012      	b.n	8001614 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1e5      	bne.n	80015c8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e006      	b.n	8001614 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
  }
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001630:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d003      	beq.n	8001648 <HAL_CAN_AddTxMessage+0x2c>
 8001640:	7ffb      	ldrb	r3, [r7, #31]
 8001642:	2b02      	cmp	r3, #2
 8001644:	f040 80b8 	bne.w	80017b8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10a      	bne.n	8001668 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001658:	2b00      	cmp	r3, #0
 800165a:	d105      	bne.n	8001668 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 80a0 	beq.w	80017a8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	0e1b      	lsrs	r3, r3, #24
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d907      	bls.n	8001688 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e09e      	b.n	80017c6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001688:	2201      	movs	r2, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	409a      	lsls	r2, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10d      	bne.n	80016b6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016a4:	68f9      	ldr	r1, [r7, #12]
 80016a6:	6809      	ldr	r1, [r1, #0]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3318      	adds	r3, #24
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	440b      	add	r3, r1
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e00f      	b.n	80016d6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c6:	68f9      	ldr	r1, [r7, #12]
 80016c8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016ca:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3318      	adds	r3, #24
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	440b      	add	r3, r1
 80016d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6819      	ldr	r1, [r3, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3318      	adds	r3, #24
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	440b      	add	r3, r1
 80016e6:	3304      	adds	r3, #4
 80016e8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	7d1b      	ldrb	r3, [r3, #20]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d111      	bne.n	8001716 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3318      	adds	r3, #24
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	3304      	adds	r3, #4
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	6811      	ldr	r1, [r2, #0]
 8001706:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3318      	adds	r3, #24
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	440b      	add	r3, r1
 8001712:	3304      	adds	r3, #4
 8001714:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3307      	adds	r3, #7
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	061a      	lsls	r2, r3, #24
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3306      	adds	r3, #6
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3305      	adds	r3, #5
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	4313      	orrs	r3, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	3204      	adds	r2, #4
 8001736:	7812      	ldrb	r2, [r2, #0]
 8001738:	4610      	mov	r0, r2
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	6811      	ldr	r1, [r2, #0]
 800173e:	ea43 0200 	orr.w	r2, r3, r0
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	440b      	add	r3, r1
 8001748:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800174c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3303      	adds	r3, #3
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	061a      	lsls	r2, r3, #24
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3302      	adds	r3, #2
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	041b      	lsls	r3, r3, #16
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3301      	adds	r3, #1
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	4313      	orrs	r3, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	7812      	ldrb	r2, [r2, #0]
 800176e:	4610      	mov	r0, r2
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	6811      	ldr	r1, [r2, #0]
 8001774:	ea43 0200 	orr.w	r2, r3, r0
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	440b      	add	r3, r1
 800177e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001782:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3318      	adds	r3, #24
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	6811      	ldr	r1, [r2, #0]
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3318      	adds	r3, #24
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	440b      	add	r3, r1
 80017a2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e00e      	b.n	80017c6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e006      	b.n	80017c6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
  }
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017d2:	b480      	push	{r7}
 80017d4:	b087      	sub	sp, #28
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d003      	beq.n	80017f6 <HAL_CAN_GetRxMessage+0x24>
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	f040 80f3 	bne.w	80019dc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10e      	bne.n	800181a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d116      	bne.n	8001838 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0e7      	b.n	80019ea <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0d8      	b.n	80019ea <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	331b      	adds	r3, #27
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	4413      	add	r3, r2
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0204 	and.w	r2, r3, #4
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	331b      	adds	r3, #27
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	4413      	add	r3, r2
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0d5b      	lsrs	r3, r3, #21
 8001866:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e00b      	b.n	8001888 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	331b      	adds	r3, #27
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	4413      	add	r3, r2
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	08db      	lsrs	r3, r3, #3
 8001880:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	331b      	adds	r3, #27
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4413      	add	r3, r2
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0202 	and.w	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	331b      	adds	r3, #27
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	4413      	add	r3, r2
 80018aa:	3304      	adds	r3, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 020f 	and.w	r2, r3, #15
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	331b      	adds	r3, #27
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	4413      	add	r3, r2
 80018c2:	3304      	adds	r3, #4
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	331b      	adds	r3, #27
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4413      	add	r3, r2
 80018da:	3304      	adds	r3, #4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	0c1b      	lsrs	r3, r3, #16
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	4413      	add	r3, r2
 8001906:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0a1a      	lsrs	r2, r3, #8
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	4413      	add	r3, r2
 8001920:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	0c1a      	lsrs	r2, r3, #16
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	3302      	adds	r3, #2
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	4413      	add	r3, r2
 800193a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0e1a      	lsrs	r2, r3, #24
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	3303      	adds	r3, #3
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4413      	add	r3, r2
 8001954:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	3304      	adds	r3, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	4413      	add	r3, r2
 800196c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0a1a      	lsrs	r2, r3, #8
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	3305      	adds	r3, #5
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	4413      	add	r3, r2
 8001986:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0c1a      	lsrs	r2, r3, #16
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	3306      	adds	r3, #6
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	4413      	add	r3, r2
 80019a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0e1a      	lsrs	r2, r3, #24
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	3307      	adds	r3, #7
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d108      	bne.n	80019c8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0220 	orr.w	r2, r2, #32
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	e007      	b.n	80019d8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0220 	orr.w	r2, r2, #32
 80019d6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	e006      	b.n	80019ea <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
  }
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	371c      	adds	r7, #28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a06:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d002      	beq.n	8001a14 <HAL_CAN_ActivateNotification+0x1e>
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d109      	bne.n	8001a28 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6959      	ldr	r1, [r3, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e006      	b.n	8001a36 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
  }
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b08a      	sub	sp, #40	; 0x28
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d07c      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d023      	beq.n	8001ada <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f983 	bl	8001db0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001aaa:	e016      	b.n	8001ada <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d004      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
 8001abe:	e00c      	b.n	8001ada <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad2:	e002      	b.n	8001ada <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f989 	bl	8001dec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d024      	beq.n	8001b2e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f963 	bl	8001dc4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001afe:	e016      	b.n	8001b2e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
 8001b12:	e00c      	b.n	8001b2e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
 8001b26:	e002      	b.n	8001b2e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f969 	bl	8001e00 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d024      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f943 	bl	8001dd8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b52:	e016      	b.n	8001b82 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	e00c      	b.n	8001b82 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7a:	e002      	b.n	8001b82 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f949 	bl	8001e14 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00c      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00b      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f930 	bl	8001e28 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7fe fd4f 	bl	8000684 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00c      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2210      	movs	r2, #16
 8001c08:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00b      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2208      	movs	r2, #8
 8001c24:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f912 	bl	8001e50 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f8f9 	bl	8001e3c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00b      	beq.n	8001c6c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2210      	movs	r2, #16
 8001c64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8fc 	bl	8001e64 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2208      	movs	r2, #8
 8001c86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f8f5 	bl	8001e78 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d07b      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d072      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d043      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d03e      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d10:	2b60      	cmp	r3, #96	; 0x60
 8001d12:	d02b      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x32a>
 8001d14:	2b60      	cmp	r3, #96	; 0x60
 8001d16:	d82e      	bhi.n	8001d76 <HAL_CAN_IRQHandler+0x334>
 8001d18:	2b50      	cmp	r3, #80	; 0x50
 8001d1a:	d022      	beq.n	8001d62 <HAL_CAN_IRQHandler+0x320>
 8001d1c:	2b50      	cmp	r3, #80	; 0x50
 8001d1e:	d82a      	bhi.n	8001d76 <HAL_CAN_IRQHandler+0x334>
 8001d20:	2b40      	cmp	r3, #64	; 0x40
 8001d22:	d019      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x316>
 8001d24:	2b40      	cmp	r3, #64	; 0x40
 8001d26:	d826      	bhi.n	8001d76 <HAL_CAN_IRQHandler+0x334>
 8001d28:	2b30      	cmp	r3, #48	; 0x30
 8001d2a:	d010      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x30c>
 8001d2c:	2b30      	cmp	r3, #48	; 0x30
 8001d2e:	d822      	bhi.n	8001d76 <HAL_CAN_IRQHandler+0x334>
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d002      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x2f8>
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d005      	beq.n	8001d44 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d38:	e01d      	b.n	8001d76 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d42:	e019      	b.n	8001d78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	f043 0310 	orr.w	r3, r3, #16
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d4c:	e014      	b.n	8001d78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	f043 0320 	orr.w	r3, r3, #32
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d56:	e00f      	b.n	8001d78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d60:	e00a      	b.n	8001d78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d6a:	e005      	b.n	8001d78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d74:	e000      	b.n	8001d78 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d76:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d86:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d008      	beq.n	8001da8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f872 	bl	8001e8c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed2:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	60d3      	str	r3, [r2, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <__NVIC_GetPriorityGrouping+0x18>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	f003 0307 	and.w	r3, r3, #7
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db0b      	blt.n	8001f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	4907      	ldr	r1, [pc, #28]	; (8001f3c <__NVIC_EnableIRQ+0x38>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	2001      	movs	r0, #1
 8001f26:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	; (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	; (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ff4c 	bl	8001ea0 <__NVIC_SetPriorityGrouping>
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002022:	f7ff ff61 	bl	8001ee8 <__NVIC_GetPriorityGrouping>
 8002026:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	68b9      	ldr	r1, [r7, #8]
 800202c:	6978      	ldr	r0, [r7, #20]
 800202e:	f7ff ffb1 	bl	8001f94 <NVIC_EncodePriority>
 8002032:	4602      	mov	r2, r0
 8002034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff80 	bl	8001f40 <__NVIC_SetPriority>
}
 8002040:	bf00      	nop
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff54 	bl	8001f04 <__NVIC_EnableIRQ>
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	e177      	b.n	8002370 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	429a      	cmp	r2, r3
 800209a:	f040 8166 	bne.w	800236a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d005      	beq.n	80020b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d130      	bne.n	8002118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	2203      	movs	r2, #3
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ec:	2201      	movs	r2, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 0201 	and.w	r2, r3, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b03      	cmp	r3, #3
 8002122:	d017      	beq.n	8002154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d123      	bne.n	80021a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	08da      	lsrs	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3208      	adds	r2, #8
 8002168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	69b9      	ldr	r1, [r7, #24]
 80021a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0203 	and.w	r2, r3, #3
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80c0 	beq.w	800236a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b66      	ldr	r3, [pc, #408]	; (8002388 <HAL_GPIO_Init+0x324>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a65      	ldr	r2, [pc, #404]	; (8002388 <HAL_GPIO_Init+0x324>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b63      	ldr	r3, [pc, #396]	; (8002388 <HAL_GPIO_Init+0x324>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002206:	4a61      	ldr	r2, [pc, #388]	; (800238c <HAL_GPIO_Init+0x328>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a58      	ldr	r2, [pc, #352]	; (8002390 <HAL_GPIO_Init+0x32c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d037      	beq.n	80022a2 <HAL_GPIO_Init+0x23e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a57      	ldr	r2, [pc, #348]	; (8002394 <HAL_GPIO_Init+0x330>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d031      	beq.n	800229e <HAL_GPIO_Init+0x23a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a56      	ldr	r2, [pc, #344]	; (8002398 <HAL_GPIO_Init+0x334>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02b      	beq.n	800229a <HAL_GPIO_Init+0x236>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a55      	ldr	r2, [pc, #340]	; (800239c <HAL_GPIO_Init+0x338>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d025      	beq.n	8002296 <HAL_GPIO_Init+0x232>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a54      	ldr	r2, [pc, #336]	; (80023a0 <HAL_GPIO_Init+0x33c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01f      	beq.n	8002292 <HAL_GPIO_Init+0x22e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a53      	ldr	r2, [pc, #332]	; (80023a4 <HAL_GPIO_Init+0x340>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x22a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_GPIO_Init+0x344>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x226>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a51      	ldr	r2, [pc, #324]	; (80023ac <HAL_GPIO_Init+0x348>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x222>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a50      	ldr	r2, [pc, #320]	; (80023b0 <HAL_GPIO_Init+0x34c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x21e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4f      	ldr	r2, [pc, #316]	; (80023b4 <HAL_GPIO_Init+0x350>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x21a>
 800227a:	2309      	movs	r3, #9
 800227c:	e012      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800227e:	230a      	movs	r3, #10
 8002280:	e010      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002282:	2308      	movs	r3, #8
 8002284:	e00e      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002286:	2307      	movs	r3, #7
 8002288:	e00c      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800228a:	2306      	movs	r3, #6
 800228c:	e00a      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800228e:	2305      	movs	r3, #5
 8002290:	e008      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002292:	2304      	movs	r3, #4
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 80022a2:	2300      	movs	r3, #0
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b4:	4935      	ldr	r1, [pc, #212]	; (800238c <HAL_GPIO_Init+0x328>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_GPIO_Init+0x354>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022e6:	4a34      	ldr	r2, [pc, #208]	; (80023b8 <HAL_GPIO_Init+0x354>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ec:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <HAL_GPIO_Init+0x354>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002310:	4a29      	ldr	r2, [pc, #164]	; (80023b8 <HAL_GPIO_Init+0x354>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002316:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_GPIO_Init+0x354>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233a:	4a1f      	ldr	r2, [pc, #124]	; (80023b8 <HAL_GPIO_Init+0x354>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_GPIO_Init+0x354>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <HAL_GPIO_Init+0x354>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	f67f ae84 	bls.w	8002080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40013800 	.word	0x40013800
 8002390:	40020000 	.word	0x40020000
 8002394:	40020400 	.word	0x40020400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40021400 	.word	0x40021400
 80023a8:	40021800 	.word	0x40021800
 80023ac:	40021c00 	.word	0x40021c00
 80023b0:	40022000 	.word	0x40022000
 80023b4:	40022400 	.word	0x40022400
 80023b8:	40013c00 	.word	0x40013c00

080023bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	4613      	mov	r3, r2
 80023ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d8:	e003      	b.n	80023e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	041a      	lsls	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	619a      	str	r2, [r3, #24]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002400:	887a      	ldrh	r2, [r7, #2]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	041a      	lsls	r2, r3, #16
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43d9      	mvns	r1, r3
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	400b      	ands	r3, r1
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	619a      	str	r2, [r3, #24]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e267      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d075      	beq.n	800252e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002442:	4b88      	ldr	r3, [pc, #544]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b04      	cmp	r3, #4
 800244c:	d00c      	beq.n	8002468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244e:	4b85      	ldr	r3, [pc, #532]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002456:	2b08      	cmp	r3, #8
 8002458:	d112      	bne.n	8002480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245a:	4b82      	ldr	r3, [pc, #520]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002466:	d10b      	bne.n	8002480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	4b7e      	ldr	r3, [pc, #504]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d05b      	beq.n	800252c <HAL_RCC_OscConfig+0x108>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d157      	bne.n	800252c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e242      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002488:	d106      	bne.n	8002498 <HAL_RCC_OscConfig+0x74>
 800248a:	4b76      	ldr	r3, [pc, #472]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a75      	ldr	r2, [pc, #468]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e01d      	b.n	80024d4 <HAL_RCC_OscConfig+0xb0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x98>
 80024a2:	4b70      	ldr	r3, [pc, #448]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6f      	ldr	r2, [pc, #444]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b6d      	ldr	r3, [pc, #436]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6c      	ldr	r2, [pc, #432]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0xb0>
 80024bc:	4b69      	ldr	r3, [pc, #420]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a68      	ldr	r2, [pc, #416]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b66      	ldr	r3, [pc, #408]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a65      	ldr	r2, [pc, #404]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fe72 	bl	80011c4 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e4:	f7fe fe6e 	bl	80011c4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e207      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b5b      	ldr	r3, [pc, #364]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0xc0>
 8002502:	e014      	b.n	800252e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fe5e 	bl	80011c4 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800250c:	f7fe fe5a 	bl	80011c4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1f3      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	4b51      	ldr	r3, [pc, #324]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0xe8>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d063      	beq.n	8002602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800253a:	4b4a      	ldr	r3, [pc, #296]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002546:	4b47      	ldr	r3, [pc, #284]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254e:	2b08      	cmp	r3, #8
 8002550:	d11c      	bne.n	800258c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002552:	4b44      	ldr	r3, [pc, #272]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d116      	bne.n	800258c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	4b41      	ldr	r3, [pc, #260]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_RCC_OscConfig+0x152>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e1c7      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4937      	ldr	r1, [pc, #220]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	e03a      	b.n	8002602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002594:	4b34      	ldr	r3, [pc, #208]	; (8002668 <HAL_RCC_OscConfig+0x244>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fe13 	bl	80011c4 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe fe0f 	bl	80011c4 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1a8      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b28      	ldr	r3, [pc, #160]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4925      	ldr	r1, [pc, #148]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
 80025d4:	e015      	b.n	8002602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <HAL_RCC_OscConfig+0x244>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe fdf2 	bl	80011c4 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e4:	f7fe fdee 	bl	80011c4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e187      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d036      	beq.n	800267c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <HAL_RCC_OscConfig+0x248>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fe fdd2 	bl	80011c4 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe fdce 	bl	80011c4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e167      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x200>
 8002642:	e01b      	b.n	800267c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCC_OscConfig+0x248>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7fe fdbb 	bl	80011c4 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002650:	e00e      	b.n	8002670 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002652:	f7fe fdb7 	bl	80011c4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d907      	bls.n	8002670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e150      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
 8002664:	40023800 	.word	0x40023800
 8002668:	42470000 	.word	0x42470000
 800266c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002670:	4b88      	ldr	r3, [pc, #544]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1ea      	bne.n	8002652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8097 	beq.w	80027b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268e:	4b81      	ldr	r3, [pc, #516]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	4b7d      	ldr	r3, [pc, #500]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a7c      	ldr	r2, [pc, #496]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	4b7a      	ldr	r3, [pc, #488]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b6:	2301      	movs	r3, #1
 80026b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b77      	ldr	r3, [pc, #476]	; (8002898 <HAL_RCC_OscConfig+0x474>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d118      	bne.n	80026f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c6:	4b74      	ldr	r3, [pc, #464]	; (8002898 <HAL_RCC_OscConfig+0x474>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a73      	ldr	r2, [pc, #460]	; (8002898 <HAL_RCC_OscConfig+0x474>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fd77 	bl	80011c4 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026da:	f7fe fd73 	bl	80011c4 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e10c      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	4b6a      	ldr	r3, [pc, #424]	; (8002898 <HAL_RCC_OscConfig+0x474>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x2ea>
 8002700:	4b64      	ldr	r3, [pc, #400]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a63      	ldr	r2, [pc, #396]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	e01c      	b.n	8002748 <HAL_RCC_OscConfig+0x324>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b05      	cmp	r3, #5
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0x30c>
 8002716:	4b5f      	ldr	r3, [pc, #380]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	4a5e      	ldr	r2, [pc, #376]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	6713      	str	r3, [r2, #112]	; 0x70
 8002722:	4b5c      	ldr	r3, [pc, #368]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	4a5b      	ldr	r2, [pc, #364]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6713      	str	r3, [r2, #112]	; 0x70
 800272e:	e00b      	b.n	8002748 <HAL_RCC_OscConfig+0x324>
 8002730:	4b58      	ldr	r3, [pc, #352]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4a57      	ldr	r2, [pc, #348]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	6713      	str	r3, [r2, #112]	; 0x70
 800273c:	4b55      	ldr	r3, [pc, #340]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a54      	ldr	r2, [pc, #336]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002742:	f023 0304 	bic.w	r3, r3, #4
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d015      	beq.n	800277c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe fd38 	bl	80011c4 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7fe fd34 	bl	80011c4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0cb      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276e:	4b49      	ldr	r3, [pc, #292]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0ee      	beq.n	8002758 <HAL_RCC_OscConfig+0x334>
 800277a:	e014      	b.n	80027a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277c:	f7fe fd22 	bl	80011c4 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7fe fd1e 	bl	80011c4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e0b5      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279a:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ee      	bne.n	8002784 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ac:	4b39      	ldr	r3, [pc, #228]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	4a38      	ldr	r2, [pc, #224]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80027b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80a1 	beq.w	8002904 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c2:	4b34      	ldr	r3, [pc, #208]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d05c      	beq.n	8002888 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d141      	bne.n	800285a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4b31      	ldr	r3, [pc, #196]	; (800289c <HAL_RCC_OscConfig+0x478>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7fe fcf2 	bl	80011c4 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e4:	f7fe fcee 	bl	80011c4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e087      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f6:	4b27      	ldr	r3, [pc, #156]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69da      	ldr	r2, [r3, #28]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	019b      	lsls	r3, r3, #6
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	3b01      	subs	r3, #1
 800281c:	041b      	lsls	r3, r3, #16
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	491b      	ldr	r1, [pc, #108]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x478>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7fe fcc7 	bl	80011c4 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283a:	f7fe fcc3 	bl	80011c4 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e05c      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x416>
 8002858:	e054      	b.n	8002904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <HAL_RCC_OscConfig+0x478>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe fcb0 	bl	80011c4 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe fcac 	bl	80011c4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e045      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x444>
 8002886:	e03d      	b.n	8002904 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e038      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
 8002894:	40023800 	.word	0x40023800
 8002898:	40007000 	.word	0x40007000
 800289c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <HAL_RCC_OscConfig+0x4ec>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d028      	beq.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d121      	bne.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d11a      	bne.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d0:	4013      	ands	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d8:	4293      	cmp	r3, r2
 80028da:	d111      	bne.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	3b01      	subs	r3, #1
 80028ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800

08002914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0cc      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b68      	ldr	r3, [pc, #416]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d90c      	bls.n	8002950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b65      	ldr	r3, [pc, #404]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b63      	ldr	r3, [pc, #396]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0b8      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002968:	4b59      	ldr	r3, [pc, #356]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a58      	ldr	r2, [pc, #352]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002980:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800298a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298c:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	494d      	ldr	r1, [pc, #308]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d044      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d119      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e07f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b3f      	ldr	r3, [pc, #252]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e06f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e067      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b37      	ldr	r3, [pc, #220]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4934      	ldr	r1, [pc, #208]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a04:	f7fe fbde 	bl	80011c4 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7fe fbda 	bl	80011c4 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e04f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b25      	ldr	r3, [pc, #148]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d20c      	bcs.n	8002a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b22      	ldr	r3, [pc, #136]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e032      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4916      	ldr	r1, [pc, #88]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	490e      	ldr	r1, [pc, #56]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a9a:	f000 f821 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	490a      	ldr	r1, [pc, #40]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	5ccb      	ldrb	r3, [r1, r3]
 8002aae:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab2:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe f9ea 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023c00 	.word	0x40023c00
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	08005cf8 	.word	0x08005cf8
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000004 	.word	0x20000004

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae4:	b090      	sub	sp, #64	; 0x40
 8002ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
 8002aec:	2300      	movs	r3, #0
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002af0:	2300      	movs	r3, #0
 8002af2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af8:	4b59      	ldr	r3, [pc, #356]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d00d      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x40>
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	f200 80a1 	bhi.w	8002c4c <HAL_RCC_GetSysClockFreq+0x16c>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0x34>
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d003      	beq.n	8002b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b12:	e09b      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b14:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b18:	e09b      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b1a:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b1e:	e098      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b20:	4b4f      	ldr	r3, [pc, #316]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b2a:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d028      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b36:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	099b      	lsrs	r3, r3, #6
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	627a      	str	r2, [r7, #36]	; 0x24
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b4c:	fb03 f201 	mul.w	r2, r3, r1
 8002b50:	2300      	movs	r3, #0
 8002b52:	fb00 f303 	mul.w	r3, r0, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	4a43      	ldr	r2, [pc, #268]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b5a:	fba0 1202 	umull	r1, r2, r0, r2
 8002b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b60:	460a      	mov	r2, r1
 8002b62:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b66:	4413      	add	r3, r2
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	61fa      	str	r2, [r7, #28]
 8002b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b7a:	f7fd fb89 	bl	8000290 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4613      	mov	r3, r2
 8002b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b86:	e053      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b88:	4b35      	ldr	r3, [pc, #212]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	099b      	lsrs	r3, r3, #6
 8002b8e:	2200      	movs	r2, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	617a      	str	r2, [r7, #20]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b9a:	f04f 0b00 	mov.w	fp, #0
 8002b9e:	4652      	mov	r2, sl
 8002ba0:	465b      	mov	r3, fp
 8002ba2:	f04f 0000 	mov.w	r0, #0
 8002ba6:	f04f 0100 	mov.w	r1, #0
 8002baa:	0159      	lsls	r1, r3, #5
 8002bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb0:	0150      	lsls	r0, r2, #5
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	ebb2 080a 	subs.w	r8, r2, sl
 8002bba:	eb63 090b 	sbc.w	r9, r3, fp
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bd2:	ebb2 0408 	subs.w	r4, r2, r8
 8002bd6:	eb63 0509 	sbc.w	r5, r3, r9
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	00eb      	lsls	r3, r5, #3
 8002be4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be8:	00e2      	lsls	r2, r4, #3
 8002bea:	4614      	mov	r4, r2
 8002bec:	461d      	mov	r5, r3
 8002bee:	eb14 030a 	adds.w	r3, r4, sl
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	eb45 030b 	adc.w	r3, r5, fp
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c06:	4629      	mov	r1, r5
 8002c08:	028b      	lsls	r3, r1, #10
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c10:	4621      	mov	r1, r4
 8002c12:	028a      	lsls	r2, r1, #10
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	60fa      	str	r2, [r7, #12]
 8002c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c24:	f7fd fb34 	bl	8000290 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	0c1b      	lsrs	r3, r3, #16
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c4a:	e002      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3740      	adds	r7, #64	; 0x40
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	00f42400 	.word	0x00f42400
 8002c68:	017d7840 	.word	0x017d7840

08002c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000000 	.word	0x20000000

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c88:	f7ff fff0 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	0a9b      	lsrs	r3, r3, #10
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08005d08 	.word	0x08005d08

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cb0:	f7ff ffdc 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0b5b      	lsrs	r3, r3, #13
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	08005d08 	.word	0x08005d08

08002cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	220f      	movs	r2, #15
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_GetClockConfig+0x5c>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0203 	and.w	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <HAL_RCC_GetClockConfig+0x5c>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <HAL_RCC_GetClockConfig+0x5c>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_RCC_GetClockConfig+0x5c>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	08db      	lsrs	r3, r3, #3
 8002d0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d16:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <HAL_RCC_GetClockConfig+0x60>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 020f 	and.w	r2, r3, #15
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	601a      	str	r2, [r3, #0]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40023c00 	.word	0x40023c00

08002d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e041      	b.n	8002dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f839 	bl	8002dd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3304      	adds	r3, #4
 8002d74:	4619      	mov	r1, r3
 8002d76:	4610      	mov	r0, r2
 8002d78:	f000 f9d8 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d001      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e04e      	b.n	8002ea2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d022      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2e:	d01d      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d018      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d013      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00e      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1b      	ldr	r2, [pc, #108]	; (8002ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d009      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a19      	ldr	r2, [pc, #100]	; (8002ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x80>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d111      	bne.n	8002e90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d010      	beq.n	8002ea0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8e:	e007      	b.n	8002ea0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	40000800 	.word	0x40000800
 8002ebc:	40000c00 	.word	0x40000c00
 8002ec0:	40010400 	.word	0x40010400
 8002ec4:	40014000 	.word	0x40014000
 8002ec8:	40001800 	.word	0x40001800

08002ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d122      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d11b      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0202 	mvn.w	r2, #2
 8002ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f8ee 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002f14:	e005      	b.n	8002f22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f8e0 	bl	80030dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f8f1 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d122      	bne.n	8002f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d11b      	bne.n	8002f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0204 	mvn.w	r2, #4
 8002f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f8c4 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002f68:	e005      	b.n	8002f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f8b6 	bl	80030dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f8c7 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d122      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d11b      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0208 	mvn.w	r2, #8
 8002fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f89a 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f88c 	bl	80030dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f89d 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b10      	cmp	r3, #16
 8002fdc:	d122      	bne.n	8003024 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d11b      	bne.n	8003024 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0210 	mvn.w	r2, #16
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f870 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f862 	bl	80030dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f873 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d10e      	bne.n	8003050 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d107      	bne.n	8003050 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0201 	mvn.w	r2, #1
 8003048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd fdf0 	bl	8000c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	2b80      	cmp	r3, #128	; 0x80
 800305c:	d10e      	bne.n	800307c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003068:	2b80      	cmp	r3, #128	; 0x80
 800306a:	d107      	bne.n	800307c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f902 	bl	8003280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003086:	2b40      	cmp	r3, #64	; 0x40
 8003088:	d10e      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d107      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f838 	bl	8003118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	d10e      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d107      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0220 	mvn.w	r2, #32
 80030cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f8cc 	bl	800326c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a40      	ldr	r2, [pc, #256]	; (8003240 <TIM_Base_SetConfig+0x114>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d013      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314a:	d00f      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3d      	ldr	r2, [pc, #244]	; (8003244 <TIM_Base_SetConfig+0x118>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00b      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3c      	ldr	r2, [pc, #240]	; (8003248 <TIM_Base_SetConfig+0x11c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d007      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3b      	ldr	r2, [pc, #236]	; (800324c <TIM_Base_SetConfig+0x120>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3a      	ldr	r2, [pc, #232]	; (8003250 <TIM_Base_SetConfig+0x124>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d108      	bne.n	800317e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2f      	ldr	r2, [pc, #188]	; (8003240 <TIM_Base_SetConfig+0x114>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d02b      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d027      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <TIM_Base_SetConfig+0x118>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d023      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2b      	ldr	r2, [pc, #172]	; (8003248 <TIM_Base_SetConfig+0x11c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01f      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2a      	ldr	r2, [pc, #168]	; (800324c <TIM_Base_SetConfig+0x120>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01b      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a29      	ldr	r2, [pc, #164]	; (8003250 <TIM_Base_SetConfig+0x124>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d017      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a28      	ldr	r2, [pc, #160]	; (8003254 <TIM_Base_SetConfig+0x128>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a27      	ldr	r2, [pc, #156]	; (8003258 <TIM_Base_SetConfig+0x12c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00f      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a26      	ldr	r2, [pc, #152]	; (800325c <TIM_Base_SetConfig+0x130>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00b      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a25      	ldr	r2, [pc, #148]	; (8003260 <TIM_Base_SetConfig+0x134>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a24      	ldr	r2, [pc, #144]	; (8003264 <TIM_Base_SetConfig+0x138>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d003      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a23      	ldr	r2, [pc, #140]	; (8003268 <TIM_Base_SetConfig+0x13c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d108      	bne.n	80031f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <TIM_Base_SetConfig+0x114>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_Base_SetConfig+0xf8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <TIM_Base_SetConfig+0x124>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	615a      	str	r2, [r3, #20]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40010000 	.word	0x40010000
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800
 800324c:	40000c00 	.word	0x40000c00
 8003250:	40010400 	.word	0x40010400
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800
 8003260:	40001800 	.word	0x40001800
 8003264:	40001c00 	.word	0x40001c00
 8003268:	40002000 	.word	0x40002000

0800326c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e03f      	b.n	8003326 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fd fda2 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2224      	movs	r2, #36	; 0x24
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f829 	bl	8003330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800330c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003334:	b0c0      	sub	sp, #256	; 0x100
 8003336:	af00      	add	r7, sp, #0
 8003338:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334c:	68d9      	ldr	r1, [r3, #12]
 800334e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	ea40 0301 	orr.w	r3, r0, r1
 8003358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800335a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	431a      	orrs	r2, r3
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	431a      	orrs	r2, r3
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003388:	f021 010c 	bic.w	r1, r1, #12
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003396:	430b      	orrs	r3, r1
 8003398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033aa:	6999      	ldr	r1, [r3, #24]
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	ea40 0301 	orr.w	r3, r0, r1
 80033b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b8f      	ldr	r3, [pc, #572]	; (80035fc <UART_SetConfig+0x2cc>)
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d005      	beq.n	80033d0 <UART_SetConfig+0xa0>
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b8d      	ldr	r3, [pc, #564]	; (8003600 <UART_SetConfig+0x2d0>)
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d104      	bne.n	80033da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033d0:	f7ff fc6c 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 80033d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033d8:	e003      	b.n	80033e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033da:	f7ff fc53 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80033de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ec:	f040 810c 	bne.w	8003608 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033f4:	2200      	movs	r2, #0
 80033f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003402:	4622      	mov	r2, r4
 8003404:	462b      	mov	r3, r5
 8003406:	1891      	adds	r1, r2, r2
 8003408:	65b9      	str	r1, [r7, #88]	; 0x58
 800340a:	415b      	adcs	r3, r3
 800340c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800340e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003412:	4621      	mov	r1, r4
 8003414:	eb12 0801 	adds.w	r8, r2, r1
 8003418:	4629      	mov	r1, r5
 800341a:	eb43 0901 	adc.w	r9, r3, r1
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800342e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003432:	4690      	mov	r8, r2
 8003434:	4699      	mov	r9, r3
 8003436:	4623      	mov	r3, r4
 8003438:	eb18 0303 	adds.w	r3, r8, r3
 800343c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003440:	462b      	mov	r3, r5
 8003442:	eb49 0303 	adc.w	r3, r9, r3
 8003446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800344a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003456:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800345a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800345e:	460b      	mov	r3, r1
 8003460:	18db      	adds	r3, r3, r3
 8003462:	653b      	str	r3, [r7, #80]	; 0x50
 8003464:	4613      	mov	r3, r2
 8003466:	eb42 0303 	adc.w	r3, r2, r3
 800346a:	657b      	str	r3, [r7, #84]	; 0x54
 800346c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003470:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003474:	f7fc ff0c 	bl	8000290 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4b61      	ldr	r3, [pc, #388]	; (8003604 <UART_SetConfig+0x2d4>)
 800347e:	fba3 2302 	umull	r2, r3, r3, r2
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	011c      	lsls	r4, r3, #4
 8003486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800348a:	2200      	movs	r2, #0
 800348c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003490:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003494:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	1891      	adds	r1, r2, r2
 800349e:	64b9      	str	r1, [r7, #72]	; 0x48
 80034a0:	415b      	adcs	r3, r3
 80034a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034a8:	4641      	mov	r1, r8
 80034aa:	eb12 0a01 	adds.w	sl, r2, r1
 80034ae:	4649      	mov	r1, r9
 80034b0:	eb43 0b01 	adc.w	fp, r3, r1
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034c8:	4692      	mov	sl, r2
 80034ca:	469b      	mov	fp, r3
 80034cc:	4643      	mov	r3, r8
 80034ce:	eb1a 0303 	adds.w	r3, sl, r3
 80034d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034d6:	464b      	mov	r3, r9
 80034d8:	eb4b 0303 	adc.w	r3, fp, r3
 80034dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034f4:	460b      	mov	r3, r1
 80034f6:	18db      	adds	r3, r3, r3
 80034f8:	643b      	str	r3, [r7, #64]	; 0x40
 80034fa:	4613      	mov	r3, r2
 80034fc:	eb42 0303 	adc.w	r3, r2, r3
 8003500:	647b      	str	r3, [r7, #68]	; 0x44
 8003502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003506:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800350a:	f7fc fec1 	bl	8000290 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4611      	mov	r1, r2
 8003514:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <UART_SetConfig+0x2d4>)
 8003516:	fba3 2301 	umull	r2, r3, r3, r1
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	2264      	movs	r2, #100	; 0x64
 800351e:	fb02 f303 	mul.w	r3, r2, r3
 8003522:	1acb      	subs	r3, r1, r3
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800352a:	4b36      	ldr	r3, [pc, #216]	; (8003604 <UART_SetConfig+0x2d4>)
 800352c:	fba3 2302 	umull	r2, r3, r3, r2
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003538:	441c      	add	r4, r3
 800353a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800353e:	2200      	movs	r2, #0
 8003540:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003544:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003548:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	1891      	adds	r1, r2, r2
 8003552:	63b9      	str	r1, [r7, #56]	; 0x38
 8003554:	415b      	adcs	r3, r3
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800355c:	4641      	mov	r1, r8
 800355e:	1851      	adds	r1, r2, r1
 8003560:	6339      	str	r1, [r7, #48]	; 0x30
 8003562:	4649      	mov	r1, r9
 8003564:	414b      	adcs	r3, r1
 8003566:	637b      	str	r3, [r7, #52]	; 0x34
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003574:	4659      	mov	r1, fp
 8003576:	00cb      	lsls	r3, r1, #3
 8003578:	4651      	mov	r1, sl
 800357a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800357e:	4651      	mov	r1, sl
 8003580:	00ca      	lsls	r2, r1, #3
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	4603      	mov	r3, r0
 8003588:	4642      	mov	r2, r8
 800358a:	189b      	adds	r3, r3, r2
 800358c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003590:	464b      	mov	r3, r9
 8003592:	460a      	mov	r2, r1
 8003594:	eb42 0303 	adc.w	r3, r2, r3
 8003598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035b0:	460b      	mov	r3, r1
 80035b2:	18db      	adds	r3, r3, r3
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b6:	4613      	mov	r3, r2
 80035b8:	eb42 0303 	adc.w	r3, r2, r3
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035c6:	f7fc fe63 	bl	8000290 <__aeabi_uldivmod>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <UART_SetConfig+0x2d4>)
 80035d0:	fba3 1302 	umull	r1, r3, r3, r2
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	2164      	movs	r1, #100	; 0x64
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	3332      	adds	r3, #50	; 0x32
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <UART_SetConfig+0x2d4>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	f003 0207 	and.w	r2, r3, #7
 80035ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4422      	add	r2, r4
 80035f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035f8:	e105      	b.n	8003806 <UART_SetConfig+0x4d6>
 80035fa:	bf00      	nop
 80035fc:	40011000 	.word	0x40011000
 8003600:	40011400 	.word	0x40011400
 8003604:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800360c:	2200      	movs	r2, #0
 800360e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003612:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003616:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800361a:	4642      	mov	r2, r8
 800361c:	464b      	mov	r3, r9
 800361e:	1891      	adds	r1, r2, r2
 8003620:	6239      	str	r1, [r7, #32]
 8003622:	415b      	adcs	r3, r3
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
 8003626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800362a:	4641      	mov	r1, r8
 800362c:	1854      	adds	r4, r2, r1
 800362e:	4649      	mov	r1, r9
 8003630:	eb43 0501 	adc.w	r5, r3, r1
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	00eb      	lsls	r3, r5, #3
 800363e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003642:	00e2      	lsls	r2, r4, #3
 8003644:	4614      	mov	r4, r2
 8003646:	461d      	mov	r5, r3
 8003648:	4643      	mov	r3, r8
 800364a:	18e3      	adds	r3, r4, r3
 800364c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003650:	464b      	mov	r3, r9
 8003652:	eb45 0303 	adc.w	r3, r5, r3
 8003656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800365a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003666:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003676:	4629      	mov	r1, r5
 8003678:	008b      	lsls	r3, r1, #2
 800367a:	4621      	mov	r1, r4
 800367c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003680:	4621      	mov	r1, r4
 8003682:	008a      	lsls	r2, r1, #2
 8003684:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003688:	f7fc fe02 	bl	8000290 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4b60      	ldr	r3, [pc, #384]	; (8003814 <UART_SetConfig+0x4e4>)
 8003692:	fba3 2302 	umull	r2, r3, r3, r2
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	011c      	lsls	r4, r3, #4
 800369a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036ac:	4642      	mov	r2, r8
 80036ae:	464b      	mov	r3, r9
 80036b0:	1891      	adds	r1, r2, r2
 80036b2:	61b9      	str	r1, [r7, #24]
 80036b4:	415b      	adcs	r3, r3
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036bc:	4641      	mov	r1, r8
 80036be:	1851      	adds	r1, r2, r1
 80036c0:	6139      	str	r1, [r7, #16]
 80036c2:	4649      	mov	r1, r9
 80036c4:	414b      	adcs	r3, r1
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036d4:	4659      	mov	r1, fp
 80036d6:	00cb      	lsls	r3, r1, #3
 80036d8:	4651      	mov	r1, sl
 80036da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036de:	4651      	mov	r1, sl
 80036e0:	00ca      	lsls	r2, r1, #3
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	4642      	mov	r2, r8
 80036ea:	189b      	adds	r3, r3, r2
 80036ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036f0:	464b      	mov	r3, r9
 80036f2:	460a      	mov	r2, r1
 80036f4:	eb42 0303 	adc.w	r3, r2, r3
 80036f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	67bb      	str	r3, [r7, #120]	; 0x78
 8003706:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003714:	4649      	mov	r1, r9
 8003716:	008b      	lsls	r3, r1, #2
 8003718:	4641      	mov	r1, r8
 800371a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800371e:	4641      	mov	r1, r8
 8003720:	008a      	lsls	r2, r1, #2
 8003722:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003726:	f7fc fdb3 	bl	8000290 <__aeabi_uldivmod>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4b39      	ldr	r3, [pc, #228]	; (8003814 <UART_SetConfig+0x4e4>)
 8003730:	fba3 1302 	umull	r1, r3, r3, r2
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	2164      	movs	r1, #100	; 0x64
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	3332      	adds	r3, #50	; 0x32
 8003742:	4a34      	ldr	r2, [pc, #208]	; (8003814 <UART_SetConfig+0x4e4>)
 8003744:	fba2 2303 	umull	r2, r3, r2, r3
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800374e:	441c      	add	r4, r3
 8003750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003754:	2200      	movs	r2, #0
 8003756:	673b      	str	r3, [r7, #112]	; 0x70
 8003758:	677a      	str	r2, [r7, #116]	; 0x74
 800375a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800375e:	4642      	mov	r2, r8
 8003760:	464b      	mov	r3, r9
 8003762:	1891      	adds	r1, r2, r2
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	415b      	adcs	r3, r3
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800376e:	4641      	mov	r1, r8
 8003770:	1851      	adds	r1, r2, r1
 8003772:	6039      	str	r1, [r7, #0]
 8003774:	4649      	mov	r1, r9
 8003776:	414b      	adcs	r3, r1
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003786:	4659      	mov	r1, fp
 8003788:	00cb      	lsls	r3, r1, #3
 800378a:	4651      	mov	r1, sl
 800378c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003790:	4651      	mov	r1, sl
 8003792:	00ca      	lsls	r2, r1, #3
 8003794:	4610      	mov	r0, r2
 8003796:	4619      	mov	r1, r3
 8003798:	4603      	mov	r3, r0
 800379a:	4642      	mov	r2, r8
 800379c:	189b      	adds	r3, r3, r2
 800379e:	66bb      	str	r3, [r7, #104]	; 0x68
 80037a0:	464b      	mov	r3, r9
 80037a2:	460a      	mov	r2, r1
 80037a4:	eb42 0303 	adc.w	r3, r2, r3
 80037a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	663b      	str	r3, [r7, #96]	; 0x60
 80037b4:	667a      	str	r2, [r7, #100]	; 0x64
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037c2:	4649      	mov	r1, r9
 80037c4:	008b      	lsls	r3, r1, #2
 80037c6:	4641      	mov	r1, r8
 80037c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037cc:	4641      	mov	r1, r8
 80037ce:	008a      	lsls	r2, r1, #2
 80037d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037d4:	f7fc fd5c 	bl	8000290 <__aeabi_uldivmod>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <UART_SetConfig+0x4e4>)
 80037de:	fba3 1302 	umull	r1, r3, r3, r2
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	2164      	movs	r1, #100	; 0x64
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	3332      	adds	r3, #50	; 0x32
 80037f0:	4a08      	ldr	r2, [pc, #32]	; (8003814 <UART_SetConfig+0x4e4>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	f003 020f 	and.w	r2, r3, #15
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4422      	add	r2, r4
 8003804:	609a      	str	r2, [r3, #8]
}
 8003806:	bf00      	nop
 8003808:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800380c:	46bd      	mov	sp, r7
 800380e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003812:	bf00      	nop
 8003814:	51eb851f 	.word	0x51eb851f

08003818 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800382a:	2b84      	cmp	r3, #132	; 0x84
 800382c:	d005      	beq.n	800383a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800382e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4413      	add	r3, r2
 8003836:	3303      	adds	r3, #3
 8003838:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800383a:	68fb      	ldr	r3, [r7, #12]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800384c:	f000 fade 	bl	8003e0c <vTaskStartScheduler>
  
  return osOK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	bd80      	pop	{r7, pc}

08003856 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003858:	b089      	sub	sp, #36	; 0x24
 800385a:	af04      	add	r7, sp, #16
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d020      	beq.n	80038aa <osThreadCreate+0x54>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01c      	beq.n	80038aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685c      	ldr	r4, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681d      	ldr	r5, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691e      	ldr	r6, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff ffc8 	bl	8003818 <makeFreeRtosPriority>
 8003888:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003892:	9202      	str	r2, [sp, #8]
 8003894:	9301      	str	r3, [sp, #4]
 8003896:	9100      	str	r1, [sp, #0]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4632      	mov	r2, r6
 800389c:	4629      	mov	r1, r5
 800389e:	4620      	mov	r0, r4
 80038a0:	f000 f8ed 	bl	8003a7e <xTaskCreateStatic>
 80038a4:	4603      	mov	r3, r0
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e01c      	b.n	80038e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685c      	ldr	r4, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038b6:	b29e      	uxth	r6, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff ffaa 	bl	8003818 <makeFreeRtosPriority>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f107 030c 	add.w	r3, r7, #12
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	9200      	str	r2, [sp, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	4632      	mov	r2, r6
 80038d2:	4629      	mov	r1, r5
 80038d4:	4620      	mov	r0, r4
 80038d6:	f000 f92f 	bl	8003b38 <xTaskCreate>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d001      	beq.n	80038e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e000      	b.n	80038e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80038e4:	68fb      	ldr	r3, [r7, #12]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <osDelay+0x16>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	e000      	b.n	8003906 <osDelay+0x18>
 8003904:	2301      	movs	r3, #1
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fa4c 	bl	8003da4 <vTaskDelay>
  
  return osOK;
 800390c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f103 0208 	add.w	r2, r3, #8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800392e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f103 0208 	add.w	r2, r3, #8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f103 0208 	add.w	r2, r3, #8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	601a      	str	r2, [r3, #0]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ce:	d103      	bne.n	80039d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	e00c      	b.n	80039f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3308      	adds	r3, #8
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e002      	b.n	80039e6 <vListInsert+0x2e>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d2f6      	bcs.n	80039e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	601a      	str	r2, [r3, #0]
}
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6892      	ldr	r2, [r2, #8]
 8003a40:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6852      	ldr	r2, [r2, #4]
 8003a4a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d103      	bne.n	8003a5e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	1e5a      	subs	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b08e      	sub	sp, #56	; 0x38
 8003a82:	af04      	add	r7, sp, #16
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	623b      	str	r3, [r7, #32]
}
 8003aa4:	bf00      	nop
 8003aa6:	e7fe      	b.n	8003aa6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <xTaskCreateStatic+0x46>
	__asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	61fb      	str	r3, [r7, #28]
}
 8003ac0:	bf00      	nop
 8003ac2:	e7fe      	b.n	8003ac2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ac4:	2354      	movs	r3, #84	; 0x54
 8003ac6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b54      	cmp	r3, #84	; 0x54
 8003acc:	d00a      	beq.n	8003ae4 <xTaskCreateStatic+0x66>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	61bb      	str	r3, [r7, #24]
}
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ae4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01e      	beq.n	8003b2a <xTaskCreateStatic+0xac>
 8003aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d01b      	beq.n	8003b2a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b04:	2300      	movs	r3, #0
 8003b06:	9303      	str	r3, [sp, #12]
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	9302      	str	r3, [sp, #8]
 8003b0c:	f107 0314 	add.w	r3, r7, #20
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f850 	bl	8003bc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b24:	f000 f8d4 	bl	8003cd0 <prvAddNewTaskToReadyList>
 8003b28:	e001      	b.n	8003b2e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b2e:	697b      	ldr	r3, [r7, #20]
	}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08c      	sub	sp, #48	; 0x30
 8003b3c:	af04      	add	r7, sp, #16
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fec3 	bl	80048d8 <pvPortMalloc>
 8003b52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00e      	beq.n	8003b78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b5a:	2054      	movs	r0, #84	; 0x54
 8003b5c:	f000 febc 	bl	80048d8 <pvPortMalloc>
 8003b60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b6e:	e005      	b.n	8003b7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b70:	6978      	ldr	r0, [r7, #20]
 8003b72:	f000 ff7d 	bl	8004a70 <vPortFree>
 8003b76:	e001      	b.n	8003b7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d017      	beq.n	8003bb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b8a:	88fa      	ldrh	r2, [r7, #6]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9303      	str	r3, [sp, #12]
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	9302      	str	r3, [sp, #8]
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f80e 	bl	8003bc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ba6:	69f8      	ldr	r0, [r7, #28]
 8003ba8:	f000 f892 	bl	8003cd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bac:	2301      	movs	r3, #1
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	e002      	b.n	8003bb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
	}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3720      	adds	r7, #32
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b088      	sub	sp, #32
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f023 0307 	bic.w	r3, r3, #7
 8003be8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <prvInitialiseNewTask+0x48>
	__asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	617b      	str	r3, [r7, #20]
}
 8003c06:	bf00      	nop
 8003c08:	e7fe      	b.n	8003c08 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01f      	beq.n	8003c50 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	e012      	b.n	8003c3c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	7819      	ldrb	r1, [r3, #0]
 8003c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4413      	add	r3, r2
 8003c24:	3334      	adds	r3, #52	; 0x34
 8003c26:	460a      	mov	r2, r1
 8003c28:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4413      	add	r3, r2
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d006      	beq.n	8003c44 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b0f      	cmp	r3, #15
 8003c40:	d9e9      	bls.n	8003c16 <prvInitialiseNewTask+0x54>
 8003c42:	e000      	b.n	8003c46 <prvInitialiseNewTask+0x84>
			{
				break;
 8003c44:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c4e:	e003      	b.n	8003c58 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	2b06      	cmp	r3, #6
 8003c5c:	d901      	bls.n	8003c62 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c5e:	2306      	movs	r3, #6
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c66:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	2200      	movs	r2, #0
 8003c72:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	3304      	adds	r3, #4
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fe6c 	bl	8003956 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	3318      	adds	r3, #24
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fe67 	bl	8003956 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	f1c3 0207 	rsb	r2, r3, #7
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	69b8      	ldr	r0, [r7, #24]
 8003cb2:	f000 fc05 	bl	80044c0 <pxPortInitialiseStack>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cc8:	bf00      	nop
 8003cca:	3720      	adds	r7, #32
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cd8:	f000 fd1c 	bl	8004714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cdc:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <prvAddNewTaskToReadyList+0xb8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	4a29      	ldr	r2, [pc, #164]	; (8003d88 <prvAddNewTaskToReadyList+0xb8>)
 8003ce4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ce6:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <prvAddNewTaskToReadyList+0xbc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cee:	4a27      	ldr	r2, [pc, #156]	; (8003d8c <prvAddNewTaskToReadyList+0xbc>)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cf4:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <prvAddNewTaskToReadyList+0xb8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d110      	bne.n	8003d1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cfc:	f000 fabc 	bl	8004278 <prvInitialiseTaskLists>
 8003d00:	e00d      	b.n	8003d1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d02:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <prvAddNewTaskToReadyList+0xc0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <prvAddNewTaskToReadyList+0xbc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d802      	bhi.n	8003d1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d18:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <prvAddNewTaskToReadyList+0xbc>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <prvAddNewTaskToReadyList+0xc4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3301      	adds	r3, #1
 8003d24:	4a1b      	ldr	r2, [pc, #108]	; (8003d94 <prvAddNewTaskToReadyList+0xc4>)
 8003d26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	4b19      	ldr	r3, [pc, #100]	; (8003d98 <prvAddNewTaskToReadyList+0xc8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <prvAddNewTaskToReadyList+0xc8>)
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <prvAddNewTaskToReadyList+0xcc>)
 8003d48:	441a      	add	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4610      	mov	r0, r2
 8003d52:	f7ff fe0d 	bl	8003970 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d56:	f000 fd0d 	bl	8004774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <prvAddNewTaskToReadyList+0xc0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00e      	beq.n	8003d80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <prvAddNewTaskToReadyList+0xbc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d207      	bcs.n	8003d80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <prvAddNewTaskToReadyList+0xd0>)
 8003d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20000580 	.word	0x20000580
 8003d8c:	20000480 	.word	0x20000480
 8003d90:	2000058c 	.word	0x2000058c
 8003d94:	2000059c 	.word	0x2000059c
 8003d98:	20000588 	.word	0x20000588
 8003d9c:	20000484 	.word	0x20000484
 8003da0:	e000ed04 	.word	0xe000ed04

08003da4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d017      	beq.n	8003de6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003db6:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <vTaskDelay+0x60>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <vTaskDelay+0x30>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	60bb      	str	r3, [r7, #8]
}
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003dd4:	f000 f87a 	bl	8003ecc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dd8:	2100      	movs	r1, #0
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fb0a 	bl	80043f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003de0:	f000 f882 	bl	8003ee8 <xTaskResumeAll>
 8003de4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d107      	bne.n	8003dfc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <vTaskDelay+0x64>)
 8003dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	200005a8 	.word	0x200005a8
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08a      	sub	sp, #40	; 0x28
 8003e10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e1a:	463a      	mov	r2, r7
 8003e1c:	1d39      	adds	r1, r7, #4
 8003e1e:	f107 0308 	add.w	r3, r7, #8
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc fbb6 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e28:	6839      	ldr	r1, [r7, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	9202      	str	r2, [sp, #8]
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	2300      	movs	r3, #0
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	2300      	movs	r3, #0
 8003e38:	460a      	mov	r2, r1
 8003e3a:	491e      	ldr	r1, [pc, #120]	; (8003eb4 <vTaskStartScheduler+0xa8>)
 8003e3c:	481e      	ldr	r0, [pc, #120]	; (8003eb8 <vTaskStartScheduler+0xac>)
 8003e3e:	f7ff fe1e 	bl	8003a7e <xTaskCreateStatic>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <vTaskStartScheduler+0xb0>)
 8003e46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e48:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <vTaskStartScheduler+0xb0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e50:	2301      	movs	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e001      	b.n	8003e5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d116      	bne.n	8003e8e <vTaskStartScheduler+0x82>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	613b      	str	r3, [r7, #16]
}
 8003e72:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e74:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <vTaskStartScheduler+0xb4>)
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e7c:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <vTaskStartScheduler+0xb8>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <vTaskStartScheduler+0xbc>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e88:	f000 fba2 	bl	80045d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e8c:	e00e      	b.n	8003eac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e94:	d10a      	bne.n	8003eac <vTaskStartScheduler+0xa0>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	60fb      	str	r3, [r7, #12]
}
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <vTaskStartScheduler+0x9e>
}
 8003eac:	bf00      	nop
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	08005cf0 	.word	0x08005cf0
 8003eb8:	08004249 	.word	0x08004249
 8003ebc:	200005a4 	.word	0x200005a4
 8003ec0:	200005a0 	.word	0x200005a0
 8003ec4:	2000058c 	.word	0x2000058c
 8003ec8:	20000584 	.word	0x20000584

08003ecc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ed0:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <vTaskSuspendAll+0x18>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	4a03      	ldr	r2, [pc, #12]	; (8003ee4 <vTaskSuspendAll+0x18>)
 8003ed8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003eda:	bf00      	nop
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	200005a8 	.word	0x200005a8

08003ee8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ef6:	4b41      	ldr	r3, [pc, #260]	; (8003ffc <xTaskResumeAll+0x114>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <xTaskResumeAll+0x2c>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	603b      	str	r3, [r7, #0]
}
 8003f10:	bf00      	nop
 8003f12:	e7fe      	b.n	8003f12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f14:	f000 fbfe 	bl	8004714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f18:	4b38      	ldr	r3, [pc, #224]	; (8003ffc <xTaskResumeAll+0x114>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	4a37      	ldr	r2, [pc, #220]	; (8003ffc <xTaskResumeAll+0x114>)
 8003f20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f22:	4b36      	ldr	r3, [pc, #216]	; (8003ffc <xTaskResumeAll+0x114>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d161      	bne.n	8003fee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f2a:	4b35      	ldr	r3, [pc, #212]	; (8004000 <xTaskResumeAll+0x118>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d05d      	beq.n	8003fee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f32:	e02e      	b.n	8003f92 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f34:	4b33      	ldr	r3, [pc, #204]	; (8004004 <xTaskResumeAll+0x11c>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3318      	adds	r3, #24
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff fd72 	bl	8003a2a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fd6d 	bl	8003a2a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	2201      	movs	r2, #1
 8003f56:	409a      	lsls	r2, r3
 8003f58:	4b2b      	ldr	r3, [pc, #172]	; (8004008 <xTaskResumeAll+0x120>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	4a2a      	ldr	r2, [pc, #168]	; (8004008 <xTaskResumeAll+0x120>)
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4a27      	ldr	r2, [pc, #156]	; (800400c <xTaskResumeAll+0x124>)
 8003f70:	441a      	add	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f7ff fcf9 	bl	8003970 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f82:	4b23      	ldr	r3, [pc, #140]	; (8004010 <xTaskResumeAll+0x128>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d302      	bcc.n	8003f92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f8c:	4b21      	ldr	r3, [pc, #132]	; (8004014 <xTaskResumeAll+0x12c>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f92:	4b1c      	ldr	r3, [pc, #112]	; (8004004 <xTaskResumeAll+0x11c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1cc      	bne.n	8003f34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fa0:	f000 fa08 	bl	80043b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003fa4:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <xTaskResumeAll+0x130>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d010      	beq.n	8003fd2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fb0:	f000 f836 	bl	8004020 <xTaskIncrementTick>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <xTaskResumeAll+0x12c>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f1      	bne.n	8003fb0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003fcc:	4b12      	ldr	r3, [pc, #72]	; (8004018 <xTaskResumeAll+0x130>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <xTaskResumeAll+0x12c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fde:	4b0f      	ldr	r3, [pc, #60]	; (800401c <xTaskResumeAll+0x134>)
 8003fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fee:	f000 fbc1 	bl	8004774 <vPortExitCritical>

	return xAlreadyYielded;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	200005a8 	.word	0x200005a8
 8004000:	20000580 	.word	0x20000580
 8004004:	20000540 	.word	0x20000540
 8004008:	20000588 	.word	0x20000588
 800400c:	20000484 	.word	0x20000484
 8004010:	20000480 	.word	0x20000480
 8004014:	20000594 	.word	0x20000594
 8004018:	20000590 	.word	0x20000590
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800402a:	4b4e      	ldr	r3, [pc, #312]	; (8004164 <xTaskIncrementTick+0x144>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f040 808e 	bne.w	8004150 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004034:	4b4c      	ldr	r3, [pc, #304]	; (8004168 <xTaskIncrementTick+0x148>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3301      	adds	r3, #1
 800403a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800403c:	4a4a      	ldr	r2, [pc, #296]	; (8004168 <xTaskIncrementTick+0x148>)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d120      	bne.n	800408a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004048:	4b48      	ldr	r3, [pc, #288]	; (800416c <xTaskIncrementTick+0x14c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <xTaskIncrementTick+0x48>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	603b      	str	r3, [r7, #0]
}
 8004064:	bf00      	nop
 8004066:	e7fe      	b.n	8004066 <xTaskIncrementTick+0x46>
 8004068:	4b40      	ldr	r3, [pc, #256]	; (800416c <xTaskIncrementTick+0x14c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	4b40      	ldr	r3, [pc, #256]	; (8004170 <xTaskIncrementTick+0x150>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a3e      	ldr	r2, [pc, #248]	; (800416c <xTaskIncrementTick+0x14c>)
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	4a3e      	ldr	r2, [pc, #248]	; (8004170 <xTaskIncrementTick+0x150>)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <xTaskIncrementTick+0x154>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3301      	adds	r3, #1
 8004082:	4a3c      	ldr	r2, [pc, #240]	; (8004174 <xTaskIncrementTick+0x154>)
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	f000 f995 	bl	80043b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800408a:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <xTaskIncrementTick+0x158>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	429a      	cmp	r2, r3
 8004092:	d348      	bcc.n	8004126 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004094:	4b35      	ldr	r3, [pc, #212]	; (800416c <xTaskIncrementTick+0x14c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d104      	bne.n	80040a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800409e:	4b36      	ldr	r3, [pc, #216]	; (8004178 <xTaskIncrementTick+0x158>)
 80040a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040a4:	601a      	str	r2, [r3, #0]
					break;
 80040a6:	e03e      	b.n	8004126 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040a8:	4b30      	ldr	r3, [pc, #192]	; (800416c <xTaskIncrementTick+0x14c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d203      	bcs.n	80040c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040c0:	4a2d      	ldr	r2, [pc, #180]	; (8004178 <xTaskIncrementTick+0x158>)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040c6:	e02e      	b.n	8004126 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fcac 	bl	8003a2a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	3318      	adds	r3, #24
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fca3 	bl	8003a2a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	2201      	movs	r2, #1
 80040ea:	409a      	lsls	r2, r3
 80040ec:	4b23      	ldr	r3, [pc, #140]	; (800417c <xTaskIncrementTick+0x15c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	4a22      	ldr	r2, [pc, #136]	; (800417c <xTaskIncrementTick+0x15c>)
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4a1f      	ldr	r2, [pc, #124]	; (8004180 <xTaskIncrementTick+0x160>)
 8004104:	441a      	add	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	3304      	adds	r3, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f7ff fc2f 	bl	8003970 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004116:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <xTaskIncrementTick+0x164>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	429a      	cmp	r2, r3
 800411e:	d3b9      	bcc.n	8004094 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004120:	2301      	movs	r3, #1
 8004122:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004124:	e7b6      	b.n	8004094 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004126:	4b17      	ldr	r3, [pc, #92]	; (8004184 <xTaskIncrementTick+0x164>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412c:	4914      	ldr	r1, [pc, #80]	; (8004180 <xTaskIncrementTick+0x160>)
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d901      	bls.n	8004142 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800413e:	2301      	movs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <xTaskIncrementTick+0x168>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800414a:	2301      	movs	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	e004      	b.n	800415a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004150:	4b0e      	ldr	r3, [pc, #56]	; (800418c <xTaskIncrementTick+0x16c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3301      	adds	r3, #1
 8004156:	4a0d      	ldr	r2, [pc, #52]	; (800418c <xTaskIncrementTick+0x16c>)
 8004158:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800415a:	697b      	ldr	r3, [r7, #20]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	200005a8 	.word	0x200005a8
 8004168:	20000584 	.word	0x20000584
 800416c:	20000538 	.word	0x20000538
 8004170:	2000053c 	.word	0x2000053c
 8004174:	20000598 	.word	0x20000598
 8004178:	200005a0 	.word	0x200005a0
 800417c:	20000588 	.word	0x20000588
 8004180:	20000484 	.word	0x20000484
 8004184:	20000480 	.word	0x20000480
 8004188:	20000594 	.word	0x20000594
 800418c:	20000590 	.word	0x20000590

08004190 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004196:	4b27      	ldr	r3, [pc, #156]	; (8004234 <vTaskSwitchContext+0xa4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800419e:	4b26      	ldr	r3, [pc, #152]	; (8004238 <vTaskSwitchContext+0xa8>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041a4:	e03f      	b.n	8004226 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80041a6:	4b24      	ldr	r3, [pc, #144]	; (8004238 <vTaskSwitchContext+0xa8>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ac:	4b23      	ldr	r3, [pc, #140]	; (800423c <vTaskSwitchContext+0xac>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	fab3 f383 	clz	r3, r3
 80041b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80041ba:	7afb      	ldrb	r3, [r7, #11]
 80041bc:	f1c3 031f 	rsb	r3, r3, #31
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	491f      	ldr	r1, [pc, #124]	; (8004240 <vTaskSwitchContext+0xb0>)
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10a      	bne.n	80041ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	607b      	str	r3, [r7, #4]
}
 80041e8:	bf00      	nop
 80041ea:	e7fe      	b.n	80041ea <vTaskSwitchContext+0x5a>
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4a12      	ldr	r2, [pc, #72]	; (8004240 <vTaskSwitchContext+0xb0>)
 80041f8:	4413      	add	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	3308      	adds	r3, #8
 800420e:	429a      	cmp	r2, r3
 8004210:	d104      	bne.n	800421c <vTaskSwitchContext+0x8c>
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	4a08      	ldr	r2, [pc, #32]	; (8004244 <vTaskSwitchContext+0xb4>)
 8004224:	6013      	str	r3, [r2, #0]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	200005a8 	.word	0x200005a8
 8004238:	20000594 	.word	0x20000594
 800423c:	20000588 	.word	0x20000588
 8004240:	20000484 	.word	0x20000484
 8004244:	20000480 	.word	0x20000480

08004248 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004250:	f000 f852 	bl	80042f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <prvIdleTask+0x28>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d9f9      	bls.n	8004250 <prvIdleTask+0x8>
			{
				taskYIELD();
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <prvIdleTask+0x2c>)
 800425e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800426c:	e7f0      	b.n	8004250 <prvIdleTask+0x8>
 800426e:	bf00      	nop
 8004270:	20000484 	.word	0x20000484
 8004274:	e000ed04 	.word	0xe000ed04

08004278 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800427e:	2300      	movs	r3, #0
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	e00c      	b.n	800429e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <prvInitialiseTaskLists+0x60>)
 8004290:	4413      	add	r3, r2
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fb3f 	bl	8003916 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3301      	adds	r3, #1
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b06      	cmp	r3, #6
 80042a2:	d9ef      	bls.n	8004284 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042a4:	480d      	ldr	r0, [pc, #52]	; (80042dc <prvInitialiseTaskLists+0x64>)
 80042a6:	f7ff fb36 	bl	8003916 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042aa:	480d      	ldr	r0, [pc, #52]	; (80042e0 <prvInitialiseTaskLists+0x68>)
 80042ac:	f7ff fb33 	bl	8003916 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042b0:	480c      	ldr	r0, [pc, #48]	; (80042e4 <prvInitialiseTaskLists+0x6c>)
 80042b2:	f7ff fb30 	bl	8003916 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042b6:	480c      	ldr	r0, [pc, #48]	; (80042e8 <prvInitialiseTaskLists+0x70>)
 80042b8:	f7ff fb2d 	bl	8003916 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042bc:	480b      	ldr	r0, [pc, #44]	; (80042ec <prvInitialiseTaskLists+0x74>)
 80042be:	f7ff fb2a 	bl	8003916 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <prvInitialiseTaskLists+0x78>)
 80042c4:	4a05      	ldr	r2, [pc, #20]	; (80042dc <prvInitialiseTaskLists+0x64>)
 80042c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <prvInitialiseTaskLists+0x7c>)
 80042ca:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <prvInitialiseTaskLists+0x68>)
 80042cc:	601a      	str	r2, [r3, #0]
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000484 	.word	0x20000484
 80042dc:	20000510 	.word	0x20000510
 80042e0:	20000524 	.word	0x20000524
 80042e4:	20000540 	.word	0x20000540
 80042e8:	20000554 	.word	0x20000554
 80042ec:	2000056c 	.word	0x2000056c
 80042f0:	20000538 	.word	0x20000538
 80042f4:	2000053c 	.word	0x2000053c

080042f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042fe:	e019      	b.n	8004334 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004300:	f000 fa08 	bl	8004714 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004304:	4b10      	ldr	r3, [pc, #64]	; (8004348 <prvCheckTasksWaitingTermination+0x50>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fb8a 	bl	8003a2a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004316:	4b0d      	ldr	r3, [pc, #52]	; (800434c <prvCheckTasksWaitingTermination+0x54>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3b01      	subs	r3, #1
 800431c:	4a0b      	ldr	r2, [pc, #44]	; (800434c <prvCheckTasksWaitingTermination+0x54>)
 800431e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <prvCheckTasksWaitingTermination+0x58>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3b01      	subs	r3, #1
 8004326:	4a0a      	ldr	r2, [pc, #40]	; (8004350 <prvCheckTasksWaitingTermination+0x58>)
 8004328:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800432a:	f000 fa23 	bl	8004774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f810 	bl	8004354 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <prvCheckTasksWaitingTermination+0x58>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e1      	bne.n	8004300 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20000554 	.word	0x20000554
 800434c:	20000580 	.word	0x20000580
 8004350:	20000568 	.word	0x20000568

08004354 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004362:	2b00      	cmp	r3, #0
 8004364:	d108      	bne.n	8004378 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fb80 	bl	8004a70 <vPortFree>
				vPortFree( pxTCB );
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fb7d 	bl	8004a70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004376:	e018      	b.n	80043aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800437e:	2b01      	cmp	r3, #1
 8004380:	d103      	bne.n	800438a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fb74 	bl	8004a70 <vPortFree>
	}
 8004388:	e00f      	b.n	80043aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004390:	2b02      	cmp	r3, #2
 8004392:	d00a      	beq.n	80043aa <prvDeleteTCB+0x56>
	__asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	60fb      	str	r3, [r7, #12]
}
 80043a6:	bf00      	nop
 80043a8:	e7fe      	b.n	80043a8 <prvDeleteTCB+0x54>
	}
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <prvResetNextTaskUnblockTime+0x38>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <prvResetNextTaskUnblockTime+0x3c>)
 80043c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043cc:	e008      	b.n	80043e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <prvResetNextTaskUnblockTime+0x38>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <prvResetNextTaskUnblockTime+0x3c>)
 80043de:	6013      	str	r3, [r2, #0]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	20000538 	.word	0x20000538
 80043f0:	200005a0 	.word	0x200005a0

080043f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043fe:	4b29      	ldr	r3, [pc, #164]	; (80044a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004404:	4b28      	ldr	r3, [pc, #160]	; (80044a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3304      	adds	r3, #4
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fb0d 	bl	8003a2a <uxListRemove>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10b      	bne.n	800442e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004416:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	2201      	movs	r2, #1
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	43da      	mvns	r2, r3
 8004424:	4b21      	ldr	r3, [pc, #132]	; (80044ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4013      	ands	r3, r2
 800442a:	4a20      	ldr	r2, [pc, #128]	; (80044ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800442c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004434:	d10a      	bne.n	800444c <prvAddCurrentTaskToDelayedList+0x58>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800443c:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3304      	adds	r3, #4
 8004442:	4619      	mov	r1, r3
 8004444:	481a      	ldr	r0, [pc, #104]	; (80044b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004446:	f7ff fa93 	bl	8003970 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800444a:	e026      	b.n	800449a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004454:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	429a      	cmp	r2, r3
 8004462:	d209      	bcs.n	8004478 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004464:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3304      	adds	r3, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7ff faa1 	bl	80039b8 <vListInsert>
}
 8004476:	e010      	b.n	800449a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004478:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3304      	adds	r3, #4
 8004482:	4619      	mov	r1, r3
 8004484:	4610      	mov	r0, r2
 8004486:	f7ff fa97 	bl	80039b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	429a      	cmp	r2, r3
 8004492:	d202      	bcs.n	800449a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004494:	4a09      	ldr	r2, [pc, #36]	; (80044bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	6013      	str	r3, [r2, #0]
}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000584 	.word	0x20000584
 80044a8:	20000480 	.word	0x20000480
 80044ac:	20000588 	.word	0x20000588
 80044b0:	2000056c 	.word	0x2000056c
 80044b4:	2000053c 	.word	0x2000053c
 80044b8:	20000538 	.word	0x20000538
 80044bc:	200005a0 	.word	0x200005a0

080044c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3b04      	subs	r3, #4
 80044d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3b04      	subs	r3, #4
 80044de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f023 0201 	bic.w	r2, r3, #1
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3b04      	subs	r3, #4
 80044ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044f0:	4a0c      	ldr	r2, [pc, #48]	; (8004524 <pxPortInitialiseStack+0x64>)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3b14      	subs	r3, #20
 80044fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3b04      	subs	r3, #4
 8004506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f06f 0202 	mvn.w	r2, #2
 800450e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3b20      	subs	r3, #32
 8004514:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004516:	68fb      	ldr	r3, [r7, #12]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	08004529 	.word	0x08004529

08004528 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <prvTaskExitError+0x54>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800453a:	d00a      	beq.n	8004552 <prvTaskExitError+0x2a>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	60fb      	str	r3, [r7, #12]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <prvTaskExitError+0x28>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	60bb      	str	r3, [r7, #8]
}
 8004564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004566:	bf00      	nop
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0fc      	beq.n	8004568 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800456e:	bf00      	nop
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	2000000c 	.word	0x2000000c

08004580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004580:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <pxCurrentTCBConst2>)
 8004582:	6819      	ldr	r1, [r3, #0]
 8004584:	6808      	ldr	r0, [r1, #0]
 8004586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800458a:	f380 8809 	msr	PSP, r0
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f380 8811 	msr	BASEPRI, r0
 800459a:	4770      	bx	lr
 800459c:	f3af 8000 	nop.w

080045a0 <pxCurrentTCBConst2>:
 80045a0:	20000480 	.word	0x20000480
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop

080045a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80045a8:	4808      	ldr	r0, [pc, #32]	; (80045cc <prvPortStartFirstTask+0x24>)
 80045aa:	6800      	ldr	r0, [r0, #0]
 80045ac:	6800      	ldr	r0, [r0, #0]
 80045ae:	f380 8808 	msr	MSP, r0
 80045b2:	f04f 0000 	mov.w	r0, #0
 80045b6:	f380 8814 	msr	CONTROL, r0
 80045ba:	b662      	cpsie	i
 80045bc:	b661      	cpsie	f
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	df00      	svc	0
 80045c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045ca:	bf00      	nop
 80045cc:	e000ed08 	.word	0xe000ed08

080045d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045d6:	4b46      	ldr	r3, [pc, #280]	; (80046f0 <xPortStartScheduler+0x120>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a46      	ldr	r2, [pc, #280]	; (80046f4 <xPortStartScheduler+0x124>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d10a      	bne.n	80045f6 <xPortStartScheduler+0x26>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	613b      	str	r3, [r7, #16]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045f6:	4b3e      	ldr	r3, [pc, #248]	; (80046f0 <xPortStartScheduler+0x120>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a3f      	ldr	r2, [pc, #252]	; (80046f8 <xPortStartScheduler+0x128>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d10a      	bne.n	8004616 <xPortStartScheduler+0x46>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	60fb      	str	r3, [r7, #12]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004616:	4b39      	ldr	r3, [pc, #228]	; (80046fc <xPortStartScheduler+0x12c>)
 8004618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	22ff      	movs	r2, #255	; 0xff
 8004626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004638:	b2da      	uxtb	r2, r3
 800463a:	4b31      	ldr	r3, [pc, #196]	; (8004700 <xPortStartScheduler+0x130>)
 800463c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800463e:	4b31      	ldr	r3, [pc, #196]	; (8004704 <xPortStartScheduler+0x134>)
 8004640:	2207      	movs	r2, #7
 8004642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004644:	e009      	b.n	800465a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004646:	4b2f      	ldr	r3, [pc, #188]	; (8004704 <xPortStartScheduler+0x134>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3b01      	subs	r3, #1
 800464c:	4a2d      	ldr	r2, [pc, #180]	; (8004704 <xPortStartScheduler+0x134>)
 800464e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	b2db      	uxtb	r3, r3
 8004658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004662:	2b80      	cmp	r3, #128	; 0x80
 8004664:	d0ef      	beq.n	8004646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004666:	4b27      	ldr	r3, [pc, #156]	; (8004704 <xPortStartScheduler+0x134>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f1c3 0307 	rsb	r3, r3, #7
 800466e:	2b04      	cmp	r3, #4
 8004670:	d00a      	beq.n	8004688 <xPortStartScheduler+0xb8>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	60bb      	str	r3, [r7, #8]
}
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004688:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <xPortStartScheduler+0x134>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	4a1d      	ldr	r2, [pc, #116]	; (8004704 <xPortStartScheduler+0x134>)
 8004690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004692:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <xPortStartScheduler+0x134>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800469a:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <xPortStartScheduler+0x134>)
 800469c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80046a6:	4b18      	ldr	r3, [pc, #96]	; (8004708 <xPortStartScheduler+0x138>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a17      	ldr	r2, [pc, #92]	; (8004708 <xPortStartScheduler+0x138>)
 80046ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046b2:	4b15      	ldr	r3, [pc, #84]	; (8004708 <xPortStartScheduler+0x138>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a14      	ldr	r2, [pc, #80]	; (8004708 <xPortStartScheduler+0x138>)
 80046b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046be:	f000 f8dd 	bl	800487c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046c2:	4b12      	ldr	r3, [pc, #72]	; (800470c <xPortStartScheduler+0x13c>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046c8:	f000 f8fc 	bl	80048c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046cc:	4b10      	ldr	r3, [pc, #64]	; (8004710 <xPortStartScheduler+0x140>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0f      	ldr	r2, [pc, #60]	; (8004710 <xPortStartScheduler+0x140>)
 80046d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046d8:	f7ff ff66 	bl	80045a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046dc:	f7ff fd58 	bl	8004190 <vTaskSwitchContext>
	prvTaskExitError();
 80046e0:	f7ff ff22 	bl	8004528 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	e000ed00 	.word	0xe000ed00
 80046f4:	410fc271 	.word	0x410fc271
 80046f8:	410fc270 	.word	0x410fc270
 80046fc:	e000e400 	.word	0xe000e400
 8004700:	200005ac 	.word	0x200005ac
 8004704:	200005b0 	.word	0x200005b0
 8004708:	e000ed20 	.word	0xe000ed20
 800470c:	2000000c 	.word	0x2000000c
 8004710:	e000ef34 	.word	0xe000ef34

08004714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	607b      	str	r3, [r7, #4]
}
 800472c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800472e:	4b0f      	ldr	r3, [pc, #60]	; (800476c <vPortEnterCritical+0x58>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	4a0d      	ldr	r2, [pc, #52]	; (800476c <vPortEnterCritical+0x58>)
 8004736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <vPortEnterCritical+0x58>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d10f      	bne.n	8004760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <vPortEnterCritical+0x5c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <vPortEnterCritical+0x4c>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	603b      	str	r3, [r7, #0]
}
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <vPortEnterCritical+0x4a>
	}
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	2000000c 	.word	0x2000000c
 8004770:	e000ed04 	.word	0xe000ed04

08004774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <vPortExitCritical+0x50>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10a      	bne.n	8004798 <vPortExitCritical+0x24>
	__asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	607b      	str	r3, [r7, #4]
}
 8004794:	bf00      	nop
 8004796:	e7fe      	b.n	8004796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <vPortExitCritical+0x50>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3b01      	subs	r3, #1
 800479e:	4a09      	ldr	r2, [pc, #36]	; (80047c4 <vPortExitCritical+0x50>)
 80047a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047a2:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <vPortExitCritical+0x50>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d105      	bne.n	80047b6 <vPortExitCritical+0x42>
 80047aa:	2300      	movs	r3, #0
 80047ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	2000000c 	.word	0x2000000c
	...

080047d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047d0:	f3ef 8009 	mrs	r0, PSP
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	4b15      	ldr	r3, [pc, #84]	; (8004830 <pxCurrentTCBConst>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	f01e 0f10 	tst.w	lr, #16
 80047e0:	bf08      	it	eq
 80047e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ea:	6010      	str	r0, [r2, #0]
 80047ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047f4:	f380 8811 	msr	BASEPRI, r0
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f7ff fcc6 	bl	8004190 <vTaskSwitchContext>
 8004804:	f04f 0000 	mov.w	r0, #0
 8004808:	f380 8811 	msr	BASEPRI, r0
 800480c:	bc09      	pop	{r0, r3}
 800480e:	6819      	ldr	r1, [r3, #0]
 8004810:	6808      	ldr	r0, [r1, #0]
 8004812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004816:	f01e 0f10 	tst.w	lr, #16
 800481a:	bf08      	it	eq
 800481c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004820:	f380 8809 	msr	PSP, r0
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	f3af 8000 	nop.w

08004830 <pxCurrentTCBConst>:
 8004830:	20000480 	.word	0x20000480
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop

08004838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	607b      	str	r3, [r7, #4]
}
 8004850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004852:	f7ff fbe5 	bl	8004020 <xTaskIncrementTick>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800485c:	4b06      	ldr	r3, [pc, #24]	; (8004878 <SysTick_Handler+0x40>)
 800485e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	2300      	movs	r3, #0
 8004866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f383 8811 	msr	BASEPRI, r3
}
 800486e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <vPortSetupTimerInterrupt+0x34>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <vPortSetupTimerInterrupt+0x38>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800488c:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <vPortSetupTimerInterrupt+0x3c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <vPortSetupTimerInterrupt+0x40>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	099b      	lsrs	r3, r3, #6
 8004898:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <vPortSetupTimerInterrupt+0x44>)
 800489a:	3b01      	subs	r3, #1
 800489c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800489e:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <vPortSetupTimerInterrupt+0x34>)
 80048a0:	2207      	movs	r2, #7
 80048a2:	601a      	str	r2, [r3, #0]
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	e000e010 	.word	0xe000e010
 80048b4:	e000e018 	.word	0xe000e018
 80048b8:	20000000 	.word	0x20000000
 80048bc:	10624dd3 	.word	0x10624dd3
 80048c0:	e000e014 	.word	0xe000e014

080048c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80048c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048d4 <vPortEnableVFP+0x10>
 80048c8:	6801      	ldr	r1, [r0, #0]
 80048ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048ce:	6001      	str	r1, [r0, #0]
 80048d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80048d2:	bf00      	nop
 80048d4:	e000ed88 	.word	0xe000ed88

080048d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048e4:	f7ff faf2 	bl	8003ecc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048e8:	4b5b      	ldr	r3, [pc, #364]	; (8004a58 <pvPortMalloc+0x180>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048f0:	f000 f920 	bl	8004b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048f4:	4b59      	ldr	r3, [pc, #356]	; (8004a5c <pvPortMalloc+0x184>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f040 8093 	bne.w	8004a28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01d      	beq.n	8004944 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004908:	2208      	movs	r2, #8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4413      	add	r3, r2
 800490e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	2b00      	cmp	r3, #0
 8004918:	d014      	beq.n	8004944 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f023 0307 	bic.w	r3, r3, #7
 8004920:	3308      	adds	r3, #8
 8004922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <pvPortMalloc+0x6c>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	617b      	str	r3, [r7, #20]
}
 8004940:	bf00      	nop
 8004942:	e7fe      	b.n	8004942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d06e      	beq.n	8004a28 <pvPortMalloc+0x150>
 800494a:	4b45      	ldr	r3, [pc, #276]	; (8004a60 <pvPortMalloc+0x188>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	429a      	cmp	r2, r3
 8004952:	d869      	bhi.n	8004a28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004954:	4b43      	ldr	r3, [pc, #268]	; (8004a64 <pvPortMalloc+0x18c>)
 8004956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004958:	4b42      	ldr	r3, [pc, #264]	; (8004a64 <pvPortMalloc+0x18c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800495e:	e004      	b.n	800496a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d903      	bls.n	800497c <pvPortMalloc+0xa4>
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f1      	bne.n	8004960 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800497c:	4b36      	ldr	r3, [pc, #216]	; (8004a58 <pvPortMalloc+0x180>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	429a      	cmp	r2, r3
 8004984:	d050      	beq.n	8004a28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2208      	movs	r2, #8
 800498c:	4413      	add	r3, r2
 800498e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	1ad2      	subs	r2, r2, r3
 80049a0:	2308      	movs	r3, #8
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d91f      	bls.n	80049e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <pvPortMalloc+0xf8>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	613b      	str	r3, [r7, #16]
}
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	1ad2      	subs	r2, r2, r3
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049e2:	69b8      	ldr	r0, [r7, #24]
 80049e4:	f000 f908 	bl	8004bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049e8:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <pvPortMalloc+0x188>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	4a1b      	ldr	r2, [pc, #108]	; (8004a60 <pvPortMalloc+0x188>)
 80049f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049f6:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <pvPortMalloc+0x188>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <pvPortMalloc+0x190>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d203      	bcs.n	8004a0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a02:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <pvPortMalloc+0x188>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <pvPortMalloc+0x190>)
 8004a08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <pvPortMalloc+0x184>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004a1e:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <pvPortMalloc+0x194>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3301      	adds	r3, #1
 8004a24:	4a11      	ldr	r2, [pc, #68]	; (8004a6c <pvPortMalloc+0x194>)
 8004a26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a28:	f7ff fa5e 	bl	8003ee8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <pvPortMalloc+0x174>
	__asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	60fb      	str	r3, [r7, #12]
}
 8004a48:	bf00      	nop
 8004a4a:	e7fe      	b.n	8004a4a <pvPortMalloc+0x172>
	return pvReturn;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3728      	adds	r7, #40	; 0x28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	200041bc 	.word	0x200041bc
 8004a5c:	200041d0 	.word	0x200041d0
 8004a60:	200041c0 	.word	0x200041c0
 8004a64:	200041b4 	.word	0x200041b4
 8004a68:	200041c4 	.word	0x200041c4
 8004a6c:	200041c8 	.word	0x200041c8

08004a70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d04d      	beq.n	8004b1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a82:	2308      	movs	r3, #8
 8004a84:	425b      	negs	r3, r3
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4413      	add	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	4b24      	ldr	r3, [pc, #144]	; (8004b28 <vPortFree+0xb8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10a      	bne.n	8004ab4 <vPortFree+0x44>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	60fb      	str	r3, [r7, #12]
}
 8004ab0:	bf00      	nop
 8004ab2:	e7fe      	b.n	8004ab2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <vPortFree+0x62>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	60bb      	str	r3, [r7, #8]
}
 8004ace:	bf00      	nop
 8004ad0:	e7fe      	b.n	8004ad0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <vPortFree+0xb8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01e      	beq.n	8004b1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d11a      	bne.n	8004b1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <vPortFree+0xb8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	401a      	ands	r2, r3
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004af8:	f7ff f9e8 	bl	8003ecc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <vPortFree+0xbc>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4413      	add	r3, r2
 8004b06:	4a09      	ldr	r2, [pc, #36]	; (8004b2c <vPortFree+0xbc>)
 8004b08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b0a:	6938      	ldr	r0, [r7, #16]
 8004b0c:	f000 f874 	bl	8004bf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <vPortFree+0xc0>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3301      	adds	r3, #1
 8004b16:	4a06      	ldr	r2, [pc, #24]	; (8004b30 <vPortFree+0xc0>)
 8004b18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004b1a:	f7ff f9e5 	bl	8003ee8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b1e:	bf00      	nop
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	200041d0 	.word	0x200041d0
 8004b2c:	200041c0 	.word	0x200041c0
 8004b30:	200041cc 	.word	0x200041cc

08004b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b40:	4b27      	ldr	r3, [pc, #156]	; (8004be0 <prvHeapInit+0xac>)
 8004b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00c      	beq.n	8004b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3307      	adds	r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0307 	bic.w	r3, r3, #7
 8004b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	4a1f      	ldr	r2, [pc, #124]	; (8004be0 <prvHeapInit+0xac>)
 8004b64:	4413      	add	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b6c:	4a1d      	ldr	r2, [pc, #116]	; (8004be4 <prvHeapInit+0xb0>)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b72:	4b1c      	ldr	r3, [pc, #112]	; (8004be4 <prvHeapInit+0xb0>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b80:	2208      	movs	r2, #8
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0307 	bic.w	r3, r3, #7
 8004b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <prvHeapInit+0xb4>)
 8004b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <prvHeapInit+0xb4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <prvHeapInit+0xb4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <prvHeapInit+0xb4>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <prvHeapInit+0xb8>)
 8004bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <prvHeapInit+0xbc>)
 8004bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bcc:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <prvHeapInit+0xc0>)
 8004bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004bd2:	601a      	str	r2, [r3, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	200005b4 	.word	0x200005b4
 8004be4:	200041b4 	.word	0x200041b4
 8004be8:	200041bc 	.word	0x200041bc
 8004bec:	200041c4 	.word	0x200041c4
 8004bf0:	200041c0 	.word	0x200041c0
 8004bf4:	200041d0 	.word	0x200041d0

08004bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c00:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <prvInsertBlockIntoFreeList+0xac>)
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e002      	b.n	8004c0c <prvInsertBlockIntoFreeList+0x14>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d8f7      	bhi.n	8004c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	4413      	add	r3, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d108      	bne.n	8004c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	441a      	add	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	441a      	add	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d118      	bne.n	8004c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d00d      	beq.n	8004c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	441a      	add	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e008      	b.n	8004c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c76:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	e003      	b.n	8004c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d002      	beq.n	8004c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	200041b4 	.word	0x200041b4
 8004ca8:	200041bc 	.word	0x200041bc

08004cac <__errno>:
 8004cac:	4b01      	ldr	r3, [pc, #4]	; (8004cb4 <__errno+0x8>)
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20000010 	.word	0x20000010

08004cb8 <__libc_init_array>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	4d0d      	ldr	r5, [pc, #52]	; (8004cf0 <__libc_init_array+0x38>)
 8004cbc:	4c0d      	ldr	r4, [pc, #52]	; (8004cf4 <__libc_init_array+0x3c>)
 8004cbe:	1b64      	subs	r4, r4, r5
 8004cc0:	10a4      	asrs	r4, r4, #2
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	42a6      	cmp	r6, r4
 8004cc6:	d109      	bne.n	8004cdc <__libc_init_array+0x24>
 8004cc8:	4d0b      	ldr	r5, [pc, #44]	; (8004cf8 <__libc_init_array+0x40>)
 8004cca:	4c0c      	ldr	r4, [pc, #48]	; (8004cfc <__libc_init_array+0x44>)
 8004ccc:	f000 ffae 	bl	8005c2c <_init>
 8004cd0:	1b64      	subs	r4, r4, r5
 8004cd2:	10a4      	asrs	r4, r4, #2
 8004cd4:	2600      	movs	r6, #0
 8004cd6:	42a6      	cmp	r6, r4
 8004cd8:	d105      	bne.n	8004ce6 <__libc_init_array+0x2e>
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce0:	4798      	blx	r3
 8004ce2:	3601      	adds	r6, #1
 8004ce4:	e7ee      	b.n	8004cc4 <__libc_init_array+0xc>
 8004ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cea:	4798      	blx	r3
 8004cec:	3601      	adds	r6, #1
 8004cee:	e7f2      	b.n	8004cd6 <__libc_init_array+0x1e>
 8004cf0:	08005db0 	.word	0x08005db0
 8004cf4:	08005db0 	.word	0x08005db0
 8004cf8:	08005db0 	.word	0x08005db0
 8004cfc:	08005db4 	.word	0x08005db4

08004d00 <memset>:
 8004d00:	4402      	add	r2, r0
 8004d02:	4603      	mov	r3, r0
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d100      	bne.n	8004d0a <memset+0xa>
 8004d08:	4770      	bx	lr
 8004d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0e:	e7f9      	b.n	8004d04 <memset+0x4>

08004d10 <iprintf>:
 8004d10:	b40f      	push	{r0, r1, r2, r3}
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <iprintf+0x2c>)
 8004d14:	b513      	push	{r0, r1, r4, lr}
 8004d16:	681c      	ldr	r4, [r3, #0]
 8004d18:	b124      	cbz	r4, 8004d24 <iprintf+0x14>
 8004d1a:	69a3      	ldr	r3, [r4, #24]
 8004d1c:	b913      	cbnz	r3, 8004d24 <iprintf+0x14>
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f000 f866 	bl	8004df0 <__sinit>
 8004d24:	ab05      	add	r3, sp, #20
 8004d26:	9a04      	ldr	r2, [sp, #16]
 8004d28:	68a1      	ldr	r1, [r4, #8]
 8004d2a:	9301      	str	r3, [sp, #4]
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f000 f9bd 	bl	80050ac <_vfiprintf_r>
 8004d32:	b002      	add	sp, #8
 8004d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d38:	b004      	add	sp, #16
 8004d3a:	4770      	bx	lr
 8004d3c:	20000010 	.word	0x20000010

08004d40 <std>:
 8004d40:	2300      	movs	r3, #0
 8004d42:	b510      	push	{r4, lr}
 8004d44:	4604      	mov	r4, r0
 8004d46:	e9c0 3300 	strd	r3, r3, [r0]
 8004d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d4e:	6083      	str	r3, [r0, #8]
 8004d50:	8181      	strh	r1, [r0, #12]
 8004d52:	6643      	str	r3, [r0, #100]	; 0x64
 8004d54:	81c2      	strh	r2, [r0, #14]
 8004d56:	6183      	str	r3, [r0, #24]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	305c      	adds	r0, #92	; 0x5c
 8004d5e:	f7ff ffcf 	bl	8004d00 <memset>
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <std+0x38>)
 8004d64:	6263      	str	r3, [r4, #36]	; 0x24
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <std+0x3c>)
 8004d68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <std+0x40>)
 8004d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <std+0x44>)
 8004d70:	6224      	str	r4, [r4, #32]
 8004d72:	6323      	str	r3, [r4, #48]	; 0x30
 8004d74:	bd10      	pop	{r4, pc}
 8004d76:	bf00      	nop
 8004d78:	08005655 	.word	0x08005655
 8004d7c:	08005677 	.word	0x08005677
 8004d80:	080056af 	.word	0x080056af
 8004d84:	080056d3 	.word	0x080056d3

08004d88 <_cleanup_r>:
 8004d88:	4901      	ldr	r1, [pc, #4]	; (8004d90 <_cleanup_r+0x8>)
 8004d8a:	f000 b8af 	b.w	8004eec <_fwalk_reent>
 8004d8e:	bf00      	nop
 8004d90:	080059ad 	.word	0x080059ad

08004d94 <__sfmoreglue>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	2268      	movs	r2, #104	; 0x68
 8004d98:	1e4d      	subs	r5, r1, #1
 8004d9a:	4355      	muls	r5, r2
 8004d9c:	460e      	mov	r6, r1
 8004d9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004da2:	f000 f8e5 	bl	8004f70 <_malloc_r>
 8004da6:	4604      	mov	r4, r0
 8004da8:	b140      	cbz	r0, 8004dbc <__sfmoreglue+0x28>
 8004daa:	2100      	movs	r1, #0
 8004dac:	e9c0 1600 	strd	r1, r6, [r0]
 8004db0:	300c      	adds	r0, #12
 8004db2:	60a0      	str	r0, [r4, #8]
 8004db4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004db8:	f7ff ffa2 	bl	8004d00 <memset>
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	bd70      	pop	{r4, r5, r6, pc}

08004dc0 <__sfp_lock_acquire>:
 8004dc0:	4801      	ldr	r0, [pc, #4]	; (8004dc8 <__sfp_lock_acquire+0x8>)
 8004dc2:	f000 b8b3 	b.w	8004f2c <__retarget_lock_acquire_recursive>
 8004dc6:	bf00      	nop
 8004dc8:	200041d5 	.word	0x200041d5

08004dcc <__sfp_lock_release>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__sfp_lock_release+0x8>)
 8004dce:	f000 b8ae 	b.w	8004f2e <__retarget_lock_release_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	200041d5 	.word	0x200041d5

08004dd8 <__sinit_lock_acquire>:
 8004dd8:	4801      	ldr	r0, [pc, #4]	; (8004de0 <__sinit_lock_acquire+0x8>)
 8004dda:	f000 b8a7 	b.w	8004f2c <__retarget_lock_acquire_recursive>
 8004dde:	bf00      	nop
 8004de0:	200041d6 	.word	0x200041d6

08004de4 <__sinit_lock_release>:
 8004de4:	4801      	ldr	r0, [pc, #4]	; (8004dec <__sinit_lock_release+0x8>)
 8004de6:	f000 b8a2 	b.w	8004f2e <__retarget_lock_release_recursive>
 8004dea:	bf00      	nop
 8004dec:	200041d6 	.word	0x200041d6

08004df0 <__sinit>:
 8004df0:	b510      	push	{r4, lr}
 8004df2:	4604      	mov	r4, r0
 8004df4:	f7ff fff0 	bl	8004dd8 <__sinit_lock_acquire>
 8004df8:	69a3      	ldr	r3, [r4, #24]
 8004dfa:	b11b      	cbz	r3, 8004e04 <__sinit+0x14>
 8004dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e00:	f7ff bff0 	b.w	8004de4 <__sinit_lock_release>
 8004e04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e08:	6523      	str	r3, [r4, #80]	; 0x50
 8004e0a:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <__sinit+0x68>)
 8004e0c:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <__sinit+0x6c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e12:	42a3      	cmp	r3, r4
 8004e14:	bf04      	itt	eq
 8004e16:	2301      	moveq	r3, #1
 8004e18:	61a3      	streq	r3, [r4, #24]
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 f820 	bl	8004e60 <__sfp>
 8004e20:	6060      	str	r0, [r4, #4]
 8004e22:	4620      	mov	r0, r4
 8004e24:	f000 f81c 	bl	8004e60 <__sfp>
 8004e28:	60a0      	str	r0, [r4, #8]
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f000 f818 	bl	8004e60 <__sfp>
 8004e30:	2200      	movs	r2, #0
 8004e32:	60e0      	str	r0, [r4, #12]
 8004e34:	2104      	movs	r1, #4
 8004e36:	6860      	ldr	r0, [r4, #4]
 8004e38:	f7ff ff82 	bl	8004d40 <std>
 8004e3c:	68a0      	ldr	r0, [r4, #8]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	2109      	movs	r1, #9
 8004e42:	f7ff ff7d 	bl	8004d40 <std>
 8004e46:	68e0      	ldr	r0, [r4, #12]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	2112      	movs	r1, #18
 8004e4c:	f7ff ff78 	bl	8004d40 <std>
 8004e50:	2301      	movs	r3, #1
 8004e52:	61a3      	str	r3, [r4, #24]
 8004e54:	e7d2      	b.n	8004dfc <__sinit+0xc>
 8004e56:	bf00      	nop
 8004e58:	08005d10 	.word	0x08005d10
 8004e5c:	08004d89 	.word	0x08004d89

08004e60 <__sfp>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	4607      	mov	r7, r0
 8004e64:	f7ff ffac 	bl	8004dc0 <__sfp_lock_acquire>
 8004e68:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <__sfp+0x84>)
 8004e6a:	681e      	ldr	r6, [r3, #0]
 8004e6c:	69b3      	ldr	r3, [r6, #24]
 8004e6e:	b913      	cbnz	r3, 8004e76 <__sfp+0x16>
 8004e70:	4630      	mov	r0, r6
 8004e72:	f7ff ffbd 	bl	8004df0 <__sinit>
 8004e76:	3648      	adds	r6, #72	; 0x48
 8004e78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	d503      	bpl.n	8004e88 <__sfp+0x28>
 8004e80:	6833      	ldr	r3, [r6, #0]
 8004e82:	b30b      	cbz	r3, 8004ec8 <__sfp+0x68>
 8004e84:	6836      	ldr	r6, [r6, #0]
 8004e86:	e7f7      	b.n	8004e78 <__sfp+0x18>
 8004e88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e8c:	b9d5      	cbnz	r5, 8004ec4 <__sfp+0x64>
 8004e8e:	4b16      	ldr	r3, [pc, #88]	; (8004ee8 <__sfp+0x88>)
 8004e90:	60e3      	str	r3, [r4, #12]
 8004e92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e96:	6665      	str	r5, [r4, #100]	; 0x64
 8004e98:	f000 f847 	bl	8004f2a <__retarget_lock_init_recursive>
 8004e9c:	f7ff ff96 	bl	8004dcc <__sfp_lock_release>
 8004ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ea8:	6025      	str	r5, [r4, #0]
 8004eaa:	61a5      	str	r5, [r4, #24]
 8004eac:	2208      	movs	r2, #8
 8004eae:	4629      	mov	r1, r5
 8004eb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004eb4:	f7ff ff24 	bl	8004d00 <memset>
 8004eb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ebc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ec4:	3468      	adds	r4, #104	; 0x68
 8004ec6:	e7d9      	b.n	8004e7c <__sfp+0x1c>
 8004ec8:	2104      	movs	r1, #4
 8004eca:	4638      	mov	r0, r7
 8004ecc:	f7ff ff62 	bl	8004d94 <__sfmoreglue>
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	6030      	str	r0, [r6, #0]
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d1d5      	bne.n	8004e84 <__sfp+0x24>
 8004ed8:	f7ff ff78 	bl	8004dcc <__sfp_lock_release>
 8004edc:	230c      	movs	r3, #12
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	e7ee      	b.n	8004ec0 <__sfp+0x60>
 8004ee2:	bf00      	nop
 8004ee4:	08005d10 	.word	0x08005d10
 8004ee8:	ffff0001 	.word	0xffff0001

08004eec <_fwalk_reent>:
 8004eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ef0:	4606      	mov	r6, r0
 8004ef2:	4688      	mov	r8, r1
 8004ef4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ef8:	2700      	movs	r7, #0
 8004efa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004efe:	f1b9 0901 	subs.w	r9, r9, #1
 8004f02:	d505      	bpl.n	8004f10 <_fwalk_reent+0x24>
 8004f04:	6824      	ldr	r4, [r4, #0]
 8004f06:	2c00      	cmp	r4, #0
 8004f08:	d1f7      	bne.n	8004efa <_fwalk_reent+0xe>
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f10:	89ab      	ldrh	r3, [r5, #12]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d907      	bls.n	8004f26 <_fwalk_reent+0x3a>
 8004f16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	d003      	beq.n	8004f26 <_fwalk_reent+0x3a>
 8004f1e:	4629      	mov	r1, r5
 8004f20:	4630      	mov	r0, r6
 8004f22:	47c0      	blx	r8
 8004f24:	4307      	orrs	r7, r0
 8004f26:	3568      	adds	r5, #104	; 0x68
 8004f28:	e7e9      	b.n	8004efe <_fwalk_reent+0x12>

08004f2a <__retarget_lock_init_recursive>:
 8004f2a:	4770      	bx	lr

08004f2c <__retarget_lock_acquire_recursive>:
 8004f2c:	4770      	bx	lr

08004f2e <__retarget_lock_release_recursive>:
 8004f2e:	4770      	bx	lr

08004f30 <sbrk_aligned>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	4e0e      	ldr	r6, [pc, #56]	; (8004f6c <sbrk_aligned+0x3c>)
 8004f34:	460c      	mov	r4, r1
 8004f36:	6831      	ldr	r1, [r6, #0]
 8004f38:	4605      	mov	r5, r0
 8004f3a:	b911      	cbnz	r1, 8004f42 <sbrk_aligned+0x12>
 8004f3c:	f000 fb7a 	bl	8005634 <_sbrk_r>
 8004f40:	6030      	str	r0, [r6, #0]
 8004f42:	4621      	mov	r1, r4
 8004f44:	4628      	mov	r0, r5
 8004f46:	f000 fb75 	bl	8005634 <_sbrk_r>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	d00a      	beq.n	8004f64 <sbrk_aligned+0x34>
 8004f4e:	1cc4      	adds	r4, r0, #3
 8004f50:	f024 0403 	bic.w	r4, r4, #3
 8004f54:	42a0      	cmp	r0, r4
 8004f56:	d007      	beq.n	8004f68 <sbrk_aligned+0x38>
 8004f58:	1a21      	subs	r1, r4, r0
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f000 fb6a 	bl	8005634 <_sbrk_r>
 8004f60:	3001      	adds	r0, #1
 8004f62:	d101      	bne.n	8004f68 <sbrk_aligned+0x38>
 8004f64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f68:	4620      	mov	r0, r4
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	200041dc 	.word	0x200041dc

08004f70 <_malloc_r>:
 8004f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f74:	1ccd      	adds	r5, r1, #3
 8004f76:	f025 0503 	bic.w	r5, r5, #3
 8004f7a:	3508      	adds	r5, #8
 8004f7c:	2d0c      	cmp	r5, #12
 8004f7e:	bf38      	it	cc
 8004f80:	250c      	movcc	r5, #12
 8004f82:	2d00      	cmp	r5, #0
 8004f84:	4607      	mov	r7, r0
 8004f86:	db01      	blt.n	8004f8c <_malloc_r+0x1c>
 8004f88:	42a9      	cmp	r1, r5
 8004f8a:	d905      	bls.n	8004f98 <_malloc_r+0x28>
 8004f8c:	230c      	movs	r3, #12
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	2600      	movs	r6, #0
 8004f92:	4630      	mov	r0, r6
 8004f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f98:	4e2e      	ldr	r6, [pc, #184]	; (8005054 <_malloc_r+0xe4>)
 8004f9a:	f000 fdbb 	bl	8005b14 <__malloc_lock>
 8004f9e:	6833      	ldr	r3, [r6, #0]
 8004fa0:	461c      	mov	r4, r3
 8004fa2:	bb34      	cbnz	r4, 8004ff2 <_malloc_r+0x82>
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	f7ff ffc2 	bl	8004f30 <sbrk_aligned>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	4604      	mov	r4, r0
 8004fb0:	d14d      	bne.n	800504e <_malloc_r+0xde>
 8004fb2:	6834      	ldr	r4, [r6, #0]
 8004fb4:	4626      	mov	r6, r4
 8004fb6:	2e00      	cmp	r6, #0
 8004fb8:	d140      	bne.n	800503c <_malloc_r+0xcc>
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	4631      	mov	r1, r6
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	eb04 0803 	add.w	r8, r4, r3
 8004fc4:	f000 fb36 	bl	8005634 <_sbrk_r>
 8004fc8:	4580      	cmp	r8, r0
 8004fca:	d13a      	bne.n	8005042 <_malloc_r+0xd2>
 8004fcc:	6821      	ldr	r1, [r4, #0]
 8004fce:	3503      	adds	r5, #3
 8004fd0:	1a6d      	subs	r5, r5, r1
 8004fd2:	f025 0503 	bic.w	r5, r5, #3
 8004fd6:	3508      	adds	r5, #8
 8004fd8:	2d0c      	cmp	r5, #12
 8004fda:	bf38      	it	cc
 8004fdc:	250c      	movcc	r5, #12
 8004fde:	4629      	mov	r1, r5
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	f7ff ffa5 	bl	8004f30 <sbrk_aligned>
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d02b      	beq.n	8005042 <_malloc_r+0xd2>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	442b      	add	r3, r5
 8004fee:	6023      	str	r3, [r4, #0]
 8004ff0:	e00e      	b.n	8005010 <_malloc_r+0xa0>
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	1b52      	subs	r2, r2, r5
 8004ff6:	d41e      	bmi.n	8005036 <_malloc_r+0xc6>
 8004ff8:	2a0b      	cmp	r2, #11
 8004ffa:	d916      	bls.n	800502a <_malloc_r+0xba>
 8004ffc:	1961      	adds	r1, r4, r5
 8004ffe:	42a3      	cmp	r3, r4
 8005000:	6025      	str	r5, [r4, #0]
 8005002:	bf18      	it	ne
 8005004:	6059      	strne	r1, [r3, #4]
 8005006:	6863      	ldr	r3, [r4, #4]
 8005008:	bf08      	it	eq
 800500a:	6031      	streq	r1, [r6, #0]
 800500c:	5162      	str	r2, [r4, r5]
 800500e:	604b      	str	r3, [r1, #4]
 8005010:	4638      	mov	r0, r7
 8005012:	f104 060b 	add.w	r6, r4, #11
 8005016:	f000 fd83 	bl	8005b20 <__malloc_unlock>
 800501a:	f026 0607 	bic.w	r6, r6, #7
 800501e:	1d23      	adds	r3, r4, #4
 8005020:	1af2      	subs	r2, r6, r3
 8005022:	d0b6      	beq.n	8004f92 <_malloc_r+0x22>
 8005024:	1b9b      	subs	r3, r3, r6
 8005026:	50a3      	str	r3, [r4, r2]
 8005028:	e7b3      	b.n	8004f92 <_malloc_r+0x22>
 800502a:	6862      	ldr	r2, [r4, #4]
 800502c:	42a3      	cmp	r3, r4
 800502e:	bf0c      	ite	eq
 8005030:	6032      	streq	r2, [r6, #0]
 8005032:	605a      	strne	r2, [r3, #4]
 8005034:	e7ec      	b.n	8005010 <_malloc_r+0xa0>
 8005036:	4623      	mov	r3, r4
 8005038:	6864      	ldr	r4, [r4, #4]
 800503a:	e7b2      	b.n	8004fa2 <_malloc_r+0x32>
 800503c:	4634      	mov	r4, r6
 800503e:	6876      	ldr	r6, [r6, #4]
 8005040:	e7b9      	b.n	8004fb6 <_malloc_r+0x46>
 8005042:	230c      	movs	r3, #12
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	4638      	mov	r0, r7
 8005048:	f000 fd6a 	bl	8005b20 <__malloc_unlock>
 800504c:	e7a1      	b.n	8004f92 <_malloc_r+0x22>
 800504e:	6025      	str	r5, [r4, #0]
 8005050:	e7de      	b.n	8005010 <_malloc_r+0xa0>
 8005052:	bf00      	nop
 8005054:	200041d8 	.word	0x200041d8

08005058 <__sfputc_r>:
 8005058:	6893      	ldr	r3, [r2, #8]
 800505a:	3b01      	subs	r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	b410      	push	{r4}
 8005060:	6093      	str	r3, [r2, #8]
 8005062:	da08      	bge.n	8005076 <__sfputc_r+0x1e>
 8005064:	6994      	ldr	r4, [r2, #24]
 8005066:	42a3      	cmp	r3, r4
 8005068:	db01      	blt.n	800506e <__sfputc_r+0x16>
 800506a:	290a      	cmp	r1, #10
 800506c:	d103      	bne.n	8005076 <__sfputc_r+0x1e>
 800506e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005072:	f000 bb33 	b.w	80056dc <__swbuf_r>
 8005076:	6813      	ldr	r3, [r2, #0]
 8005078:	1c58      	adds	r0, r3, #1
 800507a:	6010      	str	r0, [r2, #0]
 800507c:	7019      	strb	r1, [r3, #0]
 800507e:	4608      	mov	r0, r1
 8005080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005084:	4770      	bx	lr

08005086 <__sfputs_r>:
 8005086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005088:	4606      	mov	r6, r0
 800508a:	460f      	mov	r7, r1
 800508c:	4614      	mov	r4, r2
 800508e:	18d5      	adds	r5, r2, r3
 8005090:	42ac      	cmp	r4, r5
 8005092:	d101      	bne.n	8005098 <__sfputs_r+0x12>
 8005094:	2000      	movs	r0, #0
 8005096:	e007      	b.n	80050a8 <__sfputs_r+0x22>
 8005098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800509c:	463a      	mov	r2, r7
 800509e:	4630      	mov	r0, r6
 80050a0:	f7ff ffda 	bl	8005058 <__sfputc_r>
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	d1f3      	bne.n	8005090 <__sfputs_r+0xa>
 80050a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050ac <_vfiprintf_r>:
 80050ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b0:	460d      	mov	r5, r1
 80050b2:	b09d      	sub	sp, #116	; 0x74
 80050b4:	4614      	mov	r4, r2
 80050b6:	4698      	mov	r8, r3
 80050b8:	4606      	mov	r6, r0
 80050ba:	b118      	cbz	r0, 80050c4 <_vfiprintf_r+0x18>
 80050bc:	6983      	ldr	r3, [r0, #24]
 80050be:	b90b      	cbnz	r3, 80050c4 <_vfiprintf_r+0x18>
 80050c0:	f7ff fe96 	bl	8004df0 <__sinit>
 80050c4:	4b89      	ldr	r3, [pc, #548]	; (80052ec <_vfiprintf_r+0x240>)
 80050c6:	429d      	cmp	r5, r3
 80050c8:	d11b      	bne.n	8005102 <_vfiprintf_r+0x56>
 80050ca:	6875      	ldr	r5, [r6, #4]
 80050cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050ce:	07d9      	lsls	r1, r3, #31
 80050d0:	d405      	bmi.n	80050de <_vfiprintf_r+0x32>
 80050d2:	89ab      	ldrh	r3, [r5, #12]
 80050d4:	059a      	lsls	r2, r3, #22
 80050d6:	d402      	bmi.n	80050de <_vfiprintf_r+0x32>
 80050d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050da:	f7ff ff27 	bl	8004f2c <__retarget_lock_acquire_recursive>
 80050de:	89ab      	ldrh	r3, [r5, #12]
 80050e0:	071b      	lsls	r3, r3, #28
 80050e2:	d501      	bpl.n	80050e8 <_vfiprintf_r+0x3c>
 80050e4:	692b      	ldr	r3, [r5, #16]
 80050e6:	b9eb      	cbnz	r3, 8005124 <_vfiprintf_r+0x78>
 80050e8:	4629      	mov	r1, r5
 80050ea:	4630      	mov	r0, r6
 80050ec:	f000 fb5a 	bl	80057a4 <__swsetup_r>
 80050f0:	b1c0      	cbz	r0, 8005124 <_vfiprintf_r+0x78>
 80050f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050f4:	07dc      	lsls	r4, r3, #31
 80050f6:	d50e      	bpl.n	8005116 <_vfiprintf_r+0x6a>
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050fc:	b01d      	add	sp, #116	; 0x74
 80050fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005102:	4b7b      	ldr	r3, [pc, #492]	; (80052f0 <_vfiprintf_r+0x244>)
 8005104:	429d      	cmp	r5, r3
 8005106:	d101      	bne.n	800510c <_vfiprintf_r+0x60>
 8005108:	68b5      	ldr	r5, [r6, #8]
 800510a:	e7df      	b.n	80050cc <_vfiprintf_r+0x20>
 800510c:	4b79      	ldr	r3, [pc, #484]	; (80052f4 <_vfiprintf_r+0x248>)
 800510e:	429d      	cmp	r5, r3
 8005110:	bf08      	it	eq
 8005112:	68f5      	ldreq	r5, [r6, #12]
 8005114:	e7da      	b.n	80050cc <_vfiprintf_r+0x20>
 8005116:	89ab      	ldrh	r3, [r5, #12]
 8005118:	0598      	lsls	r0, r3, #22
 800511a:	d4ed      	bmi.n	80050f8 <_vfiprintf_r+0x4c>
 800511c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800511e:	f7ff ff06 	bl	8004f2e <__retarget_lock_release_recursive>
 8005122:	e7e9      	b.n	80050f8 <_vfiprintf_r+0x4c>
 8005124:	2300      	movs	r3, #0
 8005126:	9309      	str	r3, [sp, #36]	; 0x24
 8005128:	2320      	movs	r3, #32
 800512a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800512e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005132:	2330      	movs	r3, #48	; 0x30
 8005134:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80052f8 <_vfiprintf_r+0x24c>
 8005138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800513c:	f04f 0901 	mov.w	r9, #1
 8005140:	4623      	mov	r3, r4
 8005142:	469a      	mov	sl, r3
 8005144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005148:	b10a      	cbz	r2, 800514e <_vfiprintf_r+0xa2>
 800514a:	2a25      	cmp	r2, #37	; 0x25
 800514c:	d1f9      	bne.n	8005142 <_vfiprintf_r+0x96>
 800514e:	ebba 0b04 	subs.w	fp, sl, r4
 8005152:	d00b      	beq.n	800516c <_vfiprintf_r+0xc0>
 8005154:	465b      	mov	r3, fp
 8005156:	4622      	mov	r2, r4
 8005158:	4629      	mov	r1, r5
 800515a:	4630      	mov	r0, r6
 800515c:	f7ff ff93 	bl	8005086 <__sfputs_r>
 8005160:	3001      	adds	r0, #1
 8005162:	f000 80aa 	beq.w	80052ba <_vfiprintf_r+0x20e>
 8005166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005168:	445a      	add	r2, fp
 800516a:	9209      	str	r2, [sp, #36]	; 0x24
 800516c:	f89a 3000 	ldrb.w	r3, [sl]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80a2 	beq.w	80052ba <_vfiprintf_r+0x20e>
 8005176:	2300      	movs	r3, #0
 8005178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800517c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005180:	f10a 0a01 	add.w	sl, sl, #1
 8005184:	9304      	str	r3, [sp, #16]
 8005186:	9307      	str	r3, [sp, #28]
 8005188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800518c:	931a      	str	r3, [sp, #104]	; 0x68
 800518e:	4654      	mov	r4, sl
 8005190:	2205      	movs	r2, #5
 8005192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005196:	4858      	ldr	r0, [pc, #352]	; (80052f8 <_vfiprintf_r+0x24c>)
 8005198:	f7fb f82a 	bl	80001f0 <memchr>
 800519c:	9a04      	ldr	r2, [sp, #16]
 800519e:	b9d8      	cbnz	r0, 80051d8 <_vfiprintf_r+0x12c>
 80051a0:	06d1      	lsls	r1, r2, #27
 80051a2:	bf44      	itt	mi
 80051a4:	2320      	movmi	r3, #32
 80051a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051aa:	0713      	lsls	r3, r2, #28
 80051ac:	bf44      	itt	mi
 80051ae:	232b      	movmi	r3, #43	; 0x2b
 80051b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b4:	f89a 3000 	ldrb.w	r3, [sl]
 80051b8:	2b2a      	cmp	r3, #42	; 0x2a
 80051ba:	d015      	beq.n	80051e8 <_vfiprintf_r+0x13c>
 80051bc:	9a07      	ldr	r2, [sp, #28]
 80051be:	4654      	mov	r4, sl
 80051c0:	2000      	movs	r0, #0
 80051c2:	f04f 0c0a 	mov.w	ip, #10
 80051c6:	4621      	mov	r1, r4
 80051c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051cc:	3b30      	subs	r3, #48	; 0x30
 80051ce:	2b09      	cmp	r3, #9
 80051d0:	d94e      	bls.n	8005270 <_vfiprintf_r+0x1c4>
 80051d2:	b1b0      	cbz	r0, 8005202 <_vfiprintf_r+0x156>
 80051d4:	9207      	str	r2, [sp, #28]
 80051d6:	e014      	b.n	8005202 <_vfiprintf_r+0x156>
 80051d8:	eba0 0308 	sub.w	r3, r0, r8
 80051dc:	fa09 f303 	lsl.w	r3, r9, r3
 80051e0:	4313      	orrs	r3, r2
 80051e2:	9304      	str	r3, [sp, #16]
 80051e4:	46a2      	mov	sl, r4
 80051e6:	e7d2      	b.n	800518e <_vfiprintf_r+0xe2>
 80051e8:	9b03      	ldr	r3, [sp, #12]
 80051ea:	1d19      	adds	r1, r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	9103      	str	r1, [sp, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bfbb      	ittet	lt
 80051f4:	425b      	neglt	r3, r3
 80051f6:	f042 0202 	orrlt.w	r2, r2, #2
 80051fa:	9307      	strge	r3, [sp, #28]
 80051fc:	9307      	strlt	r3, [sp, #28]
 80051fe:	bfb8      	it	lt
 8005200:	9204      	strlt	r2, [sp, #16]
 8005202:	7823      	ldrb	r3, [r4, #0]
 8005204:	2b2e      	cmp	r3, #46	; 0x2e
 8005206:	d10c      	bne.n	8005222 <_vfiprintf_r+0x176>
 8005208:	7863      	ldrb	r3, [r4, #1]
 800520a:	2b2a      	cmp	r3, #42	; 0x2a
 800520c:	d135      	bne.n	800527a <_vfiprintf_r+0x1ce>
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	1d1a      	adds	r2, r3, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	9203      	str	r2, [sp, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfb8      	it	lt
 800521a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800521e:	3402      	adds	r4, #2
 8005220:	9305      	str	r3, [sp, #20]
 8005222:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005308 <_vfiprintf_r+0x25c>
 8005226:	7821      	ldrb	r1, [r4, #0]
 8005228:	2203      	movs	r2, #3
 800522a:	4650      	mov	r0, sl
 800522c:	f7fa ffe0 	bl	80001f0 <memchr>
 8005230:	b140      	cbz	r0, 8005244 <_vfiprintf_r+0x198>
 8005232:	2340      	movs	r3, #64	; 0x40
 8005234:	eba0 000a 	sub.w	r0, r0, sl
 8005238:	fa03 f000 	lsl.w	r0, r3, r0
 800523c:	9b04      	ldr	r3, [sp, #16]
 800523e:	4303      	orrs	r3, r0
 8005240:	3401      	adds	r4, #1
 8005242:	9304      	str	r3, [sp, #16]
 8005244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005248:	482c      	ldr	r0, [pc, #176]	; (80052fc <_vfiprintf_r+0x250>)
 800524a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800524e:	2206      	movs	r2, #6
 8005250:	f7fa ffce 	bl	80001f0 <memchr>
 8005254:	2800      	cmp	r0, #0
 8005256:	d03f      	beq.n	80052d8 <_vfiprintf_r+0x22c>
 8005258:	4b29      	ldr	r3, [pc, #164]	; (8005300 <_vfiprintf_r+0x254>)
 800525a:	bb1b      	cbnz	r3, 80052a4 <_vfiprintf_r+0x1f8>
 800525c:	9b03      	ldr	r3, [sp, #12]
 800525e:	3307      	adds	r3, #7
 8005260:	f023 0307 	bic.w	r3, r3, #7
 8005264:	3308      	adds	r3, #8
 8005266:	9303      	str	r3, [sp, #12]
 8005268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800526a:	443b      	add	r3, r7
 800526c:	9309      	str	r3, [sp, #36]	; 0x24
 800526e:	e767      	b.n	8005140 <_vfiprintf_r+0x94>
 8005270:	fb0c 3202 	mla	r2, ip, r2, r3
 8005274:	460c      	mov	r4, r1
 8005276:	2001      	movs	r0, #1
 8005278:	e7a5      	b.n	80051c6 <_vfiprintf_r+0x11a>
 800527a:	2300      	movs	r3, #0
 800527c:	3401      	adds	r4, #1
 800527e:	9305      	str	r3, [sp, #20]
 8005280:	4619      	mov	r1, r3
 8005282:	f04f 0c0a 	mov.w	ip, #10
 8005286:	4620      	mov	r0, r4
 8005288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800528c:	3a30      	subs	r2, #48	; 0x30
 800528e:	2a09      	cmp	r2, #9
 8005290:	d903      	bls.n	800529a <_vfiprintf_r+0x1ee>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0c5      	beq.n	8005222 <_vfiprintf_r+0x176>
 8005296:	9105      	str	r1, [sp, #20]
 8005298:	e7c3      	b.n	8005222 <_vfiprintf_r+0x176>
 800529a:	fb0c 2101 	mla	r1, ip, r1, r2
 800529e:	4604      	mov	r4, r0
 80052a0:	2301      	movs	r3, #1
 80052a2:	e7f0      	b.n	8005286 <_vfiprintf_r+0x1da>
 80052a4:	ab03      	add	r3, sp, #12
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	462a      	mov	r2, r5
 80052aa:	4b16      	ldr	r3, [pc, #88]	; (8005304 <_vfiprintf_r+0x258>)
 80052ac:	a904      	add	r1, sp, #16
 80052ae:	4630      	mov	r0, r6
 80052b0:	f3af 8000 	nop.w
 80052b4:	4607      	mov	r7, r0
 80052b6:	1c78      	adds	r0, r7, #1
 80052b8:	d1d6      	bne.n	8005268 <_vfiprintf_r+0x1bc>
 80052ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052bc:	07d9      	lsls	r1, r3, #31
 80052be:	d405      	bmi.n	80052cc <_vfiprintf_r+0x220>
 80052c0:	89ab      	ldrh	r3, [r5, #12]
 80052c2:	059a      	lsls	r2, r3, #22
 80052c4:	d402      	bmi.n	80052cc <_vfiprintf_r+0x220>
 80052c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052c8:	f7ff fe31 	bl	8004f2e <__retarget_lock_release_recursive>
 80052cc:	89ab      	ldrh	r3, [r5, #12]
 80052ce:	065b      	lsls	r3, r3, #25
 80052d0:	f53f af12 	bmi.w	80050f8 <_vfiprintf_r+0x4c>
 80052d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052d6:	e711      	b.n	80050fc <_vfiprintf_r+0x50>
 80052d8:	ab03      	add	r3, sp, #12
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	462a      	mov	r2, r5
 80052de:	4b09      	ldr	r3, [pc, #36]	; (8005304 <_vfiprintf_r+0x258>)
 80052e0:	a904      	add	r1, sp, #16
 80052e2:	4630      	mov	r0, r6
 80052e4:	f000 f880 	bl	80053e8 <_printf_i>
 80052e8:	e7e4      	b.n	80052b4 <_vfiprintf_r+0x208>
 80052ea:	bf00      	nop
 80052ec:	08005d34 	.word	0x08005d34
 80052f0:	08005d54 	.word	0x08005d54
 80052f4:	08005d14 	.word	0x08005d14
 80052f8:	08005d74 	.word	0x08005d74
 80052fc:	08005d7e 	.word	0x08005d7e
 8005300:	00000000 	.word	0x00000000
 8005304:	08005087 	.word	0x08005087
 8005308:	08005d7a 	.word	0x08005d7a

0800530c <_printf_common>:
 800530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	4616      	mov	r6, r2
 8005312:	4699      	mov	r9, r3
 8005314:	688a      	ldr	r2, [r1, #8]
 8005316:	690b      	ldr	r3, [r1, #16]
 8005318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800531c:	4293      	cmp	r3, r2
 800531e:	bfb8      	it	lt
 8005320:	4613      	movlt	r3, r2
 8005322:	6033      	str	r3, [r6, #0]
 8005324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005328:	4607      	mov	r7, r0
 800532a:	460c      	mov	r4, r1
 800532c:	b10a      	cbz	r2, 8005332 <_printf_common+0x26>
 800532e:	3301      	adds	r3, #1
 8005330:	6033      	str	r3, [r6, #0]
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	0699      	lsls	r1, r3, #26
 8005336:	bf42      	ittt	mi
 8005338:	6833      	ldrmi	r3, [r6, #0]
 800533a:	3302      	addmi	r3, #2
 800533c:	6033      	strmi	r3, [r6, #0]
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	f015 0506 	ands.w	r5, r5, #6
 8005344:	d106      	bne.n	8005354 <_printf_common+0x48>
 8005346:	f104 0a19 	add.w	sl, r4, #25
 800534a:	68e3      	ldr	r3, [r4, #12]
 800534c:	6832      	ldr	r2, [r6, #0]
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	42ab      	cmp	r3, r5
 8005352:	dc26      	bgt.n	80053a2 <_printf_common+0x96>
 8005354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005358:	1e13      	subs	r3, r2, #0
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	bf18      	it	ne
 800535e:	2301      	movne	r3, #1
 8005360:	0692      	lsls	r2, r2, #26
 8005362:	d42b      	bmi.n	80053bc <_printf_common+0xb0>
 8005364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005368:	4649      	mov	r1, r9
 800536a:	4638      	mov	r0, r7
 800536c:	47c0      	blx	r8
 800536e:	3001      	adds	r0, #1
 8005370:	d01e      	beq.n	80053b0 <_printf_common+0xa4>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	68e5      	ldr	r5, [r4, #12]
 8005376:	6832      	ldr	r2, [r6, #0]
 8005378:	f003 0306 	and.w	r3, r3, #6
 800537c:	2b04      	cmp	r3, #4
 800537e:	bf08      	it	eq
 8005380:	1aad      	subeq	r5, r5, r2
 8005382:	68a3      	ldr	r3, [r4, #8]
 8005384:	6922      	ldr	r2, [r4, #16]
 8005386:	bf0c      	ite	eq
 8005388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800538c:	2500      	movne	r5, #0
 800538e:	4293      	cmp	r3, r2
 8005390:	bfc4      	itt	gt
 8005392:	1a9b      	subgt	r3, r3, r2
 8005394:	18ed      	addgt	r5, r5, r3
 8005396:	2600      	movs	r6, #0
 8005398:	341a      	adds	r4, #26
 800539a:	42b5      	cmp	r5, r6
 800539c:	d11a      	bne.n	80053d4 <_printf_common+0xc8>
 800539e:	2000      	movs	r0, #0
 80053a0:	e008      	b.n	80053b4 <_printf_common+0xa8>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4652      	mov	r2, sl
 80053a6:	4649      	mov	r1, r9
 80053a8:	4638      	mov	r0, r7
 80053aa:	47c0      	blx	r8
 80053ac:	3001      	adds	r0, #1
 80053ae:	d103      	bne.n	80053b8 <_printf_common+0xac>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b8:	3501      	adds	r5, #1
 80053ba:	e7c6      	b.n	800534a <_printf_common+0x3e>
 80053bc:	18e1      	adds	r1, r4, r3
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	2030      	movs	r0, #48	; 0x30
 80053c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053c6:	4422      	add	r2, r4
 80053c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053d0:	3302      	adds	r3, #2
 80053d2:	e7c7      	b.n	8005364 <_printf_common+0x58>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4622      	mov	r2, r4
 80053d8:	4649      	mov	r1, r9
 80053da:	4638      	mov	r0, r7
 80053dc:	47c0      	blx	r8
 80053de:	3001      	adds	r0, #1
 80053e0:	d0e6      	beq.n	80053b0 <_printf_common+0xa4>
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7d9      	b.n	800539a <_printf_common+0x8e>
	...

080053e8 <_printf_i>:
 80053e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	7e0f      	ldrb	r7, [r1, #24]
 80053ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053f0:	2f78      	cmp	r7, #120	; 0x78
 80053f2:	4691      	mov	r9, r2
 80053f4:	4680      	mov	r8, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	469a      	mov	sl, r3
 80053fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053fe:	d807      	bhi.n	8005410 <_printf_i+0x28>
 8005400:	2f62      	cmp	r7, #98	; 0x62
 8005402:	d80a      	bhi.n	800541a <_printf_i+0x32>
 8005404:	2f00      	cmp	r7, #0
 8005406:	f000 80d8 	beq.w	80055ba <_printf_i+0x1d2>
 800540a:	2f58      	cmp	r7, #88	; 0x58
 800540c:	f000 80a3 	beq.w	8005556 <_printf_i+0x16e>
 8005410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005418:	e03a      	b.n	8005490 <_printf_i+0xa8>
 800541a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800541e:	2b15      	cmp	r3, #21
 8005420:	d8f6      	bhi.n	8005410 <_printf_i+0x28>
 8005422:	a101      	add	r1, pc, #4	; (adr r1, 8005428 <_printf_i+0x40>)
 8005424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005428:	08005481 	.word	0x08005481
 800542c:	08005495 	.word	0x08005495
 8005430:	08005411 	.word	0x08005411
 8005434:	08005411 	.word	0x08005411
 8005438:	08005411 	.word	0x08005411
 800543c:	08005411 	.word	0x08005411
 8005440:	08005495 	.word	0x08005495
 8005444:	08005411 	.word	0x08005411
 8005448:	08005411 	.word	0x08005411
 800544c:	08005411 	.word	0x08005411
 8005450:	08005411 	.word	0x08005411
 8005454:	080055a1 	.word	0x080055a1
 8005458:	080054c5 	.word	0x080054c5
 800545c:	08005583 	.word	0x08005583
 8005460:	08005411 	.word	0x08005411
 8005464:	08005411 	.word	0x08005411
 8005468:	080055c3 	.word	0x080055c3
 800546c:	08005411 	.word	0x08005411
 8005470:	080054c5 	.word	0x080054c5
 8005474:	08005411 	.word	0x08005411
 8005478:	08005411 	.word	0x08005411
 800547c:	0800558b 	.word	0x0800558b
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	1d1a      	adds	r2, r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	602a      	str	r2, [r5, #0]
 8005488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800548c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005490:	2301      	movs	r3, #1
 8005492:	e0a3      	b.n	80055dc <_printf_i+0x1f4>
 8005494:	6820      	ldr	r0, [r4, #0]
 8005496:	6829      	ldr	r1, [r5, #0]
 8005498:	0606      	lsls	r6, r0, #24
 800549a:	f101 0304 	add.w	r3, r1, #4
 800549e:	d50a      	bpl.n	80054b6 <_printf_i+0xce>
 80054a0:	680e      	ldr	r6, [r1, #0]
 80054a2:	602b      	str	r3, [r5, #0]
 80054a4:	2e00      	cmp	r6, #0
 80054a6:	da03      	bge.n	80054b0 <_printf_i+0xc8>
 80054a8:	232d      	movs	r3, #45	; 0x2d
 80054aa:	4276      	negs	r6, r6
 80054ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b0:	485e      	ldr	r0, [pc, #376]	; (800562c <_printf_i+0x244>)
 80054b2:	230a      	movs	r3, #10
 80054b4:	e019      	b.n	80054ea <_printf_i+0x102>
 80054b6:	680e      	ldr	r6, [r1, #0]
 80054b8:	602b      	str	r3, [r5, #0]
 80054ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054be:	bf18      	it	ne
 80054c0:	b236      	sxthne	r6, r6
 80054c2:	e7ef      	b.n	80054a4 <_printf_i+0xbc>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	6820      	ldr	r0, [r4, #0]
 80054c8:	1d19      	adds	r1, r3, #4
 80054ca:	6029      	str	r1, [r5, #0]
 80054cc:	0601      	lsls	r1, r0, #24
 80054ce:	d501      	bpl.n	80054d4 <_printf_i+0xec>
 80054d0:	681e      	ldr	r6, [r3, #0]
 80054d2:	e002      	b.n	80054da <_printf_i+0xf2>
 80054d4:	0646      	lsls	r6, r0, #25
 80054d6:	d5fb      	bpl.n	80054d0 <_printf_i+0xe8>
 80054d8:	881e      	ldrh	r6, [r3, #0]
 80054da:	4854      	ldr	r0, [pc, #336]	; (800562c <_printf_i+0x244>)
 80054dc:	2f6f      	cmp	r7, #111	; 0x6f
 80054de:	bf0c      	ite	eq
 80054e0:	2308      	moveq	r3, #8
 80054e2:	230a      	movne	r3, #10
 80054e4:	2100      	movs	r1, #0
 80054e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ea:	6865      	ldr	r5, [r4, #4]
 80054ec:	60a5      	str	r5, [r4, #8]
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	bfa2      	ittt	ge
 80054f2:	6821      	ldrge	r1, [r4, #0]
 80054f4:	f021 0104 	bicge.w	r1, r1, #4
 80054f8:	6021      	strge	r1, [r4, #0]
 80054fa:	b90e      	cbnz	r6, 8005500 <_printf_i+0x118>
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	d04d      	beq.n	800559c <_printf_i+0x1b4>
 8005500:	4615      	mov	r5, r2
 8005502:	fbb6 f1f3 	udiv	r1, r6, r3
 8005506:	fb03 6711 	mls	r7, r3, r1, r6
 800550a:	5dc7      	ldrb	r7, [r0, r7]
 800550c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005510:	4637      	mov	r7, r6
 8005512:	42bb      	cmp	r3, r7
 8005514:	460e      	mov	r6, r1
 8005516:	d9f4      	bls.n	8005502 <_printf_i+0x11a>
 8005518:	2b08      	cmp	r3, #8
 800551a:	d10b      	bne.n	8005534 <_printf_i+0x14c>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	07de      	lsls	r6, r3, #31
 8005520:	d508      	bpl.n	8005534 <_printf_i+0x14c>
 8005522:	6923      	ldr	r3, [r4, #16]
 8005524:	6861      	ldr	r1, [r4, #4]
 8005526:	4299      	cmp	r1, r3
 8005528:	bfde      	ittt	le
 800552a:	2330      	movle	r3, #48	; 0x30
 800552c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005530:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005534:	1b52      	subs	r2, r2, r5
 8005536:	6122      	str	r2, [r4, #16]
 8005538:	f8cd a000 	str.w	sl, [sp]
 800553c:	464b      	mov	r3, r9
 800553e:	aa03      	add	r2, sp, #12
 8005540:	4621      	mov	r1, r4
 8005542:	4640      	mov	r0, r8
 8005544:	f7ff fee2 	bl	800530c <_printf_common>
 8005548:	3001      	adds	r0, #1
 800554a:	d14c      	bne.n	80055e6 <_printf_i+0x1fe>
 800554c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005550:	b004      	add	sp, #16
 8005552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005556:	4835      	ldr	r0, [pc, #212]	; (800562c <_printf_i+0x244>)
 8005558:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800555c:	6829      	ldr	r1, [r5, #0]
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	f851 6b04 	ldr.w	r6, [r1], #4
 8005564:	6029      	str	r1, [r5, #0]
 8005566:	061d      	lsls	r5, r3, #24
 8005568:	d514      	bpl.n	8005594 <_printf_i+0x1ac>
 800556a:	07df      	lsls	r7, r3, #31
 800556c:	bf44      	itt	mi
 800556e:	f043 0320 	orrmi.w	r3, r3, #32
 8005572:	6023      	strmi	r3, [r4, #0]
 8005574:	b91e      	cbnz	r6, 800557e <_printf_i+0x196>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	f023 0320 	bic.w	r3, r3, #32
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	2310      	movs	r3, #16
 8005580:	e7b0      	b.n	80054e4 <_printf_i+0xfc>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	f043 0320 	orr.w	r3, r3, #32
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	2378      	movs	r3, #120	; 0x78
 800558c:	4828      	ldr	r0, [pc, #160]	; (8005630 <_printf_i+0x248>)
 800558e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005592:	e7e3      	b.n	800555c <_printf_i+0x174>
 8005594:	0659      	lsls	r1, r3, #25
 8005596:	bf48      	it	mi
 8005598:	b2b6      	uxthmi	r6, r6
 800559a:	e7e6      	b.n	800556a <_printf_i+0x182>
 800559c:	4615      	mov	r5, r2
 800559e:	e7bb      	b.n	8005518 <_printf_i+0x130>
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	6826      	ldr	r6, [r4, #0]
 80055a4:	6961      	ldr	r1, [r4, #20]
 80055a6:	1d18      	adds	r0, r3, #4
 80055a8:	6028      	str	r0, [r5, #0]
 80055aa:	0635      	lsls	r5, r6, #24
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	d501      	bpl.n	80055b4 <_printf_i+0x1cc>
 80055b0:	6019      	str	r1, [r3, #0]
 80055b2:	e002      	b.n	80055ba <_printf_i+0x1d2>
 80055b4:	0670      	lsls	r0, r6, #25
 80055b6:	d5fb      	bpl.n	80055b0 <_printf_i+0x1c8>
 80055b8:	8019      	strh	r1, [r3, #0]
 80055ba:	2300      	movs	r3, #0
 80055bc:	6123      	str	r3, [r4, #16]
 80055be:	4615      	mov	r5, r2
 80055c0:	e7ba      	b.n	8005538 <_printf_i+0x150>
 80055c2:	682b      	ldr	r3, [r5, #0]
 80055c4:	1d1a      	adds	r2, r3, #4
 80055c6:	602a      	str	r2, [r5, #0]
 80055c8:	681d      	ldr	r5, [r3, #0]
 80055ca:	6862      	ldr	r2, [r4, #4]
 80055cc:	2100      	movs	r1, #0
 80055ce:	4628      	mov	r0, r5
 80055d0:	f7fa fe0e 	bl	80001f0 <memchr>
 80055d4:	b108      	cbz	r0, 80055da <_printf_i+0x1f2>
 80055d6:	1b40      	subs	r0, r0, r5
 80055d8:	6060      	str	r0, [r4, #4]
 80055da:	6863      	ldr	r3, [r4, #4]
 80055dc:	6123      	str	r3, [r4, #16]
 80055de:	2300      	movs	r3, #0
 80055e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e4:	e7a8      	b.n	8005538 <_printf_i+0x150>
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	462a      	mov	r2, r5
 80055ea:	4649      	mov	r1, r9
 80055ec:	4640      	mov	r0, r8
 80055ee:	47d0      	blx	sl
 80055f0:	3001      	adds	r0, #1
 80055f2:	d0ab      	beq.n	800554c <_printf_i+0x164>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	079b      	lsls	r3, r3, #30
 80055f8:	d413      	bmi.n	8005622 <_printf_i+0x23a>
 80055fa:	68e0      	ldr	r0, [r4, #12]
 80055fc:	9b03      	ldr	r3, [sp, #12]
 80055fe:	4298      	cmp	r0, r3
 8005600:	bfb8      	it	lt
 8005602:	4618      	movlt	r0, r3
 8005604:	e7a4      	b.n	8005550 <_printf_i+0x168>
 8005606:	2301      	movs	r3, #1
 8005608:	4632      	mov	r2, r6
 800560a:	4649      	mov	r1, r9
 800560c:	4640      	mov	r0, r8
 800560e:	47d0      	blx	sl
 8005610:	3001      	adds	r0, #1
 8005612:	d09b      	beq.n	800554c <_printf_i+0x164>
 8005614:	3501      	adds	r5, #1
 8005616:	68e3      	ldr	r3, [r4, #12]
 8005618:	9903      	ldr	r1, [sp, #12]
 800561a:	1a5b      	subs	r3, r3, r1
 800561c:	42ab      	cmp	r3, r5
 800561e:	dcf2      	bgt.n	8005606 <_printf_i+0x21e>
 8005620:	e7eb      	b.n	80055fa <_printf_i+0x212>
 8005622:	2500      	movs	r5, #0
 8005624:	f104 0619 	add.w	r6, r4, #25
 8005628:	e7f5      	b.n	8005616 <_printf_i+0x22e>
 800562a:	bf00      	nop
 800562c:	08005d85 	.word	0x08005d85
 8005630:	08005d96 	.word	0x08005d96

08005634 <_sbrk_r>:
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	4d06      	ldr	r5, [pc, #24]	; (8005650 <_sbrk_r+0x1c>)
 8005638:	2300      	movs	r3, #0
 800563a:	4604      	mov	r4, r0
 800563c:	4608      	mov	r0, r1
 800563e:	602b      	str	r3, [r5, #0]
 8005640:	f7fb fd18 	bl	8001074 <_sbrk>
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	d102      	bne.n	800564e <_sbrk_r+0x1a>
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	b103      	cbz	r3, 800564e <_sbrk_r+0x1a>
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	bd38      	pop	{r3, r4, r5, pc}
 8005650:	200041e0 	.word	0x200041e0

08005654 <__sread>:
 8005654:	b510      	push	{r4, lr}
 8005656:	460c      	mov	r4, r1
 8005658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800565c:	f000 fab2 	bl	8005bc4 <_read_r>
 8005660:	2800      	cmp	r0, #0
 8005662:	bfab      	itete	ge
 8005664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005666:	89a3      	ldrhlt	r3, [r4, #12]
 8005668:	181b      	addge	r3, r3, r0
 800566a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800566e:	bfac      	ite	ge
 8005670:	6563      	strge	r3, [r4, #84]	; 0x54
 8005672:	81a3      	strhlt	r3, [r4, #12]
 8005674:	bd10      	pop	{r4, pc}

08005676 <__swrite>:
 8005676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800567a:	461f      	mov	r7, r3
 800567c:	898b      	ldrh	r3, [r1, #12]
 800567e:	05db      	lsls	r3, r3, #23
 8005680:	4605      	mov	r5, r0
 8005682:	460c      	mov	r4, r1
 8005684:	4616      	mov	r6, r2
 8005686:	d505      	bpl.n	8005694 <__swrite+0x1e>
 8005688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568c:	2302      	movs	r3, #2
 800568e:	2200      	movs	r2, #0
 8005690:	f000 f9c8 	bl	8005a24 <_lseek_r>
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800569a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800569e:	81a3      	strh	r3, [r4, #12]
 80056a0:	4632      	mov	r2, r6
 80056a2:	463b      	mov	r3, r7
 80056a4:	4628      	mov	r0, r5
 80056a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056aa:	f000 b869 	b.w	8005780 <_write_r>

080056ae <__sseek>:
 80056ae:	b510      	push	{r4, lr}
 80056b0:	460c      	mov	r4, r1
 80056b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b6:	f000 f9b5 	bl	8005a24 <_lseek_r>
 80056ba:	1c43      	adds	r3, r0, #1
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	bf15      	itete	ne
 80056c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80056c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056ca:	81a3      	strheq	r3, [r4, #12]
 80056cc:	bf18      	it	ne
 80056ce:	81a3      	strhne	r3, [r4, #12]
 80056d0:	bd10      	pop	{r4, pc}

080056d2 <__sclose>:
 80056d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d6:	f000 b8d3 	b.w	8005880 <_close_r>
	...

080056dc <__swbuf_r>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	460e      	mov	r6, r1
 80056e0:	4614      	mov	r4, r2
 80056e2:	4605      	mov	r5, r0
 80056e4:	b118      	cbz	r0, 80056ee <__swbuf_r+0x12>
 80056e6:	6983      	ldr	r3, [r0, #24]
 80056e8:	b90b      	cbnz	r3, 80056ee <__swbuf_r+0x12>
 80056ea:	f7ff fb81 	bl	8004df0 <__sinit>
 80056ee:	4b21      	ldr	r3, [pc, #132]	; (8005774 <__swbuf_r+0x98>)
 80056f0:	429c      	cmp	r4, r3
 80056f2:	d12b      	bne.n	800574c <__swbuf_r+0x70>
 80056f4:	686c      	ldr	r4, [r5, #4]
 80056f6:	69a3      	ldr	r3, [r4, #24]
 80056f8:	60a3      	str	r3, [r4, #8]
 80056fa:	89a3      	ldrh	r3, [r4, #12]
 80056fc:	071a      	lsls	r2, r3, #28
 80056fe:	d52f      	bpl.n	8005760 <__swbuf_r+0x84>
 8005700:	6923      	ldr	r3, [r4, #16]
 8005702:	b36b      	cbz	r3, 8005760 <__swbuf_r+0x84>
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	6820      	ldr	r0, [r4, #0]
 8005708:	1ac0      	subs	r0, r0, r3
 800570a:	6963      	ldr	r3, [r4, #20]
 800570c:	b2f6      	uxtb	r6, r6
 800570e:	4283      	cmp	r3, r0
 8005710:	4637      	mov	r7, r6
 8005712:	dc04      	bgt.n	800571e <__swbuf_r+0x42>
 8005714:	4621      	mov	r1, r4
 8005716:	4628      	mov	r0, r5
 8005718:	f000 f948 	bl	80059ac <_fflush_r>
 800571c:	bb30      	cbnz	r0, 800576c <__swbuf_r+0x90>
 800571e:	68a3      	ldr	r3, [r4, #8]
 8005720:	3b01      	subs	r3, #1
 8005722:	60a3      	str	r3, [r4, #8]
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	6022      	str	r2, [r4, #0]
 800572a:	701e      	strb	r6, [r3, #0]
 800572c:	6963      	ldr	r3, [r4, #20]
 800572e:	3001      	adds	r0, #1
 8005730:	4283      	cmp	r3, r0
 8005732:	d004      	beq.n	800573e <__swbuf_r+0x62>
 8005734:	89a3      	ldrh	r3, [r4, #12]
 8005736:	07db      	lsls	r3, r3, #31
 8005738:	d506      	bpl.n	8005748 <__swbuf_r+0x6c>
 800573a:	2e0a      	cmp	r6, #10
 800573c:	d104      	bne.n	8005748 <__swbuf_r+0x6c>
 800573e:	4621      	mov	r1, r4
 8005740:	4628      	mov	r0, r5
 8005742:	f000 f933 	bl	80059ac <_fflush_r>
 8005746:	b988      	cbnz	r0, 800576c <__swbuf_r+0x90>
 8005748:	4638      	mov	r0, r7
 800574a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800574c:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <__swbuf_r+0x9c>)
 800574e:	429c      	cmp	r4, r3
 8005750:	d101      	bne.n	8005756 <__swbuf_r+0x7a>
 8005752:	68ac      	ldr	r4, [r5, #8]
 8005754:	e7cf      	b.n	80056f6 <__swbuf_r+0x1a>
 8005756:	4b09      	ldr	r3, [pc, #36]	; (800577c <__swbuf_r+0xa0>)
 8005758:	429c      	cmp	r4, r3
 800575a:	bf08      	it	eq
 800575c:	68ec      	ldreq	r4, [r5, #12]
 800575e:	e7ca      	b.n	80056f6 <__swbuf_r+0x1a>
 8005760:	4621      	mov	r1, r4
 8005762:	4628      	mov	r0, r5
 8005764:	f000 f81e 	bl	80057a4 <__swsetup_r>
 8005768:	2800      	cmp	r0, #0
 800576a:	d0cb      	beq.n	8005704 <__swbuf_r+0x28>
 800576c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005770:	e7ea      	b.n	8005748 <__swbuf_r+0x6c>
 8005772:	bf00      	nop
 8005774:	08005d34 	.word	0x08005d34
 8005778:	08005d54 	.word	0x08005d54
 800577c:	08005d14 	.word	0x08005d14

08005780 <_write_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d07      	ldr	r5, [pc, #28]	; (80057a0 <_write_r+0x20>)
 8005784:	4604      	mov	r4, r0
 8005786:	4608      	mov	r0, r1
 8005788:	4611      	mov	r1, r2
 800578a:	2200      	movs	r2, #0
 800578c:	602a      	str	r2, [r5, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	f7fb fc1f 	bl	8000fd2 <_write>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_write_r+0x1e>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	b103      	cbz	r3, 800579e <_write_r+0x1e>
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	200041e0 	.word	0x200041e0

080057a4 <__swsetup_r>:
 80057a4:	4b32      	ldr	r3, [pc, #200]	; (8005870 <__swsetup_r+0xcc>)
 80057a6:	b570      	push	{r4, r5, r6, lr}
 80057a8:	681d      	ldr	r5, [r3, #0]
 80057aa:	4606      	mov	r6, r0
 80057ac:	460c      	mov	r4, r1
 80057ae:	b125      	cbz	r5, 80057ba <__swsetup_r+0x16>
 80057b0:	69ab      	ldr	r3, [r5, #24]
 80057b2:	b913      	cbnz	r3, 80057ba <__swsetup_r+0x16>
 80057b4:	4628      	mov	r0, r5
 80057b6:	f7ff fb1b 	bl	8004df0 <__sinit>
 80057ba:	4b2e      	ldr	r3, [pc, #184]	; (8005874 <__swsetup_r+0xd0>)
 80057bc:	429c      	cmp	r4, r3
 80057be:	d10f      	bne.n	80057e0 <__swsetup_r+0x3c>
 80057c0:	686c      	ldr	r4, [r5, #4]
 80057c2:	89a3      	ldrh	r3, [r4, #12]
 80057c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057c8:	0719      	lsls	r1, r3, #28
 80057ca:	d42c      	bmi.n	8005826 <__swsetup_r+0x82>
 80057cc:	06dd      	lsls	r5, r3, #27
 80057ce:	d411      	bmi.n	80057f4 <__swsetup_r+0x50>
 80057d0:	2309      	movs	r3, #9
 80057d2:	6033      	str	r3, [r6, #0]
 80057d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057d8:	81a3      	strh	r3, [r4, #12]
 80057da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057de:	e03e      	b.n	800585e <__swsetup_r+0xba>
 80057e0:	4b25      	ldr	r3, [pc, #148]	; (8005878 <__swsetup_r+0xd4>)
 80057e2:	429c      	cmp	r4, r3
 80057e4:	d101      	bne.n	80057ea <__swsetup_r+0x46>
 80057e6:	68ac      	ldr	r4, [r5, #8]
 80057e8:	e7eb      	b.n	80057c2 <__swsetup_r+0x1e>
 80057ea:	4b24      	ldr	r3, [pc, #144]	; (800587c <__swsetup_r+0xd8>)
 80057ec:	429c      	cmp	r4, r3
 80057ee:	bf08      	it	eq
 80057f0:	68ec      	ldreq	r4, [r5, #12]
 80057f2:	e7e6      	b.n	80057c2 <__swsetup_r+0x1e>
 80057f4:	0758      	lsls	r0, r3, #29
 80057f6:	d512      	bpl.n	800581e <__swsetup_r+0x7a>
 80057f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057fa:	b141      	cbz	r1, 800580e <__swsetup_r+0x6a>
 80057fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005800:	4299      	cmp	r1, r3
 8005802:	d002      	beq.n	800580a <__swsetup_r+0x66>
 8005804:	4630      	mov	r0, r6
 8005806:	f000 f991 	bl	8005b2c <_free_r>
 800580a:	2300      	movs	r3, #0
 800580c:	6363      	str	r3, [r4, #52]	; 0x34
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005814:	81a3      	strh	r3, [r4, #12]
 8005816:	2300      	movs	r3, #0
 8005818:	6063      	str	r3, [r4, #4]
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	f043 0308 	orr.w	r3, r3, #8
 8005824:	81a3      	strh	r3, [r4, #12]
 8005826:	6923      	ldr	r3, [r4, #16]
 8005828:	b94b      	cbnz	r3, 800583e <__swsetup_r+0x9a>
 800582a:	89a3      	ldrh	r3, [r4, #12]
 800582c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005834:	d003      	beq.n	800583e <__swsetup_r+0x9a>
 8005836:	4621      	mov	r1, r4
 8005838:	4630      	mov	r0, r6
 800583a:	f000 f92b 	bl	8005a94 <__smakebuf_r>
 800583e:	89a0      	ldrh	r0, [r4, #12]
 8005840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005844:	f010 0301 	ands.w	r3, r0, #1
 8005848:	d00a      	beq.n	8005860 <__swsetup_r+0xbc>
 800584a:	2300      	movs	r3, #0
 800584c:	60a3      	str	r3, [r4, #8]
 800584e:	6963      	ldr	r3, [r4, #20]
 8005850:	425b      	negs	r3, r3
 8005852:	61a3      	str	r3, [r4, #24]
 8005854:	6923      	ldr	r3, [r4, #16]
 8005856:	b943      	cbnz	r3, 800586a <__swsetup_r+0xc6>
 8005858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800585c:	d1ba      	bne.n	80057d4 <__swsetup_r+0x30>
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	0781      	lsls	r1, r0, #30
 8005862:	bf58      	it	pl
 8005864:	6963      	ldrpl	r3, [r4, #20]
 8005866:	60a3      	str	r3, [r4, #8]
 8005868:	e7f4      	b.n	8005854 <__swsetup_r+0xb0>
 800586a:	2000      	movs	r0, #0
 800586c:	e7f7      	b.n	800585e <__swsetup_r+0xba>
 800586e:	bf00      	nop
 8005870:	20000010 	.word	0x20000010
 8005874:	08005d34 	.word	0x08005d34
 8005878:	08005d54 	.word	0x08005d54
 800587c:	08005d14 	.word	0x08005d14

08005880 <_close_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4d06      	ldr	r5, [pc, #24]	; (800589c <_close_r+0x1c>)
 8005884:	2300      	movs	r3, #0
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	602b      	str	r3, [r5, #0]
 800588c:	f7fb fbbd 	bl	800100a <_close>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_close_r+0x1a>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_close_r+0x1a>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	200041e0 	.word	0x200041e0

080058a0 <__sflush_r>:
 80058a0:	898a      	ldrh	r2, [r1, #12]
 80058a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a6:	4605      	mov	r5, r0
 80058a8:	0710      	lsls	r0, r2, #28
 80058aa:	460c      	mov	r4, r1
 80058ac:	d458      	bmi.n	8005960 <__sflush_r+0xc0>
 80058ae:	684b      	ldr	r3, [r1, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	dc05      	bgt.n	80058c0 <__sflush_r+0x20>
 80058b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	dc02      	bgt.n	80058c0 <__sflush_r+0x20>
 80058ba:	2000      	movs	r0, #0
 80058bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058c2:	2e00      	cmp	r6, #0
 80058c4:	d0f9      	beq.n	80058ba <__sflush_r+0x1a>
 80058c6:	2300      	movs	r3, #0
 80058c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058cc:	682f      	ldr	r7, [r5, #0]
 80058ce:	602b      	str	r3, [r5, #0]
 80058d0:	d032      	beq.n	8005938 <__sflush_r+0x98>
 80058d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	075a      	lsls	r2, r3, #29
 80058d8:	d505      	bpl.n	80058e6 <__sflush_r+0x46>
 80058da:	6863      	ldr	r3, [r4, #4]
 80058dc:	1ac0      	subs	r0, r0, r3
 80058de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058e0:	b10b      	cbz	r3, 80058e6 <__sflush_r+0x46>
 80058e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058e4:	1ac0      	subs	r0, r0, r3
 80058e6:	2300      	movs	r3, #0
 80058e8:	4602      	mov	r2, r0
 80058ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058ec:	6a21      	ldr	r1, [r4, #32]
 80058ee:	4628      	mov	r0, r5
 80058f0:	47b0      	blx	r6
 80058f2:	1c43      	adds	r3, r0, #1
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	d106      	bne.n	8005906 <__sflush_r+0x66>
 80058f8:	6829      	ldr	r1, [r5, #0]
 80058fa:	291d      	cmp	r1, #29
 80058fc:	d82c      	bhi.n	8005958 <__sflush_r+0xb8>
 80058fe:	4a2a      	ldr	r2, [pc, #168]	; (80059a8 <__sflush_r+0x108>)
 8005900:	40ca      	lsrs	r2, r1
 8005902:	07d6      	lsls	r6, r2, #31
 8005904:	d528      	bpl.n	8005958 <__sflush_r+0xb8>
 8005906:	2200      	movs	r2, #0
 8005908:	6062      	str	r2, [r4, #4]
 800590a:	04d9      	lsls	r1, r3, #19
 800590c:	6922      	ldr	r2, [r4, #16]
 800590e:	6022      	str	r2, [r4, #0]
 8005910:	d504      	bpl.n	800591c <__sflush_r+0x7c>
 8005912:	1c42      	adds	r2, r0, #1
 8005914:	d101      	bne.n	800591a <__sflush_r+0x7a>
 8005916:	682b      	ldr	r3, [r5, #0]
 8005918:	b903      	cbnz	r3, 800591c <__sflush_r+0x7c>
 800591a:	6560      	str	r0, [r4, #84]	; 0x54
 800591c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800591e:	602f      	str	r7, [r5, #0]
 8005920:	2900      	cmp	r1, #0
 8005922:	d0ca      	beq.n	80058ba <__sflush_r+0x1a>
 8005924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005928:	4299      	cmp	r1, r3
 800592a:	d002      	beq.n	8005932 <__sflush_r+0x92>
 800592c:	4628      	mov	r0, r5
 800592e:	f000 f8fd 	bl	8005b2c <_free_r>
 8005932:	2000      	movs	r0, #0
 8005934:	6360      	str	r0, [r4, #52]	; 0x34
 8005936:	e7c1      	b.n	80058bc <__sflush_r+0x1c>
 8005938:	6a21      	ldr	r1, [r4, #32]
 800593a:	2301      	movs	r3, #1
 800593c:	4628      	mov	r0, r5
 800593e:	47b0      	blx	r6
 8005940:	1c41      	adds	r1, r0, #1
 8005942:	d1c7      	bne.n	80058d4 <__sflush_r+0x34>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0c4      	beq.n	80058d4 <__sflush_r+0x34>
 800594a:	2b1d      	cmp	r3, #29
 800594c:	d001      	beq.n	8005952 <__sflush_r+0xb2>
 800594e:	2b16      	cmp	r3, #22
 8005950:	d101      	bne.n	8005956 <__sflush_r+0xb6>
 8005952:	602f      	str	r7, [r5, #0]
 8005954:	e7b1      	b.n	80058ba <__sflush_r+0x1a>
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800595c:	81a3      	strh	r3, [r4, #12]
 800595e:	e7ad      	b.n	80058bc <__sflush_r+0x1c>
 8005960:	690f      	ldr	r7, [r1, #16]
 8005962:	2f00      	cmp	r7, #0
 8005964:	d0a9      	beq.n	80058ba <__sflush_r+0x1a>
 8005966:	0793      	lsls	r3, r2, #30
 8005968:	680e      	ldr	r6, [r1, #0]
 800596a:	bf08      	it	eq
 800596c:	694b      	ldreq	r3, [r1, #20]
 800596e:	600f      	str	r7, [r1, #0]
 8005970:	bf18      	it	ne
 8005972:	2300      	movne	r3, #0
 8005974:	eba6 0807 	sub.w	r8, r6, r7
 8005978:	608b      	str	r3, [r1, #8]
 800597a:	f1b8 0f00 	cmp.w	r8, #0
 800597e:	dd9c      	ble.n	80058ba <__sflush_r+0x1a>
 8005980:	6a21      	ldr	r1, [r4, #32]
 8005982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005984:	4643      	mov	r3, r8
 8005986:	463a      	mov	r2, r7
 8005988:	4628      	mov	r0, r5
 800598a:	47b0      	blx	r6
 800598c:	2800      	cmp	r0, #0
 800598e:	dc06      	bgt.n	800599e <__sflush_r+0xfe>
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005996:	81a3      	strh	r3, [r4, #12]
 8005998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800599c:	e78e      	b.n	80058bc <__sflush_r+0x1c>
 800599e:	4407      	add	r7, r0
 80059a0:	eba8 0800 	sub.w	r8, r8, r0
 80059a4:	e7e9      	b.n	800597a <__sflush_r+0xda>
 80059a6:	bf00      	nop
 80059a8:	20400001 	.word	0x20400001

080059ac <_fflush_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	690b      	ldr	r3, [r1, #16]
 80059b0:	4605      	mov	r5, r0
 80059b2:	460c      	mov	r4, r1
 80059b4:	b913      	cbnz	r3, 80059bc <_fflush_r+0x10>
 80059b6:	2500      	movs	r5, #0
 80059b8:	4628      	mov	r0, r5
 80059ba:	bd38      	pop	{r3, r4, r5, pc}
 80059bc:	b118      	cbz	r0, 80059c6 <_fflush_r+0x1a>
 80059be:	6983      	ldr	r3, [r0, #24]
 80059c0:	b90b      	cbnz	r3, 80059c6 <_fflush_r+0x1a>
 80059c2:	f7ff fa15 	bl	8004df0 <__sinit>
 80059c6:	4b14      	ldr	r3, [pc, #80]	; (8005a18 <_fflush_r+0x6c>)
 80059c8:	429c      	cmp	r4, r3
 80059ca:	d11b      	bne.n	8005a04 <_fflush_r+0x58>
 80059cc:	686c      	ldr	r4, [r5, #4]
 80059ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0ef      	beq.n	80059b6 <_fflush_r+0xa>
 80059d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059d8:	07d0      	lsls	r0, r2, #31
 80059da:	d404      	bmi.n	80059e6 <_fflush_r+0x3a>
 80059dc:	0599      	lsls	r1, r3, #22
 80059de:	d402      	bmi.n	80059e6 <_fflush_r+0x3a>
 80059e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059e2:	f7ff faa3 	bl	8004f2c <__retarget_lock_acquire_recursive>
 80059e6:	4628      	mov	r0, r5
 80059e8:	4621      	mov	r1, r4
 80059ea:	f7ff ff59 	bl	80058a0 <__sflush_r>
 80059ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059f0:	07da      	lsls	r2, r3, #31
 80059f2:	4605      	mov	r5, r0
 80059f4:	d4e0      	bmi.n	80059b8 <_fflush_r+0xc>
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	059b      	lsls	r3, r3, #22
 80059fa:	d4dd      	bmi.n	80059b8 <_fflush_r+0xc>
 80059fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059fe:	f7ff fa96 	bl	8004f2e <__retarget_lock_release_recursive>
 8005a02:	e7d9      	b.n	80059b8 <_fflush_r+0xc>
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <_fflush_r+0x70>)
 8005a06:	429c      	cmp	r4, r3
 8005a08:	d101      	bne.n	8005a0e <_fflush_r+0x62>
 8005a0a:	68ac      	ldr	r4, [r5, #8]
 8005a0c:	e7df      	b.n	80059ce <_fflush_r+0x22>
 8005a0e:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <_fflush_r+0x74>)
 8005a10:	429c      	cmp	r4, r3
 8005a12:	bf08      	it	eq
 8005a14:	68ec      	ldreq	r4, [r5, #12]
 8005a16:	e7da      	b.n	80059ce <_fflush_r+0x22>
 8005a18:	08005d34 	.word	0x08005d34
 8005a1c:	08005d54 	.word	0x08005d54
 8005a20:	08005d14 	.word	0x08005d14

08005a24 <_lseek_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4d07      	ldr	r5, [pc, #28]	; (8005a44 <_lseek_r+0x20>)
 8005a28:	4604      	mov	r4, r0
 8005a2a:	4608      	mov	r0, r1
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	2200      	movs	r2, #0
 8005a30:	602a      	str	r2, [r5, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f7fb fb10 	bl	8001058 <_lseek>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d102      	bne.n	8005a42 <_lseek_r+0x1e>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b103      	cbz	r3, 8005a42 <_lseek_r+0x1e>
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	200041e0 	.word	0x200041e0

08005a48 <__swhatbuf_r>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	460e      	mov	r6, r1
 8005a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a50:	2900      	cmp	r1, #0
 8005a52:	b096      	sub	sp, #88	; 0x58
 8005a54:	4614      	mov	r4, r2
 8005a56:	461d      	mov	r5, r3
 8005a58:	da08      	bge.n	8005a6c <__swhatbuf_r+0x24>
 8005a5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	602a      	str	r2, [r5, #0]
 8005a62:	061a      	lsls	r2, r3, #24
 8005a64:	d410      	bmi.n	8005a88 <__swhatbuf_r+0x40>
 8005a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a6a:	e00e      	b.n	8005a8a <__swhatbuf_r+0x42>
 8005a6c:	466a      	mov	r2, sp
 8005a6e:	f000 f8bb 	bl	8005be8 <_fstat_r>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	dbf1      	blt.n	8005a5a <__swhatbuf_r+0x12>
 8005a76:	9a01      	ldr	r2, [sp, #4]
 8005a78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a80:	425a      	negs	r2, r3
 8005a82:	415a      	adcs	r2, r3
 8005a84:	602a      	str	r2, [r5, #0]
 8005a86:	e7ee      	b.n	8005a66 <__swhatbuf_r+0x1e>
 8005a88:	2340      	movs	r3, #64	; 0x40
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	b016      	add	sp, #88	; 0x58
 8005a90:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a94 <__smakebuf_r>:
 8005a94:	898b      	ldrh	r3, [r1, #12]
 8005a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a98:	079d      	lsls	r5, r3, #30
 8005a9a:	4606      	mov	r6, r0
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	d507      	bpl.n	8005ab0 <__smakebuf_r+0x1c>
 8005aa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	6123      	str	r3, [r4, #16]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	6163      	str	r3, [r4, #20]
 8005aac:	b002      	add	sp, #8
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	ab01      	add	r3, sp, #4
 8005ab2:	466a      	mov	r2, sp
 8005ab4:	f7ff ffc8 	bl	8005a48 <__swhatbuf_r>
 8005ab8:	9900      	ldr	r1, [sp, #0]
 8005aba:	4605      	mov	r5, r0
 8005abc:	4630      	mov	r0, r6
 8005abe:	f7ff fa57 	bl	8004f70 <_malloc_r>
 8005ac2:	b948      	cbnz	r0, 8005ad8 <__smakebuf_r+0x44>
 8005ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ac8:	059a      	lsls	r2, r3, #22
 8005aca:	d4ef      	bmi.n	8005aac <__smakebuf_r+0x18>
 8005acc:	f023 0303 	bic.w	r3, r3, #3
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	e7e3      	b.n	8005aa0 <__smakebuf_r+0xc>
 8005ad8:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <__smakebuf_r+0x7c>)
 8005ada:	62b3      	str	r3, [r6, #40]	; 0x28
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	6020      	str	r0, [r4, #0]
 8005ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	9b00      	ldr	r3, [sp, #0]
 8005ae8:	6163      	str	r3, [r4, #20]
 8005aea:	9b01      	ldr	r3, [sp, #4]
 8005aec:	6120      	str	r0, [r4, #16]
 8005aee:	b15b      	cbz	r3, 8005b08 <__smakebuf_r+0x74>
 8005af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005af4:	4630      	mov	r0, r6
 8005af6:	f000 f889 	bl	8005c0c <_isatty_r>
 8005afa:	b128      	cbz	r0, 8005b08 <__smakebuf_r+0x74>
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	81a3      	strh	r3, [r4, #12]
 8005b08:	89a0      	ldrh	r0, [r4, #12]
 8005b0a:	4305      	orrs	r5, r0
 8005b0c:	81a5      	strh	r5, [r4, #12]
 8005b0e:	e7cd      	b.n	8005aac <__smakebuf_r+0x18>
 8005b10:	08004d89 	.word	0x08004d89

08005b14 <__malloc_lock>:
 8005b14:	4801      	ldr	r0, [pc, #4]	; (8005b1c <__malloc_lock+0x8>)
 8005b16:	f7ff ba09 	b.w	8004f2c <__retarget_lock_acquire_recursive>
 8005b1a:	bf00      	nop
 8005b1c:	200041d4 	.word	0x200041d4

08005b20 <__malloc_unlock>:
 8005b20:	4801      	ldr	r0, [pc, #4]	; (8005b28 <__malloc_unlock+0x8>)
 8005b22:	f7ff ba04 	b.w	8004f2e <__retarget_lock_release_recursive>
 8005b26:	bf00      	nop
 8005b28:	200041d4 	.word	0x200041d4

08005b2c <_free_r>:
 8005b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b2e:	2900      	cmp	r1, #0
 8005b30:	d044      	beq.n	8005bbc <_free_r+0x90>
 8005b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b36:	9001      	str	r0, [sp, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b3e:	bfb8      	it	lt
 8005b40:	18e4      	addlt	r4, r4, r3
 8005b42:	f7ff ffe7 	bl	8005b14 <__malloc_lock>
 8005b46:	4a1e      	ldr	r2, [pc, #120]	; (8005bc0 <_free_r+0x94>)
 8005b48:	9801      	ldr	r0, [sp, #4]
 8005b4a:	6813      	ldr	r3, [r2, #0]
 8005b4c:	b933      	cbnz	r3, 8005b5c <_free_r+0x30>
 8005b4e:	6063      	str	r3, [r4, #4]
 8005b50:	6014      	str	r4, [r2, #0]
 8005b52:	b003      	add	sp, #12
 8005b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b58:	f7ff bfe2 	b.w	8005b20 <__malloc_unlock>
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	d908      	bls.n	8005b72 <_free_r+0x46>
 8005b60:	6825      	ldr	r5, [r4, #0]
 8005b62:	1961      	adds	r1, r4, r5
 8005b64:	428b      	cmp	r3, r1
 8005b66:	bf01      	itttt	eq
 8005b68:	6819      	ldreq	r1, [r3, #0]
 8005b6a:	685b      	ldreq	r3, [r3, #4]
 8005b6c:	1949      	addeq	r1, r1, r5
 8005b6e:	6021      	streq	r1, [r4, #0]
 8005b70:	e7ed      	b.n	8005b4e <_free_r+0x22>
 8005b72:	461a      	mov	r2, r3
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	b10b      	cbz	r3, 8005b7c <_free_r+0x50>
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	d9fa      	bls.n	8005b72 <_free_r+0x46>
 8005b7c:	6811      	ldr	r1, [r2, #0]
 8005b7e:	1855      	adds	r5, r2, r1
 8005b80:	42a5      	cmp	r5, r4
 8005b82:	d10b      	bne.n	8005b9c <_free_r+0x70>
 8005b84:	6824      	ldr	r4, [r4, #0]
 8005b86:	4421      	add	r1, r4
 8005b88:	1854      	adds	r4, r2, r1
 8005b8a:	42a3      	cmp	r3, r4
 8005b8c:	6011      	str	r1, [r2, #0]
 8005b8e:	d1e0      	bne.n	8005b52 <_free_r+0x26>
 8005b90:	681c      	ldr	r4, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	6053      	str	r3, [r2, #4]
 8005b96:	4421      	add	r1, r4
 8005b98:	6011      	str	r1, [r2, #0]
 8005b9a:	e7da      	b.n	8005b52 <_free_r+0x26>
 8005b9c:	d902      	bls.n	8005ba4 <_free_r+0x78>
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	6003      	str	r3, [r0, #0]
 8005ba2:	e7d6      	b.n	8005b52 <_free_r+0x26>
 8005ba4:	6825      	ldr	r5, [r4, #0]
 8005ba6:	1961      	adds	r1, r4, r5
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	bf04      	itt	eq
 8005bac:	6819      	ldreq	r1, [r3, #0]
 8005bae:	685b      	ldreq	r3, [r3, #4]
 8005bb0:	6063      	str	r3, [r4, #4]
 8005bb2:	bf04      	itt	eq
 8005bb4:	1949      	addeq	r1, r1, r5
 8005bb6:	6021      	streq	r1, [r4, #0]
 8005bb8:	6054      	str	r4, [r2, #4]
 8005bba:	e7ca      	b.n	8005b52 <_free_r+0x26>
 8005bbc:	b003      	add	sp, #12
 8005bbe:	bd30      	pop	{r4, r5, pc}
 8005bc0:	200041d8 	.word	0x200041d8

08005bc4 <_read_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4d07      	ldr	r5, [pc, #28]	; (8005be4 <_read_r+0x20>)
 8005bc8:	4604      	mov	r4, r0
 8005bca:	4608      	mov	r0, r1
 8005bcc:	4611      	mov	r1, r2
 8005bce:	2200      	movs	r2, #0
 8005bd0:	602a      	str	r2, [r5, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f7fb f9e0 	bl	8000f98 <_read>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_read_r+0x1e>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_read_r+0x1e>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	200041e0 	.word	0x200041e0

08005be8 <_fstat_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d07      	ldr	r5, [pc, #28]	; (8005c08 <_fstat_r+0x20>)
 8005bec:	2300      	movs	r3, #0
 8005bee:	4604      	mov	r4, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	602b      	str	r3, [r5, #0]
 8005bf6:	f7fb fa14 	bl	8001022 <_fstat>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	d102      	bne.n	8005c04 <_fstat_r+0x1c>
 8005bfe:	682b      	ldr	r3, [r5, #0]
 8005c00:	b103      	cbz	r3, 8005c04 <_fstat_r+0x1c>
 8005c02:	6023      	str	r3, [r4, #0]
 8005c04:	bd38      	pop	{r3, r4, r5, pc}
 8005c06:	bf00      	nop
 8005c08:	200041e0 	.word	0x200041e0

08005c0c <_isatty_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4d06      	ldr	r5, [pc, #24]	; (8005c28 <_isatty_r+0x1c>)
 8005c10:	2300      	movs	r3, #0
 8005c12:	4604      	mov	r4, r0
 8005c14:	4608      	mov	r0, r1
 8005c16:	602b      	str	r3, [r5, #0]
 8005c18:	f7fb fa13 	bl	8001042 <_isatty>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d102      	bne.n	8005c26 <_isatty_r+0x1a>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	b103      	cbz	r3, 8005c26 <_isatty_r+0x1a>
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	bd38      	pop	{r3, r4, r5, pc}
 8005c28:	200041e0 	.word	0x200041e0

08005c2c <_init>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	bf00      	nop
 8005c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c32:	bc08      	pop	{r3}
 8005c34:	469e      	mov	lr, r3
 8005c36:	4770      	bx	lr

08005c38 <_fini>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	bf00      	nop
 8005c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3e:	bc08      	pop	{r3}
 8005c40:	469e      	mov	lr, r3
 8005c42:	4770      	bx	lr
