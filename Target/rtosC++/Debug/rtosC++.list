
rtosC++.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004edc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005104  08005104  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800510c  0800510c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004158  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004168  20004168  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014bb3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e10  00000000  00000000  00034bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001218  00000000  00000000  00037a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001100  00000000  00000000  00038c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004873  00000000  00000000  00039d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013945  00000000  00000000  0003e593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5cbe  00000000  00000000  00051ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137b96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b9c  00000000  00000000  00137be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005074 	.word	0x08005074

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08005074 	.word	0x08005074

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <vApplicationGetIdleTaskMemory+0x2c>)
 8000514:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <vApplicationGetIdleTaskMemory+0x30>)
 800051a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	2000002c 	.word	0x2000002c
 8000534:	20000080 	.word	0x20000080

08000538 <_Z10calc_crc16PKhh>:
int i=0;

uint16_t calc_crc16(const uint8_t* data_p, uint8_t length);

uint16_t calc_crc16(const uint8_t* data_p, uint8_t length)
	    				{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	70fb      	strb	r3, [r7, #3]
	    					uint8_t x;
	    					uint16_t crc = 0xFFFF;
 8000544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000548:	81fb      	strh	r3, [r7, #14]
	    					while (length--)
 800054a:	78fb      	ldrb	r3, [r7, #3]
 800054c:	1e5a      	subs	r2, r3, #1
 800054e:	70fa      	strb	r2, [r7, #3]
 8000550:	2b00      	cmp	r3, #0
 8000552:	bf14      	ite	ne
 8000554:	2301      	movne	r3, #1
 8000556:	2300      	moveq	r3, #0
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d026      	beq.n	80005ac <_Z10calc_crc16PKhh+0x74>
	    					{
	    						x = crc >> 8 ^ *data_p++;
 800055e:	89fb      	ldrh	r3, [r7, #14]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	b29b      	uxth	r3, r3
 8000564:	b2da      	uxtb	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	1c59      	adds	r1, r3, #1
 800056a:	6079      	str	r1, [r7, #4]
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	4053      	eors	r3, r2
 8000570:	737b      	strb	r3, [r7, #13]
	    						x ^= x >> 4;
 8000572:	7b7b      	ldrb	r3, [r7, #13]
 8000574:	091b      	lsrs	r3, r3, #4
 8000576:	b2da      	uxtb	r2, r3
 8000578:	7b7b      	ldrb	r3, [r7, #13]
 800057a:	4053      	eors	r3, r2
 800057c:	737b      	strb	r3, [r7, #13]
	    						crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5))
 800057e:	89fb      	ldrh	r3, [r7, #14]
 8000580:	021b      	lsls	r3, r3, #8
 8000582:	b21a      	sxth	r2, r3
 8000584:	7b7b      	ldrb	r3, [r7, #13]
 8000586:	b29b      	uxth	r3, r3
 8000588:	031b      	lsls	r3, r3, #12
 800058a:	b29b      	uxth	r3, r3
 800058c:	b21b      	sxth	r3, r3
 800058e:	4053      	eors	r3, r2
 8000590:	b21a      	sxth	r2, r3
 8000592:	7b7b      	ldrb	r3, [r7, #13]
 8000594:	b29b      	uxth	r3, r3
 8000596:	015b      	lsls	r3, r3, #5
 8000598:	b29b      	uxth	r3, r3
 800059a:	b21b      	sxth	r3, r3
 800059c:	4053      	eors	r3, r2
 800059e:	b21a      	sxth	r2, r3
	    								^ ((uint16_t) x);
 80005a0:	7b7b      	ldrb	r3, [r7, #13]
 80005a2:	b21b      	sxth	r3, r3
 80005a4:	4053      	eors	r3, r2
 80005a6:	b21b      	sxth	r3, r3
	    						crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5))
 80005a8:	81fb      	strh	r3, [r7, #14]
	    					while (length--)
 80005aa:	e7ce      	b.n	800054a <_Z10calc_crc16PKhh+0x12>
	    					}
	    					return crc;
 80005ac:	89fb      	ldrh	r3, [r7, #14]
	    				}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <_Z6Task_1Pv>:

void Task_1( void* taskParmPtr )
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0a4      	sub	sp, #144	; 0x90
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

		 //  len = getData(rcvBuffer[0], 62);
		  // imprime.vPrintreading((char*)buffer3[0] );


	    	for(a=49;a<58;a++)
 80005c4:	2331      	movs	r3, #49	; 0x31
 80005c6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80005ca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80005ce:	2b39      	cmp	r3, #57	; 0x39
 80005d0:	d8f8      	bhi.n	80005c4 <_Z6Task_1Pv+0x8>
	    		  {   TxData[0] = a;
 80005d2:	4a49      	ldr	r2, [pc, #292]	; (80006f8 <_Z6Task_1Pv+0x13c>)
 80005d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80005d8:	7013      	strb	r3, [r2, #0]
	    				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80005da:	4b48      	ldr	r3, [pc, #288]	; (80006fc <_Z6Task_1Pv+0x140>)
 80005dc:	4a46      	ldr	r2, [pc, #280]	; (80006f8 <_Z6Task_1Pv+0x13c>)
 80005de:	4948      	ldr	r1, [pc, #288]	; (8000700 <_Z6Task_1Pv+0x144>)
 80005e0:	4848      	ldr	r0, [pc, #288]	; (8000704 <_Z6Task_1Pv+0x148>)
 80005e2:	f001 f831 	bl	8001648 <HAL_CAN_AddTxMessage>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf14      	ite	ne
 80005ec:	2301      	movne	r3, #1
 80005ee:	2300      	moveq	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d005      	beq.n	8000602 <_Z6Task_1Pv+0x46>
	    		  		 	{
    					   HAL_GPIO_TogglePin(Amarillo_GPIO_Port, Amarillo_Pin);
 80005f6:	2101      	movs	r1, #1
 80005f8:	4843      	ldr	r0, [pc, #268]	; (8000708 <_Z6Task_1Pv+0x14c>)
 80005fa:	f001 ff0e 	bl	800241a <HAL_GPIO_TogglePin>
    		  		 	   Error_Handler ();
 80005fe:	f000 fb5d 	bl	8000cbc <Error_Handler>
	    		  		 	}

	    				buffer[0]='P';
 8000602:	2350      	movs	r3, #80	; 0x50
 8000604:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	    				buffer[1]='K';
 8000608:	234b      	movs	r3, #75	; 0x4b
 800060a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	    				buffer[2]='T';
 800060e:	2354      	movs	r3, #84	; 0x54
 8000610:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	    				buffer[3]='!';
 8000614:	2321      	movs	r3, #33	; 0x21
 8000616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	    				buffer[4]= 0x6;
 800061a:	2306      	movs	r3, #6
 800061c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	    				buffer[5]= '0';
 8000620:	2330      	movs	r3, #48	; 0x30
 8000622:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	    				for(uint8_t sdf=6;sdf<=10;sdf++)
 8000626:	2306      	movs	r3, #6
 8000628:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800062c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000630:	2b0a      	cmp	r3, #10
 8000632:	d82f      	bhi.n	8000694 <_Z6Task_1Pv+0xd8>
	    				{
	    				buffer1[5]='0';
 8000634:	2330      	movs	r3, #48	; 0x30
 8000636:	767b      	strb	r3, [r7, #25]
	    					buffer1[sdf]=0x66+sdf-6;
 8000638:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800063c:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8000640:	3260      	adds	r2, #96	; 0x60
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	3390      	adds	r3, #144	; 0x90
 8000646:	443b      	add	r3, r7
 8000648:	f803 2c7c 	strb.w	r2, [r3, #-124]
	    					uint16_t crc = calc_crc16(buffer1, 5);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2105      	movs	r1, #5
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff70 	bl	8000538 <_Z10calc_crc16PKhh>
 8000658:	4603      	mov	r3, r0
 800065a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	    					buffer[sdf]=buffer1[sdf];
 800065e:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8000662:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000666:	3290      	adds	r2, #144	; 0x90
 8000668:	443a      	add	r2, r7
 800066a:	f812 2c7c 	ldrb.w	r2, [r2, #-124]
 800066e:	3390      	adds	r3, #144	; 0x90
 8000670:	443b      	add	r3, r7
 8000672:	f803 2c68 	strb.w	r2, [r3, #-104]
	    					buffer[11]=0b10110011;
 8000676:	23b3      	movs	r3, #179	; 0xb3
 8000678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		    			//	buffer[11]=(crc >> 8) & 0xFF;
		    			//	buffer[12]=crc & 0xFF;
		    				buffer[12]=0b10101110;
 800067c:	23ae      	movs	r3, #174	; 0xae
 800067e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		    				buffer[13]='\n';
 8000682:	230a      	movs	r3, #10
 8000684:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	    				for(uint8_t sdf=6;sdf<=10;sdf++)
 8000688:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800068c:	3301      	adds	r3, #1
 800068e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8000692:	e7cb      	b.n	800062c <_Z6Task_1Pv+0x70>
	    				}
	    				if(imprime.uartRecvString(buffer3, 11))
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	220b      	movs	r2, #11
 800069a:	4619      	mov	r1, r3
 800069c:	481b      	ldr	r0, [pc, #108]	; (800070c <_Z6Task_1Pv+0x150>)
 800069e:	f000 fb78 	bl	8000d92 <_ZN7printer14uartRecvStringEPhh>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf14      	ite	ne
 80006a8:	2301      	movne	r3, #1
 80006aa:	2300      	moveq	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d005      	beq.n	80006be <_Z6Task_1Pv+0x102>
	    							   {

	    						//imprime.vPrintString( (char*)buffer3 );
	    					imprime.vPrintString( (char*)buffer );
 80006b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4814      	ldr	r0, [pc, #80]	; (800070c <_Z6Task_1Pv+0x150>)
 80006ba:	f000 fb55 	bl	8000d68 <_ZN7printer12vPrintStringEPKc>
	    		//	sprintf( (char*)buffer, "03456789ABCDEFGHIJKLMabcdefghijklmnopqrstuvwxyzYZ\n");
	    				//sprintf( (char*)buffer, "\nPKT!9abcdefghijk%ldlmno%ldpqrs:%s\n",(uint32_t)RxHeader2.StdId,(uint32_t)RxHeader2.DLC,(char *)TxData);
		    		//		imprime.vPrintString( (char*)buffer3 );


		    				HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	4811      	ldr	r0, [pc, #68]	; (8000708 <_Z6Task_1Pv+0x14c>)
 80006c2:	f001 feaa 	bl	800241a <HAL_GPIO_TogglePin>
		    				osDelay(200);
 80006c6:	20c8      	movs	r0, #200	; 0xc8
 80006c8:	f003 fac9 	bl	8003c5e <osDelay>

    		  if (datacheck)
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <_Z6Task_1Pv+0x154>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00a      	beq.n	80006ea <_Z6Task_1Pv+0x12e>
	    		  {
    			  HAL_GPIO_TogglePin(Rojo_GPIO_Port, Rojo_Pin);
 80006d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <_Z6Task_1Pv+0x14c>)
 80006da:	f001 fe9e 	bl	800241a <HAL_GPIO_TogglePin>
    			  osDelay(200);
 80006de:	20c8      	movs	r0, #200	; 0xc8
 80006e0:	f003 fabd 	bl	8003c5e <osDelay>
    			  datacheck = 0;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <_Z6Task_1Pv+0x154>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
	    	for(a=49;a<58;a++)
 80006ea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80006ee:	3301      	adds	r3, #1
 80006f0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80006f4:	e769      	b.n	80005ca <_Z6Task_1Pv+0xe>
 80006f6:	bf00      	nop
 80006f8:	200003b8 	.word	0x200003b8
 80006fc:	200003b4 	.word	0x200003b4
 8000700:	20000324 	.word	0x20000324
 8000704:	200002c4 	.word	0x200002c4
 8000708:	40020400 	.word	0x40020400
 800070c:	20000280 	.word	0x20000280
 8000710:	200003c0 	.word	0x200003c0

08000714 <_Z6Task_2Pv>:
}



void Task_2( void* taskParmPtr )
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	    while( 1 )
    {
       HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <_Z6Task_2Pv+0x18>)
 8000720:	f001 fe7b 	bl	800241a <HAL_GPIO_TogglePin>
       osDelay(100);
 8000724:	2064      	movs	r0, #100	; 0x64
 8000726:	f003 fa9a 	bl	8003c5e <osDelay>
       HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 800072a:	e7f7      	b.n	800071c <_Z6Task_2Pv+0x8>
 800072c:	40020400 	.word	0x40020400

08000730 <HAL_CAN_RxFifo0MsgPendingCallback>:
    }
}

void  HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan2)
  {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Amarillo_GPIO_Port, Amarillo_Pin);
 8000738:	2101      	movs	r1, #1
 800073a:	480f      	ldr	r0, [pc, #60]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800073c:	f001 fe6d 	bl	800241a <HAL_GPIO_TogglePin>

	if (HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO0, &RxHeader2, RxData) != HAL_OK)
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000742:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000744:	2100      	movs	r1, #0
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f001 f859 	bl	80017fe <HAL_CAN_GetRxMessage>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf14      	ite	ne
 8000752:	2301      	movne	r3, #1
 8000754:	2300      	moveq	r3, #0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	  {
	    Error_Handler();
 800075c:	f000 faae 	bl	8000cbc <Error_Handler>
	  }

	  if ((RxHeader2.StdId == 146))
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b92      	cmp	r3, #146	; 0x92
 8000766:	d102      	bne.n	800076e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
	  {
		  datacheck = 1;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
	  }
  }
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40020400 	.word	0x40020400
 800077c:	200003bc 	.word	0x200003bc
 8000780:	20000370 	.word	0x20000370
 8000784:	200003c0 	.word	0x200003c0

08000788 <_Z6configv>:

void config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af02      	add	r7, sp, #8
	BaseType_t res1 =
  			           xTaskCreate(
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <_Z6configv+0x6c>)
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	2301      	movs	r3, #1
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2300      	movs	r3, #0
 8000798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800079c:	4916      	ldr	r1, [pc, #88]	; (80007f8 <_Z6configv+0x70>)
 800079e:	4817      	ldr	r0, [pc, #92]	; (80007fc <_Z6configv+0x74>)
 80007a0:	f003 fb82 	bl	8003ea8 <xTaskCreate>
 80007a4:	60f8      	str	r0, [r7, #12]
  			               tskIDLE_PRIORITY+1,         // Prioridad de la tarea
  			    	   &task_handle_task_1            // Puntero a la tarea creada en el sistema
  			           );

  			      BaseType_t res2 =
  			           xTaskCreate(
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <_Z6configv+0x78>)
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	2301      	movs	r3, #1
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2300      	movs	r3, #0
 80007b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b4:	4913      	ldr	r1, [pc, #76]	; (8000804 <_Z6configv+0x7c>)
 80007b6:	4814      	ldr	r0, [pc, #80]	; (8000808 <_Z6configv+0x80>)
 80007b8:	f003 fb76 	bl	8003ea8 <xTaskCreate>
 80007bc:	60b8      	str	r0, [r7, #8]
  			               tskIDLE_PRIORITY+1,         // Prioridad de la tarea
  			    	   &task_handle_task_2           // Puntero a la tarea creada en el sistema
  			           );


  			      configASSERT( res1 == pdPASS && res2 == pdPASS);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d104      	bne.n	80007ce <_Z6configv+0x46>
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d101      	bne.n	80007ce <_Z6configv+0x46>
 80007ca:	2301      	movs	r3, #1
 80007cc:	e000      	b.n	80007d0 <_Z6configv+0x48>
 80007ce:	2300      	movs	r3, #0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10a      	bne.n	80007ea <_Z6configv+0x62>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80007d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d8:	f383 8811 	msr	BASEPRI, r3
 80007dc:	f3bf 8f6f 	isb	sy
 80007e0:	f3bf 8f4f 	dsb	sy
 80007e4:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007e6:	bf00      	nop
 80007e8:	e7fe      	b.n	80007e8 <_Z6configv+0x60>
  			      }
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000031c 	.word	0x2000031c
 80007f8:	0800509c 	.word	0x0800509c
 80007fc:	080005bd 	.word	0x080005bd
 8000800:	20000320 	.word	0x20000320
 8000804:	080050a4 	.word	0x080050a4
 8000808:	08000715 	.word	0x08000715

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b5b0      	push	{r4, r5, r7, lr}
 800080e:	b08e      	sub	sp, #56	; 0x38
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000812:	f000 fcb7 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000816:	f000 f877 	bl	8000908 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 f9db 	bl	8000bd4 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 800081e:	f000 f8dd 	bl	80009dc <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 8000822:	f000 f955 	bl	8000ad0 <_ZL12MX_CAN2_Initv>
  MX_USART3_UART_Init();
 8000826:	f000 f9cd 	bl	8000bc4 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
//  imprime.vPrintString("Protocolo de Comuncacion CAN activo:\n\rCAN 1: PB8=Rx PB9=Tx\n\rCAN 2: PB5=Rx PB6=Tx \n\r");


    TxHeader.IDE = CAN_ID_STD;
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <main+0xdc>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
    TxHeader.StdId = 146;
 8000830:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <main+0xdc>)
 8000832:	2292      	movs	r2, #146	; 0x92
 8000834:	601a      	str	r2, [r3, #0]
    TxHeader.RTR = CAN_RTR_DATA;
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <main+0xdc>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 1;
 800083c:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <main+0xdc>)
 800083e:	2201      	movs	r2, #1
 8000840:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <main+0xdc>)
 8000844:	2200      	movs	r2, #0
 8000846:	751a      	strb	r2, [r3, #20]

    RxHeader.IDE = CAN_ID_STD;
 8000848:	4b28      	ldr	r3, [pc, #160]	; (80008ec <main+0xe0>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
    RxHeader.StdId = 146;
 800084e:	4b27      	ldr	r3, [pc, #156]	; (80008ec <main+0xe0>)
 8000850:	2292      	movs	r2, #146	; 0x92
 8000852:	601a      	str	r2, [r3, #0]
    RxHeader.RTR = CAN_RTR_DATA;
 8000854:	4b25      	ldr	r3, [pc, #148]	; (80008ec <main+0xe0>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
    RxHeader.DLC = 1;
 800085a:	4b24      	ldr	r3, [pc, #144]	; (80008ec <main+0xe0>)
 800085c:	2201      	movs	r2, #1
 800085e:	611a      	str	r2, [r3, #16]

    TxHeader2.IDE = CAN_ID_STD;
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <main+0xe4>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
    TxHeader2.StdId = 20;
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <main+0xe4>)
 8000868:	2214      	movs	r2, #20
 800086a:	601a      	str	r2, [r3, #0]
    TxHeader2.RTR = CAN_RTR_DATA;
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <main+0xe4>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
    TxHeader2.DLC = 1;
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <main+0xe4>)
 8000874:	2201      	movs	r2, #1
 8000876:	611a      	str	r2, [r3, #16]
    TxHeader2.TransmitGlobalTime = DISABLE;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <main+0xe4>)
 800087a:	2200      	movs	r2, #0
 800087c:	751a      	strb	r2, [r3, #20]

    RxHeader2.IDE = CAN_ID_STD;
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <main+0xe8>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
    RxHeader2.StdId = 20;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <main+0xe8>)
 8000886:	2214      	movs	r2, #20
 8000888:	601a      	str	r2, [r3, #0]
    RxHeader2.RTR = CAN_RTR_DATA;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <main+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
    RxHeader2.DLC = 1;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <main+0xe8>)
 8000892:	2201      	movs	r2, #1
 8000894:	611a      	str	r2, [r3, #16]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Tarea_1 */

  osThreadDef(Tarea_1, StartTask01, osPriorityNormal, 0, 128);
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <main+0xec>)
 8000898:	f107 041c 	add.w	r4, r7, #28
 800089c:	461d      	mov	r5, r3
 800089e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Tarea_1Handle = osThreadCreate(osThread(Tarea_1), NULL);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 f988 	bl	8003bc6 <osThreadCreate>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4a10      	ldr	r2, [pc, #64]	; (80008fc <main+0xf0>)
 80008ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of Tarea_2 */
  osThreadDef(Tarea_2, StartTask02, osPriorityNormal, 0, 128);
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <main+0xf4>)
 80008be:	463c      	mov	r4, r7
 80008c0:	461d      	mov	r5, r3
 80008c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Tarea_2Handle = osThreadCreate(osThread(Tarea_2), NULL);
 80008ce:	463b      	mov	r3, r7
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 f977 	bl	8003bc6 <osThreadCreate>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <main+0xf8>)
 80008dc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  config();
 80008de:	f7ff ff53 	bl	8000788 <_Z6configv>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008e2:	f003 f969 	bl	8003bb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <main+0xda>
 80008e8:	20000324 	.word	0x20000324
 80008ec:	20000354 	.word	0x20000354
 80008f0:	2000033c 	.word	0x2000033c
 80008f4:	20000370 	.word	0x20000370
 80008f8:	080050ac 	.word	0x080050ac
 80008fc:	20000314 	.word	0x20000314
 8000900:	080050c8 	.word	0x080050c8
 8000904:	20000318 	.word	0x20000318

08000908 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	; 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f004 fba4 	bl	8005064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <_Z18SystemClock_Configv+0xcc>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <_Z18SystemClock_Configv+0xcc>)
 8000936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <_Z18SystemClock_Configv+0xcc>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <_Z18SystemClock_Configv+0xd0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000954:	4a20      	ldr	r2, [pc, #128]	; (80009d8 <_Z18SystemClock_Configv+0xd0>)
 8000956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <_Z18SystemClock_Configv+0xd0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800096c:	2301      	movs	r3, #1
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000970:	2310      	movs	r3, #16
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000974:	2300      	movs	r3, #0
 8000976:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0320 	add.w	r3, r7, #32
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fd67 	bl	8002450 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf14      	ite	ne
 8000988:	2301      	movne	r3, #1
 800098a:	2300      	moveq	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000992:	f000 f993 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000996:	230f      	movs	r3, #15
 8000998:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 ffc5 	bl	8002940 <HAL_RCC_ClockConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	bf14      	ite	ne
 80009bc:	2301      	movne	r3, #1
 80009be:	2300      	moveq	r3, #0
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80009c6:	f000 f979 	bl	8000cbc <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	; 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40007000 	.word	0x40007000

080009dc <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009e0:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 80009e2:	4a39      	ldr	r2, [pc, #228]	; (8000ac8 <_ZL12MX_CAN1_Initv+0xec>)
 80009e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80009e6:	4b37      	ldr	r3, [pc, #220]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 80009e8:	2210      	movs	r2, #16
 80009ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009ec:	4b35      	ldr	r3, [pc, #212]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009f2:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 80009fa:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80009fe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a00:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a06:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a18:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a1e:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a24:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a2a:	4826      	ldr	r0, [pc, #152]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 8000a2c:	f000 fbec 	bl	8001208 <HAL_CAN_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf14      	ite	ne
 8000a36:	2301      	movne	r3, #1
 8000a38:	2300      	moveq	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 8000a40:	f000 f93c 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <_ZL12MX_CAN1_Initv+0xf0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a4a:	4b20      	ldr	r3, [pc, #128]	; (8000acc <_ZL12MX_CAN1_Initv+0xf0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
	  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000a50:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <_ZL12MX_CAN1_Initv+0xf0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterIdHigh=0;
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <_ZL12MX_CAN1_Initv+0xf0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIdLow=0;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <_ZL12MX_CAN1_Initv+0xf0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterMaskIdHigh=0;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <_ZL12MX_CAN1_Initv+0xf0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterMaskIdLow=0;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <_ZL12MX_CAN1_Initv+0xf0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <_ZL12MX_CAN1_Initv+0xf0>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	61da      	str	r2, [r3, #28]
	  sFilterConfig.FilterActivation=ENABLE;
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <_ZL12MX_CAN1_Initv+0xf0>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	621a      	str	r2, [r3, #32]
      sFilterConfig.SlaveStartFilterBank = 14;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <_ZL12MX_CAN1_Initv+0xf0>)
 8000a7c:	220e      	movs	r2, #14
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24

      if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000a80:	4912      	ldr	r1, [pc, #72]	; (8000acc <_ZL12MX_CAN1_Initv+0xf0>)
 8000a82:	4810      	ldr	r0, [pc, #64]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 8000a84:	f000 fcbc 	bl	8001400 <HAL_CAN_ConfigFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bf14      	ite	ne
 8000a8e:	2301      	movne	r3, #1
 8000a90:	2300      	moveq	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <_ZL12MX_CAN1_Initv+0xc0>
        {
          /* Filter configuration Error */
          Error_Handler();
 8000a98:	f000 f910 	bl	8000cbc <Error_Handler>
        }

      HAL_CAN_Start(&hcan1);
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 8000a9e:	f000 fd8f 	bl	80015c0 <HAL_CAN_Start>

        /*##-4- Activate CAN RX notification #######################################*/
        if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <_ZL12MX_CAN1_Initv+0xe8>)
 8000aa6:	f000 ffbc 	bl	8001a22 <HAL_CAN_ActivateNotification>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf14      	ite	ne
 8000ab0:	2301      	movne	r3, #1
 8000ab2:	2300      	moveq	r3, #0
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <_ZL12MX_CAN1_Initv+0xe2>
        {
          /* Notification Error */
          Error_Handler();
 8000aba:	f000 f8ff 	bl	8000cbc <Error_Handler>
        }
  /* USER CODE END CAN1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200002c4 	.word	0x200002c4
 8000ac8:	40006400 	.word	0x40006400
 8000acc:	2000038c 	.word	0x2000038c

08000ad0 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ad4:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000ad6:	4a39      	ldr	r2, [pc, #228]	; (8000bbc <_ZL12MX_CAN2_Initv+0xec>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000ada:	4b37      	ldr	r3, [pc, #220]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000adc:	2210      	movs	r2, #16
 8000ade:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ae6:	4b34      	ldr	r3, [pc, #208]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000aec:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000aee:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000af2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000af4:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000afa:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000b00:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000b06:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b12:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b1e:	4826      	ldr	r0, [pc, #152]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000b20:	f000 fb72 	bl	8001208 <HAL_CAN_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bf14      	ite	ne
 8000b2a:	2301      	movne	r3, #1
 8000b2c:	2300      	moveq	r3, #0
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 8000b34:	f000 f8c2 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  sFilterConfig.FilterBank = 14;
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <_ZL12MX_CAN2_Initv+0xf0>)
 8000b3a:	220e      	movs	r2, #14
 8000b3c:	615a      	str	r2, [r3, #20]
  		  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <_ZL12MX_CAN2_Initv+0xf0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  		  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <_ZL12MX_CAN2_Initv+0xf0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  		  sFilterConfig.FilterIdHigh=0;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <_ZL12MX_CAN2_Initv+0xf0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
  		  sFilterConfig.FilterIdLow=0;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <_ZL12MX_CAN2_Initv+0xf0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  		  sFilterConfig.FilterMaskIdHigh=0;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <_ZL12MX_CAN2_Initv+0xf0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  		  sFilterConfig.FilterMaskIdLow=0;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <_ZL12MX_CAN2_Initv+0xf0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  		  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <_ZL12MX_CAN2_Initv+0xf0>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	61da      	str	r2, [r3, #28]
  		  sFilterConfig.FilterActivation=ENABLE;
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <_ZL12MX_CAN2_Initv+0xf0>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	621a      	str	r2, [r3, #32]
  	      sFilterConfig.SlaveStartFilterBank = 14;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <_ZL12MX_CAN2_Initv+0xf0>)
 8000b70:	220e      	movs	r2, #14
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24

  	      if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8000b74:	4912      	ldr	r1, [pc, #72]	; (8000bc0 <_ZL12MX_CAN2_Initv+0xf0>)
 8000b76:	4810      	ldr	r0, [pc, #64]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000b78:	f000 fc42 	bl	8001400 <HAL_CAN_ConfigFilter>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	bf14      	ite	ne
 8000b82:	2301      	movne	r3, #1
 8000b84:	2300      	moveq	r3, #0
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <_ZL12MX_CAN2_Initv+0xc0>
  	        {
  	          /* Filter configuration Error */
  	          Error_Handler();
 8000b8c:	f000 f896 	bl	8000cbc <Error_Handler>
  	        }

  	      HAL_CAN_Start(&hcan2);
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000b92:	f000 fd15 	bl	80015c0 <HAL_CAN_Start>

  	        /*##-4- Activate CAN RX notification #######################################*/
  	        if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000b96:	2102      	movs	r1, #2
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <_ZL12MX_CAN2_Initv+0xe8>)
 8000b9a:	f000 ff42 	bl	8001a22 <HAL_CAN_ActivateNotification>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	bf14      	ite	ne
 8000ba4:	2301      	movne	r3, #1
 8000ba6:	2300      	moveq	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <_ZL12MX_CAN2_Initv+0xe2>
  	        {
  	          /* Notification Error */
  	          Error_Handler();
 8000bae:	f000 f885 	bl	8000cbc <Error_Handler>
  	        }
  /* USER CODE END CAN2_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200002ec 	.word	0x200002ec
 8000bbc:	40006800 	.word	0x40006800
 8000bc0:	2000038c 	.word	0x2000038c

08000bc4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
//  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <_ZL12MX_GPIO_Initv+0x9c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <_ZL12MX_GPIO_Initv+0x9c>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <_ZL12MX_GPIO_Initv+0x9c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <_ZL12MX_GPIO_Initv+0x9c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <_ZL12MX_GPIO_Initv+0x9c>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <_ZL12MX_GPIO_Initv+0x9c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <_ZL12MX_GPIO_Initv+0x9c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <_ZL12MX_GPIO_Initv+0x9c>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <_ZL12MX_GPIO_Initv+0x9c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Amarillo_Pin|Rojo_Pin|Azul_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <_ZL12MX_GPIO_Initv+0xa0>)
 8000c46:	f001 fbcf 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Amarillo_Pin Rojo_Pin Azul_Pin */
  GPIO_InitStruct.Pin = Amarillo_Pin|Rojo_Pin|Azul_Pin;
 8000c4a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	4619      	mov	r1, r3
 8000c62:	4804      	ldr	r0, [pc, #16]	; (8000c74 <_ZL12MX_GPIO_Initv+0xa0>)
 8000c64:	f001 fa14 	bl	8002090 <HAL_GPIO_Init>

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020400 	.word	0x40020400

08000c78 <_Z11StartTask01PKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f002 ffec 	bl	8003c5e <osDelay>
 8000c86:	e7fb      	b.n	8000c80 <_Z11StartTask01PKv+0x8>

08000c88 <_Z11StartTask02PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f002 ffe4 	bl	8003c5e <osDelay>
 8000c96:	e7fb      	b.n	8000c90 <_Z11StartTask02PKv+0x8>

08000c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d101      	bne.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000caa:	f000 fa8d 	bl	80011c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40001400 	.word	0x40001400

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d107      	bne.n	8000ce8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d102      	bne.n	8000ce8 <_Z41__static_initialization_and_destruction_0ii+0x20>
printer imprime;
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000ce4:	f000 f80e 	bl	8000d04 <_ZN7printerC1Ev>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000280 	.word	0x20000280

08000cf4 <_GLOBAL__sub_I_imprime>:
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff ffe3 	bl	8000cc8 <_Z41__static_initialization_and_destruction_0ii>
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <_ZN7printerC1Ev>:
#include "cmsis_os.h"
#include <string.h>
#include "printscreen.h"
#include <stdbool.h>

printer::printer () {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	  huart3.Instance = USART3;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <_ZN7printerC1Ev+0x60>)
 8000d10:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = 115200;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f002 fabd 	bl	80032c0 <HAL_UART_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <_ZN7printerC1Ev+0x56>
	  {
	    Error_Handler();
 8000d56:	f7ff ffb1 	bl	8000cbc <Error_Handler>
	  }
}
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40004800 	.word	0x40004800

08000d68 <_ZN7printer12vPrintStringEPKc>:

void printer::vPrintString( const char *pcString )
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */

	//taskENTER_CRITICAL();

		HAL_UART_Transmit( &huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), HAL_MAX_DELAY );
 8000d72:	687c      	ldr	r4, [r7, #4]
 8000d74:	6838      	ldr	r0, [r7, #0]
 8000d76:	f7ff fa3b 	bl	80001f0 <strlen>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d82:	6839      	ldr	r1, [r7, #0]
 8000d84:	4620      	mov	r0, r4
 8000d86:	f002 fae8 	bl	800335a <HAL_UART_Transmit>

	//taskEXIT_CRITICAL();
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd90      	pop	{r4, r7, pc}

08000d92 <_ZN7printer14uartRecvStringEPhh>:

uint8_t printer::uartRecvString(uint8_t *ptrstring, uint8_t cantidad)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	71fb      	strb	r3, [r7, #7]
	taskENTER_CRITICAL();
 8000da0:	f003 fe70 	bl	8004a84 <vPortEnterCritical>
	if (HAL_UART_Receive(&huart3,ptrstring, cantidad,1000) == HAL_OK) return true;
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	f002 fb65 	bl	800347e <HAL_UART_Receive>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	bf0c      	ite	eq
 8000dba:	2301      	moveq	r3, #1
 8000dbc:	2300      	movne	r3, #0
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <_ZN7printer14uartRecvStringEPhh+0x36>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <_ZN7printer14uartRecvStringEPhh+0x38>
	return false;
 8000dc8:	2300      	movs	r3, #0
	taskENTER_CRITICAL();
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_MspInit+0x54>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a11      	ldr	r2, [pc, #68]	; (8000e28 <HAL_MspInit+0x54>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_MspInit+0x54>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_MspInit+0x54>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_MspInit+0x54>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_MspInit+0x54>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	210f      	movs	r1, #15
 8000e16:	f06f 0001 	mvn.w	r0, #1
 8000e1a:	f001 f90f 	bl	800203c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800

08000e2c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	; 0x30
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a46      	ldr	r2, [pc, #280]	; (8000f64 <HAL_CAN_MspInit+0x138>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d136      	bne.n	8000ebc <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e4e:	4b46      	ldr	r3, [pc, #280]	; (8000f68 <HAL_CAN_MspInit+0x13c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a44      	ldr	r2, [pc, #272]	; (8000f68 <HAL_CAN_MspInit+0x13c>)
 8000e56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <HAL_CAN_MspInit+0x13c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d10d      	bne.n	8000e7c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	4b41      	ldr	r3, [pc, #260]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	4a40      	ldr	r2, [pc, #256]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e70:	4b3e      	ldr	r3, [pc, #248]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	4b3a      	ldr	r3, [pc, #232]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a39      	ldr	r2, [pc, #228]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000eaa:	2309      	movs	r3, #9
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	482e      	ldr	r0, [pc, #184]	; (8000f70 <HAL_CAN_MspInit+0x144>)
 8000eb6:	f001 f8eb 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000eba:	e04f      	b.n	8000f5c <HAL_CAN_MspInit+0x130>
  else if(hcan->Instance==CAN2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a2c      	ldr	r2, [pc, #176]	; (8000f74 <HAL_CAN_MspInit+0x148>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d14a      	bne.n	8000f5c <HAL_CAN_MspInit+0x130>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a27      	ldr	r2, [pc, #156]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000ed0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <HAL_CAN_MspInit+0x13c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <HAL_CAN_MspInit+0x13c>)
 8000eea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_CAN_MspInit+0x13c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d10d      	bne.n	8000f10 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000efe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f02:	6413      	str	r3, [r2, #64]	; 0x40
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_CAN_MspInit+0x140>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f2c:	2360      	movs	r3, #96	; 0x60
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000f3c:	2309      	movs	r3, #9
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	480a      	ldr	r0, [pc, #40]	; (8000f70 <HAL_CAN_MspInit+0x144>)
 8000f48:	f001 f8a2 	bl	8002090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2105      	movs	r1, #5
 8000f50:	2040      	movs	r0, #64	; 0x40
 8000f52:	f001 f873 	bl	800203c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000f56:	2040      	movs	r0, #64	; 0x40
 8000f58:	f001 f88c 	bl	8002074 <HAL_NVIC_EnableIRQ>
}
 8000f5c:	bf00      	nop
 8000f5e:	3730      	adds	r7, #48	; 0x30
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40006400 	.word	0x40006400
 8000f68:	200003c4 	.word	0x200003c4
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40006800 	.word	0x40006800

08000f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <HAL_UART_MspInit+0x84>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12c      	bne.n	8000ff4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <HAL_UART_MspInit+0x8c>)
 8000ff0:	f001 f84e 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	; 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40004800 	.word	0x40004800
 8001000:	40023800 	.word	0x40023800
 8001004:	40020c00 	.word	0x40020c00

08001008 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08c      	sub	sp, #48	; 0x30
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	2037      	movs	r0, #55	; 0x37
 800101e:	f001 f80d 	bl	800203c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001022:	2037      	movs	r0, #55	; 0x37
 8001024:	f001 f826 	bl	8002074 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <HAL_InitTick+0xa0>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <HAL_InitTick+0xa0>)
 8001032:	f043 0320 	orr.w	r3, r3, #32
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_InitTick+0xa0>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f003 0320 	and.w	r3, r3, #32
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001044:	f107 0210 	add.w	r2, r7, #16
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f001 fe56 	bl	8002d00 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001054:	f001 fe2c 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 8001058:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105c:	4a13      	ldr	r2, [pc, #76]	; (80010ac <HAL_InitTick+0xa4>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	0c9b      	lsrs	r3, r3, #18
 8001064:	3b01      	subs	r3, #1
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_InitTick+0xa8>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <HAL_InitTick+0xac>)
 800106c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <HAL_InitTick+0xa8>)
 8001070:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001074:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001076:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <HAL_InitTick+0xa8>)
 8001078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_InitTick+0xa8>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_InitTick+0xa8>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <HAL_InitTick+0xa8>)
 800108a:	f001 fe6b 	bl	8002d64 <HAL_TIM_Base_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d104      	bne.n	800109e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001094:	4806      	ldr	r0, [pc, #24]	; (80010b0 <HAL_InitTick+0xa8>)
 8001096:	f001 febf 	bl	8002e18 <HAL_TIM_Base_Start_IT>
 800109a:	4603      	mov	r3, r0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3730      	adds	r7, #48	; 0x30
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	431bde83 	.word	0x431bde83
 80010b0:	200003c8 	.word	0x200003c8
 80010b4:	40001400 	.word	0x40001400

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <TIM7_IRQHandler+0x10>)
 80010ea:	f001 ff05 	bl	8002ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200003c8 	.word	0x200003c8

080010f8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <CAN2_RX0_IRQHandler+0x10>)
 80010fe:	f000 fcb6 	bl	8001a6e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200002ec 	.word	0x200002ec

0800110c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800114c:	4c0b      	ldr	r4, [pc, #44]	; (800117c <LoopFillZerobss+0x26>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800115a:	f7ff ffd7 	bl	800110c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115e:	f003 ff5d 	bl	800501c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fb53 	bl	800080c <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001168:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001174:	08005118 	.word	0x08005118
  ldr r2, =_sbss
 8001178:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800117c:	20004168 	.word	0x20004168

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <HAL_Init+0x40>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_Init+0x40>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x40>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 ff3a 	bl	8002026 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	200f      	movs	r0, #15
 80011b4:	f7ff ff28 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fe0c 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000410 	.word	0x20000410

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000410 	.word	0x20000410

08001208 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e0ed      	b.n	80013f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fe00 	bl	8000e2c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0201 	orr.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800123c:	f7ff ffd8 	bl	80011f0 <HAL_GetTick>
 8001240:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001242:	e012      	b.n	800126a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001244:	f7ff ffd4 	bl	80011f0 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b0a      	cmp	r3, #10
 8001250:	d90b      	bls.n	800126a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2205      	movs	r2, #5
 8001262:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0c5      	b.n	80013f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0e5      	beq.n	8001244 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0202 	bic.w	r2, r2, #2
 8001286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001288:	f7ff ffb2 	bl	80011f0 <HAL_GetTick>
 800128c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800128e:	e012      	b.n	80012b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001290:	f7ff ffae 	bl	80011f0 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b0a      	cmp	r3, #10
 800129c:	d90b      	bls.n	80012b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2205      	movs	r2, #5
 80012ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e09f      	b.n	80013f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1e5      	bne.n	8001290 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e1b      	ldrb	r3, [r3, #24]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d108      	bne.n	80012de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e007      	b.n	80012ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7e5b      	ldrb	r3, [r3, #25]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d108      	bne.n	8001308 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e007      	b.n	8001318 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001316:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7e9b      	ldrb	r3, [r3, #26]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d108      	bne.n	8001332 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0220 	orr.w	r2, r2, #32
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e007      	b.n	8001342 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0220 	bic.w	r2, r2, #32
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7edb      	ldrb	r3, [r3, #27]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0210 	bic.w	r2, r2, #16
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e007      	b.n	800136c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0210 	orr.w	r2, r2, #16
 800136a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7f1b      	ldrb	r3, [r3, #28]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d108      	bne.n	8001386 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0208 	orr.w	r2, r2, #8
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e007      	b.n	8001396 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0208 	bic.w	r2, r2, #8
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7f5b      	ldrb	r3, [r3, #29]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d108      	bne.n	80013b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0204 	orr.w	r2, r2, #4
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e007      	b.n	80013c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0204 	bic.w	r2, r2, #4
 80013be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	ea42 0103 	orr.w	r1, r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	1e5a      	subs	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001416:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001418:	7cfb      	ldrb	r3, [r7, #19]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d003      	beq.n	8001426 <HAL_CAN_ConfigFilter+0x26>
 800141e:	7cfb      	ldrb	r3, [r7, #19]
 8001420:	2b02      	cmp	r3, #2
 8001422:	f040 80be 	bne.w	80015a2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001426:	4b65      	ldr	r3, [pc, #404]	; (80015bc <HAL_CAN_ConfigFilter+0x1bc>)
 8001428:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001430:	f043 0201 	orr.w	r2, r3, #1
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001440:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	431a      	orrs	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f003 031f 	and.w	r3, r3, #31
 8001466:	2201      	movs	r2, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43db      	mvns	r3, r3
 8001478:	401a      	ands	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d123      	bne.n	80014d0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43db      	mvns	r3, r3
 8001492:	401a      	ands	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3248      	adds	r2, #72	; 0x48
 80014b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014c6:	6979      	ldr	r1, [r7, #20]
 80014c8:	3348      	adds	r3, #72	; 0x48
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	440b      	add	r3, r1
 80014ce:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d122      	bne.n	800151e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3248      	adds	r2, #72	; 0x48
 80014fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001512:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001514:	6979      	ldr	r1, [r7, #20]
 8001516:	3348      	adds	r3, #72	; 0x48
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	440b      	add	r3, r1
 800151c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d109      	bne.n	800153a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43db      	mvns	r3, r3
 8001530:	401a      	ands	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001538:	e007      	b.n	800154a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	431a      	orrs	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43db      	mvns	r3, r3
 800155c:	401a      	ands	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001564:	e007      	b.n	8001576 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	431a      	orrs	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d107      	bne.n	800158e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	431a      	orrs	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001594:	f023 0201 	bic.w	r2, r3, #1
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e006      	b.n	80015b0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
  }
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40006400 	.word	0x40006400

080015c0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d12e      	bne.n	8001632 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2202      	movs	r2, #2
 80015d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0201 	bic.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015ec:	f7ff fe00 	bl	80011f0 <HAL_GetTick>
 80015f0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015f2:	e012      	b.n	800161a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015f4:	f7ff fdfc 	bl	80011f0 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b0a      	cmp	r3, #10
 8001600:	d90b      	bls.n	800161a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2205      	movs	r2, #5
 8001612:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e012      	b.n	8001640 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1e5      	bne.n	80015f4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e006      	b.n	8001640 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
  }
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001666:	7ffb      	ldrb	r3, [r7, #31]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d003      	beq.n	8001674 <HAL_CAN_AddTxMessage+0x2c>
 800166c:	7ffb      	ldrb	r3, [r7, #31]
 800166e:	2b02      	cmp	r3, #2
 8001670:	f040 80b8 	bne.w	80017e4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10a      	bne.n	8001694 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001684:	2b00      	cmp	r3, #0
 8001686:	d105      	bne.n	8001694 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80a0 	beq.w	80017d4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	0e1b      	lsrs	r3, r3, #24
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d907      	bls.n	80016b4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e09e      	b.n	80017f2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016b4:	2201      	movs	r2, #1
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	409a      	lsls	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10d      	bne.n	80016e2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016d0:	68f9      	ldr	r1, [r7, #12]
 80016d2:	6809      	ldr	r1, [r1, #0]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3318      	adds	r3, #24
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	440b      	add	r3, r1
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e00f      	b.n	8001702 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016ec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016f2:	68f9      	ldr	r1, [r7, #12]
 80016f4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016f6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3318      	adds	r3, #24
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	440b      	add	r3, r1
 8001700:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	691a      	ldr	r2, [r3, #16]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3318      	adds	r3, #24
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	440b      	add	r3, r1
 8001712:	3304      	adds	r3, #4
 8001714:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	7d1b      	ldrb	r3, [r3, #20]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d111      	bne.n	8001742 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3318      	adds	r3, #24
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	3304      	adds	r3, #4
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	6811      	ldr	r1, [r2, #0]
 8001732:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3318      	adds	r3, #24
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	440b      	add	r3, r1
 800173e:	3304      	adds	r3, #4
 8001740:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3307      	adds	r3, #7
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	061a      	lsls	r2, r3, #24
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3306      	adds	r3, #6
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3305      	adds	r3, #5
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	4313      	orrs	r3, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	3204      	adds	r2, #4
 8001762:	7812      	ldrb	r2, [r2, #0]
 8001764:	4610      	mov	r0, r2
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	6811      	ldr	r1, [r2, #0]
 800176a:	ea43 0200 	orr.w	r2, r3, r0
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	440b      	add	r3, r1
 8001774:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001778:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3303      	adds	r3, #3
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	061a      	lsls	r2, r3, #24
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3302      	adds	r3, #2
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3301      	adds	r3, #1
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	4313      	orrs	r3, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	4610      	mov	r0, r2
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	6811      	ldr	r1, [r2, #0]
 80017a0:	ea43 0200 	orr.w	r2, r3, r0
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	440b      	add	r3, r1
 80017aa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80017ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3318      	adds	r3, #24
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	4413      	add	r3, r2
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	6811      	ldr	r1, [r2, #0]
 80017c2:	f043 0201 	orr.w	r2, r3, #1
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3318      	adds	r3, #24
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	440b      	add	r3, r1
 80017ce:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	e00e      	b.n	80017f2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e006      	b.n	80017f2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
  }
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017fe:	b480      	push	{r7}
 8001800:	b087      	sub	sp, #28
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001812:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d003      	beq.n	8001822 <HAL_CAN_GetRxMessage+0x24>
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	2b02      	cmp	r3, #2
 800181e:	f040 80f3 	bne.w	8001a08 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10e      	bne.n	8001846 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d116      	bne.n	8001864 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0e7      	b.n	8001a16 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d107      	bne.n	8001864 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0d8      	b.n	8001a16 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	331b      	adds	r3, #27
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	4413      	add	r3, r2
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0204 	and.w	r2, r3, #4
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10c      	bne.n	800189c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	331b      	adds	r3, #27
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	4413      	add	r3, r2
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0d5b      	lsrs	r3, r3, #21
 8001892:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e00b      	b.n	80018b4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	331b      	adds	r3, #27
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	4413      	add	r3, r2
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	08db      	lsrs	r3, r3, #3
 80018ac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	331b      	adds	r3, #27
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0202 	and.w	r2, r3, #2
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	331b      	adds	r3, #27
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	3304      	adds	r3, #4
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 020f 	and.w	r2, r3, #15
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	331b      	adds	r3, #27
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	4413      	add	r3, r2
 80018ee:	3304      	adds	r3, #4
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	331b      	adds	r3, #27
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	4413      	add	r3, r2
 8001906:	3304      	adds	r3, #4
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	0c1b      	lsrs	r3, r3, #16
 800190c:	b29a      	uxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	4413      	add	r3, r2
 800191c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4413      	add	r3, r2
 8001932:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0a1a      	lsrs	r2, r3, #8
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	4413      	add	r3, r2
 800194c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	0c1a      	lsrs	r2, r3, #16
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	3302      	adds	r3, #2
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	0e1a      	lsrs	r2, r3, #24
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	3303      	adds	r3, #3
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	4413      	add	r3, r2
 8001980:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	3304      	adds	r3, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4413      	add	r3, r2
 8001998:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	0a1a      	lsrs	r2, r3, #8
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	3305      	adds	r3, #5
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0c1a      	lsrs	r2, r3, #16
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	3306      	adds	r3, #6
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	0e1a      	lsrs	r2, r3, #24
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	3307      	adds	r3, #7
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d108      	bne.n	80019f4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0220 	orr.w	r2, r2, #32
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	e007      	b.n	8001a04 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0220 	orr.w	r2, r2, #32
 8001a02:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e006      	b.n	8001a16 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
  }
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a32:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d002      	beq.n	8001a40 <HAL_CAN_ActivateNotification+0x1e>
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d109      	bne.n	8001a54 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6959      	ldr	r1, [r3, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e006      	b.n	8001a62 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
  }
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b08a      	sub	sp, #40	; 0x28
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d07c      	beq.n	8001bae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d023      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f983 	bl	8001ddc <HAL_CAN_TxMailbox0CompleteCallback>
 8001ad6:	e016      	b.n	8001b06 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d004      	beq.n	8001aec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aea:	e00c      	b.n	8001b06 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
 8001afe:	e002      	b.n	8001b06 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f989 	bl	8001e18 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d024      	beq.n	8001b5a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f963 	bl	8001df0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b2a:	e016      	b.n	8001b5a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	e00c      	b.n	8001b5a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d004      	beq.n	8001b54 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
 8001b52:	e002      	b.n	8001b5a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f969 	bl	8001e2c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d024      	beq.n	8001bae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f943 	bl	8001e04 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b7e:	e016      	b.n	8001bae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
 8001b92:	e00c      	b.n	8001bae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba6:	e002      	b.n	8001bae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f949 	bl	8001e40 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00c      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2210      	movs	r2, #16
 8001bd0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00b      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2208      	movs	r2, #8
 8001bec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f930 	bl	8001e54 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d009      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7fe fd8f 	bl	8000730 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00c      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2210      	movs	r2, #16
 8001c34:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00b      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d006      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2208      	movs	r2, #8
 8001c50:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f912 	bl	8001e7c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f8f9 	bl	8001e68 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00b      	beq.n	8001c98 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2210      	movs	r2, #16
 8001c90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8fc 	bl	8001e90 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f8f5 	bl	8001ea4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d07b      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d072      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d043      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d03e      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d3c:	2b60      	cmp	r3, #96	; 0x60
 8001d3e:	d02b      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x32a>
 8001d40:	2b60      	cmp	r3, #96	; 0x60
 8001d42:	d82e      	bhi.n	8001da2 <HAL_CAN_IRQHandler+0x334>
 8001d44:	2b50      	cmp	r3, #80	; 0x50
 8001d46:	d022      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x320>
 8001d48:	2b50      	cmp	r3, #80	; 0x50
 8001d4a:	d82a      	bhi.n	8001da2 <HAL_CAN_IRQHandler+0x334>
 8001d4c:	2b40      	cmp	r3, #64	; 0x40
 8001d4e:	d019      	beq.n	8001d84 <HAL_CAN_IRQHandler+0x316>
 8001d50:	2b40      	cmp	r3, #64	; 0x40
 8001d52:	d826      	bhi.n	8001da2 <HAL_CAN_IRQHandler+0x334>
 8001d54:	2b30      	cmp	r3, #48	; 0x30
 8001d56:	d010      	beq.n	8001d7a <HAL_CAN_IRQHandler+0x30c>
 8001d58:	2b30      	cmp	r3, #48	; 0x30
 8001d5a:	d822      	bhi.n	8001da2 <HAL_CAN_IRQHandler+0x334>
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	d002      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x2f8>
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	d005      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d64:	e01d      	b.n	8001da2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	f043 0308 	orr.w	r3, r3, #8
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d6e:	e019      	b.n	8001da4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	f043 0310 	orr.w	r3, r3, #16
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d78:	e014      	b.n	8001da4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	f043 0320 	orr.w	r3, r3, #32
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d82:	e00f      	b.n	8001da4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d8c:	e00a      	b.n	8001da4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d96:	e005      	b.n	8001da4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001da0:	e000      	b.n	8001da4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001da2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699a      	ldr	r2, [r3, #24]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001db2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2204      	movs	r2, #4
 8001dba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d008      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f872 	bl	8001eb8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3728      	adds	r7, #40	; 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4907      	ldr	r1, [pc, #28]	; (8001f68 <__NVIC_EnableIRQ+0x38>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	; (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ff4c 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204e:	f7ff ff61 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002052:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	6978      	ldr	r0, [r7, #20]
 800205a:	f7ff ffb1 	bl	8001fc0 <NVIC_EncodePriority>
 800205e:	4602      	mov	r2, r0
 8002060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff80 	bl	8001f6c <__NVIC_SetPriority>
}
 800206c:	bf00      	nop
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff54 	bl	8001f30 <__NVIC_EnableIRQ>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e177      	b.n	800239c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 8166 	bne.w	8002396 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d005      	beq.n	80020e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d130      	bne.n	8002144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 0201 	and.w	r2, r3, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b03      	cmp	r3, #3
 800214e:	d017      	beq.n	8002180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d123      	bne.n	80021d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	08da      	lsrs	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3208      	adds	r2, #8
 80021ce:	69b9      	ldr	r1, [r7, #24]
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0203 	and.w	r2, r3, #3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80c0 	beq.w	8002396 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <HAL_GPIO_Init+0x324>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4a65      	ldr	r2, [pc, #404]	; (80023b4 <HAL_GPIO_Init+0x324>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002224:	6453      	str	r3, [r2, #68]	; 0x44
 8002226:	4b63      	ldr	r3, [pc, #396]	; (80023b4 <HAL_GPIO_Init+0x324>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002232:	4a61      	ldr	r2, [pc, #388]	; (80023b8 <HAL_GPIO_Init+0x328>)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_GPIO_Init+0x32c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d037      	beq.n	80022ce <HAL_GPIO_Init+0x23e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a57      	ldr	r2, [pc, #348]	; (80023c0 <HAL_GPIO_Init+0x330>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d031      	beq.n	80022ca <HAL_GPIO_Init+0x23a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a56      	ldr	r2, [pc, #344]	; (80023c4 <HAL_GPIO_Init+0x334>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d02b      	beq.n	80022c6 <HAL_GPIO_Init+0x236>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a55      	ldr	r2, [pc, #340]	; (80023c8 <HAL_GPIO_Init+0x338>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d025      	beq.n	80022c2 <HAL_GPIO_Init+0x232>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a54      	ldr	r2, [pc, #336]	; (80023cc <HAL_GPIO_Init+0x33c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01f      	beq.n	80022be <HAL_GPIO_Init+0x22e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a53      	ldr	r2, [pc, #332]	; (80023d0 <HAL_GPIO_Init+0x340>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d019      	beq.n	80022ba <HAL_GPIO_Init+0x22a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <HAL_GPIO_Init+0x344>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_GPIO_Init+0x226>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a51      	ldr	r2, [pc, #324]	; (80023d8 <HAL_GPIO_Init+0x348>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_GPIO_Init+0x222>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a50      	ldr	r2, [pc, #320]	; (80023dc <HAL_GPIO_Init+0x34c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <HAL_GPIO_Init+0x21e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4f      	ldr	r2, [pc, #316]	; (80023e0 <HAL_GPIO_Init+0x350>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_GPIO_Init+0x21a>
 80022a6:	2309      	movs	r3, #9
 80022a8:	e012      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022aa:	230a      	movs	r3, #10
 80022ac:	e010      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ae:	2308      	movs	r3, #8
 80022b0:	e00e      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022b2:	2307      	movs	r3, #7
 80022b4:	e00c      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022b6:	2306      	movs	r3, #6
 80022b8:	e00a      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ba:	2305      	movs	r3, #5
 80022bc:	e008      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022be:	2304      	movs	r3, #4
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022c2:	2303      	movs	r3, #3
 80022c4:	e004      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_GPIO_Init+0x240>
 80022ce:	2300      	movs	r3, #0
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f002 0203 	and.w	r2, r2, #3
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	4093      	lsls	r3, r2
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e0:	4935      	ldr	r1, [pc, #212]	; (80023b8 <HAL_GPIO_Init+0x328>)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_GPIO_Init+0x354>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002312:	4a34      	ldr	r2, [pc, #208]	; (80023e4 <HAL_GPIO_Init+0x354>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_GPIO_Init+0x354>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800233c:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <HAL_GPIO_Init+0x354>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002342:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <HAL_GPIO_Init+0x354>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002366:	4a1f      	ldr	r2, [pc, #124]	; (80023e4 <HAL_GPIO_Init+0x354>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_GPIO_Init+0x354>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <HAL_GPIO_Init+0x354>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3301      	adds	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b0f      	cmp	r3, #15
 80023a0:	f67f ae84 	bls.w	80020ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3724      	adds	r7, #36	; 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40013800 	.word	0x40013800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40020800 	.word	0x40020800
 80023c8:	40020c00 	.word	0x40020c00
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40021400 	.word	0x40021400
 80023d4:	40021800 	.word	0x40021800
 80023d8:	40021c00 	.word	0x40021c00
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40022400 	.word	0x40022400
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002404:	e003      	b.n	800240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800241a:	b480      	push	{r7}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800242c:	887a      	ldrh	r2, [r7, #2]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4013      	ands	r3, r2
 8002432:	041a      	lsls	r2, r3, #16
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	43d9      	mvns	r1, r3
 8002438:	887b      	ldrh	r3, [r7, #2]
 800243a:	400b      	ands	r3, r1
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	619a      	str	r2, [r3, #24]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e267      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d075      	beq.n	800255a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800246e:	4b88      	ldr	r3, [pc, #544]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b04      	cmp	r3, #4
 8002478:	d00c      	beq.n	8002494 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247a:	4b85      	ldr	r3, [pc, #532]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002482:	2b08      	cmp	r3, #8
 8002484:	d112      	bne.n	80024ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002486:	4b82      	ldr	r3, [pc, #520]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002492:	d10b      	bne.n	80024ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	4b7e      	ldr	r3, [pc, #504]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d05b      	beq.n	8002558 <HAL_RCC_OscConfig+0x108>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d157      	bne.n	8002558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e242      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b4:	d106      	bne.n	80024c4 <HAL_RCC_OscConfig+0x74>
 80024b6:	4b76      	ldr	r3, [pc, #472]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a75      	ldr	r2, [pc, #468]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e01d      	b.n	8002500 <HAL_RCC_OscConfig+0xb0>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x98>
 80024ce:	4b70      	ldr	r3, [pc, #448]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6f      	ldr	r2, [pc, #444]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b6d      	ldr	r3, [pc, #436]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a6c      	ldr	r2, [pc, #432]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0xb0>
 80024e8:	4b69      	ldr	r3, [pc, #420]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a68      	ldr	r2, [pc, #416]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b66      	ldr	r3, [pc, #408]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a65      	ldr	r2, [pc, #404]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe fe72 	bl	80011f0 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe fe6e 	bl	80011f0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e207      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0xc0>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe fe5e 	bl	80011f0 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002538:	f7fe fe5a 	bl	80011f0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e1f3      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	4b51      	ldr	r3, [pc, #324]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0xe8>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d063      	beq.n	800262e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002566:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257a:	2b08      	cmp	r3, #8
 800257c:	d11c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257e:	4b44      	ldr	r3, [pc, #272]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d116      	bne.n	80025b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_RCC_OscConfig+0x152>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e1c7      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a2:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4937      	ldr	r1, [pc, #220]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b6:	e03a      	b.n	800262e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c0:	4b34      	ldr	r3, [pc, #208]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7fe fe13 	bl	80011f0 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ce:	f7fe fe0f 	bl	80011f0 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1a8      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4925      	ldr	r1, [pc, #148]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	4b24      	ldr	r3, [pc, #144]	; (8002694 <HAL_RCC_OscConfig+0x244>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe fdf2 	bl	80011f0 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002610:	f7fe fdee 	bl	80011f0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e187      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d036      	beq.n	80026a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <HAL_RCC_OscConfig+0x248>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe fdd2 	bl	80011f0 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002650:	f7fe fdce 	bl	80011f0 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e167      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_OscConfig+0x240>)
 8002664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x200>
 800266e:	e01b      	b.n	80026a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_OscConfig+0x248>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7fe fdbb 	bl	80011f0 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	e00e      	b.n	800269c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267e:	f7fe fdb7 	bl	80011f0 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d907      	bls.n	800269c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e150      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
 8002690:	40023800 	.word	0x40023800
 8002694:	42470000 	.word	0x42470000
 8002698:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	4b88      	ldr	r3, [pc, #544]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 800269e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ea      	bne.n	800267e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8097 	beq.w	80027e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ba:	4b81      	ldr	r3, [pc, #516]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10f      	bne.n	80026e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	4b7d      	ldr	r3, [pc, #500]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a7c      	ldr	r2, [pc, #496]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
 80026d6:	4b7a      	ldr	r3, [pc, #488]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e2:	2301      	movs	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	4b77      	ldr	r3, [pc, #476]	; (80028c4 <HAL_RCC_OscConfig+0x474>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d118      	bne.n	8002724 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f2:	4b74      	ldr	r3, [pc, #464]	; (80028c4 <HAL_RCC_OscConfig+0x474>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a73      	ldr	r2, [pc, #460]	; (80028c4 <HAL_RCC_OscConfig+0x474>)
 80026f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fe:	f7fe fd77 	bl	80011f0 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002706:	f7fe fd73 	bl	80011f0 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e10c      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x474>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d106      	bne.n	800273a <HAL_RCC_OscConfig+0x2ea>
 800272c:	4b64      	ldr	r3, [pc, #400]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a63      	ldr	r2, [pc, #396]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	e01c      	b.n	8002774 <HAL_RCC_OscConfig+0x324>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b05      	cmp	r3, #5
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0x30c>
 8002742:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	4a5e      	ldr	r2, [pc, #376]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6713      	str	r3, [r2, #112]	; 0x70
 800274e:	4b5c      	ldr	r3, [pc, #368]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	4a5b      	ldr	r2, [pc, #364]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6713      	str	r3, [r2, #112]	; 0x70
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0x324>
 800275c:	4b58      	ldr	r3, [pc, #352]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	4a57      	ldr	r2, [pc, #348]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	6713      	str	r3, [r2, #112]	; 0x70
 8002768:	4b55      	ldr	r3, [pc, #340]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	4a54      	ldr	r2, [pc, #336]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 800276e:	f023 0304 	bic.w	r3, r3, #4
 8002772:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d015      	beq.n	80027a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7fe fd38 	bl	80011f0 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7fe fd34 	bl	80011f0 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e0cb      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	4b49      	ldr	r3, [pc, #292]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ee      	beq.n	8002784 <HAL_RCC_OscConfig+0x334>
 80027a6:	e014      	b.n	80027d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a8:	f7fe fd22 	bl	80011f0 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7fe fd1e 	bl	80011f0 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0b5      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c6:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ee      	bne.n	80027b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d8:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	4a38      	ldr	r2, [pc, #224]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80a1 	beq.w	8002930 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ee:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d05c      	beq.n	80028b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d141      	bne.n	8002886 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002802:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <HAL_RCC_OscConfig+0x478>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7fe fcf2 	bl	80011f0 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002810:	f7fe fcee 	bl	80011f0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e087      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	019b      	lsls	r3, r3, #6
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	3b01      	subs	r3, #1
 8002848:	041b      	lsls	r3, r3, #16
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	491b      	ldr	r1, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002858:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_RCC_OscConfig+0x478>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7fe fcc7 	bl	80011f0 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fcc3 	bl	80011f0 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e05c      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x416>
 8002884:	e054      	b.n	8002930 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_RCC_OscConfig+0x478>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fcb0 	bl	80011f0 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe fcac 	bl	80011f0 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e045      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_RCC_OscConfig+0x470>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x444>
 80028b2:	e03d      	b.n	8002930 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e038      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40007000 	.word	0x40007000
 80028c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <HAL_RCC_OscConfig+0x4ec>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d028      	beq.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d121      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d11a      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002902:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002904:	4293      	cmp	r3, r2
 8002906:	d111      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	3b01      	subs	r3, #1
 8002916:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d107      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0cc      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b68      	ldr	r3, [pc, #416]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d90c      	bls.n	800297c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b65      	ldr	r3, [pc, #404]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b63      	ldr	r3, [pc, #396]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0b8      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d020      	beq.n	80029ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002994:	4b59      	ldr	r3, [pc, #356]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a58      	ldr	r2, [pc, #352]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800299e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ac:	4b53      	ldr	r3, [pc, #332]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a52      	ldr	r2, [pc, #328]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b8:	4b50      	ldr	r3, [pc, #320]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	494d      	ldr	r1, [pc, #308]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d044      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029de:	4b47      	ldr	r3, [pc, #284]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d119      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e07f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d003      	beq.n	80029fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fe:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e06f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e067      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1e:	4b37      	ldr	r3, [pc, #220]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f023 0203 	bic.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4934      	ldr	r1, [pc, #208]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a30:	f7fe fbde 	bl	80011f0 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7fe fbda 	bl	80011f0 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e04f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 020c 	and.w	r2, r3, #12
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d1eb      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a60:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d20c      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e032      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4916      	ldr	r1, [pc, #88]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab2:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	490e      	ldr	r1, [pc, #56]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ac6:	f000 f821 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	490a      	ldr	r1, [pc, #40]	; (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	5ccb      	ldrb	r3, [r1, r3]
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fa8e 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00
 8002afc:	40023800 	.word	0x40023800
 8002b00:	080050ec 	.word	0x080050ec
 8002b04:	20000000 	.word	0x20000000
 8002b08:	20000004 	.word	0x20000004

08002b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b10:	b090      	sub	sp, #64	; 0x40
 8002b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	637b      	str	r3, [r7, #52]	; 0x34
 8002b18:	2300      	movs	r3, #0
 8002b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d00d      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x40>
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	f200 80a1 	bhi.w	8002c78 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b3e:	e09b      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b42:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b44:	e09b      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b46:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b4a:	e098      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b4c:	4b4f      	ldr	r3, [pc, #316]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b56:	4b4d      	ldr	r3, [pc, #308]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d028      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b62:	4b4a      	ldr	r3, [pc, #296]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	099b      	lsrs	r3, r3, #6
 8002b68:	2200      	movs	r2, #0
 8002b6a:	623b      	str	r3, [r7, #32]
 8002b6c:	627a      	str	r2, [r7, #36]	; 0x24
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b74:	2100      	movs	r1, #0
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b78:	fb03 f201 	mul.w	r2, r3, r1
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	fb00 f303 	mul.w	r3, r0, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	4a43      	ldr	r2, [pc, #268]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b86:	fba0 1202 	umull	r1, r2, r0, r2
 8002b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b8c:	460a      	mov	r2, r1
 8002b8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b92:	4413      	add	r3, r2
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	2200      	movs	r2, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	61fa      	str	r2, [r7, #28]
 8002b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ba6:	f7fd fb2b 	bl	8000200 <__aeabi_uldivmod>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4613      	mov	r3, r2
 8002bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb2:	e053      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb4:	4b35      	ldr	r3, [pc, #212]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	099b      	lsrs	r3, r3, #6
 8002bba:	2200      	movs	r2, #0
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	617a      	str	r2, [r7, #20]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bc6:	f04f 0b00 	mov.w	fp, #0
 8002bca:	4652      	mov	r2, sl
 8002bcc:	465b      	mov	r3, fp
 8002bce:	f04f 0000 	mov.w	r0, #0
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	0159      	lsls	r1, r3, #5
 8002bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bdc:	0150      	lsls	r0, r2, #5
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	ebb2 080a 	subs.w	r8, r2, sl
 8002be6:	eb63 090b 	sbc.w	r9, r3, fp
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bf6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bfe:	ebb2 0408 	subs.w	r4, r2, r8
 8002c02:	eb63 0509 	sbc.w	r5, r3, r9
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	00eb      	lsls	r3, r5, #3
 8002c10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c14:	00e2      	lsls	r2, r4, #3
 8002c16:	4614      	mov	r4, r2
 8002c18:	461d      	mov	r5, r3
 8002c1a:	eb14 030a 	adds.w	r3, r4, sl
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	eb45 030b 	adc.w	r3, r5, fp
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c32:	4629      	mov	r1, r5
 8002c34:	028b      	lsls	r3, r1, #10
 8002c36:	4621      	mov	r1, r4
 8002c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	028a      	lsls	r2, r1, #10
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c46:	2200      	movs	r2, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	60fa      	str	r2, [r7, #12]
 8002c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c50:	f7fd fad6 	bl	8000200 <__aeabi_uldivmod>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	0c1b      	lsrs	r3, r3, #16
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	3301      	adds	r3, #1
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c76:	e002      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c7a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3740      	adds	r7, #64	; 0x40
 8002c84:	46bd      	mov	sp, r7
 8002c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	00f42400 	.word	0x00f42400
 8002c94:	017d7840 	.word	0x017d7840

08002c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000000 	.word	0x20000000

08002cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb4:	f7ff fff0 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	0a9b      	lsrs	r3, r3, #10
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4903      	ldr	r1, [pc, #12]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	080050fc 	.word	0x080050fc

08002cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cdc:	f7ff ffdc 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0b5b      	lsrs	r3, r3, #13
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	080050fc 	.word	0x080050fc

08002d00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	220f      	movs	r2, #15
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0203 	and.w	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	08db      	lsrs	r3, r3, #3
 8002d3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_RCC_GetClockConfig+0x60>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 020f 	and.w	r2, r3, #15
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	601a      	str	r2, [r3, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40023c00 	.word	0x40023c00

08002d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e041      	b.n	8002dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f839 	bl	8002e02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f000 f9d8 	bl	8003158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d001      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e04e      	b.n	8002ece <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a23      	ldr	r2, [pc, #140]	; (8002edc <HAL_TIM_Base_Start_IT+0xc4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d022      	beq.n	8002e98 <HAL_TIM_Base_Start_IT+0x80>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5a:	d01d      	beq.n	8002e98 <HAL_TIM_Base_Start_IT+0x80>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d018      	beq.n	8002e98 <HAL_TIM_Base_Start_IT+0x80>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ee4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d013      	beq.n	8002e98 <HAL_TIM_Base_Start_IT+0x80>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1c      	ldr	r2, [pc, #112]	; (8002ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00e      	beq.n	8002e98 <HAL_TIM_Base_Start_IT+0x80>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1b      	ldr	r2, [pc, #108]	; (8002eec <HAL_TIM_Base_Start_IT+0xd4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d009      	beq.n	8002e98 <HAL_TIM_Base_Start_IT+0x80>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a19      	ldr	r2, [pc, #100]	; (8002ef0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d004      	beq.n	8002e98 <HAL_TIM_Base_Start_IT+0x80>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d111      	bne.n	8002ebc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d010      	beq.n	8002ecc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0201 	orr.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	e007      	b.n	8002ecc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	40010400 	.word	0x40010400
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40001800 	.word	0x40001800

08002ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d122      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d11b      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0202 	mvn.w	r2, #2
 8002f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f8ee 	bl	800311c <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f8e0 	bl	8003108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f8f1 	bl	8003130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d122      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0204 	mvn.w	r2, #4
 8002f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f8c4 	bl	800311c <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f8b6 	bl	8003108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f8c7 	bl	8003130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d122      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d11b      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0208 	mvn.w	r2, #8
 8002fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f89a 	bl	800311c <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f88c 	bl	8003108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f89d 	bl	8003130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b10      	cmp	r3, #16
 8003008:	d122      	bne.n	8003050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b10      	cmp	r3, #16
 8003016:	d11b      	bne.n	8003050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0210 	mvn.w	r2, #16
 8003020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2208      	movs	r2, #8
 8003026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f870 	bl	800311c <HAL_TIM_IC_CaptureCallback>
 800303c:	e005      	b.n	800304a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f862 	bl	8003108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f873 	bl	8003130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d10e      	bne.n	800307c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d107      	bne.n	800307c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0201 	mvn.w	r2, #1
 8003074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fd fe0e 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003086:	2b80      	cmp	r3, #128	; 0x80
 8003088:	d10e      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	2b80      	cmp	r3, #128	; 0x80
 8003096:	d107      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f902 	bl	80032ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b2:	2b40      	cmp	r3, #64	; 0x40
 80030b4:	d10e      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d107      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f838 	bl	8003144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d10e      	bne.n	8003100 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d107      	bne.n	8003100 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0220 	mvn.w	r2, #32
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f8cc 	bl	8003298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a40      	ldr	r2, [pc, #256]	; (800326c <TIM_Base_SetConfig+0x114>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003176:	d00f      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a3d      	ldr	r2, [pc, #244]	; (8003270 <TIM_Base_SetConfig+0x118>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00b      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a3c      	ldr	r2, [pc, #240]	; (8003274 <TIM_Base_SetConfig+0x11c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d007      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a3b      	ldr	r2, [pc, #236]	; (8003278 <TIM_Base_SetConfig+0x120>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <TIM_Base_SetConfig+0x40>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a3a      	ldr	r2, [pc, #232]	; (800327c <TIM_Base_SetConfig+0x124>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d108      	bne.n	80031aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a2f      	ldr	r2, [pc, #188]	; (800326c <TIM_Base_SetConfig+0x114>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d02b      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b8:	d027      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a2c      	ldr	r2, [pc, #176]	; (8003270 <TIM_Base_SetConfig+0x118>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d023      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a2b      	ldr	r2, [pc, #172]	; (8003274 <TIM_Base_SetConfig+0x11c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01f      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <TIM_Base_SetConfig+0x120>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01b      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a29      	ldr	r2, [pc, #164]	; (800327c <TIM_Base_SetConfig+0x124>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d017      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a28      	ldr	r2, [pc, #160]	; (8003280 <TIM_Base_SetConfig+0x128>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a27      	ldr	r2, [pc, #156]	; (8003284 <TIM_Base_SetConfig+0x12c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00f      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a26      	ldr	r2, [pc, #152]	; (8003288 <TIM_Base_SetConfig+0x130>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00b      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a25      	ldr	r2, [pc, #148]	; (800328c <TIM_Base_SetConfig+0x134>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a24      	ldr	r2, [pc, #144]	; (8003290 <TIM_Base_SetConfig+0x138>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d003      	beq.n	800320a <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a23      	ldr	r2, [pc, #140]	; (8003294 <TIM_Base_SetConfig+0x13c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d108      	bne.n	800321c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <TIM_Base_SetConfig+0x114>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_Base_SetConfig+0xf8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a0c      	ldr	r2, [pc, #48]	; (800327c <TIM_Base_SetConfig+0x124>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d103      	bne.n	8003258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	615a      	str	r2, [r3, #20]
}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40010000 	.word	0x40010000
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800
 8003278:	40000c00 	.word	0x40000c00
 800327c:	40010400 	.word	0x40010400
 8003280:	40014000 	.word	0x40014000
 8003284:	40014400 	.word	0x40014400
 8003288:	40014800 	.word	0x40014800
 800328c:	40001800 	.word	0x40001800
 8003290:	40001c00 	.word	0x40001c00
 8003294:	40002000 	.word	0x40002000

08003298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e03f      	b.n	8003352 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd fe46 	bl	8000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	; 0x24
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003302:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f9cb 	bl	80036a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003328:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003338:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b08a      	sub	sp, #40	; 0x28
 800335e:	af02      	add	r7, sp, #8
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	4613      	mov	r3, r2
 8003368:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b20      	cmp	r3, #32
 8003378:	d17c      	bne.n	8003474 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <HAL_UART_Transmit+0x2c>
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e075      	b.n	8003476 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_UART_Transmit+0x3e>
 8003394:	2302      	movs	r3, #2
 8003396:	e06e      	b.n	8003476 <HAL_UART_Transmit+0x11c>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2221      	movs	r2, #33	; 0x21
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ae:	f7fd ff1f 	bl	80011f0 <HAL_GetTick>
 80033b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	88fa      	ldrh	r2, [r7, #6]
 80033b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c8:	d108      	bne.n	80033dc <HAL_UART_Transmit+0x82>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d104      	bne.n	80033dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	e003      	b.n	80033e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033ec:	e02a      	b.n	8003444 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2180      	movs	r1, #128	; 0x80
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f8e2 	bl	80035c2 <UART_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e036      	b.n	8003476 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10b      	bne.n	8003426 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800341c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	3302      	adds	r3, #2
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	e007      	b.n	8003436 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	3301      	adds	r3, #1
 8003434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1cf      	bne.n	80033ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2200      	movs	r2, #0
 8003456:	2140      	movs	r1, #64	; 0x40
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f8b2 	bl	80035c2 <UART_WaitOnFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e006      	b.n	8003476 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b08a      	sub	sp, #40	; 0x28
 8003482:	af02      	add	r7, sp, #8
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b20      	cmp	r3, #32
 800349c:	f040 808c 	bne.w	80035b8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_UART_Receive+0x2e>
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e084      	b.n	80035ba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_UART_Receive+0x40>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e07d      	b.n	80035ba <HAL_UART_Receive+0x13c>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2222      	movs	r2, #34	; 0x22
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034da:	f7fd fe89 	bl	80011f0 <HAL_GetTick>
 80034de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	88fa      	ldrh	r2, [r7, #6]
 80034ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f4:	d108      	bne.n	8003508 <HAL_UART_Receive+0x8a>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d104      	bne.n	8003508 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	e003      	b.n	8003510 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003518:	e043      	b.n	80035a2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2200      	movs	r2, #0
 8003522:	2120      	movs	r1, #32
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f84c 	bl	80035c2 <UART_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e042      	b.n	80035ba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	b29b      	uxth	r3, r3
 8003542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003546:	b29a      	uxth	r2, r3
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	3302      	adds	r3, #2
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	e01f      	b.n	8003594 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355c:	d007      	beq.n	800356e <HAL_UART_Receive+0xf0>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10a      	bne.n	800357c <HAL_UART_Receive+0xfe>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	e008      	b.n	800358e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003588:	b2da      	uxtb	r2, r3
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3301      	adds	r3, #1
 8003592:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1b6      	bne.n	800351a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e000      	b.n	80035ba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b090      	sub	sp, #64	; 0x40
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	4613      	mov	r3, r2
 80035d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d2:	e050      	b.n	8003676 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035da:	d04c      	beq.n	8003676 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035e2:	f7fd fe05 	bl	80011f0 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d241      	bcs.n	8003676 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	330c      	adds	r3, #12
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	330c      	adds	r3, #12
 8003610:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003612:	637a      	str	r2, [r7, #52]	; 0x34
 8003614:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1e5      	bne.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3314      	adds	r3, #20
 800362c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	613b      	str	r3, [r7, #16]
   return(result);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	63bb      	str	r3, [r7, #56]	; 0x38
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3314      	adds	r3, #20
 8003644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003646:	623a      	str	r2, [r7, #32]
 8003648:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	69f9      	ldr	r1, [r7, #28]
 800364c:	6a3a      	ldr	r2, [r7, #32]
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	61bb      	str	r3, [r7, #24]
   return(result);
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e5      	bne.n	8003626 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e00f      	b.n	8003696 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4013      	ands	r3, r2
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	429a      	cmp	r2, r3
 8003684:	bf0c      	ite	eq
 8003686:	2301      	moveq	r3, #1
 8003688:	2300      	movne	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	429a      	cmp	r2, r3
 8003692:	d09f      	beq.n	80035d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3740      	adds	r7, #64	; 0x40
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a4:	b0c0      	sub	sp, #256	; 0x100
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036bc:	68d9      	ldr	r1, [r3, #12]
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	ea40 0301 	orr.w	r3, r0, r1
 80036c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	431a      	orrs	r2, r3
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036f8:	f021 010c 	bic.w	r1, r1, #12
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003706:	430b      	orrs	r3, r1
 8003708:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800370a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371a:	6999      	ldr	r1, [r3, #24]
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	ea40 0301 	orr.w	r3, r0, r1
 8003726:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4b8f      	ldr	r3, [pc, #572]	; (800396c <UART_SetConfig+0x2cc>)
 8003730:	429a      	cmp	r2, r3
 8003732:	d005      	beq.n	8003740 <UART_SetConfig+0xa0>
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b8d      	ldr	r3, [pc, #564]	; (8003970 <UART_SetConfig+0x2d0>)
 800373c:	429a      	cmp	r2, r3
 800373e:	d104      	bne.n	800374a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003740:	f7ff faca 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 8003744:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003748:	e003      	b.n	8003752 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800374a:	f7ff fab1 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 800374e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800375c:	f040 810c 	bne.w	8003978 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003764:	2200      	movs	r2, #0
 8003766:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800376a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800376e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003772:	4622      	mov	r2, r4
 8003774:	462b      	mov	r3, r5
 8003776:	1891      	adds	r1, r2, r2
 8003778:	65b9      	str	r1, [r7, #88]	; 0x58
 800377a:	415b      	adcs	r3, r3
 800377c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800377e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003782:	4621      	mov	r1, r4
 8003784:	eb12 0801 	adds.w	r8, r2, r1
 8003788:	4629      	mov	r1, r5
 800378a:	eb43 0901 	adc.w	r9, r3, r1
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800379a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800379e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037a2:	4690      	mov	r8, r2
 80037a4:	4699      	mov	r9, r3
 80037a6:	4623      	mov	r3, r4
 80037a8:	eb18 0303 	adds.w	r3, r8, r3
 80037ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037b0:	462b      	mov	r3, r5
 80037b2:	eb49 0303 	adc.w	r3, r9, r3
 80037b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037ce:	460b      	mov	r3, r1
 80037d0:	18db      	adds	r3, r3, r3
 80037d2:	653b      	str	r3, [r7, #80]	; 0x50
 80037d4:	4613      	mov	r3, r2
 80037d6:	eb42 0303 	adc.w	r3, r2, r3
 80037da:	657b      	str	r3, [r7, #84]	; 0x54
 80037dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037e4:	f7fc fd0c 	bl	8000200 <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4b61      	ldr	r3, [pc, #388]	; (8003974 <UART_SetConfig+0x2d4>)
 80037ee:	fba3 2302 	umull	r2, r3, r3, r2
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	011c      	lsls	r4, r3, #4
 80037f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003800:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003804:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003808:	4642      	mov	r2, r8
 800380a:	464b      	mov	r3, r9
 800380c:	1891      	adds	r1, r2, r2
 800380e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003810:	415b      	adcs	r3, r3
 8003812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003814:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003818:	4641      	mov	r1, r8
 800381a:	eb12 0a01 	adds.w	sl, r2, r1
 800381e:	4649      	mov	r1, r9
 8003820:	eb43 0b01 	adc.w	fp, r3, r1
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003830:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003838:	4692      	mov	sl, r2
 800383a:	469b      	mov	fp, r3
 800383c:	4643      	mov	r3, r8
 800383e:	eb1a 0303 	adds.w	r3, sl, r3
 8003842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003846:	464b      	mov	r3, r9
 8003848:	eb4b 0303 	adc.w	r3, fp, r3
 800384c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800385c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003860:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003864:	460b      	mov	r3, r1
 8003866:	18db      	adds	r3, r3, r3
 8003868:	643b      	str	r3, [r7, #64]	; 0x40
 800386a:	4613      	mov	r3, r2
 800386c:	eb42 0303 	adc.w	r3, r2, r3
 8003870:	647b      	str	r3, [r7, #68]	; 0x44
 8003872:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003876:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800387a:	f7fc fcc1 	bl	8000200 <__aeabi_uldivmod>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4611      	mov	r1, r2
 8003884:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <UART_SetConfig+0x2d4>)
 8003886:	fba3 2301 	umull	r2, r3, r3, r1
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	2264      	movs	r2, #100	; 0x64
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	1acb      	subs	r3, r1, r3
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800389a:	4b36      	ldr	r3, [pc, #216]	; (8003974 <UART_SetConfig+0x2d4>)
 800389c:	fba3 2302 	umull	r2, r3, r3, r2
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038a8:	441c      	add	r4, r3
 80038aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	1891      	adds	r1, r2, r2
 80038c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80038c4:	415b      	adcs	r3, r3
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038cc:	4641      	mov	r1, r8
 80038ce:	1851      	adds	r1, r2, r1
 80038d0:	6339      	str	r1, [r7, #48]	; 0x30
 80038d2:	4649      	mov	r1, r9
 80038d4:	414b      	adcs	r3, r1
 80038d6:	637b      	str	r3, [r7, #52]	; 0x34
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038e4:	4659      	mov	r1, fp
 80038e6:	00cb      	lsls	r3, r1, #3
 80038e8:	4651      	mov	r1, sl
 80038ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ee:	4651      	mov	r1, sl
 80038f0:	00ca      	lsls	r2, r1, #3
 80038f2:	4610      	mov	r0, r2
 80038f4:	4619      	mov	r1, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	4642      	mov	r2, r8
 80038fa:	189b      	adds	r3, r3, r2
 80038fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003900:	464b      	mov	r3, r9
 8003902:	460a      	mov	r2, r1
 8003904:	eb42 0303 	adc.w	r3, r2, r3
 8003908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003918:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800391c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003920:	460b      	mov	r3, r1
 8003922:	18db      	adds	r3, r3, r3
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
 8003926:	4613      	mov	r3, r2
 8003928:	eb42 0303 	adc.w	r3, r2, r3
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800392e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003932:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003936:	f7fc fc63 	bl	8000200 <__aeabi_uldivmod>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <UART_SetConfig+0x2d4>)
 8003940:	fba3 1302 	umull	r1, r3, r3, r2
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	2164      	movs	r1, #100	; 0x64
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	3332      	adds	r3, #50	; 0x32
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <UART_SetConfig+0x2d4>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	f003 0207 	and.w	r2, r3, #7
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4422      	add	r2, r4
 8003966:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003968:	e105      	b.n	8003b76 <UART_SetConfig+0x4d6>
 800396a:	bf00      	nop
 800396c:	40011000 	.word	0x40011000
 8003970:	40011400 	.word	0x40011400
 8003974:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800397c:	2200      	movs	r2, #0
 800397e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003982:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003986:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800398a:	4642      	mov	r2, r8
 800398c:	464b      	mov	r3, r9
 800398e:	1891      	adds	r1, r2, r2
 8003990:	6239      	str	r1, [r7, #32]
 8003992:	415b      	adcs	r3, r3
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800399a:	4641      	mov	r1, r8
 800399c:	1854      	adds	r4, r2, r1
 800399e:	4649      	mov	r1, r9
 80039a0:	eb43 0501 	adc.w	r5, r3, r1
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	00eb      	lsls	r3, r5, #3
 80039ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039b2:	00e2      	lsls	r2, r4, #3
 80039b4:	4614      	mov	r4, r2
 80039b6:	461d      	mov	r5, r3
 80039b8:	4643      	mov	r3, r8
 80039ba:	18e3      	adds	r3, r4, r3
 80039bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039c0:	464b      	mov	r3, r9
 80039c2:	eb45 0303 	adc.w	r3, r5, r3
 80039c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039e6:	4629      	mov	r1, r5
 80039e8:	008b      	lsls	r3, r1, #2
 80039ea:	4621      	mov	r1, r4
 80039ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f0:	4621      	mov	r1, r4
 80039f2:	008a      	lsls	r2, r1, #2
 80039f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039f8:	f7fc fc02 	bl	8000200 <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4b60      	ldr	r3, [pc, #384]	; (8003b84 <UART_SetConfig+0x4e4>)
 8003a02:	fba3 2302 	umull	r2, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	011c      	lsls	r4, r3, #4
 8003a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	464b      	mov	r3, r9
 8003a20:	1891      	adds	r1, r2, r2
 8003a22:	61b9      	str	r1, [r7, #24]
 8003a24:	415b      	adcs	r3, r3
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a2c:	4641      	mov	r1, r8
 8003a2e:	1851      	adds	r1, r2, r1
 8003a30:	6139      	str	r1, [r7, #16]
 8003a32:	4649      	mov	r1, r9
 8003a34:	414b      	adcs	r3, r1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a44:	4659      	mov	r1, fp
 8003a46:	00cb      	lsls	r3, r1, #3
 8003a48:	4651      	mov	r1, sl
 8003a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a4e:	4651      	mov	r1, sl
 8003a50:	00ca      	lsls	r2, r1, #3
 8003a52:	4610      	mov	r0, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	4642      	mov	r2, r8
 8003a5a:	189b      	adds	r3, r3, r2
 8003a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a60:	464b      	mov	r3, r9
 8003a62:	460a      	mov	r2, r1
 8003a64:	eb42 0303 	adc.w	r3, r2, r3
 8003a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a84:	4649      	mov	r1, r9
 8003a86:	008b      	lsls	r3, r1, #2
 8003a88:	4641      	mov	r1, r8
 8003a8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a8e:	4641      	mov	r1, r8
 8003a90:	008a      	lsls	r2, r1, #2
 8003a92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a96:	f7fc fbb3 	bl	8000200 <__aeabi_uldivmod>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <UART_SetConfig+0x4e4>)
 8003aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	2164      	movs	r1, #100	; 0x64
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	3332      	adds	r3, #50	; 0x32
 8003ab2:	4a34      	ldr	r2, [pc, #208]	; (8003b84 <UART_SetConfig+0x4e4>)
 8003ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003abe:	441c      	add	r4, r3
 8003ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ac8:	677a      	str	r2, [r7, #116]	; 0x74
 8003aca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ace:	4642      	mov	r2, r8
 8003ad0:	464b      	mov	r3, r9
 8003ad2:	1891      	adds	r1, r2, r2
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	415b      	adcs	r3, r3
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ade:	4641      	mov	r1, r8
 8003ae0:	1851      	adds	r1, r2, r1
 8003ae2:	6039      	str	r1, [r7, #0]
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	414b      	adcs	r3, r1
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003af6:	4659      	mov	r1, fp
 8003af8:	00cb      	lsls	r3, r1, #3
 8003afa:	4651      	mov	r1, sl
 8003afc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b00:	4651      	mov	r1, sl
 8003b02:	00ca      	lsls	r2, r1, #3
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4642      	mov	r2, r8
 8003b0c:	189b      	adds	r3, r3, r2
 8003b0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b10:	464b      	mov	r3, r9
 8003b12:	460a      	mov	r2, r1
 8003b14:	eb42 0303 	adc.w	r3, r2, r3
 8003b18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	663b      	str	r3, [r7, #96]	; 0x60
 8003b24:	667a      	str	r2, [r7, #100]	; 0x64
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b32:	4649      	mov	r1, r9
 8003b34:	008b      	lsls	r3, r1, #2
 8003b36:	4641      	mov	r1, r8
 8003b38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	008a      	lsls	r2, r1, #2
 8003b40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b44:	f7fc fb5c 	bl	8000200 <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <UART_SetConfig+0x4e4>)
 8003b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	2164      	movs	r1, #100	; 0x64
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	3332      	adds	r3, #50	; 0x32
 8003b60:	4a08      	ldr	r2, [pc, #32]	; (8003b84 <UART_SetConfig+0x4e4>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	f003 020f 	and.w	r2, r3, #15
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4422      	add	r2, r4
 8003b74:	609a      	str	r2, [r3, #8]
}
 8003b76:	bf00      	nop
 8003b78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b82:	bf00      	nop
 8003b84:	51eb851f 	.word	0x51eb851f

08003b88 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b9a:	2b84      	cmp	r3, #132	; 0x84
 8003b9c:	d005      	beq.n	8003baa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3303      	adds	r3, #3
 8003ba8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003bbc:	f000 fade 	bl	800417c <vTaskStartScheduler>
  
  return osOK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc8:	b089      	sub	sp, #36	; 0x24
 8003bca:	af04      	add	r7, sp, #16
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d020      	beq.n	8003c1a <osThreadCreate+0x54>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01c      	beq.n	8003c1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685c      	ldr	r4, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681d      	ldr	r5, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691e      	ldr	r6, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff ffc8 	bl	8003b88 <makeFreeRtosPriority>
 8003bf8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c02:	9202      	str	r2, [sp, #8]
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	9100      	str	r1, [sp, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	4632      	mov	r2, r6
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f000 f8ed 	bl	8003dee <xTaskCreateStatic>
 8003c14:	4603      	mov	r3, r0
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e01c      	b.n	8003c54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685c      	ldr	r4, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c26:	b29e      	uxth	r6, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff ffaa 	bl	8003b88 <makeFreeRtosPriority>
 8003c34:	4602      	mov	r2, r0
 8003c36:	f107 030c 	add.w	r3, r7, #12
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	9200      	str	r2, [sp, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	4632      	mov	r2, r6
 8003c42:	4629      	mov	r1, r5
 8003c44:	4620      	mov	r0, r4
 8003c46:	f000 f92f 	bl	8003ea8 <xTaskCreate>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d001      	beq.n	8003c54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c54:	68fb      	ldr	r3, [r7, #12]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <osDelay+0x16>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	e000      	b.n	8003c76 <osDelay+0x18>
 8003c74:	2301      	movs	r3, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fa4c 	bl	8004114 <vTaskDelay>
  
  return osOK;
 8003c7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f103 0208 	add.w	r2, r3, #8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f103 0208 	add.w	r2, r3, #8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f103 0208 	add.w	r2, r3, #8
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	601a      	str	r2, [r3, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3e:	d103      	bne.n	8003d48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e00c      	b.n	8003d62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e002      	b.n	8003d56 <vListInsert+0x2e>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d2f6      	bcs.n	8003d50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6892      	ldr	r2, [r2, #8]
 8003db0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6852      	ldr	r2, [r2, #4]
 8003dba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d103      	bne.n	8003dce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	1e5a      	subs	r2, r3, #1
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b08e      	sub	sp, #56	; 0x38
 8003df2:	af04      	add	r7, sp, #16
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10a      	bne.n	8003e18 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	623b      	str	r3, [r7, #32]
}
 8003e14:	bf00      	nop
 8003e16:	e7fe      	b.n	8003e16 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <xTaskCreateStatic+0x46>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	61fb      	str	r3, [r7, #28]
}
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e34:	2354      	movs	r3, #84	; 0x54
 8003e36:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b54      	cmp	r3, #84	; 0x54
 8003e3c:	d00a      	beq.n	8003e54 <xTaskCreateStatic+0x66>
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	61bb      	str	r3, [r7, #24]
}
 8003e50:	bf00      	nop
 8003e52:	e7fe      	b.n	8003e52 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01e      	beq.n	8003e9a <xTaskCreateStatic+0xac>
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01b      	beq.n	8003e9a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e74:	2300      	movs	r3, #0
 8003e76:	9303      	str	r3, [sp, #12]
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	f107 0314 	add.w	r3, r7, #20
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f850 	bl	8003f32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e94:	f000 f8d4 	bl	8004040 <prvAddNewTaskToReadyList>
 8003e98:	e001      	b.n	8003e9e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e9e:	697b      	ldr	r3, [r7, #20]
	}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3728      	adds	r7, #40	; 0x28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	; 0x30
 8003eac:	af04      	add	r7, sp, #16
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fec3 	bl	8004c48 <pvPortMalloc>
 8003ec2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00e      	beq.n	8003ee8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003eca:	2054      	movs	r0, #84	; 0x54
 8003ecc:	f000 febc 	bl	8004c48 <pvPortMalloc>
 8003ed0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
 8003ede:	e005      	b.n	8003eec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ee0:	6978      	ldr	r0, [r7, #20]
 8003ee2:	f000 ff7d 	bl	8004de0 <vPortFree>
 8003ee6:	e001      	b.n	8003eec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d017      	beq.n	8003f22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	2300      	movs	r3, #0
 8003efe:	9303      	str	r3, [sp, #12]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	9302      	str	r3, [sp, #8]
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	9301      	str	r3, [sp, #4]
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f80e 	bl	8003f32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f16:	69f8      	ldr	r0, [r7, #28]
 8003f18:	f000 f892 	bl	8004040 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	61bb      	str	r3, [r7, #24]
 8003f20:	e002      	b.n	8003f28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f28:	69bb      	ldr	r3, [r7, #24]
	}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b088      	sub	sp, #32
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f023 0307 	bic.w	r3, r3, #7
 8003f58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <prvInitialiseNewTask+0x48>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	617b      	str	r3, [r7, #20]
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01f      	beq.n	8003fc0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	e012      	b.n	8003fac <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	7819      	ldrb	r1, [r3, #0]
 8003f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	4413      	add	r3, r2
 8003f94:	3334      	adds	r3, #52	; 0x34
 8003f96:	460a      	mov	r2, r1
 8003f98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d006      	beq.n	8003fb4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b0f      	cmp	r3, #15
 8003fb0:	d9e9      	bls.n	8003f86 <prvInitialiseNewTask+0x54>
 8003fb2:	e000      	b.n	8003fb6 <prvInitialiseNewTask+0x84>
			{
				break;
 8003fb4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fbe:	e003      	b.n	8003fc8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d901      	bls.n	8003fd2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fce:	2306      	movs	r3, #6
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fe6c 	bl	8003cc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	3318      	adds	r3, #24
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fe67 	bl	8003cc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	f1c3 0207 	rsb	r2, r3, #7
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	2200      	movs	r2, #0
 8004012:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	68f9      	ldr	r1, [r7, #12]
 8004020:	69b8      	ldr	r0, [r7, #24]
 8004022:	f000 fc05 	bl	8004830 <pxPortInitialiseStack>
 8004026:	4602      	mov	r2, r0
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800402c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004036:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004038:	bf00      	nop
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004048:	f000 fd1c 	bl	8004a84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800404c:	4b2a      	ldr	r3, [pc, #168]	; (80040f8 <prvAddNewTaskToReadyList+0xb8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3301      	adds	r3, #1
 8004052:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <prvAddNewTaskToReadyList+0xb8>)
 8004054:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004056:	4b29      	ldr	r3, [pc, #164]	; (80040fc <prvAddNewTaskToReadyList+0xbc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800405e:	4a27      	ldr	r2, [pc, #156]	; (80040fc <prvAddNewTaskToReadyList+0xbc>)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004064:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <prvAddNewTaskToReadyList+0xb8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d110      	bne.n	800408e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800406c:	f000 fabc 	bl	80045e8 <prvInitialiseTaskLists>
 8004070:	e00d      	b.n	800408e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004072:	4b23      	ldr	r3, [pc, #140]	; (8004100 <prvAddNewTaskToReadyList+0xc0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800407a:	4b20      	ldr	r3, [pc, #128]	; (80040fc <prvAddNewTaskToReadyList+0xbc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	429a      	cmp	r2, r3
 8004086:	d802      	bhi.n	800408e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004088:	4a1c      	ldr	r2, [pc, #112]	; (80040fc <prvAddNewTaskToReadyList+0xbc>)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800408e:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <prvAddNewTaskToReadyList+0xc4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3301      	adds	r3, #1
 8004094:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <prvAddNewTaskToReadyList+0xc4>)
 8004096:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	2201      	movs	r2, #1
 800409e:	409a      	lsls	r2, r3
 80040a0:	4b19      	ldr	r3, [pc, #100]	; (8004108 <prvAddNewTaskToReadyList+0xc8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	4a18      	ldr	r2, [pc, #96]	; (8004108 <prvAddNewTaskToReadyList+0xc8>)
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4a15      	ldr	r2, [pc, #84]	; (800410c <prvAddNewTaskToReadyList+0xcc>)
 80040b8:	441a      	add	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f7ff fe0d 	bl	8003ce0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040c6:	f000 fd0d 	bl	8004ae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <prvAddNewTaskToReadyList+0xc0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00e      	beq.n	80040f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040d2:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <prvAddNewTaskToReadyList+0xbc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	429a      	cmp	r2, r3
 80040de:	d207      	bcs.n	80040f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <prvAddNewTaskToReadyList+0xd0>)
 80040e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20000514 	.word	0x20000514
 80040fc:	20000414 	.word	0x20000414
 8004100:	20000520 	.word	0x20000520
 8004104:	20000530 	.word	0x20000530
 8004108:	2000051c 	.word	0x2000051c
 800410c:	20000418 	.word	0x20000418
 8004110:	e000ed04 	.word	0xe000ed04

08004114 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d017      	beq.n	8004156 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004126:	4b13      	ldr	r3, [pc, #76]	; (8004174 <vTaskDelay+0x60>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <vTaskDelay+0x30>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	60bb      	str	r3, [r7, #8]
}
 8004140:	bf00      	nop
 8004142:	e7fe      	b.n	8004142 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004144:	f000 f87a 	bl	800423c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004148:	2100      	movs	r1, #0
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fb0a 	bl	8004764 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004150:	f000 f882 	bl	8004258 <xTaskResumeAll>
 8004154:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d107      	bne.n	800416c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800415c:	4b06      	ldr	r3, [pc, #24]	; (8004178 <vTaskDelay+0x64>)
 800415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	2000053c 	.word	0x2000053c
 8004178:	e000ed04 	.word	0xe000ed04

0800417c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800418a:	463a      	mov	r2, r7
 800418c:	1d39      	adds	r1, r7, #4
 800418e:	f107 0308 	add.w	r3, r7, #8
 8004192:	4618      	mov	r0, r3
 8004194:	f7fc f9b6 	bl	8000504 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004198:	6839      	ldr	r1, [r7, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	9202      	str	r2, [sp, #8]
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	2300      	movs	r3, #0
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	2300      	movs	r3, #0
 80041a8:	460a      	mov	r2, r1
 80041aa:	491e      	ldr	r1, [pc, #120]	; (8004224 <vTaskStartScheduler+0xa8>)
 80041ac:	481e      	ldr	r0, [pc, #120]	; (8004228 <vTaskStartScheduler+0xac>)
 80041ae:	f7ff fe1e 	bl	8003dee <xTaskCreateStatic>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4a1d      	ldr	r2, [pc, #116]	; (800422c <vTaskStartScheduler+0xb0>)
 80041b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041b8:	4b1c      	ldr	r3, [pc, #112]	; (800422c <vTaskStartScheduler+0xb0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041c0:	2301      	movs	r3, #1
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e001      	b.n	80041ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d116      	bne.n	80041fe <vTaskStartScheduler+0x82>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	613b      	str	r3, [r7, #16]
}
 80041e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <vTaskStartScheduler+0xb4>)
 80041e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <vTaskStartScheduler+0xb8>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <vTaskStartScheduler+0xbc>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041f8:	f000 fba2 	bl	8004940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041fc:	e00e      	b.n	800421c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004204:	d10a      	bne.n	800421c <vTaskStartScheduler+0xa0>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	60fb      	str	r3, [r7, #12]
}
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <vTaskStartScheduler+0x9e>
}
 800421c:	bf00      	nop
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	080050e4 	.word	0x080050e4
 8004228:	080045b9 	.word	0x080045b9
 800422c:	20000538 	.word	0x20000538
 8004230:	20000534 	.word	0x20000534
 8004234:	20000520 	.word	0x20000520
 8004238:	20000518 	.word	0x20000518

0800423c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004240:	4b04      	ldr	r3, [pc, #16]	; (8004254 <vTaskSuspendAll+0x18>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3301      	adds	r3, #1
 8004246:	4a03      	ldr	r2, [pc, #12]	; (8004254 <vTaskSuspendAll+0x18>)
 8004248:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800424a:	bf00      	nop
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	2000053c 	.word	0x2000053c

08004258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004266:	4b41      	ldr	r3, [pc, #260]	; (800436c <xTaskResumeAll+0x114>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <xTaskResumeAll+0x2c>
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	603b      	str	r3, [r7, #0]
}
 8004280:	bf00      	nop
 8004282:	e7fe      	b.n	8004282 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004284:	f000 fbfe 	bl	8004a84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004288:	4b38      	ldr	r3, [pc, #224]	; (800436c <xTaskResumeAll+0x114>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3b01      	subs	r3, #1
 800428e:	4a37      	ldr	r2, [pc, #220]	; (800436c <xTaskResumeAll+0x114>)
 8004290:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004292:	4b36      	ldr	r3, [pc, #216]	; (800436c <xTaskResumeAll+0x114>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d161      	bne.n	800435e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800429a:	4b35      	ldr	r3, [pc, #212]	; (8004370 <xTaskResumeAll+0x118>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d05d      	beq.n	800435e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042a2:	e02e      	b.n	8004302 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a4:	4b33      	ldr	r3, [pc, #204]	; (8004374 <xTaskResumeAll+0x11c>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3318      	adds	r3, #24
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fd72 	bl	8003d9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3304      	adds	r3, #4
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fd6d 	bl	8003d9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	2201      	movs	r2, #1
 80042c6:	409a      	lsls	r2, r3
 80042c8:	4b2b      	ldr	r3, [pc, #172]	; (8004378 <xTaskResumeAll+0x120>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	4a2a      	ldr	r2, [pc, #168]	; (8004378 <xTaskResumeAll+0x120>)
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4a27      	ldr	r2, [pc, #156]	; (800437c <xTaskResumeAll+0x124>)
 80042e0:	441a      	add	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3304      	adds	r3, #4
 80042e6:	4619      	mov	r1, r3
 80042e8:	4610      	mov	r0, r2
 80042ea:	f7ff fcf9 	bl	8003ce0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f2:	4b23      	ldr	r3, [pc, #140]	; (8004380 <xTaskResumeAll+0x128>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d302      	bcc.n	8004302 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80042fc:	4b21      	ldr	r3, [pc, #132]	; (8004384 <xTaskResumeAll+0x12c>)
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004302:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <xTaskResumeAll+0x11c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1cc      	bne.n	80042a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004310:	f000 fa08 	bl	8004724 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004314:	4b1c      	ldr	r3, [pc, #112]	; (8004388 <xTaskResumeAll+0x130>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d010      	beq.n	8004342 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004320:	f000 f836 	bl	8004390 <xTaskIncrementTick>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800432a:	4b16      	ldr	r3, [pc, #88]	; (8004384 <xTaskResumeAll+0x12c>)
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3b01      	subs	r3, #1
 8004334:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f1      	bne.n	8004320 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800433c:	4b12      	ldr	r3, [pc, #72]	; (8004388 <xTaskResumeAll+0x130>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <xTaskResumeAll+0x12c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800434a:	2301      	movs	r3, #1
 800434c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800434e:	4b0f      	ldr	r3, [pc, #60]	; (800438c <xTaskResumeAll+0x134>)
 8004350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800435e:	f000 fbc1 	bl	8004ae4 <vPortExitCritical>

	return xAlreadyYielded;
 8004362:	68bb      	ldr	r3, [r7, #8]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	2000053c 	.word	0x2000053c
 8004370:	20000514 	.word	0x20000514
 8004374:	200004d4 	.word	0x200004d4
 8004378:	2000051c 	.word	0x2000051c
 800437c:	20000418 	.word	0x20000418
 8004380:	20000414 	.word	0x20000414
 8004384:	20000528 	.word	0x20000528
 8004388:	20000524 	.word	0x20000524
 800438c:	e000ed04 	.word	0xe000ed04

08004390 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800439a:	4b4e      	ldr	r3, [pc, #312]	; (80044d4 <xTaskIncrementTick+0x144>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f040 808e 	bne.w	80044c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043a4:	4b4c      	ldr	r3, [pc, #304]	; (80044d8 <xTaskIncrementTick+0x148>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3301      	adds	r3, #1
 80043aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043ac:	4a4a      	ldr	r2, [pc, #296]	; (80044d8 <xTaskIncrementTick+0x148>)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d120      	bne.n	80043fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80043b8:	4b48      	ldr	r3, [pc, #288]	; (80044dc <xTaskIncrementTick+0x14c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	603b      	str	r3, [r7, #0]
}
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <xTaskIncrementTick+0x46>
 80043d8:	4b40      	ldr	r3, [pc, #256]	; (80044dc <xTaskIncrementTick+0x14c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	4b40      	ldr	r3, [pc, #256]	; (80044e0 <xTaskIncrementTick+0x150>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a3e      	ldr	r2, [pc, #248]	; (80044dc <xTaskIncrementTick+0x14c>)
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	4a3e      	ldr	r2, [pc, #248]	; (80044e0 <xTaskIncrementTick+0x150>)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	4b3d      	ldr	r3, [pc, #244]	; (80044e4 <xTaskIncrementTick+0x154>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	4a3c      	ldr	r2, [pc, #240]	; (80044e4 <xTaskIncrementTick+0x154>)
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	f000 f995 	bl	8004724 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043fa:	4b3b      	ldr	r3, [pc, #236]	; (80044e8 <xTaskIncrementTick+0x158>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	429a      	cmp	r2, r3
 8004402:	d348      	bcc.n	8004496 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004404:	4b35      	ldr	r3, [pc, #212]	; (80044dc <xTaskIncrementTick+0x14c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d104      	bne.n	8004418 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800440e:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <xTaskIncrementTick+0x158>)
 8004410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004414:	601a      	str	r2, [r3, #0]
					break;
 8004416:	e03e      	b.n	8004496 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004418:	4b30      	ldr	r3, [pc, #192]	; (80044dc <xTaskIncrementTick+0x14c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	429a      	cmp	r2, r3
 800442e:	d203      	bcs.n	8004438 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004430:	4a2d      	ldr	r2, [pc, #180]	; (80044e8 <xTaskIncrementTick+0x158>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004436:	e02e      	b.n	8004496 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	3304      	adds	r3, #4
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fcac 	bl	8003d9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	2b00      	cmp	r3, #0
 8004448:	d004      	beq.n	8004454 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	3318      	adds	r3, #24
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fca3 	bl	8003d9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	2201      	movs	r2, #1
 800445a:	409a      	lsls	r2, r3
 800445c:	4b23      	ldr	r3, [pc, #140]	; (80044ec <xTaskIncrementTick+0x15c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4313      	orrs	r3, r2
 8004462:	4a22      	ldr	r2, [pc, #136]	; (80044ec <xTaskIncrementTick+0x15c>)
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4a1f      	ldr	r2, [pc, #124]	; (80044f0 <xTaskIncrementTick+0x160>)
 8004474:	441a      	add	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	3304      	adds	r3, #4
 800447a:	4619      	mov	r1, r3
 800447c:	4610      	mov	r0, r2
 800447e:	f7ff fc2f 	bl	8003ce0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004486:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <xTaskIncrementTick+0x164>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	429a      	cmp	r2, r3
 800448e:	d3b9      	bcc.n	8004404 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004490:	2301      	movs	r3, #1
 8004492:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004494:	e7b6      	b.n	8004404 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004496:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <xTaskIncrementTick+0x164>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449c:	4914      	ldr	r1, [pc, #80]	; (80044f0 <xTaskIncrementTick+0x160>)
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d901      	bls.n	80044b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80044ae:	2301      	movs	r3, #1
 80044b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <xTaskIncrementTick+0x168>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80044ba:	2301      	movs	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e004      	b.n	80044ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80044c0:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <xTaskIncrementTick+0x16c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3301      	adds	r3, #1
 80044c6:	4a0d      	ldr	r2, [pc, #52]	; (80044fc <xTaskIncrementTick+0x16c>)
 80044c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80044ca:	697b      	ldr	r3, [r7, #20]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	2000053c 	.word	0x2000053c
 80044d8:	20000518 	.word	0x20000518
 80044dc:	200004cc 	.word	0x200004cc
 80044e0:	200004d0 	.word	0x200004d0
 80044e4:	2000052c 	.word	0x2000052c
 80044e8:	20000534 	.word	0x20000534
 80044ec:	2000051c 	.word	0x2000051c
 80044f0:	20000418 	.word	0x20000418
 80044f4:	20000414 	.word	0x20000414
 80044f8:	20000528 	.word	0x20000528
 80044fc:	20000524 	.word	0x20000524

08004500 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004506:	4b27      	ldr	r3, [pc, #156]	; (80045a4 <vTaskSwitchContext+0xa4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800450e:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <vTaskSwitchContext+0xa8>)
 8004510:	2201      	movs	r2, #1
 8004512:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004514:	e03f      	b.n	8004596 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004516:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <vTaskSwitchContext+0xa8>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800451c:	4b23      	ldr	r3, [pc, #140]	; (80045ac <vTaskSwitchContext+0xac>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	fab3 f383 	clz	r3, r3
 8004528:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800452a:	7afb      	ldrb	r3, [r7, #11]
 800452c:	f1c3 031f 	rsb	r3, r3, #31
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	491f      	ldr	r1, [pc, #124]	; (80045b0 <vTaskSwitchContext+0xb0>)
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	607b      	str	r3, [r7, #4]
}
 8004558:	bf00      	nop
 800455a:	e7fe      	b.n	800455a <vTaskSwitchContext+0x5a>
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4a12      	ldr	r2, [pc, #72]	; (80045b0 <vTaskSwitchContext+0xb0>)
 8004568:	4413      	add	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	605a      	str	r2, [r3, #4]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	3308      	adds	r3, #8
 800457e:	429a      	cmp	r2, r3
 8004580:	d104      	bne.n	800458c <vTaskSwitchContext+0x8c>
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <vTaskSwitchContext+0xb4>)
 8004594:	6013      	str	r3, [r2, #0]
}
 8004596:	bf00      	nop
 8004598:	371c      	adds	r7, #28
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	2000053c 	.word	0x2000053c
 80045a8:	20000528 	.word	0x20000528
 80045ac:	2000051c 	.word	0x2000051c
 80045b0:	20000418 	.word	0x20000418
 80045b4:	20000414 	.word	0x20000414

080045b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045c0:	f000 f852 	bl	8004668 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045c4:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <prvIdleTask+0x28>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d9f9      	bls.n	80045c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <prvIdleTask+0x2c>)
 80045ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045dc:	e7f0      	b.n	80045c0 <prvIdleTask+0x8>
 80045de:	bf00      	nop
 80045e0:	20000418 	.word	0x20000418
 80045e4:	e000ed04 	.word	0xe000ed04

080045e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045ee:	2300      	movs	r3, #0
 80045f0:	607b      	str	r3, [r7, #4]
 80045f2:	e00c      	b.n	800460e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4a12      	ldr	r2, [pc, #72]	; (8004648 <prvInitialiseTaskLists+0x60>)
 8004600:	4413      	add	r3, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fb3f 	bl	8003c86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3301      	adds	r3, #1
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b06      	cmp	r3, #6
 8004612:	d9ef      	bls.n	80045f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004614:	480d      	ldr	r0, [pc, #52]	; (800464c <prvInitialiseTaskLists+0x64>)
 8004616:	f7ff fb36 	bl	8003c86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800461a:	480d      	ldr	r0, [pc, #52]	; (8004650 <prvInitialiseTaskLists+0x68>)
 800461c:	f7ff fb33 	bl	8003c86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004620:	480c      	ldr	r0, [pc, #48]	; (8004654 <prvInitialiseTaskLists+0x6c>)
 8004622:	f7ff fb30 	bl	8003c86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004626:	480c      	ldr	r0, [pc, #48]	; (8004658 <prvInitialiseTaskLists+0x70>)
 8004628:	f7ff fb2d 	bl	8003c86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800462c:	480b      	ldr	r0, [pc, #44]	; (800465c <prvInitialiseTaskLists+0x74>)
 800462e:	f7ff fb2a 	bl	8003c86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <prvInitialiseTaskLists+0x78>)
 8004634:	4a05      	ldr	r2, [pc, #20]	; (800464c <prvInitialiseTaskLists+0x64>)
 8004636:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <prvInitialiseTaskLists+0x7c>)
 800463a:	4a05      	ldr	r2, [pc, #20]	; (8004650 <prvInitialiseTaskLists+0x68>)
 800463c:	601a      	str	r2, [r3, #0]
}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000418 	.word	0x20000418
 800464c:	200004a4 	.word	0x200004a4
 8004650:	200004b8 	.word	0x200004b8
 8004654:	200004d4 	.word	0x200004d4
 8004658:	200004e8 	.word	0x200004e8
 800465c:	20000500 	.word	0x20000500
 8004660:	200004cc 	.word	0x200004cc
 8004664:	200004d0 	.word	0x200004d0

08004668 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800466e:	e019      	b.n	80046a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004670:	f000 fa08 	bl	8004a84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004674:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <prvCheckTasksWaitingTermination+0x50>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3304      	adds	r3, #4
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fb8a 	bl	8003d9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <prvCheckTasksWaitingTermination+0x54>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3b01      	subs	r3, #1
 800468c:	4a0b      	ldr	r2, [pc, #44]	; (80046bc <prvCheckTasksWaitingTermination+0x54>)
 800468e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <prvCheckTasksWaitingTermination+0x58>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3b01      	subs	r3, #1
 8004696:	4a0a      	ldr	r2, [pc, #40]	; (80046c0 <prvCheckTasksWaitingTermination+0x58>)
 8004698:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800469a:	f000 fa23 	bl	8004ae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f810 	bl	80046c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <prvCheckTasksWaitingTermination+0x58>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e1      	bne.n	8004670 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046ac:	bf00      	nop
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	200004e8 	.word	0x200004e8
 80046bc:	20000514 	.word	0x20000514
 80046c0:	200004fc 	.word	0x200004fc

080046c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d108      	bne.n	80046e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fb80 	bl	8004de0 <vPortFree>
				vPortFree( pxTCB );
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fb7d 	bl	8004de0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046e6:	e018      	b.n	800471a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d103      	bne.n	80046fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fb74 	bl	8004de0 <vPortFree>
	}
 80046f8:	e00f      	b.n	800471a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004700:	2b02      	cmp	r3, #2
 8004702:	d00a      	beq.n	800471a <prvDeleteTCB+0x56>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	60fb      	str	r3, [r7, #12]
}
 8004716:	bf00      	nop
 8004718:	e7fe      	b.n	8004718 <prvDeleteTCB+0x54>
	}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800472a:	4b0c      	ldr	r3, [pc, #48]	; (800475c <prvResetNextTaskUnblockTime+0x38>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d104      	bne.n	800473e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004734:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <prvResetNextTaskUnblockTime+0x3c>)
 8004736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800473a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800473c:	e008      	b.n	8004750 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473e:	4b07      	ldr	r3, [pc, #28]	; (800475c <prvResetNextTaskUnblockTime+0x38>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	4a04      	ldr	r2, [pc, #16]	; (8004760 <prvResetNextTaskUnblockTime+0x3c>)
 800474e:	6013      	str	r3, [r2, #0]
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	200004cc 	.word	0x200004cc
 8004760:	20000534 	.word	0x20000534

08004764 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800476e:	4b29      	ldr	r3, [pc, #164]	; (8004814 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004774:	4b28      	ldr	r3, [pc, #160]	; (8004818 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3304      	adds	r3, #4
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fb0d 	bl	8003d9a <uxListRemove>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10b      	bne.n	800479e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004786:	4b24      	ldr	r3, [pc, #144]	; (8004818 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	2201      	movs	r2, #1
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43da      	mvns	r2, r3
 8004794:	4b21      	ldr	r3, [pc, #132]	; (800481c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4013      	ands	r3, r2
 800479a:	4a20      	ldr	r2, [pc, #128]	; (800481c <prvAddCurrentTaskToDelayedList+0xb8>)
 800479c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a4:	d10a      	bne.n	80047bc <prvAddCurrentTaskToDelayedList+0x58>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ac:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	481a      	ldr	r0, [pc, #104]	; (8004820 <prvAddCurrentTaskToDelayedList+0xbc>)
 80047b6:	f7ff fa93 	bl	8003ce0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047ba:	e026      	b.n	800480a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4413      	add	r3, r2
 80047c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047c4:	4b14      	ldr	r3, [pc, #80]	; (8004818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d209      	bcs.n	80047e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047d4:	4b13      	ldr	r3, [pc, #76]	; (8004824 <prvAddCurrentTaskToDelayedList+0xc0>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3304      	adds	r3, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f7ff faa1 	bl	8003d28 <vListInsert>
}
 80047e6:	e010      	b.n	800480a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <prvAddCurrentTaskToDelayedList+0xc4>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f7ff fa97 	bl	8003d28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047fa:	4b0c      	ldr	r3, [pc, #48]	; (800482c <prvAddCurrentTaskToDelayedList+0xc8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	429a      	cmp	r2, r3
 8004802:	d202      	bcs.n	800480a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004804:	4a09      	ldr	r2, [pc, #36]	; (800482c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	6013      	str	r3, [r2, #0]
}
 800480a:	bf00      	nop
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20000518 	.word	0x20000518
 8004818:	20000414 	.word	0x20000414
 800481c:	2000051c 	.word	0x2000051c
 8004820:	20000500 	.word	0x20000500
 8004824:	200004d0 	.word	0x200004d0
 8004828:	200004cc 	.word	0x200004cc
 800482c:	20000534 	.word	0x20000534

08004830 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3b04      	subs	r3, #4
 8004840:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3b04      	subs	r3, #4
 800484e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f023 0201 	bic.w	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3b04      	subs	r3, #4
 800485e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004860:	4a0c      	ldr	r2, [pc, #48]	; (8004894 <pxPortInitialiseStack+0x64>)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3b14      	subs	r3, #20
 800486a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3b04      	subs	r3, #4
 8004876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f06f 0202 	mvn.w	r2, #2
 800487e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3b20      	subs	r3, #32
 8004884:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004886:	68fb      	ldr	r3, [r7, #12]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	08004899 	.word	0x08004899

08004898 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048a2:	4b12      	ldr	r3, [pc, #72]	; (80048ec <prvTaskExitError+0x54>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048aa:	d00a      	beq.n	80048c2 <prvTaskExitError+0x2a>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	60fb      	str	r3, [r7, #12]
}
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <prvTaskExitError+0x28>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	60bb      	str	r3, [r7, #8]
}
 80048d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048d6:	bf00      	nop
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0fc      	beq.n	80048d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048de:	bf00      	nop
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	2000000c 	.word	0x2000000c

080048f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048f0:	4b07      	ldr	r3, [pc, #28]	; (8004910 <pxCurrentTCBConst2>)
 80048f2:	6819      	ldr	r1, [r3, #0]
 80048f4:	6808      	ldr	r0, [r1, #0]
 80048f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fa:	f380 8809 	msr	PSP, r0
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f380 8811 	msr	BASEPRI, r0
 800490a:	4770      	bx	lr
 800490c:	f3af 8000 	nop.w

08004910 <pxCurrentTCBConst2>:
 8004910:	20000414 	.word	0x20000414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop

08004918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004918:	4808      	ldr	r0, [pc, #32]	; (800493c <prvPortStartFirstTask+0x24>)
 800491a:	6800      	ldr	r0, [r0, #0]
 800491c:	6800      	ldr	r0, [r0, #0]
 800491e:	f380 8808 	msr	MSP, r0
 8004922:	f04f 0000 	mov.w	r0, #0
 8004926:	f380 8814 	msr	CONTROL, r0
 800492a:	b662      	cpsie	i
 800492c:	b661      	cpsie	f
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	df00      	svc	0
 8004938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800493a:	bf00      	nop
 800493c:	e000ed08 	.word	0xe000ed08

08004940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004946:	4b46      	ldr	r3, [pc, #280]	; (8004a60 <xPortStartScheduler+0x120>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a46      	ldr	r2, [pc, #280]	; (8004a64 <xPortStartScheduler+0x124>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d10a      	bne.n	8004966 <xPortStartScheduler+0x26>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	613b      	str	r3, [r7, #16]
}
 8004962:	bf00      	nop
 8004964:	e7fe      	b.n	8004964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004966:	4b3e      	ldr	r3, [pc, #248]	; (8004a60 <xPortStartScheduler+0x120>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a3f      	ldr	r2, [pc, #252]	; (8004a68 <xPortStartScheduler+0x128>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d10a      	bne.n	8004986 <xPortStartScheduler+0x46>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	60fb      	str	r3, [r7, #12]
}
 8004982:	bf00      	nop
 8004984:	e7fe      	b.n	8004984 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004986:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <xPortStartScheduler+0x12c>)
 8004988:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	22ff      	movs	r2, #255	; 0xff
 8004996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <xPortStartScheduler+0x130>)
 80049ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049ae:	4b31      	ldr	r3, [pc, #196]	; (8004a74 <xPortStartScheduler+0x134>)
 80049b0:	2207      	movs	r2, #7
 80049b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049b4:	e009      	b.n	80049ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80049b6:	4b2f      	ldr	r3, [pc, #188]	; (8004a74 <xPortStartScheduler+0x134>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	4a2d      	ldr	r2, [pc, #180]	; (8004a74 <xPortStartScheduler+0x134>)
 80049be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	2b80      	cmp	r3, #128	; 0x80
 80049d4:	d0ef      	beq.n	80049b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049d6:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <xPortStartScheduler+0x134>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f1c3 0307 	rsb	r3, r3, #7
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d00a      	beq.n	80049f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	60bb      	str	r3, [r7, #8]
}
 80049f4:	bf00      	nop
 80049f6:	e7fe      	b.n	80049f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049f8:	4b1e      	ldr	r3, [pc, #120]	; (8004a74 <xPortStartScheduler+0x134>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	021b      	lsls	r3, r3, #8
 80049fe:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <xPortStartScheduler+0x134>)
 8004a00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a02:	4b1c      	ldr	r3, [pc, #112]	; (8004a74 <xPortStartScheduler+0x134>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a0a:	4a1a      	ldr	r2, [pc, #104]	; (8004a74 <xPortStartScheduler+0x134>)
 8004a0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a16:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <xPortStartScheduler+0x138>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a17      	ldr	r2, [pc, #92]	; (8004a78 <xPortStartScheduler+0x138>)
 8004a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a22:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <xPortStartScheduler+0x138>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a14      	ldr	r2, [pc, #80]	; (8004a78 <xPortStartScheduler+0x138>)
 8004a28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a2e:	f000 f8dd 	bl	8004bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <xPortStartScheduler+0x13c>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a38:	f000 f8fc 	bl	8004c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a3c:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <xPortStartScheduler+0x140>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a0f      	ldr	r2, [pc, #60]	; (8004a80 <xPortStartScheduler+0x140>)
 8004a42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a48:	f7ff ff66 	bl	8004918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a4c:	f7ff fd58 	bl	8004500 <vTaskSwitchContext>
	prvTaskExitError();
 8004a50:	f7ff ff22 	bl	8004898 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	e000ed00 	.word	0xe000ed00
 8004a64:	410fc271 	.word	0x410fc271
 8004a68:	410fc270 	.word	0x410fc270
 8004a6c:	e000e400 	.word	0xe000e400
 8004a70:	20000540 	.word	0x20000540
 8004a74:	20000544 	.word	0x20000544
 8004a78:	e000ed20 	.word	0xe000ed20
 8004a7c:	2000000c 	.word	0x2000000c
 8004a80:	e000ef34 	.word	0xe000ef34

08004a84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	607b      	str	r3, [r7, #4]
}
 8004a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <vPortEnterCritical+0x58>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	4a0d      	ldr	r2, [pc, #52]	; (8004adc <vPortEnterCritical+0x58>)
 8004aa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <vPortEnterCritical+0x58>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d10f      	bne.n	8004ad0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <vPortEnterCritical+0x5c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	603b      	str	r3, [r7, #0]
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <vPortEnterCritical+0x4a>
	}
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	2000000c 	.word	0x2000000c
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004aea:	4b12      	ldr	r3, [pc, #72]	; (8004b34 <vPortExitCritical+0x50>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <vPortExitCritical+0x24>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	607b      	str	r3, [r7, #4]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <vPortExitCritical+0x50>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <vPortExitCritical+0x50>)
 8004b10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b12:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <vPortExitCritical+0x50>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <vPortExitCritical+0x42>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	2000000c 	.word	0x2000000c
	...

08004b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b40:	f3ef 8009 	mrs	r0, PSP
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <pxCurrentTCBConst>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	f01e 0f10 	tst.w	lr, #16
 8004b50:	bf08      	it	eq
 8004b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5a:	6010      	str	r0, [r2, #0]
 8004b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b64:	f380 8811 	msr	BASEPRI, r0
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f7ff fcc6 	bl	8004500 <vTaskSwitchContext>
 8004b74:	f04f 0000 	mov.w	r0, #0
 8004b78:	f380 8811 	msr	BASEPRI, r0
 8004b7c:	bc09      	pop	{r0, r3}
 8004b7e:	6819      	ldr	r1, [r3, #0]
 8004b80:	6808      	ldr	r0, [r1, #0]
 8004b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b86:	f01e 0f10 	tst.w	lr, #16
 8004b8a:	bf08      	it	eq
 8004b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b90:	f380 8809 	msr	PSP, r0
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	f3af 8000 	nop.w

08004ba0 <pxCurrentTCBConst>:
 8004ba0:	20000414 	.word	0x20000414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	607b      	str	r3, [r7, #4]
}
 8004bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004bc2:	f7ff fbe5 	bl	8004390 <xTaskIncrementTick>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <SysTick_Handler+0x40>)
 8004bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f383 8811 	msr	BASEPRI, r3
}
 8004bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <vPortSetupTimerInterrupt+0x34>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <vPortSetupTimerInterrupt+0x38>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <vPortSetupTimerInterrupt+0x3c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <vPortSetupTimerInterrupt+0x40>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	099b      	lsrs	r3, r3, #6
 8004c08:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <vPortSetupTimerInterrupt+0x44>)
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c0e:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <vPortSetupTimerInterrupt+0x34>)
 8004c10:	2207      	movs	r2, #7
 8004c12:	601a      	str	r2, [r3, #0]
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	e000e010 	.word	0xe000e010
 8004c24:	e000e018 	.word	0xe000e018
 8004c28:	20000000 	.word	0x20000000
 8004c2c:	10624dd3 	.word	0x10624dd3
 8004c30:	e000e014 	.word	0xe000e014

08004c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c44 <vPortEnableVFP+0x10>
 8004c38:	6801      	ldr	r1, [r0, #0]
 8004c3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c3e:	6001      	str	r1, [r0, #0]
 8004c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c42:	bf00      	nop
 8004c44:	e000ed88 	.word	0xe000ed88

08004c48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08a      	sub	sp, #40	; 0x28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c54:	f7ff faf2 	bl	800423c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c58:	4b5b      	ldr	r3, [pc, #364]	; (8004dc8 <pvPortMalloc+0x180>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c60:	f000 f920 	bl	8004ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c64:	4b59      	ldr	r3, [pc, #356]	; (8004dcc <pvPortMalloc+0x184>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f040 8093 	bne.w	8004d98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01d      	beq.n	8004cb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c78:	2208      	movs	r2, #8
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d014      	beq.n	8004cb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f023 0307 	bic.w	r3, r3, #7
 8004c90:	3308      	adds	r3, #8
 8004c92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <pvPortMalloc+0x6c>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	617b      	str	r3, [r7, #20]
}
 8004cb0:	bf00      	nop
 8004cb2:	e7fe      	b.n	8004cb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d06e      	beq.n	8004d98 <pvPortMalloc+0x150>
 8004cba:	4b45      	ldr	r3, [pc, #276]	; (8004dd0 <pvPortMalloc+0x188>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d869      	bhi.n	8004d98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004cc4:	4b43      	ldr	r3, [pc, #268]	; (8004dd4 <pvPortMalloc+0x18c>)
 8004cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cc8:	4b42      	ldr	r3, [pc, #264]	; (8004dd4 <pvPortMalloc+0x18c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cce:	e004      	b.n	8004cda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d903      	bls.n	8004cec <pvPortMalloc+0xa4>
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f1      	bne.n	8004cd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cec:	4b36      	ldr	r3, [pc, #216]	; (8004dc8 <pvPortMalloc+0x180>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d050      	beq.n	8004d98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2208      	movs	r2, #8
 8004cfc:	4413      	add	r3, r2
 8004cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	1ad2      	subs	r2, r2, r3
 8004d10:	2308      	movs	r3, #8
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d91f      	bls.n	8004d58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <pvPortMalloc+0xf8>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	613b      	str	r3, [r7, #16]
}
 8004d3c:	bf00      	nop
 8004d3e:	e7fe      	b.n	8004d3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	1ad2      	subs	r2, r2, r3
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d52:	69b8      	ldr	r0, [r7, #24]
 8004d54:	f000 f908 	bl	8004f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d58:	4b1d      	ldr	r3, [pc, #116]	; (8004dd0 <pvPortMalloc+0x188>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	4a1b      	ldr	r2, [pc, #108]	; (8004dd0 <pvPortMalloc+0x188>)
 8004d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d66:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <pvPortMalloc+0x188>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <pvPortMalloc+0x190>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d203      	bcs.n	8004d7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d72:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <pvPortMalloc+0x188>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a18      	ldr	r2, [pc, #96]	; (8004dd8 <pvPortMalloc+0x190>)
 8004d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <pvPortMalloc+0x184>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d8e:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <pvPortMalloc+0x194>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3301      	adds	r3, #1
 8004d94:	4a11      	ldr	r2, [pc, #68]	; (8004ddc <pvPortMalloc+0x194>)
 8004d96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d98:	f7ff fa5e 	bl	8004258 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <pvPortMalloc+0x174>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	60fb      	str	r3, [r7, #12]
}
 8004db8:	bf00      	nop
 8004dba:	e7fe      	b.n	8004dba <pvPortMalloc+0x172>
	return pvReturn;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3728      	adds	r7, #40	; 0x28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20004150 	.word	0x20004150
 8004dcc:	20004164 	.word	0x20004164
 8004dd0:	20004154 	.word	0x20004154
 8004dd4:	20004148 	.word	0x20004148
 8004dd8:	20004158 	.word	0x20004158
 8004ddc:	2000415c 	.word	0x2000415c

08004de0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d04d      	beq.n	8004e8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004df2:	2308      	movs	r3, #8
 8004df4:	425b      	negs	r3, r3
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4413      	add	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <vPortFree+0xb8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <vPortFree+0x44>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	60fb      	str	r3, [r7, #12]
}
 8004e20:	bf00      	nop
 8004e22:	e7fe      	b.n	8004e22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <vPortFree+0x62>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	60bb      	str	r3, [r7, #8]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <vPortFree+0xb8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01e      	beq.n	8004e8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d11a      	bne.n	8004e8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <vPortFree+0xb8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	43db      	mvns	r3, r3
 8004e62:	401a      	ands	r2, r3
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e68:	f7ff f9e8 	bl	800423c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <vPortFree+0xbc>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4413      	add	r3, r2
 8004e76:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <vPortFree+0xbc>)
 8004e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e7a:	6938      	ldr	r0, [r7, #16]
 8004e7c:	f000 f874 	bl	8004f68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <vPortFree+0xc0>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3301      	adds	r3, #1
 8004e86:	4a06      	ldr	r2, [pc, #24]	; (8004ea0 <vPortFree+0xc0>)
 8004e88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e8a:	f7ff f9e5 	bl	8004258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e8e:	bf00      	nop
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20004164 	.word	0x20004164
 8004e9c:	20004154 	.word	0x20004154
 8004ea0:	20004160 	.word	0x20004160

08004ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004eaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004eb0:	4b27      	ldr	r3, [pc, #156]	; (8004f50 <prvHeapInit+0xac>)
 8004eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00c      	beq.n	8004ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3307      	adds	r3, #7
 8004ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0307 	bic.w	r3, r3, #7
 8004eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	4a1f      	ldr	r2, [pc, #124]	; (8004f50 <prvHeapInit+0xac>)
 8004ed4:	4413      	add	r3, r2
 8004ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004edc:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <prvHeapInit+0xb0>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ee2:	4b1c      	ldr	r3, [pc, #112]	; (8004f54 <prvHeapInit+0xb0>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	4413      	add	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0307 	bic.w	r3, r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <prvHeapInit+0xb4>)
 8004f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f06:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <prvHeapInit+0xb4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f0e:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <prvHeapInit+0xb4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <prvHeapInit+0xb4>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <prvHeapInit+0xb8>)
 8004f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <prvHeapInit+0xbc>)
 8004f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <prvHeapInit+0xc0>)
 8004f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f42:	601a      	str	r2, [r3, #0]
}
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	20000548 	.word	0x20000548
 8004f54:	20004148 	.word	0x20004148
 8004f58:	20004150 	.word	0x20004150
 8004f5c:	20004158 	.word	0x20004158
 8004f60:	20004154 	.word	0x20004154
 8004f64:	20004164 	.word	0x20004164

08004f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f70:	4b28      	ldr	r3, [pc, #160]	; (8005014 <prvInsertBlockIntoFreeList+0xac>)
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e002      	b.n	8004f7c <prvInsertBlockIntoFreeList+0x14>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d8f7      	bhi.n	8004f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	4413      	add	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d108      	bne.n	8004faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	441a      	add	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	441a      	add	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d118      	bne.n	8004ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b15      	ldr	r3, [pc, #84]	; (8005018 <prvInsertBlockIntoFreeList+0xb0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d00d      	beq.n	8004fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	441a      	add	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e008      	b.n	8004ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <prvInsertBlockIntoFreeList+0xb0>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e003      	b.n	8004ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d002      	beq.n	8005006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20004148 	.word	0x20004148
 8005018:	20004150 	.word	0x20004150

0800501c <__libc_init_array>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	4d0d      	ldr	r5, [pc, #52]	; (8005054 <__libc_init_array+0x38>)
 8005020:	4c0d      	ldr	r4, [pc, #52]	; (8005058 <__libc_init_array+0x3c>)
 8005022:	1b64      	subs	r4, r4, r5
 8005024:	10a4      	asrs	r4, r4, #2
 8005026:	2600      	movs	r6, #0
 8005028:	42a6      	cmp	r6, r4
 800502a:	d109      	bne.n	8005040 <__libc_init_array+0x24>
 800502c:	4d0b      	ldr	r5, [pc, #44]	; (800505c <__libc_init_array+0x40>)
 800502e:	4c0c      	ldr	r4, [pc, #48]	; (8005060 <__libc_init_array+0x44>)
 8005030:	f000 f820 	bl	8005074 <_init>
 8005034:	1b64      	subs	r4, r4, r5
 8005036:	10a4      	asrs	r4, r4, #2
 8005038:	2600      	movs	r6, #0
 800503a:	42a6      	cmp	r6, r4
 800503c:	d105      	bne.n	800504a <__libc_init_array+0x2e>
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	f855 3b04 	ldr.w	r3, [r5], #4
 8005044:	4798      	blx	r3
 8005046:	3601      	adds	r6, #1
 8005048:	e7ee      	b.n	8005028 <__libc_init_array+0xc>
 800504a:	f855 3b04 	ldr.w	r3, [r5], #4
 800504e:	4798      	blx	r3
 8005050:	3601      	adds	r6, #1
 8005052:	e7f2      	b.n	800503a <__libc_init_array+0x1e>
 8005054:	0800510c 	.word	0x0800510c
 8005058:	0800510c 	.word	0x0800510c
 800505c:	0800510c 	.word	0x0800510c
 8005060:	08005114 	.word	0x08005114

08005064 <memset>:
 8005064:	4402      	add	r2, r0
 8005066:	4603      	mov	r3, r0
 8005068:	4293      	cmp	r3, r2
 800506a:	d100      	bne.n	800506e <memset+0xa>
 800506c:	4770      	bx	lr
 800506e:	f803 1b01 	strb.w	r1, [r3], #1
 8005072:	e7f9      	b.n	8005068 <memset+0x4>

08005074 <_init>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr

08005080 <_fini>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr
