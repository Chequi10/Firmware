
rtosC++.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a0  080059a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080059a0  080059a0  000159a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a8  080059a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a8  080059a8  000159a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059ac  080059ac  000159ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080059b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004114  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004188  20004188  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014aaa  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ddf  00000000  00000000  00034b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  00037930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  00038bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005c70  00000000  00000000  00039d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a21  00000000  00000000  0003f9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e708b  00000000  00000000  000533d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a464  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005590  00000000  00000000  0013a4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800584c 	.word	0x0800584c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800584c 	.word	0x0800584c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	200000e4 	.word	0x200000e4

080005c8 <_Z6Task_1Pv>:
	 return len;
}


void Task_1( void* taskParmPtr )
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	    while( 1 )
    {
	    	for(a=49;a<58;a++)
 80005d0:	4b23      	ldr	r3, [pc, #140]	; (8000660 <_Z6Task_1Pv+0x98>)
 80005d2:	2231      	movs	r2, #49	; 0x31
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <_Z6Task_1Pv+0x98>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b39      	cmp	r3, #57	; 0x39
 80005dc:	dcf8      	bgt.n	80005d0 <_Z6Task_1Pv+0x8>
	    		  {  TxData[0] = a;
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <_Z6Task_1Pv+0x98>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <_Z6Task_1Pv+0x9c>)
 80005e6:	701a      	strb	r2, [r3, #0]

	    				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <_Z6Task_1Pv+0xa0>)
 80005ea:	4a1e      	ldr	r2, [pc, #120]	; (8000664 <_Z6Task_1Pv+0x9c>)
 80005ec:	491f      	ldr	r1, [pc, #124]	; (800066c <_Z6Task_1Pv+0xa4>)
 80005ee:	4820      	ldr	r0, [pc, #128]	; (8000670 <_Z6Task_1Pv+0xa8>)
 80005f0:	f000 fe43 	bl	800127a <HAL_CAN_AddTxMessage>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d005      	beq.n	8000610 <_Z6Task_1Pv+0x48>
	    		  		 	{
	    					   HAL_GPIO_TogglePin(Amarillo_GPIO_Port, Amarillo_Pin);
 8000604:	2101      	movs	r1, #1
 8000606:	481b      	ldr	r0, [pc, #108]	; (8000674 <_Z6Task_1Pv+0xac>)
 8000608:	f001 fcfb 	bl	8002002 <HAL_GPIO_TogglePin>
	    		  		 	   Error_Handler ();
 800060c:	f000 fa76 	bl	8000afc <Error_Handler>
	    		  		 	}
	    				printf("\nCAN2 RX:- CANID: %d, LEN: %d  RxData:%s\n\r",(char *)RxHeader2.StdId,( char *)RxHeader2.DLC,(uint8_t *)TxData);
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <_Z6Task_1Pv+0xb0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <_Z6Task_1Pv+0xb0>)
 8000618:	691b      	ldr	r3, [r3, #16]
 800061a:	461a      	mov	r2, r3
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <_Z6Task_1Pv+0x9c>)
 800061e:	4817      	ldr	r0, [pc, #92]	; (800067c <_Z6Task_1Pv+0xb4>)
 8000620:	f004 f986 	bl	8004930 <iprintf>
	    				HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	4813      	ldr	r0, [pc, #76]	; (8000674 <_Z6Task_1Pv+0xac>)
 8000628:	f001 fceb 	bl	8002002 <HAL_GPIO_TogglePin>
	    				osDelay(500);
 800062c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000630:	f002 ff67 	bl	8003502 <osDelay>


	    		  if (datacheck)
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <_Z6Task_1Pv+0xb8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00b      	beq.n	8000654 <_Z6Task_1Pv+0x8c>
	    		  {
	    			  HAL_GPIO_TogglePin(Rojo_GPIO_Port, Rojo_Pin);
 800063c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <_Z6Task_1Pv+0xac>)
 8000642:	f001 fcde 	bl	8002002 <HAL_GPIO_TogglePin>
	    			  osDelay(500);
 8000646:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800064a:	f002 ff5a 	bl	8003502 <osDelay>

	    			  datacheck = 0;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <_Z6Task_1Pv+0xb8>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
	    	for(a=49;a<58;a++)
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <_Z6Task_1Pv+0x98>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	4a01      	ldr	r2, [pc, #4]	; (8000660 <_Z6Task_1Pv+0x98>)
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	e7ba      	b.n	80005d6 <_Z6Task_1Pv+0xe>
 8000660:	200003cc 	.word	0x200003cc
 8000664:	200003c0 	.word	0x200003c0
 8000668:	200003bc 	.word	0x200003bc
 800066c:	20000388 	.word	0x20000388
 8000670:	200002e4 	.word	0x200002e4
 8000674:	40020400 	.word	0x40020400
 8000678:	200003a0 	.word	0x200003a0
 800067c:	08005874 	.word	0x08005874
 8000680:	200003c8 	.word	0x200003c8

08000684 <_Z6Task_2Pv>:

    //vTaskDelete( NULL );
}

void Task_2( void* taskParmPtr )
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	    while( 1 )
    {
       HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <_Z6Task_2Pv+0x18>)
 8000690:	f001 fcb7 	bl	8002002 <HAL_GPIO_TogglePin>
       osDelay(50);
 8000694:	2032      	movs	r0, #50	; 0x32
 8000696:	f002 ff34 	bl	8003502 <osDelay>
       HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 800069a:	e7f7      	b.n	800068c <_Z6Task_2Pv+0x8>
 800069c:	40020400 	.word	0x40020400

080006a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
    }
}


void  HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan2)
  {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Amarillo_GPIO_Port, Amarillo_Pin);
 80006a8:	2101      	movs	r1, #1
 80006aa:	480f      	ldr	r0, [pc, #60]	; (80006e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80006ac:	f001 fca9 	bl	8002002 <HAL_GPIO_TogglePin>

	if (HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO0, &RxHeader2, RxData) != HAL_OK)
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80006b4:	2100      	movs	r1, #0
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 feba 	bl	8001430 <HAL_CAN_GetRxMessage>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	bf14      	ite	ne
 80006c2:	2301      	movne	r3, #1
 80006c4:	2300      	moveq	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	  {
	    Error_Handler();
 80006cc:	f000 fa16 	bl	8000afc <Error_Handler>
	  }

	  if ((RxHeader2.StdId == 146))
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b92      	cmp	r3, #146	; 0x92
 80006d6:	d102      	bne.n	80006de <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
	  {
		  datacheck = 1;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80006da:	2201      	movs	r2, #1
 80006dc:	601a      	str	r2, [r3, #0]
	  }
  }
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40020400 	.word	0x40020400
 80006ec:	200003c4 	.word	0x200003c4
 80006f0:	200003a0 	.word	0x200003a0
 80006f4:	200003c8 	.word	0x200003c8

080006f8 <_Z6configv>:

void config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af02      	add	r7, sp, #8
	  BaseType_t res1 =
           xTaskCreate(
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <_Z6configv+0x6c>)
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	2301      	movs	r3, #1
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2300      	movs	r3, #0
 8000708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800070c:	4916      	ldr	r1, [pc, #88]	; (8000768 <_Z6configv+0x70>)
 800070e:	4817      	ldr	r0, [pc, #92]	; (800076c <_Z6configv+0x74>)
 8000710:	f003 f81c 	bl	800374c <xTaskCreate>
 8000714:	60f8      	str	r0, [r7, #12]
               tskIDLE_PRIORITY+1,         // Prioridad de la tarea
    	   &task_handle_task_1            // Puntero a la tarea creada en el sistema
           );

      BaseType_t res2 =
           xTaskCreate(
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <_Z6configv+0x78>)
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	2301      	movs	r3, #1
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2300      	movs	r3, #0
 8000720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000724:	4913      	ldr	r1, [pc, #76]	; (8000774 <_Z6configv+0x7c>)
 8000726:	4814      	ldr	r0, [pc, #80]	; (8000778 <_Z6configv+0x80>)
 8000728:	f003 f810 	bl	800374c <xTaskCreate>
 800072c:	60b8      	str	r0, [r7, #8]
               tskIDLE_PRIORITY+1,         // Prioridad de la tarea
    	   &task_handle_task_2           // Puntero a la tarea creada en el sistema
           );


      configASSERT( res1 == pdPASS && res2 == pdPASS);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d104      	bne.n	800073e <_Z6configv+0x46>
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d101      	bne.n	800073e <_Z6configv+0x46>
 800073a:	2301      	movs	r3, #1
 800073c:	e000      	b.n	8000740 <_Z6configv+0x48>
 800073e:	2300      	movs	r3, #0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d10a      	bne.n	800075a <_Z6configv+0x62>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000748:	f383 8811 	msr	BASEPRI, r3
 800074c:	f3bf 8f6f 	isb	sy
 8000750:	f3bf 8f4f 	dsb	sy
 8000754:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000756:	bf00      	nop
 8000758:	e7fe      	b.n	8000758 <_Z6configv+0x60>
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000380 	.word	0x20000380
 8000768:	080058a0 	.word	0x080058a0
 800076c:	080005c9 	.word	0x080005c9
 8000770:	20000384 	.word	0x20000384
 8000774:	080058a8 	.word	0x080058a8
 8000778:	08000685 	.word	0x08000685

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b5b0      	push	{r4, r5, r7, lr}
 800077e:	b08e      	sub	sp, #56	; 0x38
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000782:	f000 fc3d 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000786:	f000 f839 	bl	80007fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f943 	bl	8000a14 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 800078e:	f000 f89f 	bl	80008d0 <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 8000792:	f000 f8d7 	bl	8000944 <_ZL12MX_CAN2_Initv>
  MX_USART3_UART_Init();
 8000796:	f000 f90f 	bl	80009b8 <_ZL19MX_USART3_UART_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Tarea_1 */
  osThreadDef(Tarea_1, StartTask01, osPriorityNormal, 0, 128);
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <main+0x70>)
 800079c:	f107 041c 	add.w	r4, r7, #28
 80007a0:	461d      	mov	r5, r3
 80007a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Tarea_1Handle = osThreadCreate(osThread(Tarea_1), NULL);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fe58 	bl	800346a <osThreadCreate>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <main+0x74>)
 80007be:	6013      	str	r3, [r2, #0]

  /* definition and creation of Tarea_2 */
  osThreadDef(Tarea_2, StartTask02, osPriorityNormal, 0, 128);
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <main+0x78>)
 80007c2:	463c      	mov	r4, r7
 80007c4:	461d      	mov	r5, r3
 80007c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Tarea_2Handle = osThreadCreate(osThread(Tarea_2), NULL);
 80007d2:	463b      	mov	r3, r7
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 fe47 	bl	800346a <osThreadCreate>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <main+0x7c>)
 80007e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  config();
 80007e2:	f7ff ff89 	bl	80006f8 <_Z6configv>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007e6:	f002 fe39 	bl	800345c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <main+0x6e>
 80007ec:	080058b0 	.word	0x080058b0
 80007f0:	20000378 	.word	0x20000378
 80007f4:	080058cc 	.word	0x080058cc
 80007f8:	2000037c 	.word	0x2000037c

080007fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	; 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f004 f888 	bl	8004920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <_Z18SystemClock_Configv+0xcc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	4a27      	ldr	r2, [pc, #156]	; (80008c8 <_Z18SystemClock_Configv+0xcc>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	; 0x40
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <_Z18SystemClock_Configv+0xcc>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <_Z18SystemClock_Configv+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000848:	4a20      	ldr	r2, [pc, #128]	; (80008cc <_Z18SystemClock_Configv+0xd0>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <_Z18SystemClock_Configv+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 0320 	add.w	r3, r7, #32
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fbe1 	bl	8002038 <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	bf14      	ite	ne
 800087c:	2301      	movne	r3, #1
 800087e:	2300      	moveq	r3, #0
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000886:	f000 f939 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 fe3f 	bl	8002528 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bf14      	ite	ne
 80008b0:	2301      	movne	r3, #1
 80008b2:	2300      	moveq	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80008ba:	f000 f91f 	bl	8000afc <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3750      	adds	r7, #80	; 0x50
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <_ZL12MX_CAN1_Initv+0x6c>)
 80008d6:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <_ZL12MX_CAN1_Initv+0x70>)
 80008d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <_ZL12MX_CAN1_Initv+0x6c>)
 80008dc:	2210      	movs	r2, #16
 80008de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <_ZL12MX_CAN1_Initv+0x6c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <_ZL12MX_CAN1_Initv+0x6c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <_ZL12MX_CAN1_Initv+0x6c>)
 80008ee:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80008f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <_ZL12MX_CAN1_Initv+0x6c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <_ZL12MX_CAN1_Initv+0x6c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <_ZL12MX_CAN1_Initv+0x6c>)
 8000902:	2200      	movs	r2, #0
 8000904:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <_ZL12MX_CAN1_Initv+0x6c>)
 8000908:	2200      	movs	r2, #0
 800090a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <_ZL12MX_CAN1_Initv+0x6c>)
 800090e:	2200      	movs	r2, #0
 8000910:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <_ZL12MX_CAN1_Initv+0x6c>)
 8000914:	2200      	movs	r2, #0
 8000916:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <_ZL12MX_CAN1_Initv+0x6c>)
 800091a:	2200      	movs	r2, #0
 800091c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <_ZL12MX_CAN1_Initv+0x6c>)
 8000920:	f000 fbb0 	bl	8001084 <HAL_CAN_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	bf14      	ite	ne
 800092a:	2301      	movne	r3, #1
 800092c:	2300      	moveq	r3, #0
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 8000934:	f000 f8e2 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200002e4 	.word	0x200002e4
 8000940:	40006400 	.word	0x40006400

08000944 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <_ZL12MX_CAN2_Initv+0x6c>)
 800094a:	4a1a      	ldr	r2, [pc, #104]	; (80009b4 <_ZL12MX_CAN2_Initv+0x70>)
 800094c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <_ZL12MX_CAN2_Initv+0x6c>)
 8000950:	2210      	movs	r2, #16
 8000952:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <_ZL12MX_CAN2_Initv+0x6c>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_ZL12MX_CAN2_Initv+0x6c>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <_ZL12MX_CAN2_Initv+0x6c>)
 8000962:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000966:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <_ZL12MX_CAN2_Initv+0x6c>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <_ZL12MX_CAN2_Initv+0x6c>)
 8000970:	2200      	movs	r2, #0
 8000972:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <_ZL12MX_CAN2_Initv+0x6c>)
 8000976:	2200      	movs	r2, #0
 8000978:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <_ZL12MX_CAN2_Initv+0x6c>)
 800097c:	2200      	movs	r2, #0
 800097e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <_ZL12MX_CAN2_Initv+0x6c>)
 8000982:	2200      	movs	r2, #0
 8000984:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <_ZL12MX_CAN2_Initv+0x6c>)
 8000988:	2200      	movs	r2, #0
 800098a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <_ZL12MX_CAN2_Initv+0x6c>)
 800098e:	2200      	movs	r2, #0
 8000990:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <_ZL12MX_CAN2_Initv+0x6c>)
 8000994:	f000 fb76 	bl	8001084 <HAL_CAN_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	bf14      	ite	ne
 800099e:	2301      	movne	r3, #1
 80009a0:	2300      	moveq	r3, #0
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 80009a8:	f000 f8a8 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000030c 	.word	0x2000030c
 80009b4:	40006800 	.word	0x40006800

080009b8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <_ZL19MX_USART3_UART_Initv+0x54>)
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <_ZL19MX_USART3_UART_Initv+0x58>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <_ZL19MX_USART3_UART_Initv+0x54>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <_ZL19MX_USART3_UART_Initv+0x54>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <_ZL19MX_USART3_UART_Initv+0x54>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <_ZL19MX_USART3_UART_Initv+0x54>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <_ZL19MX_USART3_UART_Initv+0x54>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <_ZL19MX_USART3_UART_Initv+0x54>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <_ZL19MX_USART3_UART_Initv+0x54>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <_ZL19MX_USART3_UART_Initv+0x54>)
 80009f0:	f002 fa5a 	bl	8002ea8 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	bf14      	ite	ne
 80009fa:	2301      	movne	r3, #1
 80009fc:	2300      	moveq	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8000a04:	f000 f87a 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000334 	.word	0x20000334
 8000a10:	40004800 	.word	0x40004800

08000a14 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a1f      	ldr	r2, [pc, #124]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Amarillo_Pin|Rojo_Pin|Azul_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <_ZL12MX_GPIO_Initv+0xa0>)
 8000a86:	f001 faa3 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Amarillo_Pin Rojo_Pin Azul_Pin */
  GPIO_InitStruct.Pin = Amarillo_Pin|Rojo_Pin|Azul_Pin;
 8000a8a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <_ZL12MX_GPIO_Initv+0xa0>)
 8000aa4:	f001 f8e8 	bl	8001c78 <HAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <_Z11StartTask01PKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f002 fd1e 	bl	8003502 <osDelay>
 8000ac6:	e7fb      	b.n	8000ac0 <_Z11StartTask01PKv+0x8>

08000ac8 <_Z11StartTask02PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f002 fd16 	bl	8003502 <osDelay>
 8000ad6:	e7fb      	b.n	8000ad0 <_Z11StartTask02PKv+0x8>

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aea:	f000 faab 	bl	8001044 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40001400 	.word	0x40001400

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_MspInit+0x54>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <HAL_MspInit+0x54>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_MspInit+0x54>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_MspInit+0x54>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_MspInit+0x54>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_MspInit+0x54>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210f      	movs	r1, #15
 8000b4a:	f06f 0001 	mvn.w	r0, #1
 8000b4e:	f001 f869 	bl	8001c24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a46      	ldr	r2, [pc, #280]	; (8000c98 <HAL_CAN_MspInit+0x138>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d136      	bne.n	8000bf0 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b82:	4b46      	ldr	r3, [pc, #280]	; (8000c9c <HAL_CAN_MspInit+0x13c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	4a44      	ldr	r2, [pc, #272]	; (8000c9c <HAL_CAN_MspInit+0x13c>)
 8000b8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b8c:	4b43      	ldr	r3, [pc, #268]	; (8000c9c <HAL_CAN_MspInit+0x13c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d10d      	bne.n	8000bb0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	4a40      	ldr	r2, [pc, #256]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba4:	4b3e      	ldr	r3, [pc, #248]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4a39      	ldr	r2, [pc, #228]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc0:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bde:	2309      	movs	r3, #9
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <HAL_CAN_MspInit+0x144>)
 8000bea:	f001 f845 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000bee:	e04f      	b.n	8000c90 <HAL_CAN_MspInit+0x130>
  else if(hcan->Instance==CAN2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a2c      	ldr	r2, [pc, #176]	; (8000ca8 <HAL_CAN_MspInit+0x148>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d14a      	bne.n	8000c90 <HAL_CAN_MspInit+0x130>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a27      	ldr	r2, [pc, #156]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000c04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <HAL_CAN_MspInit+0x13c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <HAL_CAN_MspInit+0x13c>)
 8000c1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <HAL_CAN_MspInit+0x13c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d10d      	bne.n	8000c44 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000c32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c36:	6413      	str	r3, [r2, #64]	; 0x40
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_CAN_MspInit+0x140>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c60:	2360      	movs	r3, #96	; 0x60
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c70:	2309      	movs	r3, #9
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <HAL_CAN_MspInit+0x144>)
 8000c7c:	f000 fffc 	bl	8001c78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2105      	movs	r1, #5
 8000c84:	2040      	movs	r0, #64	; 0x40
 8000c86:	f000 ffcd 	bl	8001c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000c8a:	2040      	movs	r0, #64	; 0x40
 8000c8c:	f000 ffe6 	bl	8001c5c <HAL_NVIC_EnableIRQ>
}
 8000c90:	bf00      	nop
 8000c92:	3730      	adds	r7, #48	; 0x30
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40006400 	.word	0x40006400
 8000c9c:	200003d0 	.word	0x200003d0
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40006800 	.word	0x40006800

08000cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <HAL_UART_MspInit+0x84>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12c      	bne.n	8000d28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_UART_MspInit+0x88>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <HAL_UART_MspInit+0x88>)
 8000cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_UART_MspInit+0x88>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_UART_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_UART_MspInit+0x88>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_UART_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_UART_MspInit+0x8c>)
 8000d24:	f000 ffa8 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40004800 	.word	0x40004800
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020c00 	.word	0x40020c00

08000d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	2037      	movs	r0, #55	; 0x37
 8000d52:	f000 ff67 	bl	8001c24 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d56:	2037      	movs	r0, #55	; 0x37
 8000d58:	f000 ff80 	bl	8001c5c <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HAL_InitTick+0xa0>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <HAL_InitTick+0xa0>)
 8000d66:	f043 0320 	orr.w	r3, r3, #32
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_InitTick+0xa0>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d78:	f107 0210 	add.w	r2, r7, #16
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fdb0 	bl	80028e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d88:	f001 fd86 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8000d8c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d90:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <HAL_InitTick+0xa4>)
 8000d92:	fba2 2303 	umull	r2, r3, r2, r3
 8000d96:	0c9b      	lsrs	r3, r3, #18
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_InitTick+0xa8>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <HAL_InitTick+0xac>)
 8000da0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_InitTick+0xa8>)
 8000da4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_InitTick+0xa8>)
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dae:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_InitTick+0xa8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_InitTick+0xa8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <HAL_InitTick+0xa8>)
 8000dbe:	f001 fdc5 	bl	800294c <HAL_TIM_Base_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d104      	bne.n	8000dd2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <HAL_InitTick+0xa8>)
 8000dca:	f001 fe19 	bl	8002a00 <HAL_TIM_Base_Start_IT>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3730      	adds	r7, #48	; 0x30
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	431bde83 	.word	0x431bde83
 8000de4:	200003d4 	.word	0x200003d4
 8000de8:	40001400 	.word	0x40001400

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <TIM7_IRQHandler+0x10>)
 8000e1e:	f001 fe5f 	bl	8002ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200003d4 	.word	0x200003d4

08000e2c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <CAN2_RX0_IRQHandler+0x10>)
 8000e32:	f000 fc0f 	bl	8001654 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000030c 	.word	0x2000030c

08000e40 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e00a      	b.n	8000e68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e52:	f3af 8000 	nop.w
 8000e56:	4601      	mov	r1, r0
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	60ba      	str	r2, [r7, #8]
 8000e5e:	b2ca      	uxtb	r2, r1
 8000e60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	dbf0      	blt.n	8000e52 <_read+0x12>
	}

return len;
 8000e70:	687b      	ldr	r3, [r7, #4]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	e009      	b.n	8000ea0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	60ba      	str	r2, [r7, #8]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf1      	blt.n	8000e8c <_write+0x12>
	}
	return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_close>:

int _close(int file)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
	return -1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eda:	605a      	str	r2, [r3, #4]
	return 0;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <_isatty>:

int _isatty(int file)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <_sbrk+0x5c>)
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <_sbrk+0x60>)
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <_sbrk+0x64>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <_sbrk+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d207      	bcs.n	8000f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f4c:	f003 fcbe 	bl	80048cc <__errno>
 8000f50:	4603      	mov	r3, r0
 8000f52:	220c      	movs	r2, #12
 8000f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f5a:	e009      	b.n	8000f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <_sbrk+0x64>)
 8000f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20030000 	.word	0x20030000
 8000f7c:	00000400 	.word	0x00000400
 8000f80:	2000041c 	.word	0x2000041c
 8000f84:	20004188 	.word	0x20004188

08000f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <SystemInit+0x20>)
 8000f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <SystemInit+0x20>)
 8000f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fb2:	490e      	ldr	r1, [pc, #56]	; (8000fec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc8:	4c0b      	ldr	r4, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd6:	f7ff ffd7 	bl	8000f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f003 fc7d 	bl	80048d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f7ff fbcd 	bl	800077c <main>
  bx  lr    
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fe4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ff0:	080059b0 	.word	0x080059b0
  ldr r2, =_sbss
 8000ff4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ff8:	20004188 	.word	0x20004188

08000ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <HAL_Init+0x40>)
 800100a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_Init+0x40>)
 8001016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800101a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_Init+0x40>)
 8001022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
 800102a:	f000 fdf0 	bl	8001c0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102e:	200f      	movs	r0, #15
 8001030:	f7ff fe84 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001034:	f7ff fd68 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023c00 	.word	0x40023c00

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	20000420 	.word	0x20000420

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000420 	.word	0x20000420

08001084 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e0ed      	b.n	8001272 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fd5c 	bl	8000b60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b8:	f7ff ffd8 	bl	800106c <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010be:	e012      	b.n	80010e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c0:	f7ff ffd4 	bl	800106c <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d90b      	bls.n	80010e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2205      	movs	r2, #5
 80010de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e0c5      	b.n	8001272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0e5      	beq.n	80010c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0202 	bic.w	r2, r2, #2
 8001102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001104:	f7ff ffb2 	bl	800106c <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800110a:	e012      	b.n	8001132 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800110c:	f7ff ffae 	bl	800106c <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b0a      	cmp	r3, #10
 8001118:	d90b      	bls.n	8001132 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2205      	movs	r2, #5
 800112a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e09f      	b.n	8001272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1e5      	bne.n	800110c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7e1b      	ldrb	r3, [r3, #24]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d108      	bne.n	800115a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e007      	b.n	800116a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7e5b      	ldrb	r3, [r3, #25]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d108      	bne.n	8001184 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e007      	b.n	8001194 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001192:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7e9b      	ldrb	r3, [r3, #26]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d108      	bne.n	80011ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0220 	orr.w	r2, r2, #32
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e007      	b.n	80011be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0220 	bic.w	r2, r2, #32
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7edb      	ldrb	r3, [r3, #27]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d108      	bne.n	80011d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0210 	bic.w	r2, r2, #16
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e007      	b.n	80011e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0210 	orr.w	r2, r2, #16
 80011e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7f1b      	ldrb	r3, [r3, #28]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0208 	orr.w	r2, r2, #8
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e007      	b.n	8001212 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0208 	bic.w	r2, r2, #8
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7f5b      	ldrb	r3, [r3, #29]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d108      	bne.n	800122c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0204 	orr.w	r2, r2, #4
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e007      	b.n	800123c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0204 	bic.w	r2, r2, #4
 800123a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	ea42 0103 	orr.w	r1, r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800127a:	b480      	push	{r7}
 800127c:	b089      	sub	sp, #36	; 0x24
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800128e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001298:	7ffb      	ldrb	r3, [r7, #31]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d003      	beq.n	80012a6 <HAL_CAN_AddTxMessage+0x2c>
 800129e:	7ffb      	ldrb	r3, [r7, #31]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	f040 80b8 	bne.w	8001416 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10a      	bne.n	80012c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d105      	bne.n	80012c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80a0 	beq.w	8001406 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	0e1b      	lsrs	r3, r3, #24
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d907      	bls.n	80012e6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e09e      	b.n	8001424 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012e6:	2201      	movs	r2, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10d      	bne.n	8001314 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001302:	68f9      	ldr	r1, [r7, #12]
 8001304:	6809      	ldr	r1, [r1, #0]
 8001306:	431a      	orrs	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3318      	adds	r3, #24
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	440b      	add	r3, r1
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e00f      	b.n	8001334 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800131e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001324:	68f9      	ldr	r1, [r7, #12]
 8001326:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001328:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3318      	adds	r3, #24
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	440b      	add	r3, r1
 8001332:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	3318      	adds	r3, #24
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	440b      	add	r3, r1
 8001344:	3304      	adds	r3, #4
 8001346:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	7d1b      	ldrb	r3, [r3, #20]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d111      	bne.n	8001374 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3318      	adds	r3, #24
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	4413      	add	r3, r2
 800135c:	3304      	adds	r3, #4
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	6811      	ldr	r1, [r2, #0]
 8001364:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	3318      	adds	r3, #24
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	440b      	add	r3, r1
 8001370:	3304      	adds	r3, #4
 8001372:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3307      	adds	r3, #7
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	061a      	lsls	r2, r3, #24
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3306      	adds	r3, #6
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	041b      	lsls	r3, r3, #16
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3305      	adds	r3, #5
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	4313      	orrs	r3, r2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	3204      	adds	r2, #4
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	4610      	mov	r0, r2
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	6811      	ldr	r1, [r2, #0]
 800139c:	ea43 0200 	orr.w	r2, r3, r0
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	440b      	add	r3, r1
 80013a6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80013aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3303      	adds	r3, #3
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	061a      	lsls	r2, r3, #24
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3302      	adds	r3, #2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	041b      	lsls	r3, r3, #16
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3301      	adds	r3, #1
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	4313      	orrs	r3, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	7812      	ldrb	r2, [r2, #0]
 80013cc:	4610      	mov	r0, r2
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	6811      	ldr	r1, [r2, #0]
 80013d2:	ea43 0200 	orr.w	r2, r3, r0
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	440b      	add	r3, r1
 80013dc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3318      	adds	r3, #24
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	4413      	add	r3, r2
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	6811      	ldr	r1, [r2, #0]
 80013f4:	f043 0201 	orr.w	r2, r3, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3318      	adds	r3, #24
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	440b      	add	r3, r1
 8001400:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e00e      	b.n	8001424 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e006      	b.n	8001424 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
  }
}
 8001424:	4618      	mov	r0, r3
 8001426:	3724      	adds	r7, #36	; 0x24
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001444:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d003      	beq.n	8001454 <HAL_CAN_GetRxMessage+0x24>
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	2b02      	cmp	r3, #2
 8001450:	f040 80f3 	bne.w	800163a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10e      	bne.n	8001478 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d116      	bne.n	8001496 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0e7      	b.n	8001648 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d107      	bne.n	8001496 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0d8      	b.n	8001648 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	331b      	adds	r3, #27
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4413      	add	r3, r2
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0204 	and.w	r2, r3, #4
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10c      	bne.n	80014ce <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	331b      	adds	r3, #27
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	4413      	add	r3, r2
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0d5b      	lsrs	r3, r3, #21
 80014c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e00b      	b.n	80014e6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	331b      	adds	r3, #27
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	4413      	add	r3, r2
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	331b      	adds	r3, #27
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	4413      	add	r3, r2
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0202 	and.w	r2, r3, #2
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	331b      	adds	r3, #27
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	4413      	add	r3, r2
 8001508:	3304      	adds	r3, #4
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 020f 	and.w	r2, r3, #15
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	331b      	adds	r3, #27
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	4413      	add	r3, r2
 8001520:	3304      	adds	r3, #4
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	331b      	adds	r3, #27
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	4413      	add	r3, r2
 8001538:	3304      	adds	r3, #4
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	0c1b      	lsrs	r3, r3, #16
 800153e:	b29a      	uxth	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	4413      	add	r3, r2
 800154e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	4413      	add	r3, r2
 8001564:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	0a1a      	lsrs	r2, r3, #8
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	4413      	add	r3, r2
 800157e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0c1a      	lsrs	r2, r3, #16
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	3302      	adds	r3, #2
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	4413      	add	r3, r2
 8001598:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0e1a      	lsrs	r2, r3, #24
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	3303      	adds	r3, #3
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3304      	adds	r3, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	4413      	add	r3, r2
 80015ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0a1a      	lsrs	r2, r3, #8
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	3305      	adds	r3, #5
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	0c1a      	lsrs	r2, r3, #16
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	3306      	adds	r3, #6
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0e1a      	lsrs	r2, r3, #24
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	3307      	adds	r3, #7
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d108      	bne.n	8001626 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0220 	orr.w	r2, r2, #32
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	e007      	b.n	8001636 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f042 0220 	orr.w	r2, r2, #32
 8001634:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e006      	b.n	8001648 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
  }
}
 8001648:	4618      	mov	r0, r3
 800164a:	371c      	adds	r7, #28
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d07c      	beq.n	8001794 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d023      	beq.n	80016ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2201      	movs	r2, #1
 80016aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f983 	bl	80019c2 <HAL_CAN_TxMailbox0CompleteCallback>
 80016bc:	e016      	b.n	80016ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d004      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
 80016d0:	e00c      	b.n	80016ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
 80016e4:	e002      	b.n	80016ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f989 	bl	80019fe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d024      	beq.n	8001740 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f963 	bl	80019d6 <HAL_CAN_TxMailbox1CompleteCallback>
 8001710:	e016      	b.n	8001740 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
 8001724:	e00c      	b.n	8001740 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
 8001738:	e002      	b.n	8001740 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f969 	bl	8001a12 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d024      	beq.n	8001794 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001752:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f943 	bl	80019ea <HAL_CAN_TxMailbox2CompleteCallback>
 8001764:	e016      	b.n	8001794 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
 8001778:	e00c      	b.n	8001794 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
 800178c:	e002      	b.n	8001794 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f949 	bl	8001a26 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00c      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2210      	movs	r2, #16
 80017b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00b      	beq.n	80017da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2208      	movs	r2, #8
 80017d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f930 	bl	8001a3a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d009      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe ff54 	bl	80006a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00c      	beq.n	800181c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001812:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2210      	movs	r2, #16
 800181a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2208      	movs	r2, #8
 8001836:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f912 	bl	8001a62 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	2b00      	cmp	r3, #0
 8001846:	d009      	beq.n	800185c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f8f9 	bl	8001a4e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2210      	movs	r2, #16
 8001876:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f8fc 	bl	8001a76 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00b      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d006      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2208      	movs	r2, #8
 8001898:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f8f5 	bl	8001a8a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d07b      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d072      	beq.n	800199a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d008      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d008      	beq.n	80018ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d008      	beq.n	8001908 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800190e:	2b00      	cmp	r3, #0
 8001910:	d043      	beq.n	800199a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001918:	2b00      	cmp	r3, #0
 800191a:	d03e      	beq.n	800199a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001922:	2b60      	cmp	r3, #96	; 0x60
 8001924:	d02b      	beq.n	800197e <HAL_CAN_IRQHandler+0x32a>
 8001926:	2b60      	cmp	r3, #96	; 0x60
 8001928:	d82e      	bhi.n	8001988 <HAL_CAN_IRQHandler+0x334>
 800192a:	2b50      	cmp	r3, #80	; 0x50
 800192c:	d022      	beq.n	8001974 <HAL_CAN_IRQHandler+0x320>
 800192e:	2b50      	cmp	r3, #80	; 0x50
 8001930:	d82a      	bhi.n	8001988 <HAL_CAN_IRQHandler+0x334>
 8001932:	2b40      	cmp	r3, #64	; 0x40
 8001934:	d019      	beq.n	800196a <HAL_CAN_IRQHandler+0x316>
 8001936:	2b40      	cmp	r3, #64	; 0x40
 8001938:	d826      	bhi.n	8001988 <HAL_CAN_IRQHandler+0x334>
 800193a:	2b30      	cmp	r3, #48	; 0x30
 800193c:	d010      	beq.n	8001960 <HAL_CAN_IRQHandler+0x30c>
 800193e:	2b30      	cmp	r3, #48	; 0x30
 8001940:	d822      	bhi.n	8001988 <HAL_CAN_IRQHandler+0x334>
 8001942:	2b10      	cmp	r3, #16
 8001944:	d002      	beq.n	800194c <HAL_CAN_IRQHandler+0x2f8>
 8001946:	2b20      	cmp	r3, #32
 8001948:	d005      	beq.n	8001956 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800194a:	e01d      	b.n	8001988 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	f043 0308 	orr.w	r3, r3, #8
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001954:	e019      	b.n	800198a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800195e:	e014      	b.n	800198a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	f043 0320 	orr.w	r3, r3, #32
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001968:	e00f      	b.n	800198a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001972:	e00a      	b.n	800198a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800197c:	e005      	b.n	800198a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001986:	e000      	b.n	800198a <HAL_CAN_IRQHandler+0x336>
            break;
 8001988:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699a      	ldr	r2, [r3, #24]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001998:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2204      	movs	r2, #4
 80019a0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f872 	bl	8001a9e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019ba:	bf00      	nop
 80019bc:	3728      	adds	r7, #40	; 0x28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db0b      	blt.n	8001b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <__NVIC_EnableIRQ+0x38>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2001      	movs	r0, #1
 8001b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ff4c 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c36:	f7ff ff61 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	6978      	ldr	r0, [r7, #20]
 8001c42:	f7ff ffb1 	bl	8001ba8 <NVIC_EncodePriority>
 8001c46:	4602      	mov	r2, r0
 8001c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff80 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c54:	bf00      	nop
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff54 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e177      	b.n	8001f84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f040 8166 	bne.w	8001f7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d005      	beq.n	8001cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d130      	bne.n	8001d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 0201 	and.w	r2, r3, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d017      	beq.n	8001d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d123      	bne.n	8001dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	08da      	lsrs	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3208      	adds	r2, #8
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	08da      	lsrs	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	69b9      	ldr	r1, [r7, #24]
 8001db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80c0 	beq.w	8001f7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b66      	ldr	r3, [pc, #408]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a65      	ldr	r2, [pc, #404]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1a:	4a61      	ldr	r2, [pc, #388]	; (8001fa0 <HAL_GPIO_Init+0x328>)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <HAL_GPIO_Init+0x32c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d037      	beq.n	8001eb6 <HAL_GPIO_Init+0x23e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a57      	ldr	r2, [pc, #348]	; (8001fa8 <HAL_GPIO_Init+0x330>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d031      	beq.n	8001eb2 <HAL_GPIO_Init+0x23a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a56      	ldr	r2, [pc, #344]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d02b      	beq.n	8001eae <HAL_GPIO_Init+0x236>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a55      	ldr	r2, [pc, #340]	; (8001fb0 <HAL_GPIO_Init+0x338>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d025      	beq.n	8001eaa <HAL_GPIO_Init+0x232>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a54      	ldr	r2, [pc, #336]	; (8001fb4 <HAL_GPIO_Init+0x33c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01f      	beq.n	8001ea6 <HAL_GPIO_Init+0x22e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a53      	ldr	r2, [pc, #332]	; (8001fb8 <HAL_GPIO_Init+0x340>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d019      	beq.n	8001ea2 <HAL_GPIO_Init+0x22a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a52      	ldr	r2, [pc, #328]	; (8001fbc <HAL_GPIO_Init+0x344>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0x226>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a51      	ldr	r2, [pc, #324]	; (8001fc0 <HAL_GPIO_Init+0x348>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_GPIO_Init+0x222>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a50      	ldr	r2, [pc, #320]	; (8001fc4 <HAL_GPIO_Init+0x34c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x21e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4f      	ldr	r2, [pc, #316]	; (8001fc8 <HAL_GPIO_Init+0x350>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_GPIO_Init+0x21a>
 8001e8e:	2309      	movs	r3, #9
 8001e90:	e012      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001e92:	230a      	movs	r3, #10
 8001e94:	e010      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001e96:	2308      	movs	r3, #8
 8001e98:	e00e      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	e00c      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001e9e:	2306      	movs	r3, #6
 8001ea0:	e00a      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001ea2:	2305      	movs	r3, #5
 8001ea4:	e008      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	e006      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e004      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e002      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	f002 0203 	and.w	r2, r2, #3
 8001ebe:	0092      	lsls	r2, r2, #2
 8001ec0:	4093      	lsls	r3, r2
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec8:	4935      	ldr	r1, [pc, #212]	; (8001fa0 <HAL_GPIO_Init+0x328>)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efa:	4a34      	ldr	r2, [pc, #208]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f00:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f24:	4a29      	ldr	r2, [pc, #164]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4e:	4a1f      	ldr	r2, [pc, #124]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f78:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3301      	adds	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b0f      	cmp	r3, #15
 8001f88:	f67f ae84 	bls.w	8001c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40013800 	.word	0x40013800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020c00 	.word	0x40020c00
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40021400 	.word	0x40021400
 8001fbc:	40021800 	.word	0x40021800
 8001fc0:	40021c00 	.word	0x40021c00
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40022400 	.word	0x40022400
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fec:	e003      	b.n	8001ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	041a      	lsls	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002014:	887a      	ldrh	r2, [r7, #2]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	041a      	lsls	r2, r3, #16
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43d9      	mvns	r1, r3
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	400b      	ands	r3, r1
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e267      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d075      	beq.n	8002142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002056:	4b88      	ldr	r3, [pc, #544]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b04      	cmp	r3, #4
 8002060:	d00c      	beq.n	800207c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002062:	4b85      	ldr	r3, [pc, #532]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206a:	2b08      	cmp	r3, #8
 800206c:	d112      	bne.n	8002094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206e:	4b82      	ldr	r3, [pc, #520]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800207a:	d10b      	bne.n	8002094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	4b7e      	ldr	r3, [pc, #504]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d05b      	beq.n	8002140 <HAL_RCC_OscConfig+0x108>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d157      	bne.n	8002140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e242      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d106      	bne.n	80020ac <HAL_RCC_OscConfig+0x74>
 800209e:	4b76      	ldr	r3, [pc, #472]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a75      	ldr	r2, [pc, #468]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e01d      	b.n	80020e8 <HAL_RCC_OscConfig+0xb0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x98>
 80020b6:	4b70      	ldr	r3, [pc, #448]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6f      	ldr	r2, [pc, #444]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b6d      	ldr	r3, [pc, #436]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a6c      	ldr	r2, [pc, #432]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0xb0>
 80020d0:	4b69      	ldr	r3, [pc, #420]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a68      	ldr	r2, [pc, #416]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b66      	ldr	r3, [pc, #408]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a65      	ldr	r2, [pc, #404]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7fe ffbc 	bl	800106c <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f8:	f7fe ffb8 	bl	800106c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e207      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b5b      	ldr	r3, [pc, #364]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0xc0>
 8002116:	e014      	b.n	8002142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7fe ffa8 	bl	800106c <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7fe ffa4 	bl	800106c <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e1f3      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	4b51      	ldr	r3, [pc, #324]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0xe8>
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d063      	beq.n	8002216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800214e:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00b      	beq.n	8002172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002162:	2b08      	cmp	r3, #8
 8002164:	d11c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002166:	4b44      	ldr	r3, [pc, #272]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d116      	bne.n	80021a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_RCC_OscConfig+0x152>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e1c7      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4937      	ldr	r1, [pc, #220]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	e03a      	b.n	8002216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a8:	4b34      	ldr	r3, [pc, #208]	; (800227c <HAL_RCC_OscConfig+0x244>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7fe ff5d 	bl	800106c <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b6:	f7fe ff59 	bl	800106c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1a8      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d4:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4925      	ldr	r1, [pc, #148]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
 80021e8:	e015      	b.n	8002216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <HAL_RCC_OscConfig+0x244>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe ff3c 	bl	800106c <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f8:	f7fe ff38 	bl	800106c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e187      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d036      	beq.n	8002290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d016      	beq.n	8002258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_RCC_OscConfig+0x248>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002230:	f7fe ff1c 	bl	800106c <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002238:	f7fe ff18 	bl	800106c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e167      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800224c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x200>
 8002256:	e01b      	b.n	8002290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_RCC_OscConfig+0x248>)
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7fe ff05 	bl	800106c <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	e00e      	b.n	8002284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002266:	f7fe ff01 	bl	800106c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d907      	bls.n	8002284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e150      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
 8002278:	40023800 	.word	0x40023800
 800227c:	42470000 	.word	0x42470000
 8002280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002284:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1ea      	bne.n	8002266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8097 	beq.w	80023cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a2:	4b81      	ldr	r3, [pc, #516]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	4b7d      	ldr	r3, [pc, #500]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	4a7c      	ldr	r2, [pc, #496]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6413      	str	r3, [r2, #64]	; 0x40
 80022be:	4b7a      	ldr	r3, [pc, #488]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b77      	ldr	r3, [pc, #476]	; (80024ac <HAL_RCC_OscConfig+0x474>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022da:	4b74      	ldr	r3, [pc, #464]	; (80024ac <HAL_RCC_OscConfig+0x474>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a73      	ldr	r2, [pc, #460]	; (80024ac <HAL_RCC_OscConfig+0x474>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7fe fec1 	bl	800106c <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7fe febd 	bl	800106c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e10c      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <HAL_RCC_OscConfig+0x474>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x2ea>
 8002314:	4b64      	ldr	r3, [pc, #400]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a63      	ldr	r2, [pc, #396]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	e01c      	b.n	800235c <HAL_RCC_OscConfig+0x324>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b05      	cmp	r3, #5
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x30c>
 800232a:	4b5f      	ldr	r3, [pc, #380]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232e:	4a5e      	ldr	r2, [pc, #376]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6713      	str	r3, [r2, #112]	; 0x70
 8002336:	4b5c      	ldr	r3, [pc, #368]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233a:	4a5b      	ldr	r2, [pc, #364]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6713      	str	r3, [r2, #112]	; 0x70
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0x324>
 8002344:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	4a57      	ldr	r2, [pc, #348]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	6713      	str	r3, [r2, #112]	; 0x70
 8002350:	4b55      	ldr	r3, [pc, #340]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	4a54      	ldr	r2, [pc, #336]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002356:	f023 0304 	bic.w	r3, r3, #4
 800235a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d015      	beq.n	8002390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7fe fe82 	bl	800106c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7fe fe7e 	bl	800106c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e0cb      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	4b49      	ldr	r3, [pc, #292]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0ee      	beq.n	800236c <HAL_RCC_OscConfig+0x334>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002390:	f7fe fe6c 	bl	800106c <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002396:	e00a      	b.n	80023ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7fe fe68 	bl	800106c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e0b5      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ae:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ee      	bne.n	8002398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d105      	bne.n	80023cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c0:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	4a38      	ldr	r2, [pc, #224]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80a1 	beq.w	8002518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d6:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d05c      	beq.n	800249c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d141      	bne.n	800246e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ea:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <HAL_RCC_OscConfig+0x478>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe3c 	bl	800106c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f8:	f7fe fe38 	bl	800106c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e087      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240a:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69da      	ldr	r2, [r3, #28]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	019b      	lsls	r3, r3, #6
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	085b      	lsrs	r3, r3, #1
 800242e:	3b01      	subs	r3, #1
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	491b      	ldr	r1, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_RCC_OscConfig+0x478>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7fe fe11 	bl	800106c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244e:	f7fe fe0d 	bl	800106c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e05c      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x416>
 800246c:	e054      	b.n	8002518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_RCC_OscConfig+0x478>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7fe fdfa 	bl	800106c <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fdf6 	bl	800106c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e045      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x444>
 800249a:	e03d      	b.n	8002518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e038      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40007000 	.word	0x40007000
 80024b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x4ec>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d028      	beq.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d121      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d11a      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024e4:	4013      	ands	r3, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d111      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	3b01      	subs	r3, #1
 80024fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d107      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800

08002528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0cc      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b68      	ldr	r3, [pc, #416]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d90c      	bls.n	8002564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0b8      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800257c:	4b59      	ldr	r3, [pc, #356]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a58      	ldr	r2, [pc, #352]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002594:	4b53      	ldr	r3, [pc, #332]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a52      	ldr	r2, [pc, #328]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800259e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a0:	4b50      	ldr	r3, [pc, #320]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	494d      	ldr	r1, [pc, #308]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d044      	beq.n	8002648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d119      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e07f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d003      	beq.n	80025e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e6:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f6:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e067      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002606:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f023 0203 	bic.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4934      	ldr	r1, [pc, #208]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002618:	f7fe fd28 	bl	800106c <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	e00a      	b.n	8002636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002620:	f7fe fd24 	bl	800106c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e04f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 020c 	and.w	r2, r3, #12
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	429a      	cmp	r2, r3
 8002646:	d1eb      	bne.n	8002620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002648:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d20c      	bcs.n	8002670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e032      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4916      	ldr	r1, [pc, #88]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269a:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	490e      	ldr	r1, [pc, #56]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ae:	f000 f821 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80026b2:	4602      	mov	r2, r0
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	490a      	ldr	r1, [pc, #40]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	5ccb      	ldrb	r3, [r1, r3]
 80026c2:	fa22 f303 	lsr.w	r3, r2, r3
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fb34 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023c00 	.word	0x40023c00
 80026e4:	40023800 	.word	0x40023800
 80026e8:	080058f0 	.word	0x080058f0
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000004 	.word	0x20000004

080026f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f8:	b090      	sub	sp, #64	; 0x40
 80026fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002700:	2300      	movs	r3, #0
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002704:	2300      	movs	r3, #0
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800270c:	4b59      	ldr	r3, [pc, #356]	; (8002874 <HAL_RCC_GetSysClockFreq+0x180>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d00d      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x40>
 8002718:	2b08      	cmp	r3, #8
 800271a:	f200 80a1 	bhi.w	8002860 <HAL_RCC_GetSysClockFreq+0x16c>
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x34>
 8002722:	2b04      	cmp	r3, #4
 8002724:	d003      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x3a>
 8002726:	e09b      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_RCC_GetSysClockFreq+0x184>)
 800272a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800272c:	e09b      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800272e:	4b53      	ldr	r3, [pc, #332]	; (800287c <HAL_RCC_GetSysClockFreq+0x188>)
 8002730:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002732:	e098      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002734:	4b4f      	ldr	r3, [pc, #316]	; (8002874 <HAL_RCC_GetSysClockFreq+0x180>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800273e:	4b4d      	ldr	r3, [pc, #308]	; (8002874 <HAL_RCC_GetSysClockFreq+0x180>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d028      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274a:	4b4a      	ldr	r3, [pc, #296]	; (8002874 <HAL_RCC_GetSysClockFreq+0x180>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	099b      	lsrs	r3, r3, #6
 8002750:	2200      	movs	r2, #0
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	627a      	str	r2, [r7, #36]	; 0x24
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800275c:	2100      	movs	r1, #0
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_RCC_GetSysClockFreq+0x188>)
 8002760:	fb03 f201 	mul.w	r2, r3, r1
 8002764:	2300      	movs	r3, #0
 8002766:	fb00 f303 	mul.w	r3, r0, r3
 800276a:	4413      	add	r3, r2
 800276c:	4a43      	ldr	r2, [pc, #268]	; (800287c <HAL_RCC_GetSysClockFreq+0x188>)
 800276e:	fba0 1202 	umull	r1, r2, r0, r2
 8002772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002774:	460a      	mov	r2, r1
 8002776:	62ba      	str	r2, [r7, #40]	; 0x28
 8002778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800277a:	4413      	add	r3, r2
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	2200      	movs	r2, #0
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	61fa      	str	r2, [r7, #28]
 8002786:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800278a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800278e:	f7fd fd7f 	bl	8000290 <__aeabi_uldivmod>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4613      	mov	r3, r2
 8002798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800279a:	e053      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279c:	4b35      	ldr	r3, [pc, #212]	; (8002874 <HAL_RCC_GetSysClockFreq+0x180>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	2200      	movs	r2, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	617a      	str	r2, [r7, #20]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027ae:	f04f 0b00 	mov.w	fp, #0
 80027b2:	4652      	mov	r2, sl
 80027b4:	465b      	mov	r3, fp
 80027b6:	f04f 0000 	mov.w	r0, #0
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	0159      	lsls	r1, r3, #5
 80027c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c4:	0150      	lsls	r0, r2, #5
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	ebb2 080a 	subs.w	r8, r2, sl
 80027ce:	eb63 090b 	sbc.w	r9, r3, fp
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027e6:	ebb2 0408 	subs.w	r4, r2, r8
 80027ea:	eb63 0509 	sbc.w	r5, r3, r9
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	00eb      	lsls	r3, r5, #3
 80027f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027fc:	00e2      	lsls	r2, r4, #3
 80027fe:	4614      	mov	r4, r2
 8002800:	461d      	mov	r5, r3
 8002802:	eb14 030a 	adds.w	r3, r4, sl
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	eb45 030b 	adc.w	r3, r5, fp
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800281a:	4629      	mov	r1, r5
 800281c:	028b      	lsls	r3, r1, #10
 800281e:	4621      	mov	r1, r4
 8002820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002824:	4621      	mov	r1, r4
 8002826:	028a      	lsls	r2, r1, #10
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282e:	2200      	movs	r2, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	60fa      	str	r2, [r7, #12]
 8002834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002838:	f7fd fd2a 	bl	8000290 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4613      	mov	r3, r2
 8002842:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_GetSysClockFreq+0x180>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0c1b      	lsrs	r3, r3, #16
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	3301      	adds	r3, #1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800285e:	e002      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetSysClockFreq+0x184>)
 8002862:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002868:	4618      	mov	r0, r3
 800286a:	3740      	adds	r7, #64	; 0x40
 800286c:	46bd      	mov	sp, r7
 800286e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	00f42400 	.word	0x00f42400
 800287c:	017d7840 	.word	0x017d7840

08002880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_RCC_GetHCLKFreq+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000000 	.word	0x20000000

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800289c:	f7ff fff0 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0a9b      	lsrs	r3, r3, #10
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	08005900 	.word	0x08005900

080028c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028c4:	f7ff ffdc 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	0b5b      	lsrs	r3, r3, #13
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	4903      	ldr	r1, [pc, #12]	; (80028e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40023800 	.word	0x40023800
 80028e4:	08005900 	.word	0x08005900

080028e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	220f      	movs	r2, #15
 80028f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_RCC_GetClockConfig+0x5c>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0203 	and.w	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_RCC_GetClockConfig+0x5c>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <HAL_RCC_GetClockConfig+0x5c>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_RCC_GetClockConfig+0x5c>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	08db      	lsrs	r3, r3, #3
 8002922:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800292a:	4b07      	ldr	r3, [pc, #28]	; (8002948 <HAL_RCC_GetClockConfig+0x60>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 020f 	and.w	r2, r3, #15
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	601a      	str	r2, [r3, #0]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40023c00 	.word	0x40023c00

0800294c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e041      	b.n	80029e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f839 	bl	80029ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f000 f9d8 	bl	8002d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d001      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e04e      	b.n	8002ab6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a23      	ldr	r2, [pc, #140]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d022      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a42:	d01d      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d018      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <HAL_TIM_Base_Start_IT+0xcc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00e      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d009      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x80>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a18      	ldr	r2, [pc, #96]	; (8002adc <HAL_TIM_Base_Start_IT+0xdc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d111      	bne.n	8002aa4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d010      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0201 	orr.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa2:	e007      	b.n	8002ab4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800
 8002ad0:	40000c00 	.word	0x40000c00
 8002ad4:	40010400 	.word	0x40010400
 8002ad8:	40014000 	.word	0x40014000
 8002adc:	40001800 	.word	0x40001800

08002ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0202 	mvn.w	r2, #2
 8002b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f8ee 	bl	8002d04 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8e0 	bl	8002cf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f8f1 	bl	8002d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d122      	bne.n	8002b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d11b      	bne.n	8002b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0204 	mvn.w	r2, #4
 8002b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f8c4 	bl	8002d04 <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8b6 	bl	8002cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f8c7 	bl	8002d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d122      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d11b      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0208 	mvn.w	r2, #8
 8002bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2204      	movs	r2, #4
 8002bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f89a 	bl	8002d04 <HAL_TIM_IC_CaptureCallback>
 8002bd0:	e005      	b.n	8002bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f88c 	bl	8002cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f89d 	bl	8002d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d122      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d11b      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0210 	mvn.w	r2, #16
 8002c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f870 	bl	8002d04 <HAL_TIM_IC_CaptureCallback>
 8002c24:	e005      	b.n	8002c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f862 	bl	8002cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f873 	bl	8002d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d10e      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d107      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0201 	mvn.w	r2, #1
 8002c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fd ff3a 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b80      	cmp	r3, #128	; 0x80
 8002c70:	d10e      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	d107      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f902 	bl	8002e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d10e      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b40      	cmp	r3, #64	; 0x40
 8002caa:	d107      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f838 	bl	8002d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d107      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0220 	mvn.w	r2, #32
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8cc 	bl	8002e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a40      	ldr	r2, [pc, #256]	; (8002e54 <TIM_Base_SetConfig+0x114>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5e:	d00f      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3d      	ldr	r2, [pc, #244]	; (8002e58 <TIM_Base_SetConfig+0x118>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00b      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3c      	ldr	r2, [pc, #240]	; (8002e5c <TIM_Base_SetConfig+0x11c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d007      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3b      	ldr	r2, [pc, #236]	; (8002e60 <TIM_Base_SetConfig+0x120>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0x40>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a3a      	ldr	r2, [pc, #232]	; (8002e64 <TIM_Base_SetConfig+0x124>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d108      	bne.n	8002d92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a2f      	ldr	r2, [pc, #188]	; (8002e54 <TIM_Base_SetConfig+0x114>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d02b      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da0:	d027      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2c      	ldr	r2, [pc, #176]	; (8002e58 <TIM_Base_SetConfig+0x118>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d023      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a2b      	ldr	r2, [pc, #172]	; (8002e5c <TIM_Base_SetConfig+0x11c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d01f      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a2a      	ldr	r2, [pc, #168]	; (8002e60 <TIM_Base_SetConfig+0x120>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d01b      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a29      	ldr	r2, [pc, #164]	; (8002e64 <TIM_Base_SetConfig+0x124>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d017      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a28      	ldr	r2, [pc, #160]	; (8002e68 <TIM_Base_SetConfig+0x128>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d013      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <TIM_Base_SetConfig+0x12c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00f      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a26      	ldr	r2, [pc, #152]	; (8002e70 <TIM_Base_SetConfig+0x130>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00b      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a25      	ldr	r2, [pc, #148]	; (8002e74 <TIM_Base_SetConfig+0x134>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <TIM_Base_SetConfig+0x138>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d003      	beq.n	8002df2 <TIM_Base_SetConfig+0xb2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <TIM_Base_SetConfig+0x13c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d108      	bne.n	8002e04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <TIM_Base_SetConfig+0x114>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d003      	beq.n	8002e38 <TIM_Base_SetConfig+0xf8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a0c      	ldr	r2, [pc, #48]	; (8002e64 <TIM_Base_SetConfig+0x124>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d103      	bne.n	8002e40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	615a      	str	r2, [r3, #20]
}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40000800 	.word	0x40000800
 8002e60:	40000c00 	.word	0x40000c00
 8002e64:	40010400 	.word	0x40010400
 8002e68:	40014000 	.word	0x40014000
 8002e6c:	40014400 	.word	0x40014400
 8002e70:	40014800 	.word	0x40014800
 8002e74:	40001800 	.word	0x40001800
 8002e78:	40001c00 	.word	0x40001c00
 8002e7c:	40002000 	.word	0x40002000

08002e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e03f      	b.n	8002f3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fd feec 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2224      	movs	r2, #36	; 0x24
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f829 	bl	8002f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f48:	b0c0      	sub	sp, #256	; 0x100
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	68d9      	ldr	r1, [r3, #12]
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	ea40 0301 	orr.w	r3, r0, r1
 8002f6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f9c:	f021 010c 	bic.w	r1, r1, #12
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002faa:	430b      	orrs	r3, r1
 8002fac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbe:	6999      	ldr	r1, [r3, #24]
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	ea40 0301 	orr.w	r3, r0, r1
 8002fca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b8f      	ldr	r3, [pc, #572]	; (8003210 <UART_SetConfig+0x2cc>)
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d005      	beq.n	8002fe4 <UART_SetConfig+0xa0>
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b8d      	ldr	r3, [pc, #564]	; (8003214 <UART_SetConfig+0x2d0>)
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d104      	bne.n	8002fee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fe4:	f7ff fc6c 	bl	80028c0 <HAL_RCC_GetPCLK2Freq>
 8002fe8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fec:	e003      	b.n	8002ff6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fee:	f7ff fc53 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8002ff2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003000:	f040 810c 	bne.w	800321c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003008:	2200      	movs	r2, #0
 800300a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800300e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003012:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003016:	4622      	mov	r2, r4
 8003018:	462b      	mov	r3, r5
 800301a:	1891      	adds	r1, r2, r2
 800301c:	65b9      	str	r1, [r7, #88]	; 0x58
 800301e:	415b      	adcs	r3, r3
 8003020:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003022:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003026:	4621      	mov	r1, r4
 8003028:	eb12 0801 	adds.w	r8, r2, r1
 800302c:	4629      	mov	r1, r5
 800302e:	eb43 0901 	adc.w	r9, r3, r1
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800303e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003046:	4690      	mov	r8, r2
 8003048:	4699      	mov	r9, r3
 800304a:	4623      	mov	r3, r4
 800304c:	eb18 0303 	adds.w	r3, r8, r3
 8003050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003054:	462b      	mov	r3, r5
 8003056:	eb49 0303 	adc.w	r3, r9, r3
 800305a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800305e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800306a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800306e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003072:	460b      	mov	r3, r1
 8003074:	18db      	adds	r3, r3, r3
 8003076:	653b      	str	r3, [r7, #80]	; 0x50
 8003078:	4613      	mov	r3, r2
 800307a:	eb42 0303 	adc.w	r3, r2, r3
 800307e:	657b      	str	r3, [r7, #84]	; 0x54
 8003080:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003084:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003088:	f7fd f902 	bl	8000290 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4b61      	ldr	r3, [pc, #388]	; (8003218 <UART_SetConfig+0x2d4>)
 8003092:	fba3 2302 	umull	r2, r3, r3, r2
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	011c      	lsls	r4, r3, #4
 800309a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030ac:	4642      	mov	r2, r8
 80030ae:	464b      	mov	r3, r9
 80030b0:	1891      	adds	r1, r2, r2
 80030b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80030b4:	415b      	adcs	r3, r3
 80030b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030bc:	4641      	mov	r1, r8
 80030be:	eb12 0a01 	adds.w	sl, r2, r1
 80030c2:	4649      	mov	r1, r9
 80030c4:	eb43 0b01 	adc.w	fp, r3, r1
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030dc:	4692      	mov	sl, r2
 80030de:	469b      	mov	fp, r3
 80030e0:	4643      	mov	r3, r8
 80030e2:	eb1a 0303 	adds.w	r3, sl, r3
 80030e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030ea:	464b      	mov	r3, r9
 80030ec:	eb4b 0303 	adc.w	r3, fp, r3
 80030f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003100:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003104:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003108:	460b      	mov	r3, r1
 800310a:	18db      	adds	r3, r3, r3
 800310c:	643b      	str	r3, [r7, #64]	; 0x40
 800310e:	4613      	mov	r3, r2
 8003110:	eb42 0303 	adc.w	r3, r2, r3
 8003114:	647b      	str	r3, [r7, #68]	; 0x44
 8003116:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800311a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800311e:	f7fd f8b7 	bl	8000290 <__aeabi_uldivmod>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4611      	mov	r1, r2
 8003128:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <UART_SetConfig+0x2d4>)
 800312a:	fba3 2301 	umull	r2, r3, r3, r1
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2264      	movs	r2, #100	; 0x64
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	1acb      	subs	r3, r1, r3
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800313e:	4b36      	ldr	r3, [pc, #216]	; (8003218 <UART_SetConfig+0x2d4>)
 8003140:	fba3 2302 	umull	r2, r3, r3, r2
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800314c:	441c      	add	r4, r3
 800314e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003152:	2200      	movs	r2, #0
 8003154:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003158:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800315c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003160:	4642      	mov	r2, r8
 8003162:	464b      	mov	r3, r9
 8003164:	1891      	adds	r1, r2, r2
 8003166:	63b9      	str	r1, [r7, #56]	; 0x38
 8003168:	415b      	adcs	r3, r3
 800316a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800316c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003170:	4641      	mov	r1, r8
 8003172:	1851      	adds	r1, r2, r1
 8003174:	6339      	str	r1, [r7, #48]	; 0x30
 8003176:	4649      	mov	r1, r9
 8003178:	414b      	adcs	r3, r1
 800317a:	637b      	str	r3, [r7, #52]	; 0x34
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003188:	4659      	mov	r1, fp
 800318a:	00cb      	lsls	r3, r1, #3
 800318c:	4651      	mov	r1, sl
 800318e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003192:	4651      	mov	r1, sl
 8003194:	00ca      	lsls	r2, r1, #3
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	4603      	mov	r3, r0
 800319c:	4642      	mov	r2, r8
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031a4:	464b      	mov	r3, r9
 80031a6:	460a      	mov	r2, r1
 80031a8:	eb42 0303 	adc.w	r3, r2, r3
 80031ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031c4:	460b      	mov	r3, r1
 80031c6:	18db      	adds	r3, r3, r3
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ca:	4613      	mov	r3, r2
 80031cc:	eb42 0303 	adc.w	r3, r2, r3
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031da:	f7fd f859 	bl	8000290 <__aeabi_uldivmod>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <UART_SetConfig+0x2d4>)
 80031e4:	fba3 1302 	umull	r1, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	2164      	movs	r1, #100	; 0x64
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	3332      	adds	r3, #50	; 0x32
 80031f6:	4a08      	ldr	r2, [pc, #32]	; (8003218 <UART_SetConfig+0x2d4>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	f003 0207 	and.w	r2, r3, #7
 8003202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4422      	add	r2, r4
 800320a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800320c:	e105      	b.n	800341a <UART_SetConfig+0x4d6>
 800320e:	bf00      	nop
 8003210:	40011000 	.word	0x40011000
 8003214:	40011400 	.word	0x40011400
 8003218:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800321c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003220:	2200      	movs	r2, #0
 8003222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003226:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800322a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800322e:	4642      	mov	r2, r8
 8003230:	464b      	mov	r3, r9
 8003232:	1891      	adds	r1, r2, r2
 8003234:	6239      	str	r1, [r7, #32]
 8003236:	415b      	adcs	r3, r3
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
 800323a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800323e:	4641      	mov	r1, r8
 8003240:	1854      	adds	r4, r2, r1
 8003242:	4649      	mov	r1, r9
 8003244:	eb43 0501 	adc.w	r5, r3, r1
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	00eb      	lsls	r3, r5, #3
 8003252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003256:	00e2      	lsls	r2, r4, #3
 8003258:	4614      	mov	r4, r2
 800325a:	461d      	mov	r5, r3
 800325c:	4643      	mov	r3, r8
 800325e:	18e3      	adds	r3, r4, r3
 8003260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003264:	464b      	mov	r3, r9
 8003266:	eb45 0303 	adc.w	r3, r5, r3
 800326a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800327a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800328a:	4629      	mov	r1, r5
 800328c:	008b      	lsls	r3, r1, #2
 800328e:	4621      	mov	r1, r4
 8003290:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003294:	4621      	mov	r1, r4
 8003296:	008a      	lsls	r2, r1, #2
 8003298:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800329c:	f7fc fff8 	bl	8000290 <__aeabi_uldivmod>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4b60      	ldr	r3, [pc, #384]	; (8003428 <UART_SetConfig+0x4e4>)
 80032a6:	fba3 2302 	umull	r2, r3, r3, r2
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	011c      	lsls	r4, r3, #4
 80032ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032c0:	4642      	mov	r2, r8
 80032c2:	464b      	mov	r3, r9
 80032c4:	1891      	adds	r1, r2, r2
 80032c6:	61b9      	str	r1, [r7, #24]
 80032c8:	415b      	adcs	r3, r3
 80032ca:	61fb      	str	r3, [r7, #28]
 80032cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d0:	4641      	mov	r1, r8
 80032d2:	1851      	adds	r1, r2, r1
 80032d4:	6139      	str	r1, [r7, #16]
 80032d6:	4649      	mov	r1, r9
 80032d8:	414b      	adcs	r3, r1
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032e8:	4659      	mov	r1, fp
 80032ea:	00cb      	lsls	r3, r1, #3
 80032ec:	4651      	mov	r1, sl
 80032ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032f2:	4651      	mov	r1, sl
 80032f4:	00ca      	lsls	r2, r1, #3
 80032f6:	4610      	mov	r0, r2
 80032f8:	4619      	mov	r1, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	4642      	mov	r2, r8
 80032fe:	189b      	adds	r3, r3, r2
 8003300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003304:	464b      	mov	r3, r9
 8003306:	460a      	mov	r2, r1
 8003308:	eb42 0303 	adc.w	r3, r2, r3
 800330c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	67bb      	str	r3, [r7, #120]	; 0x78
 800331a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003328:	4649      	mov	r1, r9
 800332a:	008b      	lsls	r3, r1, #2
 800332c:	4641      	mov	r1, r8
 800332e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003332:	4641      	mov	r1, r8
 8003334:	008a      	lsls	r2, r1, #2
 8003336:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800333a:	f7fc ffa9 	bl	8000290 <__aeabi_uldivmod>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4b39      	ldr	r3, [pc, #228]	; (8003428 <UART_SetConfig+0x4e4>)
 8003344:	fba3 1302 	umull	r1, r3, r3, r2
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	2164      	movs	r1, #100	; 0x64
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	3332      	adds	r3, #50	; 0x32
 8003356:	4a34      	ldr	r2, [pc, #208]	; (8003428 <UART_SetConfig+0x4e4>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	095b      	lsrs	r3, r3, #5
 800335e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003362:	441c      	add	r4, r3
 8003364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003368:	2200      	movs	r2, #0
 800336a:	673b      	str	r3, [r7, #112]	; 0x70
 800336c:	677a      	str	r2, [r7, #116]	; 0x74
 800336e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003372:	4642      	mov	r2, r8
 8003374:	464b      	mov	r3, r9
 8003376:	1891      	adds	r1, r2, r2
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	415b      	adcs	r3, r3
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003382:	4641      	mov	r1, r8
 8003384:	1851      	adds	r1, r2, r1
 8003386:	6039      	str	r1, [r7, #0]
 8003388:	4649      	mov	r1, r9
 800338a:	414b      	adcs	r3, r1
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800339a:	4659      	mov	r1, fp
 800339c:	00cb      	lsls	r3, r1, #3
 800339e:	4651      	mov	r1, sl
 80033a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a4:	4651      	mov	r1, sl
 80033a6:	00ca      	lsls	r2, r1, #3
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	4603      	mov	r3, r0
 80033ae:	4642      	mov	r2, r8
 80033b0:	189b      	adds	r3, r3, r2
 80033b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80033b4:	464b      	mov	r3, r9
 80033b6:	460a      	mov	r2, r1
 80033b8:	eb42 0303 	adc.w	r3, r2, r3
 80033bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	663b      	str	r3, [r7, #96]	; 0x60
 80033c8:	667a      	str	r2, [r7, #100]	; 0x64
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033d6:	4649      	mov	r1, r9
 80033d8:	008b      	lsls	r3, r1, #2
 80033da:	4641      	mov	r1, r8
 80033dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e0:	4641      	mov	r1, r8
 80033e2:	008a      	lsls	r2, r1, #2
 80033e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033e8:	f7fc ff52 	bl	8000290 <__aeabi_uldivmod>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <UART_SetConfig+0x4e4>)
 80033f2:	fba3 1302 	umull	r1, r3, r3, r2
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2164      	movs	r1, #100	; 0x64
 80033fa:	fb01 f303 	mul.w	r3, r1, r3
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	3332      	adds	r3, #50	; 0x32
 8003404:	4a08      	ldr	r2, [pc, #32]	; (8003428 <UART_SetConfig+0x4e4>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	f003 020f 	and.w	r2, r3, #15
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4422      	add	r2, r4
 8003418:	609a      	str	r2, [r3, #8]
}
 800341a:	bf00      	nop
 800341c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003420:	46bd      	mov	sp, r7
 8003422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003426:	bf00      	nop
 8003428:	51eb851f 	.word	0x51eb851f

0800342c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800343a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800343e:	2b84      	cmp	r3, #132	; 0x84
 8003440:	d005      	beq.n	800344e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003442:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4413      	add	r3, r2
 800344a:	3303      	adds	r3, #3
 800344c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800344e:	68fb      	ldr	r3, [r7, #12]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003460:	f000 fade 	bl	8003a20 <vTaskStartScheduler>
  
  return osOK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	bd80      	pop	{r7, pc}

0800346a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800346a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346c:	b089      	sub	sp, #36	; 0x24
 800346e:	af04      	add	r7, sp, #16
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d020      	beq.n	80034be <osThreadCreate+0x54>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01c      	beq.n	80034be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685c      	ldr	r4, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681d      	ldr	r5, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691e      	ldr	r6, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ffc8 	bl	800342c <makeFreeRtosPriority>
 800349c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034a6:	9202      	str	r2, [sp, #8]
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	9100      	str	r1, [sp, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	4632      	mov	r2, r6
 80034b0:	4629      	mov	r1, r5
 80034b2:	4620      	mov	r0, r4
 80034b4:	f000 f8ed 	bl	8003692 <xTaskCreateStatic>
 80034b8:	4603      	mov	r3, r0
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	e01c      	b.n	80034f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685c      	ldr	r4, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034ca:	b29e      	uxth	r6, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ffaa 	bl	800342c <makeFreeRtosPriority>
 80034d8:	4602      	mov	r2, r0
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	9200      	str	r2, [sp, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	4632      	mov	r2, r6
 80034e6:	4629      	mov	r1, r5
 80034e8:	4620      	mov	r0, r4
 80034ea:	f000 f92f 	bl	800374c <xTaskCreate>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d001      	beq.n	80034f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80034f8:	68fb      	ldr	r3, [r7, #12]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003502 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <osDelay+0x16>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	e000      	b.n	800351a <osDelay+0x18>
 8003518:	2301      	movs	r3, #1
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fa4c 	bl	80039b8 <vTaskDelay>
  
  return osOK;
 8003520:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f103 0208 	add.w	r2, r3, #8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003542:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f103 0208 	add.w	r2, r3, #8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f103 0208 	add.w	r2, r3, #8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	601a      	str	r2, [r3, #0]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e2:	d103      	bne.n	80035ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	e00c      	b.n	8003606 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3308      	adds	r3, #8
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	e002      	b.n	80035fa <vListInsert+0x2e>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	429a      	cmp	r2, r3
 8003604:	d2f6      	bcs.n	80035f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	601a      	str	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6892      	ldr	r2, [r2, #8]
 8003654:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6852      	ldr	r2, [r2, #4]
 800365e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	429a      	cmp	r2, r3
 8003668:	d103      	bne.n	8003672 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	1e5a      	subs	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003692:	b580      	push	{r7, lr}
 8003694:	b08e      	sub	sp, #56	; 0x38
 8003696:	af04      	add	r7, sp, #16
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <xTaskCreateStatic+0x2a>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	623b      	str	r3, [r7, #32]
}
 80036b8:	bf00      	nop
 80036ba:	e7fe      	b.n	80036ba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <xTaskCreateStatic+0x46>
	__asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	61fb      	str	r3, [r7, #28]
}
 80036d4:	bf00      	nop
 80036d6:	e7fe      	b.n	80036d6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036d8:	2354      	movs	r3, #84	; 0x54
 80036da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b54      	cmp	r3, #84	; 0x54
 80036e0:	d00a      	beq.n	80036f8 <xTaskCreateStatic+0x66>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	61bb      	str	r3, [r7, #24]
}
 80036f4:	bf00      	nop
 80036f6:	e7fe      	b.n	80036f6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01e      	beq.n	800373e <xTaskCreateStatic+0xac>
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01b      	beq.n	800373e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800370e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003718:	2300      	movs	r3, #0
 800371a:	9303      	str	r3, [sp, #12]
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	9302      	str	r3, [sp, #8]
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	9301      	str	r3, [sp, #4]
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f850 	bl	80037d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003736:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003738:	f000 f8d4 	bl	80038e4 <prvAddNewTaskToReadyList>
 800373c:	e001      	b.n	8003742 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003742:	697b      	ldr	r3, [r7, #20]
	}
 8003744:	4618      	mov	r0, r3
 8003746:	3728      	adds	r7, #40	; 0x28
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	; 0x30
 8003750:	af04      	add	r7, sp, #16
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	4613      	mov	r3, r2
 800375a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fec9 	bl	80044f8 <pvPortMalloc>
 8003766:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00e      	beq.n	800378c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800376e:	2054      	movs	r0, #84	; 0x54
 8003770:	f000 fec2 	bl	80044f8 <pvPortMalloc>
 8003774:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
 8003782:	e005      	b.n	8003790 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003784:	6978      	ldr	r0, [r7, #20]
 8003786:	f000 ff83 	bl	8004690 <vPortFree>
 800378a:	e001      	b.n	8003790 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d017      	beq.n	80037c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	2300      	movs	r3, #0
 80037a2:	9303      	str	r3, [sp, #12]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	9302      	str	r3, [sp, #8]
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f80e 	bl	80037d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037ba:	69f8      	ldr	r0, [r7, #28]
 80037bc:	f000 f892 	bl	80038e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037c0:	2301      	movs	r3, #1
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	e002      	b.n	80037cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037cc:	69bb      	ldr	r3, [r7, #24]
	}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3720      	adds	r7, #32
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b088      	sub	sp, #32
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037ee:	3b01      	subs	r3, #1
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f023 0307 	bic.w	r3, r3, #7
 80037fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <prvInitialiseNewTask+0x48>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	617b      	str	r3, [r7, #20]
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01f      	beq.n	8003864 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	e012      	b.n	8003850 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4413      	add	r3, r2
 8003830:	7819      	ldrb	r1, [r3, #0]
 8003832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	3334      	adds	r3, #52	; 0x34
 800383a:	460a      	mov	r2, r1
 800383c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d006      	beq.n	8003858 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3301      	adds	r3, #1
 800384e:	61fb      	str	r3, [r7, #28]
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b0f      	cmp	r3, #15
 8003854:	d9e9      	bls.n	800382a <prvInitialiseNewTask+0x54>
 8003856:	e000      	b.n	800385a <prvInitialiseNewTask+0x84>
			{
				break;
 8003858:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003862:	e003      	b.n	800386c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	2b06      	cmp	r3, #6
 8003870:	d901      	bls.n	8003876 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003872:	2306      	movs	r3, #6
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800387a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	2200      	movs	r2, #0
 8003886:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	3304      	adds	r3, #4
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fe6c 	bl	800356a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	3318      	adds	r3, #24
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fe67 	bl	800356a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	f1c3 0207 	rsb	r2, r3, #7
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	2200      	movs	r2, #0
 80038b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	68f9      	ldr	r1, [r7, #12]
 80038c4:	69b8      	ldr	r0, [r7, #24]
 80038c6:	f000 fc05 	bl	80040d4 <pxPortInitialiseStack>
 80038ca:	4602      	mov	r2, r0
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038dc:	bf00      	nop
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038ec:	f000 fd22 	bl	8004334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038f0:	4b2a      	ldr	r3, [pc, #168]	; (800399c <prvAddNewTaskToReadyList+0xb8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	4a29      	ldr	r2, [pc, #164]	; (800399c <prvAddNewTaskToReadyList+0xb8>)
 80038f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038fa:	4b29      	ldr	r3, [pc, #164]	; (80039a0 <prvAddNewTaskToReadyList+0xbc>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003902:	4a27      	ldr	r2, [pc, #156]	; (80039a0 <prvAddNewTaskToReadyList+0xbc>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003908:	4b24      	ldr	r3, [pc, #144]	; (800399c <prvAddNewTaskToReadyList+0xb8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d110      	bne.n	8003932 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003910:	f000 fabc 	bl	8003e8c <prvInitialiseTaskLists>
 8003914:	e00d      	b.n	8003932 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003916:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <prvAddNewTaskToReadyList+0xc0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <prvAddNewTaskToReadyList+0xbc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	429a      	cmp	r2, r3
 800392a:	d802      	bhi.n	8003932 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800392c:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <prvAddNewTaskToReadyList+0xbc>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003932:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <prvAddNewTaskToReadyList+0xc4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3301      	adds	r3, #1
 8003938:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <prvAddNewTaskToReadyList+0xc4>)
 800393a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	2201      	movs	r2, #1
 8003942:	409a      	lsls	r2, r3
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <prvAddNewTaskToReadyList+0xc8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4313      	orrs	r3, r2
 800394a:	4a18      	ldr	r2, [pc, #96]	; (80039ac <prvAddNewTaskToReadyList+0xc8>)
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <prvAddNewTaskToReadyList+0xcc>)
 800395c:	441a      	add	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3304      	adds	r3, #4
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f7ff fe0d 	bl	8003584 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800396a:	f000 fd13 	bl	8004394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800396e:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <prvAddNewTaskToReadyList+0xc0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00e      	beq.n	8003994 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <prvAddNewTaskToReadyList+0xbc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	429a      	cmp	r2, r3
 8003982:	d207      	bcs.n	8003994 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <prvAddNewTaskToReadyList+0xd0>)
 8003986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000524 	.word	0x20000524
 80039a0:	20000424 	.word	0x20000424
 80039a4:	20000530 	.word	0x20000530
 80039a8:	20000540 	.word	0x20000540
 80039ac:	2000052c 	.word	0x2000052c
 80039b0:	20000428 	.word	0x20000428
 80039b4:	e000ed04 	.word	0xe000ed04

080039b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d017      	beq.n	80039fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039ca:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <vTaskDelay+0x60>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <vTaskDelay+0x30>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	60bb      	str	r3, [r7, #8]
}
 80039e4:	bf00      	nop
 80039e6:	e7fe      	b.n	80039e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039e8:	f000 f87a 	bl	8003ae0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039ec:	2100      	movs	r1, #0
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fb0a 	bl	8004008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039f4:	f000 f882 	bl	8003afc <xTaskResumeAll>
 80039f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d107      	bne.n	8003a10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <vTaskDelay+0x64>)
 8003a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	2000054c 	.word	0x2000054c
 8003a1c:	e000ed04 	.word	0xe000ed04

08003a20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a2e:	463a      	mov	r2, r7
 8003a30:	1d39      	adds	r1, r7, #4
 8003a32:	f107 0308 	add.w	r3, r7, #8
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fc fdac 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a3c:	6839      	ldr	r1, [r7, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	9202      	str	r2, [sp, #8]
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	2300      	movs	r3, #0
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	460a      	mov	r2, r1
 8003a4e:	491e      	ldr	r1, [pc, #120]	; (8003ac8 <vTaskStartScheduler+0xa8>)
 8003a50:	481e      	ldr	r0, [pc, #120]	; (8003acc <vTaskStartScheduler+0xac>)
 8003a52:	f7ff fe1e 	bl	8003692 <xTaskCreateStatic>
 8003a56:	4603      	mov	r3, r0
 8003a58:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <vTaskStartScheduler+0xb0>)
 8003a5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a5c:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <vTaskStartScheduler+0xb0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a64:	2301      	movs	r3, #1
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	e001      	b.n	8003a6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d116      	bne.n	8003aa2 <vTaskStartScheduler+0x82>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	613b      	str	r3, [r7, #16]
}
 8003a86:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <vTaskStartScheduler+0xb4>)
 8003a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <vTaskStartScheduler+0xb8>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <vTaskStartScheduler+0xbc>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a9c:	f000 fba8 	bl	80041f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003aa0:	e00e      	b.n	8003ac0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa8:	d10a      	bne.n	8003ac0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	60fb      	str	r3, [r7, #12]
}
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <vTaskStartScheduler+0x9e>
}
 8003ac0:	bf00      	nop
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	080058e8 	.word	0x080058e8
 8003acc:	08003e5d 	.word	0x08003e5d
 8003ad0:	20000548 	.word	0x20000548
 8003ad4:	20000544 	.word	0x20000544
 8003ad8:	20000530 	.word	0x20000530
 8003adc:	20000528 	.word	0x20000528

08003ae0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <vTaskSuspendAll+0x18>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	4a03      	ldr	r2, [pc, #12]	; (8003af8 <vTaskSuspendAll+0x18>)
 8003aec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003aee:	bf00      	nop
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	2000054c 	.word	0x2000054c

08003afc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b0a:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <xTaskResumeAll+0x114>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	603b      	str	r3, [r7, #0]
}
 8003b24:	bf00      	nop
 8003b26:	e7fe      	b.n	8003b26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b28:	f000 fc04 	bl	8004334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b2c:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <xTaskResumeAll+0x114>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	4a37      	ldr	r2, [pc, #220]	; (8003c10 <xTaskResumeAll+0x114>)
 8003b34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b36:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <xTaskResumeAll+0x114>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d161      	bne.n	8003c02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b3e:	4b35      	ldr	r3, [pc, #212]	; (8003c14 <xTaskResumeAll+0x118>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d05d      	beq.n	8003c02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b46:	e02e      	b.n	8003ba6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b48:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <xTaskResumeAll+0x11c>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	3318      	adds	r3, #24
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fd72 	bl	800363e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fd6d 	bl	800363e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	2201      	movs	r2, #1
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <xTaskResumeAll+0x120>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	4a2a      	ldr	r2, [pc, #168]	; (8003c1c <xTaskResumeAll+0x120>)
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4a27      	ldr	r2, [pc, #156]	; (8003c20 <xTaskResumeAll+0x124>)
 8003b84:	441a      	add	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f7ff fcf9 	bl	8003584 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b96:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <xTaskResumeAll+0x128>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d302      	bcc.n	8003ba6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003ba0:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <xTaskResumeAll+0x12c>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ba6:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <xTaskResumeAll+0x11c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1cc      	bne.n	8003b48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bb4:	f000 fa08 	bl	8003fc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bb8:	4b1c      	ldr	r3, [pc, #112]	; (8003c2c <xTaskResumeAll+0x130>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d010      	beq.n	8003be6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bc4:	f000 f836 	bl	8003c34 <xTaskIncrementTick>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003bce:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <xTaskResumeAll+0x12c>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f1      	bne.n	8003bc4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003be0:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <xTaskResumeAll+0x130>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <xTaskResumeAll+0x12c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bf2:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <xTaskResumeAll+0x134>)
 8003bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c02:	f000 fbc7 	bl	8004394 <vPortExitCritical>

	return xAlreadyYielded;
 8003c06:	68bb      	ldr	r3, [r7, #8]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	2000054c 	.word	0x2000054c
 8003c14:	20000524 	.word	0x20000524
 8003c18:	200004e4 	.word	0x200004e4
 8003c1c:	2000052c 	.word	0x2000052c
 8003c20:	20000428 	.word	0x20000428
 8003c24:	20000424 	.word	0x20000424
 8003c28:	20000538 	.word	0x20000538
 8003c2c:	20000534 	.word	0x20000534
 8003c30:	e000ed04 	.word	0xe000ed04

08003c34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c3e:	4b4e      	ldr	r3, [pc, #312]	; (8003d78 <xTaskIncrementTick+0x144>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f040 808e 	bne.w	8003d64 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c48:	4b4c      	ldr	r3, [pc, #304]	; (8003d7c <xTaskIncrementTick+0x148>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c50:	4a4a      	ldr	r2, [pc, #296]	; (8003d7c <xTaskIncrementTick+0x148>)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d120      	bne.n	8003c9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c5c:	4b48      	ldr	r3, [pc, #288]	; (8003d80 <xTaskIncrementTick+0x14c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <xTaskIncrementTick+0x48>
	__asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	603b      	str	r3, [r7, #0]
}
 8003c78:	bf00      	nop
 8003c7a:	e7fe      	b.n	8003c7a <xTaskIncrementTick+0x46>
 8003c7c:	4b40      	ldr	r3, [pc, #256]	; (8003d80 <xTaskIncrementTick+0x14c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	4b40      	ldr	r3, [pc, #256]	; (8003d84 <xTaskIncrementTick+0x150>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3e      	ldr	r2, [pc, #248]	; (8003d80 <xTaskIncrementTick+0x14c>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4a3e      	ldr	r2, [pc, #248]	; (8003d84 <xTaskIncrementTick+0x150>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <xTaskIncrementTick+0x154>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	4a3c      	ldr	r2, [pc, #240]	; (8003d88 <xTaskIncrementTick+0x154>)
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	f000 f995 	bl	8003fc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c9e:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <xTaskIncrementTick+0x158>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d348      	bcc.n	8003d3a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca8:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <xTaskIncrementTick+0x14c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb2:	4b36      	ldr	r3, [pc, #216]	; (8003d8c <xTaskIncrementTick+0x158>)
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cb8:	601a      	str	r2, [r3, #0]
					break;
 8003cba:	e03e      	b.n	8003d3a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cbc:	4b30      	ldr	r3, [pc, #192]	; (8003d80 <xTaskIncrementTick+0x14c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d203      	bcs.n	8003cdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cd4:	4a2d      	ldr	r2, [pc, #180]	; (8003d8c <xTaskIncrementTick+0x158>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cda:	e02e      	b.n	8003d3a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fcac 	bl	800363e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3318      	adds	r3, #24
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fca3 	bl	800363e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <xTaskIncrementTick+0x15c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <xTaskIncrementTick+0x15c>)
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <xTaskIncrementTick+0x160>)
 8003d18:	441a      	add	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f7ff fc2f 	bl	8003584 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <xTaskIncrementTick+0x164>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d3b9      	bcc.n	8003ca8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d34:	2301      	movs	r3, #1
 8003d36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d38:	e7b6      	b.n	8003ca8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d3a:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <xTaskIncrementTick+0x164>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	4914      	ldr	r1, [pc, #80]	; (8003d94 <xTaskIncrementTick+0x160>)
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d901      	bls.n	8003d56 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003d52:	2301      	movs	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d56:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <xTaskIncrementTick+0x168>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	e004      	b.n	8003d6e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <xTaskIncrementTick+0x16c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <xTaskIncrementTick+0x16c>)
 8003d6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d6e:	697b      	ldr	r3, [r7, #20]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	2000054c 	.word	0x2000054c
 8003d7c:	20000528 	.word	0x20000528
 8003d80:	200004dc 	.word	0x200004dc
 8003d84:	200004e0 	.word	0x200004e0
 8003d88:	2000053c 	.word	0x2000053c
 8003d8c:	20000544 	.word	0x20000544
 8003d90:	2000052c 	.word	0x2000052c
 8003d94:	20000428 	.word	0x20000428
 8003d98:	20000424 	.word	0x20000424
 8003d9c:	20000538 	.word	0x20000538
 8003da0:	20000534 	.word	0x20000534

08003da4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003daa:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <vTaskSwitchContext+0xa4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003db2:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <vTaskSwitchContext+0xa8>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003db8:	e03f      	b.n	8003e3a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003dba:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <vTaskSwitchContext+0xa8>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc0:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <vTaskSwitchContext+0xac>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	fab3 f383 	clz	r3, r3
 8003dcc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003dce:	7afb      	ldrb	r3, [r7, #11]
 8003dd0:	f1c3 031f 	rsb	r3, r3, #31
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	491f      	ldr	r1, [pc, #124]	; (8003e54 <vTaskSwitchContext+0xb0>)
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	607b      	str	r3, [r7, #4]
}
 8003dfc:	bf00      	nop
 8003dfe:	e7fe      	b.n	8003dfe <vTaskSwitchContext+0x5a>
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <vTaskSwitchContext+0xb0>)
 8003e0c:	4413      	add	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	3308      	adds	r3, #8
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d104      	bne.n	8003e30 <vTaskSwitchContext+0x8c>
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	4a08      	ldr	r2, [pc, #32]	; (8003e58 <vTaskSwitchContext+0xb4>)
 8003e38:	6013      	str	r3, [r2, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	2000054c 	.word	0x2000054c
 8003e4c:	20000538 	.word	0x20000538
 8003e50:	2000052c 	.word	0x2000052c
 8003e54:	20000428 	.word	0x20000428
 8003e58:	20000424 	.word	0x20000424

08003e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e64:	f000 f852 	bl	8003f0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <prvIdleTask+0x28>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d9f9      	bls.n	8003e64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <prvIdleTask+0x2c>)
 8003e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e80:	e7f0      	b.n	8003e64 <prvIdleTask+0x8>
 8003e82:	bf00      	nop
 8003e84:	20000428 	.word	0x20000428
 8003e88:	e000ed04 	.word	0xe000ed04

08003e8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	e00c      	b.n	8003eb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4a12      	ldr	r2, [pc, #72]	; (8003eec <prvInitialiseTaskLists+0x60>)
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fb3f 	bl	800352a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b06      	cmp	r3, #6
 8003eb6:	d9ef      	bls.n	8003e98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003eb8:	480d      	ldr	r0, [pc, #52]	; (8003ef0 <prvInitialiseTaskLists+0x64>)
 8003eba:	f7ff fb36 	bl	800352a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ebe:	480d      	ldr	r0, [pc, #52]	; (8003ef4 <prvInitialiseTaskLists+0x68>)
 8003ec0:	f7ff fb33 	bl	800352a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ec4:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <prvInitialiseTaskLists+0x6c>)
 8003ec6:	f7ff fb30 	bl	800352a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003eca:	480c      	ldr	r0, [pc, #48]	; (8003efc <prvInitialiseTaskLists+0x70>)
 8003ecc:	f7ff fb2d 	bl	800352a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ed0:	480b      	ldr	r0, [pc, #44]	; (8003f00 <prvInitialiseTaskLists+0x74>)
 8003ed2:	f7ff fb2a 	bl	800352a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <prvInitialiseTaskLists+0x78>)
 8003ed8:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <prvInitialiseTaskLists+0x64>)
 8003eda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <prvInitialiseTaskLists+0x7c>)
 8003ede:	4a05      	ldr	r2, [pc, #20]	; (8003ef4 <prvInitialiseTaskLists+0x68>)
 8003ee0:	601a      	str	r2, [r3, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000428 	.word	0x20000428
 8003ef0:	200004b4 	.word	0x200004b4
 8003ef4:	200004c8 	.word	0x200004c8
 8003ef8:	200004e4 	.word	0x200004e4
 8003efc:	200004f8 	.word	0x200004f8
 8003f00:	20000510 	.word	0x20000510
 8003f04:	200004dc 	.word	0x200004dc
 8003f08:	200004e0 	.word	0x200004e0

08003f0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f12:	e019      	b.n	8003f48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f14:	f000 fa0e 	bl	8004334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f18:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <prvCheckTasksWaitingTermination+0x50>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fb8a 	bl	800363e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <prvCheckTasksWaitingTermination+0x54>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	4a0b      	ldr	r2, [pc, #44]	; (8003f60 <prvCheckTasksWaitingTermination+0x54>)
 8003f32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <prvCheckTasksWaitingTermination+0x58>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <prvCheckTasksWaitingTermination+0x58>)
 8003f3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f3e:	f000 fa29 	bl	8004394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f810 	bl	8003f68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <prvCheckTasksWaitingTermination+0x58>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e1      	bne.n	8003f14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200004f8 	.word	0x200004f8
 8003f60:	20000524 	.word	0x20000524
 8003f64:	2000050c 	.word	0x2000050c

08003f68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d108      	bne.n	8003f8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fb86 	bl	8004690 <vPortFree>
				vPortFree( pxTCB );
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fb83 	bl	8004690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f8a:	e018      	b.n	8003fbe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d103      	bne.n	8003f9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fb7a 	bl	8004690 <vPortFree>
	}
 8003f9c:	e00f      	b.n	8003fbe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d00a      	beq.n	8003fbe <prvDeleteTCB+0x56>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	60fb      	str	r3, [r7, #12]
}
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <prvDeleteTCB+0x54>
	}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <prvResetNextTaskUnblockTime+0x38>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <prvResetNextTaskUnblockTime+0x3c>)
 8003fda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fe0:	e008      	b.n	8003ff4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe2:	4b07      	ldr	r3, [pc, #28]	; (8004000 <prvResetNextTaskUnblockTime+0x38>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4a04      	ldr	r2, [pc, #16]	; (8004004 <prvResetNextTaskUnblockTime+0x3c>)
 8003ff2:	6013      	str	r3, [r2, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	200004dc 	.word	0x200004dc
 8004004:	20000544 	.word	0x20000544

08004008 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004012:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004018:	4b28      	ldr	r3, [pc, #160]	; (80040bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3304      	adds	r3, #4
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fb0d 	bl	800363e <uxListRemove>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10b      	bne.n	8004042 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800402a:	4b24      	ldr	r3, [pc, #144]	; (80040bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	2201      	movs	r2, #1
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43da      	mvns	r2, r3
 8004038:	4b21      	ldr	r3, [pc, #132]	; (80040c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4013      	ands	r3, r2
 800403e:	4a20      	ldr	r2, [pc, #128]	; (80040c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004040:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004048:	d10a      	bne.n	8004060 <prvAddCurrentTaskToDelayedList+0x58>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004050:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3304      	adds	r3, #4
 8004056:	4619      	mov	r1, r3
 8004058:	481a      	ldr	r0, [pc, #104]	; (80040c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800405a:	f7ff fa93 	bl	8003584 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800405e:	e026      	b.n	80040ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004068:	4b14      	ldr	r3, [pc, #80]	; (80040bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	429a      	cmp	r2, r3
 8004076:	d209      	bcs.n	800408c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004078:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3304      	adds	r3, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f7ff faa1 	bl	80035cc <vListInsert>
}
 800408a:	e010      	b.n	80040ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800408c:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3304      	adds	r3, #4
 8004096:	4619      	mov	r1, r3
 8004098:	4610      	mov	r0, r2
 800409a:	f7ff fa97 	bl	80035cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800409e:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d202      	bcs.n	80040ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80040a8:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	6013      	str	r3, [r2, #0]
}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000528 	.word	0x20000528
 80040bc:	20000424 	.word	0x20000424
 80040c0:	2000052c 	.word	0x2000052c
 80040c4:	20000510 	.word	0x20000510
 80040c8:	200004e0 	.word	0x200004e0
 80040cc:	200004dc 	.word	0x200004dc
 80040d0:	20000544 	.word	0x20000544

080040d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3b04      	subs	r3, #4
 80040e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3b04      	subs	r3, #4
 80040f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f023 0201 	bic.w	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3b04      	subs	r3, #4
 8004102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004104:	4a0c      	ldr	r2, [pc, #48]	; (8004138 <pxPortInitialiseStack+0x64>)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3b14      	subs	r3, #20
 800410e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3b04      	subs	r3, #4
 800411a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f06f 0202 	mvn.w	r2, #2
 8004122:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3b20      	subs	r3, #32
 8004128:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800412a:	68fb      	ldr	r3, [r7, #12]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	0800413d 	.word	0x0800413d

0800413c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004146:	4b12      	ldr	r3, [pc, #72]	; (8004190 <prvTaskExitError+0x54>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800414e:	d00a      	beq.n	8004166 <prvTaskExitError+0x2a>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	60fb      	str	r3, [r7, #12]
}
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <prvTaskExitError+0x28>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	60bb      	str	r3, [r7, #8]
}
 8004178:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800417a:	bf00      	nop
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0fc      	beq.n	800417c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004182:	bf00      	nop
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	2000000c 	.word	0x2000000c
	...

080041a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <pxCurrentTCBConst2>)
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	6808      	ldr	r0, [r1, #0]
 80041a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041aa:	f380 8809 	msr	PSP, r0
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f380 8811 	msr	BASEPRI, r0
 80041ba:	4770      	bx	lr
 80041bc:	f3af 8000 	nop.w

080041c0 <pxCurrentTCBConst2>:
 80041c0:	20000424 	.word	0x20000424
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop

080041c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041c8:	4808      	ldr	r0, [pc, #32]	; (80041ec <prvPortStartFirstTask+0x24>)
 80041ca:	6800      	ldr	r0, [r0, #0]
 80041cc:	6800      	ldr	r0, [r0, #0]
 80041ce:	f380 8808 	msr	MSP, r0
 80041d2:	f04f 0000 	mov.w	r0, #0
 80041d6:	f380 8814 	msr	CONTROL, r0
 80041da:	b662      	cpsie	i
 80041dc:	b661      	cpsie	f
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	df00      	svc	0
 80041e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041ea:	bf00      	nop
 80041ec:	e000ed08 	.word	0xe000ed08

080041f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041f6:	4b46      	ldr	r3, [pc, #280]	; (8004310 <xPortStartScheduler+0x120>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a46      	ldr	r2, [pc, #280]	; (8004314 <xPortStartScheduler+0x124>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d10a      	bne.n	8004216 <xPortStartScheduler+0x26>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	613b      	str	r3, [r7, #16]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004216:	4b3e      	ldr	r3, [pc, #248]	; (8004310 <xPortStartScheduler+0x120>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a3f      	ldr	r2, [pc, #252]	; (8004318 <xPortStartScheduler+0x128>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d10a      	bne.n	8004236 <xPortStartScheduler+0x46>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	60fb      	str	r3, [r7, #12]
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004236:	4b39      	ldr	r3, [pc, #228]	; (800431c <xPortStartScheduler+0x12c>)
 8004238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	22ff      	movs	r2, #255	; 0xff
 8004246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004258:	b2da      	uxtb	r2, r3
 800425a:	4b31      	ldr	r3, [pc, #196]	; (8004320 <xPortStartScheduler+0x130>)
 800425c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800425e:	4b31      	ldr	r3, [pc, #196]	; (8004324 <xPortStartScheduler+0x134>)
 8004260:	2207      	movs	r2, #7
 8004262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004264:	e009      	b.n	800427a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004266:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <xPortStartScheduler+0x134>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3b01      	subs	r3, #1
 800426c:	4a2d      	ldr	r2, [pc, #180]	; (8004324 <xPortStartScheduler+0x134>)
 800426e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	b2db      	uxtb	r3, r3
 8004278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	d0ef      	beq.n	8004266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004286:	4b27      	ldr	r3, [pc, #156]	; (8004324 <xPortStartScheduler+0x134>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f1c3 0307 	rsb	r3, r3, #7
 800428e:	2b04      	cmp	r3, #4
 8004290:	d00a      	beq.n	80042a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	60bb      	str	r3, [r7, #8]
}
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042a8:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <xPortStartScheduler+0x134>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <xPortStartScheduler+0x134>)
 80042b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <xPortStartScheduler+0x134>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042ba:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <xPortStartScheduler+0x134>)
 80042bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042c6:	4b18      	ldr	r3, [pc, #96]	; (8004328 <xPortStartScheduler+0x138>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a17      	ldr	r2, [pc, #92]	; (8004328 <xPortStartScheduler+0x138>)
 80042cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <xPortStartScheduler+0x138>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a14      	ldr	r2, [pc, #80]	; (8004328 <xPortStartScheduler+0x138>)
 80042d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042de:	f000 f8dd 	bl	800449c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042e2:	4b12      	ldr	r3, [pc, #72]	; (800432c <xPortStartScheduler+0x13c>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042e8:	f000 f8fc 	bl	80044e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <xPortStartScheduler+0x140>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0f      	ldr	r2, [pc, #60]	; (8004330 <xPortStartScheduler+0x140>)
 80042f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042f8:	f7ff ff66 	bl	80041c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042fc:	f7ff fd52 	bl	8003da4 <vTaskSwitchContext>
	prvTaskExitError();
 8004300:	f7ff ff1c 	bl	800413c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	e000ed00 	.word	0xe000ed00
 8004314:	410fc271 	.word	0x410fc271
 8004318:	410fc270 	.word	0x410fc270
 800431c:	e000e400 	.word	0xe000e400
 8004320:	20000550 	.word	0x20000550
 8004324:	20000554 	.word	0x20000554
 8004328:	e000ed20 	.word	0xe000ed20
 800432c:	2000000c 	.word	0x2000000c
 8004330:	e000ef34 	.word	0xe000ef34

08004334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	607b      	str	r3, [r7, #4]
}
 800434c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800434e:	4b0f      	ldr	r3, [pc, #60]	; (800438c <vPortEnterCritical+0x58>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3301      	adds	r3, #1
 8004354:	4a0d      	ldr	r2, [pc, #52]	; (800438c <vPortEnterCritical+0x58>)
 8004356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <vPortEnterCritical+0x58>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d10f      	bne.n	8004380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <vPortEnterCritical+0x5c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <vPortEnterCritical+0x4c>
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	603b      	str	r3, [r7, #0]
}
 800437c:	bf00      	nop
 800437e:	e7fe      	b.n	800437e <vPortEnterCritical+0x4a>
	}
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	2000000c 	.word	0x2000000c
 8004390:	e000ed04 	.word	0xe000ed04

08004394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800439a:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <vPortExitCritical+0x50>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <vPortExitCritical+0x24>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	607b      	str	r3, [r7, #4]
}
 80043b4:	bf00      	nop
 80043b6:	e7fe      	b.n	80043b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <vPortExitCritical+0x50>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3b01      	subs	r3, #1
 80043be:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <vPortExitCritical+0x50>)
 80043c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043c2:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <vPortExitCritical+0x50>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d105      	bne.n	80043d6 <vPortExitCritical+0x42>
 80043ca:	2300      	movs	r3, #0
 80043cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	2000000c 	.word	0x2000000c
	...

080043f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043f0:	f3ef 8009 	mrs	r0, PSP
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	4b15      	ldr	r3, [pc, #84]	; (8004450 <pxCurrentTCBConst>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	f01e 0f10 	tst.w	lr, #16
 8004400:	bf08      	it	eq
 8004402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440a:	6010      	str	r0, [r2, #0]
 800440c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004414:	f380 8811 	msr	BASEPRI, r0
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f7ff fcc0 	bl	8003da4 <vTaskSwitchContext>
 8004424:	f04f 0000 	mov.w	r0, #0
 8004428:	f380 8811 	msr	BASEPRI, r0
 800442c:	bc09      	pop	{r0, r3}
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	6808      	ldr	r0, [r1, #0]
 8004432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004436:	f01e 0f10 	tst.w	lr, #16
 800443a:	bf08      	it	eq
 800443c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004440:	f380 8809 	msr	PSP, r0
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	f3af 8000 	nop.w

08004450 <pxCurrentTCBConst>:
 8004450:	20000424 	.word	0x20000424
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop

08004458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	607b      	str	r3, [r7, #4]
}
 8004470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004472:	f7ff fbdf 	bl	8003c34 <xTaskIncrementTick>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <SysTick_Handler+0x40>)
 800447e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	2300      	movs	r3, #0
 8004486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	f383 8811 	msr	BASEPRI, r3
}
 800448e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <vPortSetupTimerInterrupt+0x34>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <vPortSetupTimerInterrupt+0x38>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <vPortSetupTimerInterrupt+0x3c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <vPortSetupTimerInterrupt+0x40>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <vPortSetupTimerInterrupt+0x44>)
 80044ba:	3b01      	subs	r3, #1
 80044bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <vPortSetupTimerInterrupt+0x34>)
 80044c0:	2207      	movs	r2, #7
 80044c2:	601a      	str	r2, [r3, #0]
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	e000e010 	.word	0xe000e010
 80044d4:	e000e018 	.word	0xe000e018
 80044d8:	20000000 	.word	0x20000000
 80044dc:	10624dd3 	.word	0x10624dd3
 80044e0:	e000e014 	.word	0xe000e014

080044e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044f4 <vPortEnableVFP+0x10>
 80044e8:	6801      	ldr	r1, [r0, #0]
 80044ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044ee:	6001      	str	r1, [r0, #0]
 80044f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044f2:	bf00      	nop
 80044f4:	e000ed88 	.word	0xe000ed88

080044f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004504:	f7ff faec 	bl	8003ae0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004508:	4b5b      	ldr	r3, [pc, #364]	; (8004678 <pvPortMalloc+0x180>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004510:	f000 f920 	bl	8004754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004514:	4b59      	ldr	r3, [pc, #356]	; (800467c <pvPortMalloc+0x184>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f040 8093 	bne.w	8004648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01d      	beq.n	8004564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004528:	2208      	movs	r2, #8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	2b00      	cmp	r3, #0
 8004538:	d014      	beq.n	8004564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f023 0307 	bic.w	r3, r3, #7
 8004540:	3308      	adds	r3, #8
 8004542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <pvPortMalloc+0x6c>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	617b      	str	r3, [r7, #20]
}
 8004560:	bf00      	nop
 8004562:	e7fe      	b.n	8004562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d06e      	beq.n	8004648 <pvPortMalloc+0x150>
 800456a:	4b45      	ldr	r3, [pc, #276]	; (8004680 <pvPortMalloc+0x188>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	d869      	bhi.n	8004648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004574:	4b43      	ldr	r3, [pc, #268]	; (8004684 <pvPortMalloc+0x18c>)
 8004576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004578:	4b42      	ldr	r3, [pc, #264]	; (8004684 <pvPortMalloc+0x18c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800457e:	e004      	b.n	800458a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	d903      	bls.n	800459c <pvPortMalloc+0xa4>
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f1      	bne.n	8004580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800459c:	4b36      	ldr	r3, [pc, #216]	; (8004678 <pvPortMalloc+0x180>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d050      	beq.n	8004648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2208      	movs	r2, #8
 80045ac:	4413      	add	r3, r2
 80045ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	1ad2      	subs	r2, r2, r3
 80045c0:	2308      	movs	r3, #8
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d91f      	bls.n	8004608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <pvPortMalloc+0xf8>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	613b      	str	r3, [r7, #16]
}
 80045ec:	bf00      	nop
 80045ee:	e7fe      	b.n	80045ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	1ad2      	subs	r2, r2, r3
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004602:	69b8      	ldr	r0, [r7, #24]
 8004604:	f000 f908 	bl	8004818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004608:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <pvPortMalloc+0x188>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <pvPortMalloc+0x188>)
 8004614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004616:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <pvPortMalloc+0x188>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <pvPortMalloc+0x190>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d203      	bcs.n	800462a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004622:	4b17      	ldr	r3, [pc, #92]	; (8004680 <pvPortMalloc+0x188>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a18      	ldr	r2, [pc, #96]	; (8004688 <pvPortMalloc+0x190>)
 8004628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	4b13      	ldr	r3, [pc, #76]	; (800467c <pvPortMalloc+0x184>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	431a      	orrs	r2, r3
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800463e:	4b13      	ldr	r3, [pc, #76]	; (800468c <pvPortMalloc+0x194>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	4a11      	ldr	r2, [pc, #68]	; (800468c <pvPortMalloc+0x194>)
 8004646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004648:	f7ff fa58 	bl	8003afc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <pvPortMalloc+0x174>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	60fb      	str	r3, [r7, #12]
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <pvPortMalloc+0x172>
	return pvReturn;
 800466c:	69fb      	ldr	r3, [r7, #28]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3728      	adds	r7, #40	; 0x28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20004160 	.word	0x20004160
 800467c:	20004174 	.word	0x20004174
 8004680:	20004164 	.word	0x20004164
 8004684:	20004158 	.word	0x20004158
 8004688:	20004168 	.word	0x20004168
 800468c:	2000416c 	.word	0x2000416c

08004690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04d      	beq.n	800473e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046a2:	2308      	movs	r3, #8
 80046a4:	425b      	negs	r3, r3
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4413      	add	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	4b24      	ldr	r3, [pc, #144]	; (8004748 <vPortFree+0xb8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <vPortFree+0x44>
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	60fb      	str	r3, [r7, #12]
}
 80046d0:	bf00      	nop
 80046d2:	e7fe      	b.n	80046d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <vPortFree+0x62>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	60bb      	str	r3, [r7, #8]
}
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	4b14      	ldr	r3, [pc, #80]	; (8004748 <vPortFree+0xb8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01e      	beq.n	800473e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d11a      	bne.n	800473e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <vPortFree+0xb8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	43db      	mvns	r3, r3
 8004712:	401a      	ands	r2, r3
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004718:	f7ff f9e2 	bl	8003ae0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <vPortFree+0xbc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4413      	add	r3, r2
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <vPortFree+0xbc>)
 8004728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800472a:	6938      	ldr	r0, [r7, #16]
 800472c:	f000 f874 	bl	8004818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <vPortFree+0xc0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	4a06      	ldr	r2, [pc, #24]	; (8004750 <vPortFree+0xc0>)
 8004738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800473a:	f7ff f9df 	bl	8003afc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800473e:	bf00      	nop
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20004174 	.word	0x20004174
 800474c:	20004164 	.word	0x20004164
 8004750:	20004170 	.word	0x20004170

08004754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800475a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800475e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004760:	4b27      	ldr	r3, [pc, #156]	; (8004800 <prvHeapInit+0xac>)
 8004762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00c      	beq.n	8004788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3307      	adds	r3, #7
 8004772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0307 	bic.w	r3, r3, #7
 800477a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	4a1f      	ldr	r2, [pc, #124]	; (8004800 <prvHeapInit+0xac>)
 8004784:	4413      	add	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800478c:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <prvHeapInit+0xb0>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <prvHeapInit+0xb0>)
 8004794:	2200      	movs	r2, #0
 8004796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	4413      	add	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047a0:	2208      	movs	r2, #8
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0307 	bic.w	r3, r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a15      	ldr	r2, [pc, #84]	; (8004808 <prvHeapInit+0xb4>)
 80047b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047b6:	4b14      	ldr	r3, [pc, #80]	; (8004808 <prvHeapInit+0xb4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2200      	movs	r2, #0
 80047bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <prvHeapInit+0xb4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	1ad2      	subs	r2, r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047d4:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <prvHeapInit+0xb4>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4a0a      	ldr	r2, [pc, #40]	; (800480c <prvHeapInit+0xb8>)
 80047e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a09      	ldr	r2, [pc, #36]	; (8004810 <prvHeapInit+0xbc>)
 80047ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <prvHeapInit+0xc0>)
 80047ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047f2:	601a      	str	r2, [r3, #0]
}
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	20000558 	.word	0x20000558
 8004804:	20004158 	.word	0x20004158
 8004808:	20004160 	.word	0x20004160
 800480c:	20004168 	.word	0x20004168
 8004810:	20004164 	.word	0x20004164
 8004814:	20004174 	.word	0x20004174

08004818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004820:	4b28      	ldr	r3, [pc, #160]	; (80048c4 <prvInsertBlockIntoFreeList+0xac>)
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e002      	b.n	800482c <prvInsertBlockIntoFreeList+0x14>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	429a      	cmp	r2, r3
 8004834:	d8f7      	bhi.n	8004826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4413      	add	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	429a      	cmp	r2, r3
 8004846:	d108      	bne.n	800485a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	441a      	add	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	441a      	add	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d118      	bne.n	80048a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d00d      	beq.n	8004896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	441a      	add	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e008      	b.n	80048a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e003      	b.n	80048a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d002      	beq.n	80048b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20004158 	.word	0x20004158
 80048c8:	20004160 	.word	0x20004160

080048cc <__errno>:
 80048cc:	4b01      	ldr	r3, [pc, #4]	; (80048d4 <__errno+0x8>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000010 	.word	0x20000010

080048d8 <__libc_init_array>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	4d0d      	ldr	r5, [pc, #52]	; (8004910 <__libc_init_array+0x38>)
 80048dc:	4c0d      	ldr	r4, [pc, #52]	; (8004914 <__libc_init_array+0x3c>)
 80048de:	1b64      	subs	r4, r4, r5
 80048e0:	10a4      	asrs	r4, r4, #2
 80048e2:	2600      	movs	r6, #0
 80048e4:	42a6      	cmp	r6, r4
 80048e6:	d109      	bne.n	80048fc <__libc_init_array+0x24>
 80048e8:	4d0b      	ldr	r5, [pc, #44]	; (8004918 <__libc_init_array+0x40>)
 80048ea:	4c0c      	ldr	r4, [pc, #48]	; (800491c <__libc_init_array+0x44>)
 80048ec:	f000 ffae 	bl	800584c <_init>
 80048f0:	1b64      	subs	r4, r4, r5
 80048f2:	10a4      	asrs	r4, r4, #2
 80048f4:	2600      	movs	r6, #0
 80048f6:	42a6      	cmp	r6, r4
 80048f8:	d105      	bne.n	8004906 <__libc_init_array+0x2e>
 80048fa:	bd70      	pop	{r4, r5, r6, pc}
 80048fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004900:	4798      	blx	r3
 8004902:	3601      	adds	r6, #1
 8004904:	e7ee      	b.n	80048e4 <__libc_init_array+0xc>
 8004906:	f855 3b04 	ldr.w	r3, [r5], #4
 800490a:	4798      	blx	r3
 800490c:	3601      	adds	r6, #1
 800490e:	e7f2      	b.n	80048f6 <__libc_init_array+0x1e>
 8004910:	080059a8 	.word	0x080059a8
 8004914:	080059a8 	.word	0x080059a8
 8004918:	080059a8 	.word	0x080059a8
 800491c:	080059ac 	.word	0x080059ac

08004920 <memset>:
 8004920:	4402      	add	r2, r0
 8004922:	4603      	mov	r3, r0
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <memset+0xa>
 8004928:	4770      	bx	lr
 800492a:	f803 1b01 	strb.w	r1, [r3], #1
 800492e:	e7f9      	b.n	8004924 <memset+0x4>

08004930 <iprintf>:
 8004930:	b40f      	push	{r0, r1, r2, r3}
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <iprintf+0x2c>)
 8004934:	b513      	push	{r0, r1, r4, lr}
 8004936:	681c      	ldr	r4, [r3, #0]
 8004938:	b124      	cbz	r4, 8004944 <iprintf+0x14>
 800493a:	69a3      	ldr	r3, [r4, #24]
 800493c:	b913      	cbnz	r3, 8004944 <iprintf+0x14>
 800493e:	4620      	mov	r0, r4
 8004940:	f000 f866 	bl	8004a10 <__sinit>
 8004944:	ab05      	add	r3, sp, #20
 8004946:	9a04      	ldr	r2, [sp, #16]
 8004948:	68a1      	ldr	r1, [r4, #8]
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	4620      	mov	r0, r4
 800494e:	f000 f9bd 	bl	8004ccc <_vfiprintf_r>
 8004952:	b002      	add	sp, #8
 8004954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004958:	b004      	add	sp, #16
 800495a:	4770      	bx	lr
 800495c:	20000010 	.word	0x20000010

08004960 <std>:
 8004960:	2300      	movs	r3, #0
 8004962:	b510      	push	{r4, lr}
 8004964:	4604      	mov	r4, r0
 8004966:	e9c0 3300 	strd	r3, r3, [r0]
 800496a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800496e:	6083      	str	r3, [r0, #8]
 8004970:	8181      	strh	r1, [r0, #12]
 8004972:	6643      	str	r3, [r0, #100]	; 0x64
 8004974:	81c2      	strh	r2, [r0, #14]
 8004976:	6183      	str	r3, [r0, #24]
 8004978:	4619      	mov	r1, r3
 800497a:	2208      	movs	r2, #8
 800497c:	305c      	adds	r0, #92	; 0x5c
 800497e:	f7ff ffcf 	bl	8004920 <memset>
 8004982:	4b05      	ldr	r3, [pc, #20]	; (8004998 <std+0x38>)
 8004984:	6263      	str	r3, [r4, #36]	; 0x24
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <std+0x3c>)
 8004988:	62a3      	str	r3, [r4, #40]	; 0x28
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <std+0x40>)
 800498c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <std+0x44>)
 8004990:	6224      	str	r4, [r4, #32]
 8004992:	6323      	str	r3, [r4, #48]	; 0x30
 8004994:	bd10      	pop	{r4, pc}
 8004996:	bf00      	nop
 8004998:	08005275 	.word	0x08005275
 800499c:	08005297 	.word	0x08005297
 80049a0:	080052cf 	.word	0x080052cf
 80049a4:	080052f3 	.word	0x080052f3

080049a8 <_cleanup_r>:
 80049a8:	4901      	ldr	r1, [pc, #4]	; (80049b0 <_cleanup_r+0x8>)
 80049aa:	f000 b8af 	b.w	8004b0c <_fwalk_reent>
 80049ae:	bf00      	nop
 80049b0:	080055cd 	.word	0x080055cd

080049b4 <__sfmoreglue>:
 80049b4:	b570      	push	{r4, r5, r6, lr}
 80049b6:	2268      	movs	r2, #104	; 0x68
 80049b8:	1e4d      	subs	r5, r1, #1
 80049ba:	4355      	muls	r5, r2
 80049bc:	460e      	mov	r6, r1
 80049be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049c2:	f000 f8e5 	bl	8004b90 <_malloc_r>
 80049c6:	4604      	mov	r4, r0
 80049c8:	b140      	cbz	r0, 80049dc <__sfmoreglue+0x28>
 80049ca:	2100      	movs	r1, #0
 80049cc:	e9c0 1600 	strd	r1, r6, [r0]
 80049d0:	300c      	adds	r0, #12
 80049d2:	60a0      	str	r0, [r4, #8]
 80049d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049d8:	f7ff ffa2 	bl	8004920 <memset>
 80049dc:	4620      	mov	r0, r4
 80049de:	bd70      	pop	{r4, r5, r6, pc}

080049e0 <__sfp_lock_acquire>:
 80049e0:	4801      	ldr	r0, [pc, #4]	; (80049e8 <__sfp_lock_acquire+0x8>)
 80049e2:	f000 b8b3 	b.w	8004b4c <__retarget_lock_acquire_recursive>
 80049e6:	bf00      	nop
 80049e8:	20004179 	.word	0x20004179

080049ec <__sfp_lock_release>:
 80049ec:	4801      	ldr	r0, [pc, #4]	; (80049f4 <__sfp_lock_release+0x8>)
 80049ee:	f000 b8ae 	b.w	8004b4e <__retarget_lock_release_recursive>
 80049f2:	bf00      	nop
 80049f4:	20004179 	.word	0x20004179

080049f8 <__sinit_lock_acquire>:
 80049f8:	4801      	ldr	r0, [pc, #4]	; (8004a00 <__sinit_lock_acquire+0x8>)
 80049fa:	f000 b8a7 	b.w	8004b4c <__retarget_lock_acquire_recursive>
 80049fe:	bf00      	nop
 8004a00:	2000417a 	.word	0x2000417a

08004a04 <__sinit_lock_release>:
 8004a04:	4801      	ldr	r0, [pc, #4]	; (8004a0c <__sinit_lock_release+0x8>)
 8004a06:	f000 b8a2 	b.w	8004b4e <__retarget_lock_release_recursive>
 8004a0a:	bf00      	nop
 8004a0c:	2000417a 	.word	0x2000417a

08004a10 <__sinit>:
 8004a10:	b510      	push	{r4, lr}
 8004a12:	4604      	mov	r4, r0
 8004a14:	f7ff fff0 	bl	80049f8 <__sinit_lock_acquire>
 8004a18:	69a3      	ldr	r3, [r4, #24]
 8004a1a:	b11b      	cbz	r3, 8004a24 <__sinit+0x14>
 8004a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a20:	f7ff bff0 	b.w	8004a04 <__sinit_lock_release>
 8004a24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a28:	6523      	str	r3, [r4, #80]	; 0x50
 8004a2a:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <__sinit+0x68>)
 8004a2c:	4a13      	ldr	r2, [pc, #76]	; (8004a7c <__sinit+0x6c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a32:	42a3      	cmp	r3, r4
 8004a34:	bf04      	itt	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	61a3      	streq	r3, [r4, #24]
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	f000 f820 	bl	8004a80 <__sfp>
 8004a40:	6060      	str	r0, [r4, #4]
 8004a42:	4620      	mov	r0, r4
 8004a44:	f000 f81c 	bl	8004a80 <__sfp>
 8004a48:	60a0      	str	r0, [r4, #8]
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f000 f818 	bl	8004a80 <__sfp>
 8004a50:	2200      	movs	r2, #0
 8004a52:	60e0      	str	r0, [r4, #12]
 8004a54:	2104      	movs	r1, #4
 8004a56:	6860      	ldr	r0, [r4, #4]
 8004a58:	f7ff ff82 	bl	8004960 <std>
 8004a5c:	68a0      	ldr	r0, [r4, #8]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	2109      	movs	r1, #9
 8004a62:	f7ff ff7d 	bl	8004960 <std>
 8004a66:	68e0      	ldr	r0, [r4, #12]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	2112      	movs	r1, #18
 8004a6c:	f7ff ff78 	bl	8004960 <std>
 8004a70:	2301      	movs	r3, #1
 8004a72:	61a3      	str	r3, [r4, #24]
 8004a74:	e7d2      	b.n	8004a1c <__sinit+0xc>
 8004a76:	bf00      	nop
 8004a78:	08005908 	.word	0x08005908
 8004a7c:	080049a9 	.word	0x080049a9

08004a80 <__sfp>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	4607      	mov	r7, r0
 8004a84:	f7ff ffac 	bl	80049e0 <__sfp_lock_acquire>
 8004a88:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <__sfp+0x84>)
 8004a8a:	681e      	ldr	r6, [r3, #0]
 8004a8c:	69b3      	ldr	r3, [r6, #24]
 8004a8e:	b913      	cbnz	r3, 8004a96 <__sfp+0x16>
 8004a90:	4630      	mov	r0, r6
 8004a92:	f7ff ffbd 	bl	8004a10 <__sinit>
 8004a96:	3648      	adds	r6, #72	; 0x48
 8004a98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	d503      	bpl.n	8004aa8 <__sfp+0x28>
 8004aa0:	6833      	ldr	r3, [r6, #0]
 8004aa2:	b30b      	cbz	r3, 8004ae8 <__sfp+0x68>
 8004aa4:	6836      	ldr	r6, [r6, #0]
 8004aa6:	e7f7      	b.n	8004a98 <__sfp+0x18>
 8004aa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004aac:	b9d5      	cbnz	r5, 8004ae4 <__sfp+0x64>
 8004aae:	4b16      	ldr	r3, [pc, #88]	; (8004b08 <__sfp+0x88>)
 8004ab0:	60e3      	str	r3, [r4, #12]
 8004ab2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ab6:	6665      	str	r5, [r4, #100]	; 0x64
 8004ab8:	f000 f847 	bl	8004b4a <__retarget_lock_init_recursive>
 8004abc:	f7ff ff96 	bl	80049ec <__sfp_lock_release>
 8004ac0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ac4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ac8:	6025      	str	r5, [r4, #0]
 8004aca:	61a5      	str	r5, [r4, #24]
 8004acc:	2208      	movs	r2, #8
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ad4:	f7ff ff24 	bl	8004920 <memset>
 8004ad8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004adc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ae4:	3468      	adds	r4, #104	; 0x68
 8004ae6:	e7d9      	b.n	8004a9c <__sfp+0x1c>
 8004ae8:	2104      	movs	r1, #4
 8004aea:	4638      	mov	r0, r7
 8004aec:	f7ff ff62 	bl	80049b4 <__sfmoreglue>
 8004af0:	4604      	mov	r4, r0
 8004af2:	6030      	str	r0, [r6, #0]
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d1d5      	bne.n	8004aa4 <__sfp+0x24>
 8004af8:	f7ff ff78 	bl	80049ec <__sfp_lock_release>
 8004afc:	230c      	movs	r3, #12
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	e7ee      	b.n	8004ae0 <__sfp+0x60>
 8004b02:	bf00      	nop
 8004b04:	08005908 	.word	0x08005908
 8004b08:	ffff0001 	.word	0xffff0001

08004b0c <_fwalk_reent>:
 8004b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b10:	4606      	mov	r6, r0
 8004b12:	4688      	mov	r8, r1
 8004b14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b18:	2700      	movs	r7, #0
 8004b1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b1e:	f1b9 0901 	subs.w	r9, r9, #1
 8004b22:	d505      	bpl.n	8004b30 <_fwalk_reent+0x24>
 8004b24:	6824      	ldr	r4, [r4, #0]
 8004b26:	2c00      	cmp	r4, #0
 8004b28:	d1f7      	bne.n	8004b1a <_fwalk_reent+0xe>
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b30:	89ab      	ldrh	r3, [r5, #12]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d907      	bls.n	8004b46 <_fwalk_reent+0x3a>
 8004b36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	d003      	beq.n	8004b46 <_fwalk_reent+0x3a>
 8004b3e:	4629      	mov	r1, r5
 8004b40:	4630      	mov	r0, r6
 8004b42:	47c0      	blx	r8
 8004b44:	4307      	orrs	r7, r0
 8004b46:	3568      	adds	r5, #104	; 0x68
 8004b48:	e7e9      	b.n	8004b1e <_fwalk_reent+0x12>

08004b4a <__retarget_lock_init_recursive>:
 8004b4a:	4770      	bx	lr

08004b4c <__retarget_lock_acquire_recursive>:
 8004b4c:	4770      	bx	lr

08004b4e <__retarget_lock_release_recursive>:
 8004b4e:	4770      	bx	lr

08004b50 <sbrk_aligned>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4e0e      	ldr	r6, [pc, #56]	; (8004b8c <sbrk_aligned+0x3c>)
 8004b54:	460c      	mov	r4, r1
 8004b56:	6831      	ldr	r1, [r6, #0]
 8004b58:	4605      	mov	r5, r0
 8004b5a:	b911      	cbnz	r1, 8004b62 <sbrk_aligned+0x12>
 8004b5c:	f000 fb7a 	bl	8005254 <_sbrk_r>
 8004b60:	6030      	str	r0, [r6, #0]
 8004b62:	4621      	mov	r1, r4
 8004b64:	4628      	mov	r0, r5
 8004b66:	f000 fb75 	bl	8005254 <_sbrk_r>
 8004b6a:	1c43      	adds	r3, r0, #1
 8004b6c:	d00a      	beq.n	8004b84 <sbrk_aligned+0x34>
 8004b6e:	1cc4      	adds	r4, r0, #3
 8004b70:	f024 0403 	bic.w	r4, r4, #3
 8004b74:	42a0      	cmp	r0, r4
 8004b76:	d007      	beq.n	8004b88 <sbrk_aligned+0x38>
 8004b78:	1a21      	subs	r1, r4, r0
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f000 fb6a 	bl	8005254 <_sbrk_r>
 8004b80:	3001      	adds	r0, #1
 8004b82:	d101      	bne.n	8004b88 <sbrk_aligned+0x38>
 8004b84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004b88:	4620      	mov	r0, r4
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	20004180 	.word	0x20004180

08004b90 <_malloc_r>:
 8004b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b94:	1ccd      	adds	r5, r1, #3
 8004b96:	f025 0503 	bic.w	r5, r5, #3
 8004b9a:	3508      	adds	r5, #8
 8004b9c:	2d0c      	cmp	r5, #12
 8004b9e:	bf38      	it	cc
 8004ba0:	250c      	movcc	r5, #12
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	4607      	mov	r7, r0
 8004ba6:	db01      	blt.n	8004bac <_malloc_r+0x1c>
 8004ba8:	42a9      	cmp	r1, r5
 8004baa:	d905      	bls.n	8004bb8 <_malloc_r+0x28>
 8004bac:	230c      	movs	r3, #12
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	2600      	movs	r6, #0
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bb8:	4e2e      	ldr	r6, [pc, #184]	; (8004c74 <_malloc_r+0xe4>)
 8004bba:	f000 fdbb 	bl	8005734 <__malloc_lock>
 8004bbe:	6833      	ldr	r3, [r6, #0]
 8004bc0:	461c      	mov	r4, r3
 8004bc2:	bb34      	cbnz	r4, 8004c12 <_malloc_r+0x82>
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	f7ff ffc2 	bl	8004b50 <sbrk_aligned>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	4604      	mov	r4, r0
 8004bd0:	d14d      	bne.n	8004c6e <_malloc_r+0xde>
 8004bd2:	6834      	ldr	r4, [r6, #0]
 8004bd4:	4626      	mov	r6, r4
 8004bd6:	2e00      	cmp	r6, #0
 8004bd8:	d140      	bne.n	8004c5c <_malloc_r+0xcc>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4638      	mov	r0, r7
 8004be0:	eb04 0803 	add.w	r8, r4, r3
 8004be4:	f000 fb36 	bl	8005254 <_sbrk_r>
 8004be8:	4580      	cmp	r8, r0
 8004bea:	d13a      	bne.n	8004c62 <_malloc_r+0xd2>
 8004bec:	6821      	ldr	r1, [r4, #0]
 8004bee:	3503      	adds	r5, #3
 8004bf0:	1a6d      	subs	r5, r5, r1
 8004bf2:	f025 0503 	bic.w	r5, r5, #3
 8004bf6:	3508      	adds	r5, #8
 8004bf8:	2d0c      	cmp	r5, #12
 8004bfa:	bf38      	it	cc
 8004bfc:	250c      	movcc	r5, #12
 8004bfe:	4629      	mov	r1, r5
 8004c00:	4638      	mov	r0, r7
 8004c02:	f7ff ffa5 	bl	8004b50 <sbrk_aligned>
 8004c06:	3001      	adds	r0, #1
 8004c08:	d02b      	beq.n	8004c62 <_malloc_r+0xd2>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	442b      	add	r3, r5
 8004c0e:	6023      	str	r3, [r4, #0]
 8004c10:	e00e      	b.n	8004c30 <_malloc_r+0xa0>
 8004c12:	6822      	ldr	r2, [r4, #0]
 8004c14:	1b52      	subs	r2, r2, r5
 8004c16:	d41e      	bmi.n	8004c56 <_malloc_r+0xc6>
 8004c18:	2a0b      	cmp	r2, #11
 8004c1a:	d916      	bls.n	8004c4a <_malloc_r+0xba>
 8004c1c:	1961      	adds	r1, r4, r5
 8004c1e:	42a3      	cmp	r3, r4
 8004c20:	6025      	str	r5, [r4, #0]
 8004c22:	bf18      	it	ne
 8004c24:	6059      	strne	r1, [r3, #4]
 8004c26:	6863      	ldr	r3, [r4, #4]
 8004c28:	bf08      	it	eq
 8004c2a:	6031      	streq	r1, [r6, #0]
 8004c2c:	5162      	str	r2, [r4, r5]
 8004c2e:	604b      	str	r3, [r1, #4]
 8004c30:	4638      	mov	r0, r7
 8004c32:	f104 060b 	add.w	r6, r4, #11
 8004c36:	f000 fd83 	bl	8005740 <__malloc_unlock>
 8004c3a:	f026 0607 	bic.w	r6, r6, #7
 8004c3e:	1d23      	adds	r3, r4, #4
 8004c40:	1af2      	subs	r2, r6, r3
 8004c42:	d0b6      	beq.n	8004bb2 <_malloc_r+0x22>
 8004c44:	1b9b      	subs	r3, r3, r6
 8004c46:	50a3      	str	r3, [r4, r2]
 8004c48:	e7b3      	b.n	8004bb2 <_malloc_r+0x22>
 8004c4a:	6862      	ldr	r2, [r4, #4]
 8004c4c:	42a3      	cmp	r3, r4
 8004c4e:	bf0c      	ite	eq
 8004c50:	6032      	streq	r2, [r6, #0]
 8004c52:	605a      	strne	r2, [r3, #4]
 8004c54:	e7ec      	b.n	8004c30 <_malloc_r+0xa0>
 8004c56:	4623      	mov	r3, r4
 8004c58:	6864      	ldr	r4, [r4, #4]
 8004c5a:	e7b2      	b.n	8004bc2 <_malloc_r+0x32>
 8004c5c:	4634      	mov	r4, r6
 8004c5e:	6876      	ldr	r6, [r6, #4]
 8004c60:	e7b9      	b.n	8004bd6 <_malloc_r+0x46>
 8004c62:	230c      	movs	r3, #12
 8004c64:	603b      	str	r3, [r7, #0]
 8004c66:	4638      	mov	r0, r7
 8004c68:	f000 fd6a 	bl	8005740 <__malloc_unlock>
 8004c6c:	e7a1      	b.n	8004bb2 <_malloc_r+0x22>
 8004c6e:	6025      	str	r5, [r4, #0]
 8004c70:	e7de      	b.n	8004c30 <_malloc_r+0xa0>
 8004c72:	bf00      	nop
 8004c74:	2000417c 	.word	0x2000417c

08004c78 <__sfputc_r>:
 8004c78:	6893      	ldr	r3, [r2, #8]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	b410      	push	{r4}
 8004c80:	6093      	str	r3, [r2, #8]
 8004c82:	da08      	bge.n	8004c96 <__sfputc_r+0x1e>
 8004c84:	6994      	ldr	r4, [r2, #24]
 8004c86:	42a3      	cmp	r3, r4
 8004c88:	db01      	blt.n	8004c8e <__sfputc_r+0x16>
 8004c8a:	290a      	cmp	r1, #10
 8004c8c:	d103      	bne.n	8004c96 <__sfputc_r+0x1e>
 8004c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c92:	f000 bb33 	b.w	80052fc <__swbuf_r>
 8004c96:	6813      	ldr	r3, [r2, #0]
 8004c98:	1c58      	adds	r0, r3, #1
 8004c9a:	6010      	str	r0, [r2, #0]
 8004c9c:	7019      	strb	r1, [r3, #0]
 8004c9e:	4608      	mov	r0, r1
 8004ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <__sfputs_r>:
 8004ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca8:	4606      	mov	r6, r0
 8004caa:	460f      	mov	r7, r1
 8004cac:	4614      	mov	r4, r2
 8004cae:	18d5      	adds	r5, r2, r3
 8004cb0:	42ac      	cmp	r4, r5
 8004cb2:	d101      	bne.n	8004cb8 <__sfputs_r+0x12>
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	e007      	b.n	8004cc8 <__sfputs_r+0x22>
 8004cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cbc:	463a      	mov	r2, r7
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f7ff ffda 	bl	8004c78 <__sfputc_r>
 8004cc4:	1c43      	adds	r3, r0, #1
 8004cc6:	d1f3      	bne.n	8004cb0 <__sfputs_r+0xa>
 8004cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ccc <_vfiprintf_r>:
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	460d      	mov	r5, r1
 8004cd2:	b09d      	sub	sp, #116	; 0x74
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	4698      	mov	r8, r3
 8004cd8:	4606      	mov	r6, r0
 8004cda:	b118      	cbz	r0, 8004ce4 <_vfiprintf_r+0x18>
 8004cdc:	6983      	ldr	r3, [r0, #24]
 8004cde:	b90b      	cbnz	r3, 8004ce4 <_vfiprintf_r+0x18>
 8004ce0:	f7ff fe96 	bl	8004a10 <__sinit>
 8004ce4:	4b89      	ldr	r3, [pc, #548]	; (8004f0c <_vfiprintf_r+0x240>)
 8004ce6:	429d      	cmp	r5, r3
 8004ce8:	d11b      	bne.n	8004d22 <_vfiprintf_r+0x56>
 8004cea:	6875      	ldr	r5, [r6, #4]
 8004cec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cee:	07d9      	lsls	r1, r3, #31
 8004cf0:	d405      	bmi.n	8004cfe <_vfiprintf_r+0x32>
 8004cf2:	89ab      	ldrh	r3, [r5, #12]
 8004cf4:	059a      	lsls	r2, r3, #22
 8004cf6:	d402      	bmi.n	8004cfe <_vfiprintf_r+0x32>
 8004cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cfa:	f7ff ff27 	bl	8004b4c <__retarget_lock_acquire_recursive>
 8004cfe:	89ab      	ldrh	r3, [r5, #12]
 8004d00:	071b      	lsls	r3, r3, #28
 8004d02:	d501      	bpl.n	8004d08 <_vfiprintf_r+0x3c>
 8004d04:	692b      	ldr	r3, [r5, #16]
 8004d06:	b9eb      	cbnz	r3, 8004d44 <_vfiprintf_r+0x78>
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	f000 fb5a 	bl	80053c4 <__swsetup_r>
 8004d10:	b1c0      	cbz	r0, 8004d44 <_vfiprintf_r+0x78>
 8004d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d14:	07dc      	lsls	r4, r3, #31
 8004d16:	d50e      	bpl.n	8004d36 <_vfiprintf_r+0x6a>
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d1c:	b01d      	add	sp, #116	; 0x74
 8004d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d22:	4b7b      	ldr	r3, [pc, #492]	; (8004f10 <_vfiprintf_r+0x244>)
 8004d24:	429d      	cmp	r5, r3
 8004d26:	d101      	bne.n	8004d2c <_vfiprintf_r+0x60>
 8004d28:	68b5      	ldr	r5, [r6, #8]
 8004d2a:	e7df      	b.n	8004cec <_vfiprintf_r+0x20>
 8004d2c:	4b79      	ldr	r3, [pc, #484]	; (8004f14 <_vfiprintf_r+0x248>)
 8004d2e:	429d      	cmp	r5, r3
 8004d30:	bf08      	it	eq
 8004d32:	68f5      	ldreq	r5, [r6, #12]
 8004d34:	e7da      	b.n	8004cec <_vfiprintf_r+0x20>
 8004d36:	89ab      	ldrh	r3, [r5, #12]
 8004d38:	0598      	lsls	r0, r3, #22
 8004d3a:	d4ed      	bmi.n	8004d18 <_vfiprintf_r+0x4c>
 8004d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d3e:	f7ff ff06 	bl	8004b4e <__retarget_lock_release_recursive>
 8004d42:	e7e9      	b.n	8004d18 <_vfiprintf_r+0x4c>
 8004d44:	2300      	movs	r3, #0
 8004d46:	9309      	str	r3, [sp, #36]	; 0x24
 8004d48:	2320      	movs	r3, #32
 8004d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d52:	2330      	movs	r3, #48	; 0x30
 8004d54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f18 <_vfiprintf_r+0x24c>
 8004d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d5c:	f04f 0901 	mov.w	r9, #1
 8004d60:	4623      	mov	r3, r4
 8004d62:	469a      	mov	sl, r3
 8004d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d68:	b10a      	cbz	r2, 8004d6e <_vfiprintf_r+0xa2>
 8004d6a:	2a25      	cmp	r2, #37	; 0x25
 8004d6c:	d1f9      	bne.n	8004d62 <_vfiprintf_r+0x96>
 8004d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d72:	d00b      	beq.n	8004d8c <_vfiprintf_r+0xc0>
 8004d74:	465b      	mov	r3, fp
 8004d76:	4622      	mov	r2, r4
 8004d78:	4629      	mov	r1, r5
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f7ff ff93 	bl	8004ca6 <__sfputs_r>
 8004d80:	3001      	adds	r0, #1
 8004d82:	f000 80aa 	beq.w	8004eda <_vfiprintf_r+0x20e>
 8004d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d88:	445a      	add	r2, fp
 8004d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80a2 	beq.w	8004eda <_vfiprintf_r+0x20e>
 8004d96:	2300      	movs	r3, #0
 8004d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004da0:	f10a 0a01 	add.w	sl, sl, #1
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	9307      	str	r3, [sp, #28]
 8004da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dac:	931a      	str	r3, [sp, #104]	; 0x68
 8004dae:	4654      	mov	r4, sl
 8004db0:	2205      	movs	r2, #5
 8004db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db6:	4858      	ldr	r0, [pc, #352]	; (8004f18 <_vfiprintf_r+0x24c>)
 8004db8:	f7fb fa1a 	bl	80001f0 <memchr>
 8004dbc:	9a04      	ldr	r2, [sp, #16]
 8004dbe:	b9d8      	cbnz	r0, 8004df8 <_vfiprintf_r+0x12c>
 8004dc0:	06d1      	lsls	r1, r2, #27
 8004dc2:	bf44      	itt	mi
 8004dc4:	2320      	movmi	r3, #32
 8004dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dca:	0713      	lsls	r3, r2, #28
 8004dcc:	bf44      	itt	mi
 8004dce:	232b      	movmi	r3, #43	; 0x2b
 8004dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8004dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dda:	d015      	beq.n	8004e08 <_vfiprintf_r+0x13c>
 8004ddc:	9a07      	ldr	r2, [sp, #28]
 8004dde:	4654      	mov	r4, sl
 8004de0:	2000      	movs	r0, #0
 8004de2:	f04f 0c0a 	mov.w	ip, #10
 8004de6:	4621      	mov	r1, r4
 8004de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dec:	3b30      	subs	r3, #48	; 0x30
 8004dee:	2b09      	cmp	r3, #9
 8004df0:	d94e      	bls.n	8004e90 <_vfiprintf_r+0x1c4>
 8004df2:	b1b0      	cbz	r0, 8004e22 <_vfiprintf_r+0x156>
 8004df4:	9207      	str	r2, [sp, #28]
 8004df6:	e014      	b.n	8004e22 <_vfiprintf_r+0x156>
 8004df8:	eba0 0308 	sub.w	r3, r0, r8
 8004dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8004e00:	4313      	orrs	r3, r2
 8004e02:	9304      	str	r3, [sp, #16]
 8004e04:	46a2      	mov	sl, r4
 8004e06:	e7d2      	b.n	8004dae <_vfiprintf_r+0xe2>
 8004e08:	9b03      	ldr	r3, [sp, #12]
 8004e0a:	1d19      	adds	r1, r3, #4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	9103      	str	r1, [sp, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bfbb      	ittet	lt
 8004e14:	425b      	neglt	r3, r3
 8004e16:	f042 0202 	orrlt.w	r2, r2, #2
 8004e1a:	9307      	strge	r3, [sp, #28]
 8004e1c:	9307      	strlt	r3, [sp, #28]
 8004e1e:	bfb8      	it	lt
 8004e20:	9204      	strlt	r2, [sp, #16]
 8004e22:	7823      	ldrb	r3, [r4, #0]
 8004e24:	2b2e      	cmp	r3, #46	; 0x2e
 8004e26:	d10c      	bne.n	8004e42 <_vfiprintf_r+0x176>
 8004e28:	7863      	ldrb	r3, [r4, #1]
 8004e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e2c:	d135      	bne.n	8004e9a <_vfiprintf_r+0x1ce>
 8004e2e:	9b03      	ldr	r3, [sp, #12]
 8004e30:	1d1a      	adds	r2, r3, #4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	9203      	str	r2, [sp, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bfb8      	it	lt
 8004e3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e3e:	3402      	adds	r4, #2
 8004e40:	9305      	str	r3, [sp, #20]
 8004e42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f28 <_vfiprintf_r+0x25c>
 8004e46:	7821      	ldrb	r1, [r4, #0]
 8004e48:	2203      	movs	r2, #3
 8004e4a:	4650      	mov	r0, sl
 8004e4c:	f7fb f9d0 	bl	80001f0 <memchr>
 8004e50:	b140      	cbz	r0, 8004e64 <_vfiprintf_r+0x198>
 8004e52:	2340      	movs	r3, #64	; 0x40
 8004e54:	eba0 000a 	sub.w	r0, r0, sl
 8004e58:	fa03 f000 	lsl.w	r0, r3, r0
 8004e5c:	9b04      	ldr	r3, [sp, #16]
 8004e5e:	4303      	orrs	r3, r0
 8004e60:	3401      	adds	r4, #1
 8004e62:	9304      	str	r3, [sp, #16]
 8004e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e68:	482c      	ldr	r0, [pc, #176]	; (8004f1c <_vfiprintf_r+0x250>)
 8004e6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e6e:	2206      	movs	r2, #6
 8004e70:	f7fb f9be 	bl	80001f0 <memchr>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d03f      	beq.n	8004ef8 <_vfiprintf_r+0x22c>
 8004e78:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <_vfiprintf_r+0x254>)
 8004e7a:	bb1b      	cbnz	r3, 8004ec4 <_vfiprintf_r+0x1f8>
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	3307      	adds	r3, #7
 8004e80:	f023 0307 	bic.w	r3, r3, #7
 8004e84:	3308      	adds	r3, #8
 8004e86:	9303      	str	r3, [sp, #12]
 8004e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e8a:	443b      	add	r3, r7
 8004e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8e:	e767      	b.n	8004d60 <_vfiprintf_r+0x94>
 8004e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e94:	460c      	mov	r4, r1
 8004e96:	2001      	movs	r0, #1
 8004e98:	e7a5      	b.n	8004de6 <_vfiprintf_r+0x11a>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	3401      	adds	r4, #1
 8004e9e:	9305      	str	r3, [sp, #20]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f04f 0c0a 	mov.w	ip, #10
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eac:	3a30      	subs	r2, #48	; 0x30
 8004eae:	2a09      	cmp	r2, #9
 8004eb0:	d903      	bls.n	8004eba <_vfiprintf_r+0x1ee>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0c5      	beq.n	8004e42 <_vfiprintf_r+0x176>
 8004eb6:	9105      	str	r1, [sp, #20]
 8004eb8:	e7c3      	b.n	8004e42 <_vfiprintf_r+0x176>
 8004eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e7f0      	b.n	8004ea6 <_vfiprintf_r+0x1da>
 8004ec4:	ab03      	add	r3, sp, #12
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	462a      	mov	r2, r5
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <_vfiprintf_r+0x258>)
 8004ecc:	a904      	add	r1, sp, #16
 8004ece:	4630      	mov	r0, r6
 8004ed0:	f3af 8000 	nop.w
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	1c78      	adds	r0, r7, #1
 8004ed8:	d1d6      	bne.n	8004e88 <_vfiprintf_r+0x1bc>
 8004eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004edc:	07d9      	lsls	r1, r3, #31
 8004ede:	d405      	bmi.n	8004eec <_vfiprintf_r+0x220>
 8004ee0:	89ab      	ldrh	r3, [r5, #12]
 8004ee2:	059a      	lsls	r2, r3, #22
 8004ee4:	d402      	bmi.n	8004eec <_vfiprintf_r+0x220>
 8004ee6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ee8:	f7ff fe31 	bl	8004b4e <__retarget_lock_release_recursive>
 8004eec:	89ab      	ldrh	r3, [r5, #12]
 8004eee:	065b      	lsls	r3, r3, #25
 8004ef0:	f53f af12 	bmi.w	8004d18 <_vfiprintf_r+0x4c>
 8004ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ef6:	e711      	b.n	8004d1c <_vfiprintf_r+0x50>
 8004ef8:	ab03      	add	r3, sp, #12
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	462a      	mov	r2, r5
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <_vfiprintf_r+0x258>)
 8004f00:	a904      	add	r1, sp, #16
 8004f02:	4630      	mov	r0, r6
 8004f04:	f000 f880 	bl	8005008 <_printf_i>
 8004f08:	e7e4      	b.n	8004ed4 <_vfiprintf_r+0x208>
 8004f0a:	bf00      	nop
 8004f0c:	0800592c 	.word	0x0800592c
 8004f10:	0800594c 	.word	0x0800594c
 8004f14:	0800590c 	.word	0x0800590c
 8004f18:	0800596c 	.word	0x0800596c
 8004f1c:	08005976 	.word	0x08005976
 8004f20:	00000000 	.word	0x00000000
 8004f24:	08004ca7 	.word	0x08004ca7
 8004f28:	08005972 	.word	0x08005972

08004f2c <_printf_common>:
 8004f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f30:	4616      	mov	r6, r2
 8004f32:	4699      	mov	r9, r3
 8004f34:	688a      	ldr	r2, [r1, #8]
 8004f36:	690b      	ldr	r3, [r1, #16]
 8004f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	bfb8      	it	lt
 8004f40:	4613      	movlt	r3, r2
 8004f42:	6033      	str	r3, [r6, #0]
 8004f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f48:	4607      	mov	r7, r0
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	b10a      	cbz	r2, 8004f52 <_printf_common+0x26>
 8004f4e:	3301      	adds	r3, #1
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	0699      	lsls	r1, r3, #26
 8004f56:	bf42      	ittt	mi
 8004f58:	6833      	ldrmi	r3, [r6, #0]
 8004f5a:	3302      	addmi	r3, #2
 8004f5c:	6033      	strmi	r3, [r6, #0]
 8004f5e:	6825      	ldr	r5, [r4, #0]
 8004f60:	f015 0506 	ands.w	r5, r5, #6
 8004f64:	d106      	bne.n	8004f74 <_printf_common+0x48>
 8004f66:	f104 0a19 	add.w	sl, r4, #25
 8004f6a:	68e3      	ldr	r3, [r4, #12]
 8004f6c:	6832      	ldr	r2, [r6, #0]
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	42ab      	cmp	r3, r5
 8004f72:	dc26      	bgt.n	8004fc2 <_printf_common+0x96>
 8004f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f78:	1e13      	subs	r3, r2, #0
 8004f7a:	6822      	ldr	r2, [r4, #0]
 8004f7c:	bf18      	it	ne
 8004f7e:	2301      	movne	r3, #1
 8004f80:	0692      	lsls	r2, r2, #26
 8004f82:	d42b      	bmi.n	8004fdc <_printf_common+0xb0>
 8004f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f88:	4649      	mov	r1, r9
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	47c0      	blx	r8
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d01e      	beq.n	8004fd0 <_printf_common+0xa4>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	68e5      	ldr	r5, [r4, #12]
 8004f96:	6832      	ldr	r2, [r6, #0]
 8004f98:	f003 0306 	and.w	r3, r3, #6
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	bf08      	it	eq
 8004fa0:	1aad      	subeq	r5, r5, r2
 8004fa2:	68a3      	ldr	r3, [r4, #8]
 8004fa4:	6922      	ldr	r2, [r4, #16]
 8004fa6:	bf0c      	ite	eq
 8004fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fac:	2500      	movne	r5, #0
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	bfc4      	itt	gt
 8004fb2:	1a9b      	subgt	r3, r3, r2
 8004fb4:	18ed      	addgt	r5, r5, r3
 8004fb6:	2600      	movs	r6, #0
 8004fb8:	341a      	adds	r4, #26
 8004fba:	42b5      	cmp	r5, r6
 8004fbc:	d11a      	bne.n	8004ff4 <_printf_common+0xc8>
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	e008      	b.n	8004fd4 <_printf_common+0xa8>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4652      	mov	r2, sl
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	4638      	mov	r0, r7
 8004fca:	47c0      	blx	r8
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d103      	bne.n	8004fd8 <_printf_common+0xac>
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd8:	3501      	adds	r5, #1
 8004fda:	e7c6      	b.n	8004f6a <_printf_common+0x3e>
 8004fdc:	18e1      	adds	r1, r4, r3
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	2030      	movs	r0, #48	; 0x30
 8004fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fe6:	4422      	add	r2, r4
 8004fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	e7c7      	b.n	8004f84 <_printf_common+0x58>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	47c0      	blx	r8
 8004ffe:	3001      	adds	r0, #1
 8005000:	d0e6      	beq.n	8004fd0 <_printf_common+0xa4>
 8005002:	3601      	adds	r6, #1
 8005004:	e7d9      	b.n	8004fba <_printf_common+0x8e>
	...

08005008 <_printf_i>:
 8005008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	7e0f      	ldrb	r7, [r1, #24]
 800500e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005010:	2f78      	cmp	r7, #120	; 0x78
 8005012:	4691      	mov	r9, r2
 8005014:	4680      	mov	r8, r0
 8005016:	460c      	mov	r4, r1
 8005018:	469a      	mov	sl, r3
 800501a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800501e:	d807      	bhi.n	8005030 <_printf_i+0x28>
 8005020:	2f62      	cmp	r7, #98	; 0x62
 8005022:	d80a      	bhi.n	800503a <_printf_i+0x32>
 8005024:	2f00      	cmp	r7, #0
 8005026:	f000 80d8 	beq.w	80051da <_printf_i+0x1d2>
 800502a:	2f58      	cmp	r7, #88	; 0x58
 800502c:	f000 80a3 	beq.w	8005176 <_printf_i+0x16e>
 8005030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005038:	e03a      	b.n	80050b0 <_printf_i+0xa8>
 800503a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800503e:	2b15      	cmp	r3, #21
 8005040:	d8f6      	bhi.n	8005030 <_printf_i+0x28>
 8005042:	a101      	add	r1, pc, #4	; (adr r1, 8005048 <_printf_i+0x40>)
 8005044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005048:	080050a1 	.word	0x080050a1
 800504c:	080050b5 	.word	0x080050b5
 8005050:	08005031 	.word	0x08005031
 8005054:	08005031 	.word	0x08005031
 8005058:	08005031 	.word	0x08005031
 800505c:	08005031 	.word	0x08005031
 8005060:	080050b5 	.word	0x080050b5
 8005064:	08005031 	.word	0x08005031
 8005068:	08005031 	.word	0x08005031
 800506c:	08005031 	.word	0x08005031
 8005070:	08005031 	.word	0x08005031
 8005074:	080051c1 	.word	0x080051c1
 8005078:	080050e5 	.word	0x080050e5
 800507c:	080051a3 	.word	0x080051a3
 8005080:	08005031 	.word	0x08005031
 8005084:	08005031 	.word	0x08005031
 8005088:	080051e3 	.word	0x080051e3
 800508c:	08005031 	.word	0x08005031
 8005090:	080050e5 	.word	0x080050e5
 8005094:	08005031 	.word	0x08005031
 8005098:	08005031 	.word	0x08005031
 800509c:	080051ab 	.word	0x080051ab
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	1d1a      	adds	r2, r3, #4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	602a      	str	r2, [r5, #0]
 80050a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0a3      	b.n	80051fc <_printf_i+0x1f4>
 80050b4:	6820      	ldr	r0, [r4, #0]
 80050b6:	6829      	ldr	r1, [r5, #0]
 80050b8:	0606      	lsls	r6, r0, #24
 80050ba:	f101 0304 	add.w	r3, r1, #4
 80050be:	d50a      	bpl.n	80050d6 <_printf_i+0xce>
 80050c0:	680e      	ldr	r6, [r1, #0]
 80050c2:	602b      	str	r3, [r5, #0]
 80050c4:	2e00      	cmp	r6, #0
 80050c6:	da03      	bge.n	80050d0 <_printf_i+0xc8>
 80050c8:	232d      	movs	r3, #45	; 0x2d
 80050ca:	4276      	negs	r6, r6
 80050cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d0:	485e      	ldr	r0, [pc, #376]	; (800524c <_printf_i+0x244>)
 80050d2:	230a      	movs	r3, #10
 80050d4:	e019      	b.n	800510a <_printf_i+0x102>
 80050d6:	680e      	ldr	r6, [r1, #0]
 80050d8:	602b      	str	r3, [r5, #0]
 80050da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050de:	bf18      	it	ne
 80050e0:	b236      	sxthne	r6, r6
 80050e2:	e7ef      	b.n	80050c4 <_printf_i+0xbc>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	6820      	ldr	r0, [r4, #0]
 80050e8:	1d19      	adds	r1, r3, #4
 80050ea:	6029      	str	r1, [r5, #0]
 80050ec:	0601      	lsls	r1, r0, #24
 80050ee:	d501      	bpl.n	80050f4 <_printf_i+0xec>
 80050f0:	681e      	ldr	r6, [r3, #0]
 80050f2:	e002      	b.n	80050fa <_printf_i+0xf2>
 80050f4:	0646      	lsls	r6, r0, #25
 80050f6:	d5fb      	bpl.n	80050f0 <_printf_i+0xe8>
 80050f8:	881e      	ldrh	r6, [r3, #0]
 80050fa:	4854      	ldr	r0, [pc, #336]	; (800524c <_printf_i+0x244>)
 80050fc:	2f6f      	cmp	r7, #111	; 0x6f
 80050fe:	bf0c      	ite	eq
 8005100:	2308      	moveq	r3, #8
 8005102:	230a      	movne	r3, #10
 8005104:	2100      	movs	r1, #0
 8005106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800510a:	6865      	ldr	r5, [r4, #4]
 800510c:	60a5      	str	r5, [r4, #8]
 800510e:	2d00      	cmp	r5, #0
 8005110:	bfa2      	ittt	ge
 8005112:	6821      	ldrge	r1, [r4, #0]
 8005114:	f021 0104 	bicge.w	r1, r1, #4
 8005118:	6021      	strge	r1, [r4, #0]
 800511a:	b90e      	cbnz	r6, 8005120 <_printf_i+0x118>
 800511c:	2d00      	cmp	r5, #0
 800511e:	d04d      	beq.n	80051bc <_printf_i+0x1b4>
 8005120:	4615      	mov	r5, r2
 8005122:	fbb6 f1f3 	udiv	r1, r6, r3
 8005126:	fb03 6711 	mls	r7, r3, r1, r6
 800512a:	5dc7      	ldrb	r7, [r0, r7]
 800512c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005130:	4637      	mov	r7, r6
 8005132:	42bb      	cmp	r3, r7
 8005134:	460e      	mov	r6, r1
 8005136:	d9f4      	bls.n	8005122 <_printf_i+0x11a>
 8005138:	2b08      	cmp	r3, #8
 800513a:	d10b      	bne.n	8005154 <_printf_i+0x14c>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	07de      	lsls	r6, r3, #31
 8005140:	d508      	bpl.n	8005154 <_printf_i+0x14c>
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	6861      	ldr	r1, [r4, #4]
 8005146:	4299      	cmp	r1, r3
 8005148:	bfde      	ittt	le
 800514a:	2330      	movle	r3, #48	; 0x30
 800514c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005150:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005154:	1b52      	subs	r2, r2, r5
 8005156:	6122      	str	r2, [r4, #16]
 8005158:	f8cd a000 	str.w	sl, [sp]
 800515c:	464b      	mov	r3, r9
 800515e:	aa03      	add	r2, sp, #12
 8005160:	4621      	mov	r1, r4
 8005162:	4640      	mov	r0, r8
 8005164:	f7ff fee2 	bl	8004f2c <_printf_common>
 8005168:	3001      	adds	r0, #1
 800516a:	d14c      	bne.n	8005206 <_printf_i+0x1fe>
 800516c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005170:	b004      	add	sp, #16
 8005172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005176:	4835      	ldr	r0, [pc, #212]	; (800524c <_printf_i+0x244>)
 8005178:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800517c:	6829      	ldr	r1, [r5, #0]
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	f851 6b04 	ldr.w	r6, [r1], #4
 8005184:	6029      	str	r1, [r5, #0]
 8005186:	061d      	lsls	r5, r3, #24
 8005188:	d514      	bpl.n	80051b4 <_printf_i+0x1ac>
 800518a:	07df      	lsls	r7, r3, #31
 800518c:	bf44      	itt	mi
 800518e:	f043 0320 	orrmi.w	r3, r3, #32
 8005192:	6023      	strmi	r3, [r4, #0]
 8005194:	b91e      	cbnz	r6, 800519e <_printf_i+0x196>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	f023 0320 	bic.w	r3, r3, #32
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	2310      	movs	r3, #16
 80051a0:	e7b0      	b.n	8005104 <_printf_i+0xfc>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	f043 0320 	orr.w	r3, r3, #32
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	2378      	movs	r3, #120	; 0x78
 80051ac:	4828      	ldr	r0, [pc, #160]	; (8005250 <_printf_i+0x248>)
 80051ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051b2:	e7e3      	b.n	800517c <_printf_i+0x174>
 80051b4:	0659      	lsls	r1, r3, #25
 80051b6:	bf48      	it	mi
 80051b8:	b2b6      	uxthmi	r6, r6
 80051ba:	e7e6      	b.n	800518a <_printf_i+0x182>
 80051bc:	4615      	mov	r5, r2
 80051be:	e7bb      	b.n	8005138 <_printf_i+0x130>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	6826      	ldr	r6, [r4, #0]
 80051c4:	6961      	ldr	r1, [r4, #20]
 80051c6:	1d18      	adds	r0, r3, #4
 80051c8:	6028      	str	r0, [r5, #0]
 80051ca:	0635      	lsls	r5, r6, #24
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	d501      	bpl.n	80051d4 <_printf_i+0x1cc>
 80051d0:	6019      	str	r1, [r3, #0]
 80051d2:	e002      	b.n	80051da <_printf_i+0x1d2>
 80051d4:	0670      	lsls	r0, r6, #25
 80051d6:	d5fb      	bpl.n	80051d0 <_printf_i+0x1c8>
 80051d8:	8019      	strh	r1, [r3, #0]
 80051da:	2300      	movs	r3, #0
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	4615      	mov	r5, r2
 80051e0:	e7ba      	b.n	8005158 <_printf_i+0x150>
 80051e2:	682b      	ldr	r3, [r5, #0]
 80051e4:	1d1a      	adds	r2, r3, #4
 80051e6:	602a      	str	r2, [r5, #0]
 80051e8:	681d      	ldr	r5, [r3, #0]
 80051ea:	6862      	ldr	r2, [r4, #4]
 80051ec:	2100      	movs	r1, #0
 80051ee:	4628      	mov	r0, r5
 80051f0:	f7fa fffe 	bl	80001f0 <memchr>
 80051f4:	b108      	cbz	r0, 80051fa <_printf_i+0x1f2>
 80051f6:	1b40      	subs	r0, r0, r5
 80051f8:	6060      	str	r0, [r4, #4]
 80051fa:	6863      	ldr	r3, [r4, #4]
 80051fc:	6123      	str	r3, [r4, #16]
 80051fe:	2300      	movs	r3, #0
 8005200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005204:	e7a8      	b.n	8005158 <_printf_i+0x150>
 8005206:	6923      	ldr	r3, [r4, #16]
 8005208:	462a      	mov	r2, r5
 800520a:	4649      	mov	r1, r9
 800520c:	4640      	mov	r0, r8
 800520e:	47d0      	blx	sl
 8005210:	3001      	adds	r0, #1
 8005212:	d0ab      	beq.n	800516c <_printf_i+0x164>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	079b      	lsls	r3, r3, #30
 8005218:	d413      	bmi.n	8005242 <_printf_i+0x23a>
 800521a:	68e0      	ldr	r0, [r4, #12]
 800521c:	9b03      	ldr	r3, [sp, #12]
 800521e:	4298      	cmp	r0, r3
 8005220:	bfb8      	it	lt
 8005222:	4618      	movlt	r0, r3
 8005224:	e7a4      	b.n	8005170 <_printf_i+0x168>
 8005226:	2301      	movs	r3, #1
 8005228:	4632      	mov	r2, r6
 800522a:	4649      	mov	r1, r9
 800522c:	4640      	mov	r0, r8
 800522e:	47d0      	blx	sl
 8005230:	3001      	adds	r0, #1
 8005232:	d09b      	beq.n	800516c <_printf_i+0x164>
 8005234:	3501      	adds	r5, #1
 8005236:	68e3      	ldr	r3, [r4, #12]
 8005238:	9903      	ldr	r1, [sp, #12]
 800523a:	1a5b      	subs	r3, r3, r1
 800523c:	42ab      	cmp	r3, r5
 800523e:	dcf2      	bgt.n	8005226 <_printf_i+0x21e>
 8005240:	e7eb      	b.n	800521a <_printf_i+0x212>
 8005242:	2500      	movs	r5, #0
 8005244:	f104 0619 	add.w	r6, r4, #25
 8005248:	e7f5      	b.n	8005236 <_printf_i+0x22e>
 800524a:	bf00      	nop
 800524c:	0800597d 	.word	0x0800597d
 8005250:	0800598e 	.word	0x0800598e

08005254 <_sbrk_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d06      	ldr	r5, [pc, #24]	; (8005270 <_sbrk_r+0x1c>)
 8005258:	2300      	movs	r3, #0
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fb fe5c 	bl	8000f1c <_sbrk>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_sbrk_r+0x1a>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_sbrk_r+0x1a>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	20004184 	.word	0x20004184

08005274 <__sread>:
 8005274:	b510      	push	{r4, lr}
 8005276:	460c      	mov	r4, r1
 8005278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800527c:	f000 fab2 	bl	80057e4 <_read_r>
 8005280:	2800      	cmp	r0, #0
 8005282:	bfab      	itete	ge
 8005284:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005286:	89a3      	ldrhlt	r3, [r4, #12]
 8005288:	181b      	addge	r3, r3, r0
 800528a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800528e:	bfac      	ite	ge
 8005290:	6563      	strge	r3, [r4, #84]	; 0x54
 8005292:	81a3      	strhlt	r3, [r4, #12]
 8005294:	bd10      	pop	{r4, pc}

08005296 <__swrite>:
 8005296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800529a:	461f      	mov	r7, r3
 800529c:	898b      	ldrh	r3, [r1, #12]
 800529e:	05db      	lsls	r3, r3, #23
 80052a0:	4605      	mov	r5, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	4616      	mov	r6, r2
 80052a6:	d505      	bpl.n	80052b4 <__swrite+0x1e>
 80052a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ac:	2302      	movs	r3, #2
 80052ae:	2200      	movs	r2, #0
 80052b0:	f000 f9c8 	bl	8005644 <_lseek_r>
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052be:	81a3      	strh	r3, [r4, #12]
 80052c0:	4632      	mov	r2, r6
 80052c2:	463b      	mov	r3, r7
 80052c4:	4628      	mov	r0, r5
 80052c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ca:	f000 b869 	b.w	80053a0 <_write_r>

080052ce <__sseek>:
 80052ce:	b510      	push	{r4, lr}
 80052d0:	460c      	mov	r4, r1
 80052d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d6:	f000 f9b5 	bl	8005644 <_lseek_r>
 80052da:	1c43      	adds	r3, r0, #1
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	bf15      	itete	ne
 80052e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052ea:	81a3      	strheq	r3, [r4, #12]
 80052ec:	bf18      	it	ne
 80052ee:	81a3      	strhne	r3, [r4, #12]
 80052f0:	bd10      	pop	{r4, pc}

080052f2 <__sclose>:
 80052f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f6:	f000 b8d3 	b.w	80054a0 <_close_r>
	...

080052fc <__swbuf_r>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	460e      	mov	r6, r1
 8005300:	4614      	mov	r4, r2
 8005302:	4605      	mov	r5, r0
 8005304:	b118      	cbz	r0, 800530e <__swbuf_r+0x12>
 8005306:	6983      	ldr	r3, [r0, #24]
 8005308:	b90b      	cbnz	r3, 800530e <__swbuf_r+0x12>
 800530a:	f7ff fb81 	bl	8004a10 <__sinit>
 800530e:	4b21      	ldr	r3, [pc, #132]	; (8005394 <__swbuf_r+0x98>)
 8005310:	429c      	cmp	r4, r3
 8005312:	d12b      	bne.n	800536c <__swbuf_r+0x70>
 8005314:	686c      	ldr	r4, [r5, #4]
 8005316:	69a3      	ldr	r3, [r4, #24]
 8005318:	60a3      	str	r3, [r4, #8]
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	071a      	lsls	r2, r3, #28
 800531e:	d52f      	bpl.n	8005380 <__swbuf_r+0x84>
 8005320:	6923      	ldr	r3, [r4, #16]
 8005322:	b36b      	cbz	r3, 8005380 <__swbuf_r+0x84>
 8005324:	6923      	ldr	r3, [r4, #16]
 8005326:	6820      	ldr	r0, [r4, #0]
 8005328:	1ac0      	subs	r0, r0, r3
 800532a:	6963      	ldr	r3, [r4, #20]
 800532c:	b2f6      	uxtb	r6, r6
 800532e:	4283      	cmp	r3, r0
 8005330:	4637      	mov	r7, r6
 8005332:	dc04      	bgt.n	800533e <__swbuf_r+0x42>
 8005334:	4621      	mov	r1, r4
 8005336:	4628      	mov	r0, r5
 8005338:	f000 f948 	bl	80055cc <_fflush_r>
 800533c:	bb30      	cbnz	r0, 800538c <__swbuf_r+0x90>
 800533e:	68a3      	ldr	r3, [r4, #8]
 8005340:	3b01      	subs	r3, #1
 8005342:	60a3      	str	r3, [r4, #8]
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	6022      	str	r2, [r4, #0]
 800534a:	701e      	strb	r6, [r3, #0]
 800534c:	6963      	ldr	r3, [r4, #20]
 800534e:	3001      	adds	r0, #1
 8005350:	4283      	cmp	r3, r0
 8005352:	d004      	beq.n	800535e <__swbuf_r+0x62>
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	07db      	lsls	r3, r3, #31
 8005358:	d506      	bpl.n	8005368 <__swbuf_r+0x6c>
 800535a:	2e0a      	cmp	r6, #10
 800535c:	d104      	bne.n	8005368 <__swbuf_r+0x6c>
 800535e:	4621      	mov	r1, r4
 8005360:	4628      	mov	r0, r5
 8005362:	f000 f933 	bl	80055cc <_fflush_r>
 8005366:	b988      	cbnz	r0, 800538c <__swbuf_r+0x90>
 8005368:	4638      	mov	r0, r7
 800536a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <__swbuf_r+0x9c>)
 800536e:	429c      	cmp	r4, r3
 8005370:	d101      	bne.n	8005376 <__swbuf_r+0x7a>
 8005372:	68ac      	ldr	r4, [r5, #8]
 8005374:	e7cf      	b.n	8005316 <__swbuf_r+0x1a>
 8005376:	4b09      	ldr	r3, [pc, #36]	; (800539c <__swbuf_r+0xa0>)
 8005378:	429c      	cmp	r4, r3
 800537a:	bf08      	it	eq
 800537c:	68ec      	ldreq	r4, [r5, #12]
 800537e:	e7ca      	b.n	8005316 <__swbuf_r+0x1a>
 8005380:	4621      	mov	r1, r4
 8005382:	4628      	mov	r0, r5
 8005384:	f000 f81e 	bl	80053c4 <__swsetup_r>
 8005388:	2800      	cmp	r0, #0
 800538a:	d0cb      	beq.n	8005324 <__swbuf_r+0x28>
 800538c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005390:	e7ea      	b.n	8005368 <__swbuf_r+0x6c>
 8005392:	bf00      	nop
 8005394:	0800592c 	.word	0x0800592c
 8005398:	0800594c 	.word	0x0800594c
 800539c:	0800590c 	.word	0x0800590c

080053a0 <_write_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4d07      	ldr	r5, [pc, #28]	; (80053c0 <_write_r+0x20>)
 80053a4:	4604      	mov	r4, r0
 80053a6:	4608      	mov	r0, r1
 80053a8:	4611      	mov	r1, r2
 80053aa:	2200      	movs	r2, #0
 80053ac:	602a      	str	r2, [r5, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f7fb fd63 	bl	8000e7a <_write>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_write_r+0x1e>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_write_r+0x1e>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	20004184 	.word	0x20004184

080053c4 <__swsetup_r>:
 80053c4:	4b32      	ldr	r3, [pc, #200]	; (8005490 <__swsetup_r+0xcc>)
 80053c6:	b570      	push	{r4, r5, r6, lr}
 80053c8:	681d      	ldr	r5, [r3, #0]
 80053ca:	4606      	mov	r6, r0
 80053cc:	460c      	mov	r4, r1
 80053ce:	b125      	cbz	r5, 80053da <__swsetup_r+0x16>
 80053d0:	69ab      	ldr	r3, [r5, #24]
 80053d2:	b913      	cbnz	r3, 80053da <__swsetup_r+0x16>
 80053d4:	4628      	mov	r0, r5
 80053d6:	f7ff fb1b 	bl	8004a10 <__sinit>
 80053da:	4b2e      	ldr	r3, [pc, #184]	; (8005494 <__swsetup_r+0xd0>)
 80053dc:	429c      	cmp	r4, r3
 80053de:	d10f      	bne.n	8005400 <__swsetup_r+0x3c>
 80053e0:	686c      	ldr	r4, [r5, #4]
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053e8:	0719      	lsls	r1, r3, #28
 80053ea:	d42c      	bmi.n	8005446 <__swsetup_r+0x82>
 80053ec:	06dd      	lsls	r5, r3, #27
 80053ee:	d411      	bmi.n	8005414 <__swsetup_r+0x50>
 80053f0:	2309      	movs	r3, #9
 80053f2:	6033      	str	r3, [r6, #0]
 80053f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053f8:	81a3      	strh	r3, [r4, #12]
 80053fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053fe:	e03e      	b.n	800547e <__swsetup_r+0xba>
 8005400:	4b25      	ldr	r3, [pc, #148]	; (8005498 <__swsetup_r+0xd4>)
 8005402:	429c      	cmp	r4, r3
 8005404:	d101      	bne.n	800540a <__swsetup_r+0x46>
 8005406:	68ac      	ldr	r4, [r5, #8]
 8005408:	e7eb      	b.n	80053e2 <__swsetup_r+0x1e>
 800540a:	4b24      	ldr	r3, [pc, #144]	; (800549c <__swsetup_r+0xd8>)
 800540c:	429c      	cmp	r4, r3
 800540e:	bf08      	it	eq
 8005410:	68ec      	ldreq	r4, [r5, #12]
 8005412:	e7e6      	b.n	80053e2 <__swsetup_r+0x1e>
 8005414:	0758      	lsls	r0, r3, #29
 8005416:	d512      	bpl.n	800543e <__swsetup_r+0x7a>
 8005418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800541a:	b141      	cbz	r1, 800542e <__swsetup_r+0x6a>
 800541c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005420:	4299      	cmp	r1, r3
 8005422:	d002      	beq.n	800542a <__swsetup_r+0x66>
 8005424:	4630      	mov	r0, r6
 8005426:	f000 f991 	bl	800574c <_free_r>
 800542a:	2300      	movs	r3, #0
 800542c:	6363      	str	r3, [r4, #52]	; 0x34
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005434:	81a3      	strh	r3, [r4, #12]
 8005436:	2300      	movs	r3, #0
 8005438:	6063      	str	r3, [r4, #4]
 800543a:	6923      	ldr	r3, [r4, #16]
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	f043 0308 	orr.w	r3, r3, #8
 8005444:	81a3      	strh	r3, [r4, #12]
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	b94b      	cbnz	r3, 800545e <__swsetup_r+0x9a>
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005454:	d003      	beq.n	800545e <__swsetup_r+0x9a>
 8005456:	4621      	mov	r1, r4
 8005458:	4630      	mov	r0, r6
 800545a:	f000 f92b 	bl	80056b4 <__smakebuf_r>
 800545e:	89a0      	ldrh	r0, [r4, #12]
 8005460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005464:	f010 0301 	ands.w	r3, r0, #1
 8005468:	d00a      	beq.n	8005480 <__swsetup_r+0xbc>
 800546a:	2300      	movs	r3, #0
 800546c:	60a3      	str	r3, [r4, #8]
 800546e:	6963      	ldr	r3, [r4, #20]
 8005470:	425b      	negs	r3, r3
 8005472:	61a3      	str	r3, [r4, #24]
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	b943      	cbnz	r3, 800548a <__swsetup_r+0xc6>
 8005478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800547c:	d1ba      	bne.n	80053f4 <__swsetup_r+0x30>
 800547e:	bd70      	pop	{r4, r5, r6, pc}
 8005480:	0781      	lsls	r1, r0, #30
 8005482:	bf58      	it	pl
 8005484:	6963      	ldrpl	r3, [r4, #20]
 8005486:	60a3      	str	r3, [r4, #8]
 8005488:	e7f4      	b.n	8005474 <__swsetup_r+0xb0>
 800548a:	2000      	movs	r0, #0
 800548c:	e7f7      	b.n	800547e <__swsetup_r+0xba>
 800548e:	bf00      	nop
 8005490:	20000010 	.word	0x20000010
 8005494:	0800592c 	.word	0x0800592c
 8005498:	0800594c 	.word	0x0800594c
 800549c:	0800590c 	.word	0x0800590c

080054a0 <_close_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4d06      	ldr	r5, [pc, #24]	; (80054bc <_close_r+0x1c>)
 80054a4:	2300      	movs	r3, #0
 80054a6:	4604      	mov	r4, r0
 80054a8:	4608      	mov	r0, r1
 80054aa:	602b      	str	r3, [r5, #0]
 80054ac:	f7fb fd01 	bl	8000eb2 <_close>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_close_r+0x1a>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_close_r+0x1a>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	20004184 	.word	0x20004184

080054c0 <__sflush_r>:
 80054c0:	898a      	ldrh	r2, [r1, #12]
 80054c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c6:	4605      	mov	r5, r0
 80054c8:	0710      	lsls	r0, r2, #28
 80054ca:	460c      	mov	r4, r1
 80054cc:	d458      	bmi.n	8005580 <__sflush_r+0xc0>
 80054ce:	684b      	ldr	r3, [r1, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	dc05      	bgt.n	80054e0 <__sflush_r+0x20>
 80054d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	dc02      	bgt.n	80054e0 <__sflush_r+0x20>
 80054da:	2000      	movs	r0, #0
 80054dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054e2:	2e00      	cmp	r6, #0
 80054e4:	d0f9      	beq.n	80054da <__sflush_r+0x1a>
 80054e6:	2300      	movs	r3, #0
 80054e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054ec:	682f      	ldr	r7, [r5, #0]
 80054ee:	602b      	str	r3, [r5, #0]
 80054f0:	d032      	beq.n	8005558 <__sflush_r+0x98>
 80054f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	075a      	lsls	r2, r3, #29
 80054f8:	d505      	bpl.n	8005506 <__sflush_r+0x46>
 80054fa:	6863      	ldr	r3, [r4, #4]
 80054fc:	1ac0      	subs	r0, r0, r3
 80054fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005500:	b10b      	cbz	r3, 8005506 <__sflush_r+0x46>
 8005502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005504:	1ac0      	subs	r0, r0, r3
 8005506:	2300      	movs	r3, #0
 8005508:	4602      	mov	r2, r0
 800550a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800550c:	6a21      	ldr	r1, [r4, #32]
 800550e:	4628      	mov	r0, r5
 8005510:	47b0      	blx	r6
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	d106      	bne.n	8005526 <__sflush_r+0x66>
 8005518:	6829      	ldr	r1, [r5, #0]
 800551a:	291d      	cmp	r1, #29
 800551c:	d82c      	bhi.n	8005578 <__sflush_r+0xb8>
 800551e:	4a2a      	ldr	r2, [pc, #168]	; (80055c8 <__sflush_r+0x108>)
 8005520:	40ca      	lsrs	r2, r1
 8005522:	07d6      	lsls	r6, r2, #31
 8005524:	d528      	bpl.n	8005578 <__sflush_r+0xb8>
 8005526:	2200      	movs	r2, #0
 8005528:	6062      	str	r2, [r4, #4]
 800552a:	04d9      	lsls	r1, r3, #19
 800552c:	6922      	ldr	r2, [r4, #16]
 800552e:	6022      	str	r2, [r4, #0]
 8005530:	d504      	bpl.n	800553c <__sflush_r+0x7c>
 8005532:	1c42      	adds	r2, r0, #1
 8005534:	d101      	bne.n	800553a <__sflush_r+0x7a>
 8005536:	682b      	ldr	r3, [r5, #0]
 8005538:	b903      	cbnz	r3, 800553c <__sflush_r+0x7c>
 800553a:	6560      	str	r0, [r4, #84]	; 0x54
 800553c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800553e:	602f      	str	r7, [r5, #0]
 8005540:	2900      	cmp	r1, #0
 8005542:	d0ca      	beq.n	80054da <__sflush_r+0x1a>
 8005544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005548:	4299      	cmp	r1, r3
 800554a:	d002      	beq.n	8005552 <__sflush_r+0x92>
 800554c:	4628      	mov	r0, r5
 800554e:	f000 f8fd 	bl	800574c <_free_r>
 8005552:	2000      	movs	r0, #0
 8005554:	6360      	str	r0, [r4, #52]	; 0x34
 8005556:	e7c1      	b.n	80054dc <__sflush_r+0x1c>
 8005558:	6a21      	ldr	r1, [r4, #32]
 800555a:	2301      	movs	r3, #1
 800555c:	4628      	mov	r0, r5
 800555e:	47b0      	blx	r6
 8005560:	1c41      	adds	r1, r0, #1
 8005562:	d1c7      	bne.n	80054f4 <__sflush_r+0x34>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0c4      	beq.n	80054f4 <__sflush_r+0x34>
 800556a:	2b1d      	cmp	r3, #29
 800556c:	d001      	beq.n	8005572 <__sflush_r+0xb2>
 800556e:	2b16      	cmp	r3, #22
 8005570:	d101      	bne.n	8005576 <__sflush_r+0xb6>
 8005572:	602f      	str	r7, [r5, #0]
 8005574:	e7b1      	b.n	80054da <__sflush_r+0x1a>
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557c:	81a3      	strh	r3, [r4, #12]
 800557e:	e7ad      	b.n	80054dc <__sflush_r+0x1c>
 8005580:	690f      	ldr	r7, [r1, #16]
 8005582:	2f00      	cmp	r7, #0
 8005584:	d0a9      	beq.n	80054da <__sflush_r+0x1a>
 8005586:	0793      	lsls	r3, r2, #30
 8005588:	680e      	ldr	r6, [r1, #0]
 800558a:	bf08      	it	eq
 800558c:	694b      	ldreq	r3, [r1, #20]
 800558e:	600f      	str	r7, [r1, #0]
 8005590:	bf18      	it	ne
 8005592:	2300      	movne	r3, #0
 8005594:	eba6 0807 	sub.w	r8, r6, r7
 8005598:	608b      	str	r3, [r1, #8]
 800559a:	f1b8 0f00 	cmp.w	r8, #0
 800559e:	dd9c      	ble.n	80054da <__sflush_r+0x1a>
 80055a0:	6a21      	ldr	r1, [r4, #32]
 80055a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055a4:	4643      	mov	r3, r8
 80055a6:	463a      	mov	r2, r7
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b0      	blx	r6
 80055ac:	2800      	cmp	r0, #0
 80055ae:	dc06      	bgt.n	80055be <__sflush_r+0xfe>
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055bc:	e78e      	b.n	80054dc <__sflush_r+0x1c>
 80055be:	4407      	add	r7, r0
 80055c0:	eba8 0800 	sub.w	r8, r8, r0
 80055c4:	e7e9      	b.n	800559a <__sflush_r+0xda>
 80055c6:	bf00      	nop
 80055c8:	20400001 	.word	0x20400001

080055cc <_fflush_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	4605      	mov	r5, r0
 80055d2:	460c      	mov	r4, r1
 80055d4:	b913      	cbnz	r3, 80055dc <_fflush_r+0x10>
 80055d6:	2500      	movs	r5, #0
 80055d8:	4628      	mov	r0, r5
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	b118      	cbz	r0, 80055e6 <_fflush_r+0x1a>
 80055de:	6983      	ldr	r3, [r0, #24]
 80055e0:	b90b      	cbnz	r3, 80055e6 <_fflush_r+0x1a>
 80055e2:	f7ff fa15 	bl	8004a10 <__sinit>
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <_fflush_r+0x6c>)
 80055e8:	429c      	cmp	r4, r3
 80055ea:	d11b      	bne.n	8005624 <_fflush_r+0x58>
 80055ec:	686c      	ldr	r4, [r5, #4]
 80055ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0ef      	beq.n	80055d6 <_fflush_r+0xa>
 80055f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055f8:	07d0      	lsls	r0, r2, #31
 80055fa:	d404      	bmi.n	8005606 <_fflush_r+0x3a>
 80055fc:	0599      	lsls	r1, r3, #22
 80055fe:	d402      	bmi.n	8005606 <_fflush_r+0x3a>
 8005600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005602:	f7ff faa3 	bl	8004b4c <__retarget_lock_acquire_recursive>
 8005606:	4628      	mov	r0, r5
 8005608:	4621      	mov	r1, r4
 800560a:	f7ff ff59 	bl	80054c0 <__sflush_r>
 800560e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005610:	07da      	lsls	r2, r3, #31
 8005612:	4605      	mov	r5, r0
 8005614:	d4e0      	bmi.n	80055d8 <_fflush_r+0xc>
 8005616:	89a3      	ldrh	r3, [r4, #12]
 8005618:	059b      	lsls	r3, r3, #22
 800561a:	d4dd      	bmi.n	80055d8 <_fflush_r+0xc>
 800561c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800561e:	f7ff fa96 	bl	8004b4e <__retarget_lock_release_recursive>
 8005622:	e7d9      	b.n	80055d8 <_fflush_r+0xc>
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <_fflush_r+0x70>)
 8005626:	429c      	cmp	r4, r3
 8005628:	d101      	bne.n	800562e <_fflush_r+0x62>
 800562a:	68ac      	ldr	r4, [r5, #8]
 800562c:	e7df      	b.n	80055ee <_fflush_r+0x22>
 800562e:	4b04      	ldr	r3, [pc, #16]	; (8005640 <_fflush_r+0x74>)
 8005630:	429c      	cmp	r4, r3
 8005632:	bf08      	it	eq
 8005634:	68ec      	ldreq	r4, [r5, #12]
 8005636:	e7da      	b.n	80055ee <_fflush_r+0x22>
 8005638:	0800592c 	.word	0x0800592c
 800563c:	0800594c 	.word	0x0800594c
 8005640:	0800590c 	.word	0x0800590c

08005644 <_lseek_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4d07      	ldr	r5, [pc, #28]	; (8005664 <_lseek_r+0x20>)
 8005648:	4604      	mov	r4, r0
 800564a:	4608      	mov	r0, r1
 800564c:	4611      	mov	r1, r2
 800564e:	2200      	movs	r2, #0
 8005650:	602a      	str	r2, [r5, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	f7fb fc54 	bl	8000f00 <_lseek>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d102      	bne.n	8005662 <_lseek_r+0x1e>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	b103      	cbz	r3, 8005662 <_lseek_r+0x1e>
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	20004184 	.word	0x20004184

08005668 <__swhatbuf_r>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	460e      	mov	r6, r1
 800566c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005670:	2900      	cmp	r1, #0
 8005672:	b096      	sub	sp, #88	; 0x58
 8005674:	4614      	mov	r4, r2
 8005676:	461d      	mov	r5, r3
 8005678:	da08      	bge.n	800568c <__swhatbuf_r+0x24>
 800567a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	602a      	str	r2, [r5, #0]
 8005682:	061a      	lsls	r2, r3, #24
 8005684:	d410      	bmi.n	80056a8 <__swhatbuf_r+0x40>
 8005686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800568a:	e00e      	b.n	80056aa <__swhatbuf_r+0x42>
 800568c:	466a      	mov	r2, sp
 800568e:	f000 f8bb 	bl	8005808 <_fstat_r>
 8005692:	2800      	cmp	r0, #0
 8005694:	dbf1      	blt.n	800567a <__swhatbuf_r+0x12>
 8005696:	9a01      	ldr	r2, [sp, #4]
 8005698:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800569c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056a0:	425a      	negs	r2, r3
 80056a2:	415a      	adcs	r2, r3
 80056a4:	602a      	str	r2, [r5, #0]
 80056a6:	e7ee      	b.n	8005686 <__swhatbuf_r+0x1e>
 80056a8:	2340      	movs	r3, #64	; 0x40
 80056aa:	2000      	movs	r0, #0
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	b016      	add	sp, #88	; 0x58
 80056b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080056b4 <__smakebuf_r>:
 80056b4:	898b      	ldrh	r3, [r1, #12]
 80056b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056b8:	079d      	lsls	r5, r3, #30
 80056ba:	4606      	mov	r6, r0
 80056bc:	460c      	mov	r4, r1
 80056be:	d507      	bpl.n	80056d0 <__smakebuf_r+0x1c>
 80056c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	6123      	str	r3, [r4, #16]
 80056c8:	2301      	movs	r3, #1
 80056ca:	6163      	str	r3, [r4, #20]
 80056cc:	b002      	add	sp, #8
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	ab01      	add	r3, sp, #4
 80056d2:	466a      	mov	r2, sp
 80056d4:	f7ff ffc8 	bl	8005668 <__swhatbuf_r>
 80056d8:	9900      	ldr	r1, [sp, #0]
 80056da:	4605      	mov	r5, r0
 80056dc:	4630      	mov	r0, r6
 80056de:	f7ff fa57 	bl	8004b90 <_malloc_r>
 80056e2:	b948      	cbnz	r0, 80056f8 <__smakebuf_r+0x44>
 80056e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056e8:	059a      	lsls	r2, r3, #22
 80056ea:	d4ef      	bmi.n	80056cc <__smakebuf_r+0x18>
 80056ec:	f023 0303 	bic.w	r3, r3, #3
 80056f0:	f043 0302 	orr.w	r3, r3, #2
 80056f4:	81a3      	strh	r3, [r4, #12]
 80056f6:	e7e3      	b.n	80056c0 <__smakebuf_r+0xc>
 80056f8:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <__smakebuf_r+0x7c>)
 80056fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	6020      	str	r0, [r4, #0]
 8005700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005704:	81a3      	strh	r3, [r4, #12]
 8005706:	9b00      	ldr	r3, [sp, #0]
 8005708:	6163      	str	r3, [r4, #20]
 800570a:	9b01      	ldr	r3, [sp, #4]
 800570c:	6120      	str	r0, [r4, #16]
 800570e:	b15b      	cbz	r3, 8005728 <__smakebuf_r+0x74>
 8005710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005714:	4630      	mov	r0, r6
 8005716:	f000 f889 	bl	800582c <_isatty_r>
 800571a:	b128      	cbz	r0, 8005728 <__smakebuf_r+0x74>
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	f023 0303 	bic.w	r3, r3, #3
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	81a3      	strh	r3, [r4, #12]
 8005728:	89a0      	ldrh	r0, [r4, #12]
 800572a:	4305      	orrs	r5, r0
 800572c:	81a5      	strh	r5, [r4, #12]
 800572e:	e7cd      	b.n	80056cc <__smakebuf_r+0x18>
 8005730:	080049a9 	.word	0x080049a9

08005734 <__malloc_lock>:
 8005734:	4801      	ldr	r0, [pc, #4]	; (800573c <__malloc_lock+0x8>)
 8005736:	f7ff ba09 	b.w	8004b4c <__retarget_lock_acquire_recursive>
 800573a:	bf00      	nop
 800573c:	20004178 	.word	0x20004178

08005740 <__malloc_unlock>:
 8005740:	4801      	ldr	r0, [pc, #4]	; (8005748 <__malloc_unlock+0x8>)
 8005742:	f7ff ba04 	b.w	8004b4e <__retarget_lock_release_recursive>
 8005746:	bf00      	nop
 8005748:	20004178 	.word	0x20004178

0800574c <_free_r>:
 800574c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800574e:	2900      	cmp	r1, #0
 8005750:	d044      	beq.n	80057dc <_free_r+0x90>
 8005752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005756:	9001      	str	r0, [sp, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f1a1 0404 	sub.w	r4, r1, #4
 800575e:	bfb8      	it	lt
 8005760:	18e4      	addlt	r4, r4, r3
 8005762:	f7ff ffe7 	bl	8005734 <__malloc_lock>
 8005766:	4a1e      	ldr	r2, [pc, #120]	; (80057e0 <_free_r+0x94>)
 8005768:	9801      	ldr	r0, [sp, #4]
 800576a:	6813      	ldr	r3, [r2, #0]
 800576c:	b933      	cbnz	r3, 800577c <_free_r+0x30>
 800576e:	6063      	str	r3, [r4, #4]
 8005770:	6014      	str	r4, [r2, #0]
 8005772:	b003      	add	sp, #12
 8005774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005778:	f7ff bfe2 	b.w	8005740 <__malloc_unlock>
 800577c:	42a3      	cmp	r3, r4
 800577e:	d908      	bls.n	8005792 <_free_r+0x46>
 8005780:	6825      	ldr	r5, [r4, #0]
 8005782:	1961      	adds	r1, r4, r5
 8005784:	428b      	cmp	r3, r1
 8005786:	bf01      	itttt	eq
 8005788:	6819      	ldreq	r1, [r3, #0]
 800578a:	685b      	ldreq	r3, [r3, #4]
 800578c:	1949      	addeq	r1, r1, r5
 800578e:	6021      	streq	r1, [r4, #0]
 8005790:	e7ed      	b.n	800576e <_free_r+0x22>
 8005792:	461a      	mov	r2, r3
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	b10b      	cbz	r3, 800579c <_free_r+0x50>
 8005798:	42a3      	cmp	r3, r4
 800579a:	d9fa      	bls.n	8005792 <_free_r+0x46>
 800579c:	6811      	ldr	r1, [r2, #0]
 800579e:	1855      	adds	r5, r2, r1
 80057a0:	42a5      	cmp	r5, r4
 80057a2:	d10b      	bne.n	80057bc <_free_r+0x70>
 80057a4:	6824      	ldr	r4, [r4, #0]
 80057a6:	4421      	add	r1, r4
 80057a8:	1854      	adds	r4, r2, r1
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	6011      	str	r1, [r2, #0]
 80057ae:	d1e0      	bne.n	8005772 <_free_r+0x26>
 80057b0:	681c      	ldr	r4, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	6053      	str	r3, [r2, #4]
 80057b6:	4421      	add	r1, r4
 80057b8:	6011      	str	r1, [r2, #0]
 80057ba:	e7da      	b.n	8005772 <_free_r+0x26>
 80057bc:	d902      	bls.n	80057c4 <_free_r+0x78>
 80057be:	230c      	movs	r3, #12
 80057c0:	6003      	str	r3, [r0, #0]
 80057c2:	e7d6      	b.n	8005772 <_free_r+0x26>
 80057c4:	6825      	ldr	r5, [r4, #0]
 80057c6:	1961      	adds	r1, r4, r5
 80057c8:	428b      	cmp	r3, r1
 80057ca:	bf04      	itt	eq
 80057cc:	6819      	ldreq	r1, [r3, #0]
 80057ce:	685b      	ldreq	r3, [r3, #4]
 80057d0:	6063      	str	r3, [r4, #4]
 80057d2:	bf04      	itt	eq
 80057d4:	1949      	addeq	r1, r1, r5
 80057d6:	6021      	streq	r1, [r4, #0]
 80057d8:	6054      	str	r4, [r2, #4]
 80057da:	e7ca      	b.n	8005772 <_free_r+0x26>
 80057dc:	b003      	add	sp, #12
 80057de:	bd30      	pop	{r4, r5, pc}
 80057e0:	2000417c 	.word	0x2000417c

080057e4 <_read_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	4d07      	ldr	r5, [pc, #28]	; (8005804 <_read_r+0x20>)
 80057e8:	4604      	mov	r4, r0
 80057ea:	4608      	mov	r0, r1
 80057ec:	4611      	mov	r1, r2
 80057ee:	2200      	movs	r2, #0
 80057f0:	602a      	str	r2, [r5, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	f7fb fb24 	bl	8000e40 <_read>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	d102      	bne.n	8005802 <_read_r+0x1e>
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	b103      	cbz	r3, 8005802 <_read_r+0x1e>
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	bd38      	pop	{r3, r4, r5, pc}
 8005804:	20004184 	.word	0x20004184

08005808 <_fstat_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	4d07      	ldr	r5, [pc, #28]	; (8005828 <_fstat_r+0x20>)
 800580c:	2300      	movs	r3, #0
 800580e:	4604      	mov	r4, r0
 8005810:	4608      	mov	r0, r1
 8005812:	4611      	mov	r1, r2
 8005814:	602b      	str	r3, [r5, #0]
 8005816:	f7fb fb58 	bl	8000eca <_fstat>
 800581a:	1c43      	adds	r3, r0, #1
 800581c:	d102      	bne.n	8005824 <_fstat_r+0x1c>
 800581e:	682b      	ldr	r3, [r5, #0]
 8005820:	b103      	cbz	r3, 8005824 <_fstat_r+0x1c>
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	bd38      	pop	{r3, r4, r5, pc}
 8005826:	bf00      	nop
 8005828:	20004184 	.word	0x20004184

0800582c <_isatty_r>:
 800582c:	b538      	push	{r3, r4, r5, lr}
 800582e:	4d06      	ldr	r5, [pc, #24]	; (8005848 <_isatty_r+0x1c>)
 8005830:	2300      	movs	r3, #0
 8005832:	4604      	mov	r4, r0
 8005834:	4608      	mov	r0, r1
 8005836:	602b      	str	r3, [r5, #0]
 8005838:	f7fb fb57 	bl	8000eea <_isatty>
 800583c:	1c43      	adds	r3, r0, #1
 800583e:	d102      	bne.n	8005846 <_isatty_r+0x1a>
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	b103      	cbz	r3, 8005846 <_isatty_r+0x1a>
 8005844:	6023      	str	r3, [r4, #0]
 8005846:	bd38      	pop	{r3, r4, r5, pc}
 8005848:	20004184 	.word	0x20004184

0800584c <_init>:
 800584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584e:	bf00      	nop
 8005850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005852:	bc08      	pop	{r3}
 8005854:	469e      	mov	lr, r3
 8005856:	4770      	bx	lr

08005858 <_fini>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	bf00      	nop
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr
