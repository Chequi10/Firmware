
RtosC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800642c  0800642c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800642c  0800642c  0001642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006434  08006434  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006434  08006434  00016434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006438  08006438  00016438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800643c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004154  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200041c8  200041c8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001660c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000311f  00000000  00000000  000366b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  000397d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001270  00000000  00000000  0003ab78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026655  00000000  00000000  0003bde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ee4  00000000  00000000  0006243d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6c12  00000000  00000000  00077321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015df33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a18  00000000  00000000  0015df84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800624c 	.word	0x0800624c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800624c 	.word	0x0800624c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	200000e4 	.word	0x200000e4

080005c8 <_write>:

int datacheck = 0;
int i=0,a;

int _write(int file,char *ptr,int len)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	 HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <_write+0x28>)
 80005e0:	f002 fedf 	bl	80033a2 <HAL_UART_Transmit>
	 return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000334 	.word	0x20000334

080005f4 <Task_1>:


void Task_1( void* taskParmPtr )
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	    while( 1 )
    {
	    	for(a=49;a<58;a++)
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <Task_1+0x90>)
 80005fe:	2231      	movs	r2, #49	; 0x31
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	e03a      	b.n	800067a <Task_1+0x86>
	    		  {  TxData[0] = a;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <Task_1+0x90>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <Task_1+0x94>)
 800060c:	701a      	strb	r2, [r3, #0]

	    				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <Task_1+0x98>)
 8000610:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <Task_1+0x94>)
 8000612:	491f      	ldr	r1, [pc, #124]	; (8000690 <Task_1+0x9c>)
 8000614:	481f      	ldr	r0, [pc, #124]	; (8000694 <Task_1+0xa0>)
 8000616:	f001 f83b 	bl	8001690 <HAL_CAN_AddTxMessage>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <Task_1+0x38>
	    		  		 	{
	    					   HAL_GPIO_TogglePin(Amarillo_GPIO_Port, Amarillo_Pin);
 8000620:	2101      	movs	r1, #1
 8000622:	481d      	ldr	r0, [pc, #116]	; (8000698 <Task_1+0xa4>)
 8000624:	f001 ff1d 	bl	8002462 <HAL_GPIO_TogglePin>
	    		  		 	   Error_Handler ();
 8000628:	f000 fb5c 	bl	8000ce4 <Error_Handler>
	    		  		 	}
	    				printf("\nCAN2 RX:- CANID: %d, LEN: %d  RxData:%s\n\r",(char *)RxHeader2.StdId,( char *)RxHeader2.DLC,(uint8_t *)TxData);
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <Task_1+0xa8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <Task_1+0xa8>)
 8000634:	691b      	ldr	r3, [r3, #16]
 8000636:	461a      	mov	r2, r3
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <Task_1+0x94>)
 800063a:	4819      	ldr	r0, [pc, #100]	; (80006a0 <Task_1+0xac>)
 800063c:	f004 fe78 	bl	8005330 <iprintf>
	    				HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	4815      	ldr	r0, [pc, #84]	; (8000698 <Task_1+0xa4>)
 8000644:	f001 ff0d 	bl	8002462 <HAL_GPIO_TogglePin>
	    				osDelay(500);
 8000648:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800064c:	f003 fa89 	bl	8003b62 <osDelay>


	    		  if (datacheck)
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <Task_1+0xb0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d00b      	beq.n	8000670 <Task_1+0x7c>
	    		  {
	    			  HAL_GPIO_TogglePin(Rojo_GPIO_Port, Rojo_Pin);
 8000658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065c:	480e      	ldr	r0, [pc, #56]	; (8000698 <Task_1+0xa4>)
 800065e:	f001 ff00 	bl	8002462 <HAL_GPIO_TogglePin>
	    			  osDelay(500);
 8000662:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000666:	f003 fa7c 	bl	8003b62 <osDelay>

	    			  datacheck = 0;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <Task_1+0xb0>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
	    	for(a=49;a<58;a++)
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <Task_1+0x90>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a03      	ldr	r2, [pc, #12]	; (8000684 <Task_1+0x90>)
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	4b02      	ldr	r3, [pc, #8]	; (8000684 <Task_1+0x90>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b39      	cmp	r3, #57	; 0x39
 8000680:	ddc0      	ble.n	8000604 <Task_1+0x10>
 8000682:	e7bb      	b.n	80005fc <Task_1+0x8>
 8000684:	2000040c 	.word	0x2000040c
 8000688:	20000400 	.word	0x20000400
 800068c:	200003fc 	.word	0x200003fc
 8000690:	20000394 	.word	0x20000394
 8000694:	200002e4 	.word	0x200002e4
 8000698:	40020400 	.word	0x40020400
 800069c:	200003e0 	.word	0x200003e0
 80006a0:	08006280 	.word	0x08006280
 80006a4:	20000408 	.word	0x20000408

080006a8 <Task_2>:

    //vTaskDelete( NULL );
}

void Task_2( void* taskParmPtr )
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	    while( 1 )
    {
       HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <Task_2+0x18>)
 80006b4:	f001 fed5 	bl	8002462 <HAL_GPIO_TogglePin>
       osDelay(50);
 80006b8:	2032      	movs	r0, #50	; 0x32
 80006ba:	f003 fa52 	bl	8003b62 <osDelay>
       HAL_GPIO_TogglePin(Azul_GPIO_Port, Azul_Pin);
 80006be:	e7f7      	b.n	80006b0 <Task_2+0x8>
 80006c0:	40020400 	.word	0x40020400

080006c4 <HAL_CAN_RxFifo0MsgPendingCallback>:
    }
}


void  HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan2)
  {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Amarillo_GPIO_Port, Amarillo_Pin);
 80006cc:	2101      	movs	r1, #1
 80006ce:	480c      	ldr	r0, [pc, #48]	; (8000700 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80006d0:	f001 fec7 	bl	8002462 <HAL_GPIO_TogglePin>

	if (HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO0, &RxHeader2, RxData) != HAL_OK)
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80006d6:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80006d8:	2100      	movs	r1, #0
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f001 f8b3 	bl	8001846 <HAL_CAN_GetRxMessage>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
	  {
	    Error_Handler();
 80006e6:	f000 fafd 	bl	8000ce4 <Error_Handler>
	  }

	  if ((RxHeader2.StdId == 146))
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b92      	cmp	r3, #146	; 0x92
 80006f0:	d102      	bne.n	80006f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	  {
		  datacheck = 1;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
	  }
  }
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40020400 	.word	0x40020400
 8000704:	20000404 	.word	0x20000404
 8000708:	200003e0 	.word	0x200003e0
 800070c:	20000408 	.word	0x20000408

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b0a0      	sub	sp, #128	; 0x80
 8000714:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f000 fd59 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 f8f1 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f000 fa3d 	bl	8000b9c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000722:	f000 f94d 	bl	80009c0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000726:	f000 f9ad 	bl	8000a84 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 800072a:	f000 fa0d 	bl	8000b48 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


printf("Protocolo de Comuncacion CAN activo:\n\rCAN 1: PB8=Rx PB9=Tx\n\rCAN 2: PB5=Rx PB6=Tx \n\r");
 800072e:	485f      	ldr	r0, [pc, #380]	; (80008ac <main+0x19c>)
 8000730:	f004 fdfe 	bl	8005330 <iprintf>

  TxHeader.IDE = CAN_ID_STD;
 8000734:	4b5e      	ldr	r3, [pc, #376]	; (80008b0 <main+0x1a0>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 146;
 800073a:	4b5d      	ldr	r3, [pc, #372]	; (80008b0 <main+0x1a0>)
 800073c:	2292      	movs	r2, #146	; 0x92
 800073e:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000740:	4b5b      	ldr	r3, [pc, #364]	; (80008b0 <main+0x1a0>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 1;
 8000746:	4b5a      	ldr	r3, [pc, #360]	; (80008b0 <main+0x1a0>)
 8000748:	2201      	movs	r2, #1
 800074a:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 800074c:	4b58      	ldr	r3, [pc, #352]	; (80008b0 <main+0x1a0>)
 800074e:	2200      	movs	r2, #0
 8000750:	751a      	strb	r2, [r3, #20]

  RxHeader.IDE = CAN_ID_STD;
 8000752:	4b58      	ldr	r3, [pc, #352]	; (80008b4 <main+0x1a4>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  RxHeader.StdId = 146;
 8000758:	4b56      	ldr	r3, [pc, #344]	; (80008b4 <main+0x1a4>)
 800075a:	2292      	movs	r2, #146	; 0x92
 800075c:	601a      	str	r2, [r3, #0]
  RxHeader.RTR = CAN_RTR_DATA;
 800075e:	4b55      	ldr	r3, [pc, #340]	; (80008b4 <main+0x1a4>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  RxHeader.DLC = 1;
 8000764:	4b53      	ldr	r3, [pc, #332]	; (80008b4 <main+0x1a4>)
 8000766:	2201      	movs	r2, #1
 8000768:	611a      	str	r2, [r3, #16]

  TxHeader2.IDE = CAN_ID_STD;
 800076a:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <main+0x1a8>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  TxHeader2.StdId = 20;
 8000770:	4b51      	ldr	r3, [pc, #324]	; (80008b8 <main+0x1a8>)
 8000772:	2214      	movs	r2, #20
 8000774:	601a      	str	r2, [r3, #0]
  TxHeader2.RTR = CAN_RTR_DATA;
 8000776:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <main+0x1a8>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  TxHeader2.DLC = 1;
 800077c:	4b4e      	ldr	r3, [pc, #312]	; (80008b8 <main+0x1a8>)
 800077e:	2201      	movs	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
  TxHeader2.TransmitGlobalTime = DISABLE;
 8000782:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <main+0x1a8>)
 8000784:	2200      	movs	r2, #0
 8000786:	751a      	strb	r2, [r3, #20]

  RxHeader2.IDE = CAN_ID_STD;
 8000788:	4b4c      	ldr	r3, [pc, #304]	; (80008bc <main+0x1ac>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  RxHeader2.StdId = 20;
 800078e:	4b4b      	ldr	r3, [pc, #300]	; (80008bc <main+0x1ac>)
 8000790:	2214      	movs	r2, #20
 8000792:	601a      	str	r2, [r3, #0]
  RxHeader2.RTR = CAN_RTR_DATA;
 8000794:	4b49      	ldr	r3, [pc, #292]	; (80008bc <main+0x1ac>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  RxHeader2.DLC = 1;
 800079a:	4b48      	ldr	r3, [pc, #288]	; (80008bc <main+0x1ac>)
 800079c:	2201      	movs	r2, #1
 800079e:	611a      	str	r2, [r3, #16]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 80007a0:	4b47      	ldr	r3, [pc, #284]	; (80008c0 <main+0x1b0>)
 80007a2:	667b      	str	r3, [r7, #100]	; 0x64
 80007a4:	2300      	movs	r3, #0
 80007a6:	66bb      	str	r3, [r7, #104]	; 0x68
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80007a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 f9ea 	bl	8003b8a <osTimerCreate>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a42      	ldr	r2, [pc, #264]	; (80008c4 <main+0x1b4>)
 80007ba:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue_1 */
  osMessageQDef(Queue_1, 16, uint16_t);
 80007bc:	4b42      	ldr	r3, [pc, #264]	; (80008c8 <main+0x1b8>)
 80007be:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80007c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_1Handle = osMessageCreate(osMessageQ(Queue_1), NULL);
 80007c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 f9e9 	bl	8003ba6 <osMessageCreate>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a3d      	ldr	r2, [pc, #244]	; (80008cc <main+0x1bc>)
 80007d8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007da:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <main+0x1c0>)
 80007dc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80007e0:	461d      	mov	r5, r3
 80007e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 f968 	bl	8003aca <osThreadCreate>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a35      	ldr	r2, [pc, #212]	; (80008d4 <main+0x1c4>)
 80007fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_1 */
  osThreadDef(Task_1, StartTask_1, osPriorityLow, 0, 128);
 8000800:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <main+0x1c8>)
 8000802:	f107 041c 	add.w	r4, r7, #28
 8000806:	461d      	mov	r5, r3
 8000808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000810:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1Handle = osThreadCreate(osThread(Task_1), NULL);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f003 f955 	bl	8003aca <osThreadCreate>
 8000820:	4603      	mov	r3, r0
 8000822:	4a2e      	ldr	r2, [pc, #184]	; (80008dc <main+0x1cc>)
 8000824:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_2 */
  osThreadDef(Task_2, StartTask02, osPriorityLow, 0, 128);
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <main+0x1d0>)
 8000828:	463c      	mov	r4, r7
 800082a:	461d      	mov	r5, r3
 800082c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000830:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000834:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_2Handle = osThreadCreate(osThread(Task_2), NULL);
 8000838:	463b      	mov	r3, r7
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f003 f944 	bl	8003aca <osThreadCreate>
 8000842:	4603      	mov	r3, r0
 8000844:	4a27      	ldr	r2, [pc, #156]	; (80008e4 <main+0x1d4>)
 8000846:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  BaseType_t res1 =
       xTaskCreate(
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <main+0x1d8>)
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	2301      	movs	r3, #1
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2300      	movs	r3, #0
 8000852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000856:	4925      	ldr	r1, [pc, #148]	; (80008ec <main+0x1dc>)
 8000858:	4825      	ldr	r0, [pc, #148]	; (80008f0 <main+0x1e0>)
 800085a:	f003 fc17 	bl	800408c <xTaskCreate>
 800085e:	6778      	str	r0, [r7, #116]	; 0x74
           tskIDLE_PRIORITY+1,         // Prioridad de la tarea
	   &task_handle_task_1             // Puntero a la tarea creada en el sistema
       );

  BaseType_t res2 =
       xTaskCreate(
 8000860:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <main+0x1e4>)
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	2301      	movs	r3, #1
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2300      	movs	r3, #0
 800086a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800086e:	4922      	ldr	r1, [pc, #136]	; (80008f8 <main+0x1e8>)
 8000870:	4822      	ldr	r0, [pc, #136]	; (80008fc <main+0x1ec>)
 8000872:	f003 fc0b 	bl	800408c <xTaskCreate>
 8000876:	6738      	str	r0, [r7, #112]	; 0x70
           tskIDLE_PRIORITY+1,         // Prioridad de la tarea
	   &task_handle_task_2             // Puntero a la tarea creada en el sistema
       );


  configASSERT( res1 == pdPASS && res2 == pdPASS);
 8000878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800087a:	2b01      	cmp	r3, #1
 800087c:	d104      	bne.n	8000888 <main+0x178>
 800087e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000880:	2b01      	cmp	r3, #1
 8000882:	d101      	bne.n	8000888 <main+0x178>
 8000884:	2301      	movs	r3, #1
 8000886:	e000      	b.n	800088a <main+0x17a>
 8000888:	2300      	movs	r3, #0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10a      	bne.n	80008a4 <main+0x194>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800088e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000892:	f383 8811 	msr	BASEPRI, r3
 8000896:	f3bf 8f6f 	isb	sy
 800089a:	f3bf 8f4f 	dsb	sy
 800089e:	66fb      	str	r3, [r7, #108]	; 0x6c
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80008a0:	bf00      	nop
 80008a2:	e7fe      	b.n	80008a2 <main+0x192>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008a4:	f003 f90a 	bl	8003abc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <main+0x198>
 80008aa:	bf00      	nop
 80008ac:	080062ac 	.word	0x080062ac
 80008b0:	20000394 	.word	0x20000394
 80008b4:	200003c4 	.word	0x200003c4
 80008b8:	200003ac 	.word	0x200003ac
 80008bc:	200003e0 	.word	0x200003e0
 80008c0:	08000cad 	.word	0x08000cad
 80008c4:	20000388 	.word	0x20000388
 80008c8:	08006310 	.word	0x08006310
 80008cc:	20000384 	.word	0x20000384
 80008d0:	08006320 	.word	0x08006320
 80008d4:	20000378 	.word	0x20000378
 80008d8:	0800633c 	.word	0x0800633c
 80008dc:	2000037c 	.word	0x2000037c
 80008e0:	08006358 	.word	0x08006358
 80008e4:	20000380 	.word	0x20000380
 80008e8:	2000038c 	.word	0x2000038c
 80008ec:	08006300 	.word	0x08006300
 80008f0:	080005f5 	.word	0x080005f5
 80008f4:	20000390 	.word	0x20000390
 80008f8:	08006308 	.word	0x08006308
 80008fc:	080006a9 	.word	0x080006a9

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	; 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	2230      	movs	r2, #48	; 0x30
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f004 fd06 	bl	8005320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <SystemClock_Config+0xb8>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <SystemClock_Config+0xb8>)
 800092e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000932:	6413      	str	r3, [r2, #64]	; 0x40
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <SystemClock_Config+0xb8>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <SystemClock_Config+0xbc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800094c:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <SystemClock_Config+0xbc>)
 800094e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <SystemClock_Config+0xbc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000964:	2301      	movs	r3, #1
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000968:	2310      	movs	r3, #16
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800096c:	2300      	movs	r3, #0
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fd8f 	bl	8002498 <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000980:	f000 f9b0 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	230f      	movs	r3, #15
 8000986:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000988:	2300      	movs	r3, #0
 800098a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 fff2 	bl	8002988 <HAL_RCC_ClockConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009aa:	f000 f99b 	bl	8000ce4 <Error_Handler>
  }
}
 80009ae:	bf00      	nop
 80009b0:	3750      	adds	r7, #80	; 0x50
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40007000 	.word	0x40007000

080009c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009c6:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <MX_CAN1_Init+0xbc>)
 80009c8:	4a2d      	ldr	r2, [pc, #180]	; (8000a80 <MX_CAN1_Init+0xc0>)
 80009ca:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <MX_CAN1_Init+0xbc>)
 80009ce:	2210      	movs	r2, #16
 80009d0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_CAN1_Init+0xbc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_CAN1_Init+0xbc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <MX_CAN1_Init+0xbc>)
 80009e0:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80009e4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <MX_CAN1_Init+0xbc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009ec:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <MX_CAN1_Init+0xbc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009f2:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_CAN1_Init+0xbc>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <MX_CAN1_Init+0xbc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_CAN1_Init+0xbc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_CAN1_Init+0xbc>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_CAN1_Init+0xbc>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a10:	481a      	ldr	r0, [pc, #104]	; (8000a7c <MX_CAN1_Init+0xbc>)
 8000a12:	f000 fc1d 	bl	8001250 <HAL_CAN_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a1c:	f000 f962 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterIdHigh=0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIdLow=0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterMaskIdHigh=0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterMaskIdLow=0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterActivation=ENABLE;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
      sFilterConfig.SlaveStartFilterBank = 14;
 8000a44:	230e      	movs	r3, #14
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24

      if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <MX_CAN1_Init+0xbc>)
 8000a4e:	f000 fcfb 	bl	8001448 <HAL_CAN_ConfigFilter>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_CAN1_Init+0x9c>
        {
          /* Filter configuration Error */
          Error_Handler();
 8000a58:	f000 f944 	bl	8000ce4 <Error_Handler>
        }

      HAL_CAN_Start(&hcan1);
 8000a5c:	4807      	ldr	r0, [pc, #28]	; (8000a7c <MX_CAN1_Init+0xbc>)
 8000a5e:	f000 fdd3 	bl	8001608 <HAL_CAN_Start>

        /*##-4- Activate CAN RX notification #######################################*/
        if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000a62:	2102      	movs	r1, #2
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_CAN1_Init+0xbc>)
 8000a66:	f001 f800 	bl	8001a6a <HAL_CAN_ActivateNotification>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_CAN1_Init+0xb4>
        {
          /* Notification Error */
          Error_Handler();
 8000a70:	f000 f938 	bl	8000ce4 <Error_Handler>
        }
  /* USER CODE END CAN1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	3728      	adds	r7, #40	; 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200002e4 	.word	0x200002e4
 8000a80:	40006400 	.word	0x40006400

08000a84 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000a8a:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000a8c:	4a2d      	ldr	r2, [pc, #180]	; (8000b44 <MX_CAN2_Init+0xc0>)
 8000a8e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000a90:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000a92:	2210      	movs	r2, #16
 8000a94:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000aa2:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000aa4:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000aa8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000ad4:	481a      	ldr	r0, [pc, #104]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000ad6:	f000 fbbb 	bl	8001250 <HAL_CAN_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000ae0:	f000 f900 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  sFilterConfig.FilterBank = 14;
 8000ae4:	230e      	movs	r3, #14
 8000ae6:	617b      	str	r3, [r7, #20]
		  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
		  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
		  sFilterConfig.FilterIdHigh=0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	603b      	str	r3, [r7, #0]
		  sFilterConfig.FilterIdLow=0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
		  sFilterConfig.FilterMaskIdHigh=0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
		  sFilterConfig.FilterMaskIdLow=0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
		  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61fb      	str	r3, [r7, #28]
		  sFilterConfig.FilterActivation=ENABLE;
 8000b04:	2301      	movs	r3, #1
 8000b06:	623b      	str	r3, [r7, #32]
	      sFilterConfig.SlaveStartFilterBank = 14;
 8000b08:	230e      	movs	r3, #14
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24

	      if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480b      	ldr	r0, [pc, #44]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000b12:	f000 fc99 	bl	8001448 <HAL_CAN_ConfigFilter>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_CAN2_Init+0x9c>
	        {
	          /* Filter configuration Error */
	          Error_Handler();
 8000b1c:	f000 f8e2 	bl	8000ce4 <Error_Handler>
	        }

	      HAL_CAN_Start(&hcan2);
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000b22:	f000 fd71 	bl	8001608 <HAL_CAN_Start>

	        /*##-4- Activate CAN RX notification #######################################*/
	        if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000b26:	2102      	movs	r1, #2
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_CAN2_Init+0xbc>)
 8000b2a:	f000 ff9e 	bl	8001a6a <HAL_CAN_ActivateNotification>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_CAN2_Init+0xb4>
	        {
	          /* Notification Error */
	          Error_Handler();
 8000b34:	f000 f8d6 	bl	8000ce4 <Error_Handler>
	        }
  /* USER CODE END CAN2_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2000030c 	.word	0x2000030c
 8000b44:	40006800 	.word	0x40006800

08000b48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <MX_USART3_UART_Init+0x50>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_USART3_UART_Init+0x4c>)
 8000b80:	f002 fbc2 	bl	8003308 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b8a:	f000 f8ab 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000334 	.word	0x20000334
 8000b98:	40004800 	.word	0x40004800

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a2d      	ldr	r2, [pc, #180]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a26      	ldr	r2, [pc, #152]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Amarillo_Pin|Rojo_Pin|Azul_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c28:	4812      	ldr	r0, [pc, #72]	; (8000c74 <MX_GPIO_Init+0xd8>)
 8000c2a:	f001 fc01 	bl	8002430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <MX_GPIO_Init+0xdc>)
 8000c46:	f001 fa47 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Amarillo_Pin Rojo_Pin Azul_Pin */
  GPIO_InitStruct.Pin = Amarillo_Pin|Rojo_Pin|Azul_Pin;
 8000c4a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_GPIO_Init+0xd8>)
 8000c64:	f001 fa38 	bl	80020d8 <HAL_GPIO_Init>

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020400 	.word	0x40020400
 8000c78:	40020800 	.word	0x40020800

08000c7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f002 ff6c 	bl	8003b62 <osDelay>
 8000c8a:	e7fb      	b.n	8000c84 <StartDefaultTask+0x8>

08000c8c <StartTask_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_1 */
void StartTask_1(void const * argument)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f002 ff64 	bl	8003b62 <osDelay>
 8000c9a:	e7fb      	b.n	8000c94 <StartTask_1+0x8>

08000c9c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f002 ff5c 	bl	8003b62 <osDelay>
 8000caa:	e7fb      	b.n	8000ca4 <StartTask02+0x8>

08000cac <Callback01>:
  /* USER CODE END StartTask02 */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d101      	bne.n	8000cd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cd2:	f000 fa9d 	bl	8001210 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40001400 	.word	0x40001400

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	e7fe      	b.n	8000cec <Error_Handler+0x8>
	...

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <HAL_MspInit+0x74>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <HAL_MspInit+0x74>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_MspInit+0x74>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <HAL_MspInit+0x74>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <HAL_MspInit+0x74>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_MspInit+0x74>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	210f      	movs	r1, #15
 8000d32:	f06f 0001 	mvn.w	r0, #1
 8000d36:	f001 f9a5 	bl	8002084 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2105      	movs	r1, #5
 8000d3e:	2005      	movs	r0, #5
 8000d40:	f001 f9a0 	bl	8002084 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d44:	2005      	movs	r0, #5
 8000d46:	f001 f9b9 	bl	80020bc <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2105      	movs	r1, #5
 8000d4e:	2005      	movs	r0, #5
 8000d50:	f001 f998 	bl	8002084 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d54:	2005      	movs	r0, #5
 8000d56:	f001 f9b1 	bl	80020bc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a46      	ldr	r2, [pc, #280]	; (8000ea0 <HAL_CAN_MspInit+0x138>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d136      	bne.n	8000df8 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d8a:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <HAL_CAN_MspInit+0x13c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	4a44      	ldr	r2, [pc, #272]	; (8000ea4 <HAL_CAN_MspInit+0x13c>)
 8000d92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d94:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <HAL_CAN_MspInit+0x13c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d10d      	bne.n	8000db8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	4b41      	ldr	r3, [pc, #260]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	4a40      	ldr	r2, [pc, #256]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000da6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dac:	4b3e      	ldr	r3, [pc, #248]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	4b3a      	ldr	r3, [pc, #232]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a39      	ldr	r2, [pc, #228]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000de6:	2309      	movs	r3, #9
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	482e      	ldr	r0, [pc, #184]	; (8000eac <HAL_CAN_MspInit+0x144>)
 8000df2:	f001 f971 	bl	80020d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000df6:	e04f      	b.n	8000e98 <HAL_CAN_MspInit+0x130>
  else if(hcan->Instance==CAN2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <HAL_CAN_MspInit+0x148>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d14a      	bne.n	8000e98 <HAL_CAN_MspInit+0x130>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a27      	ldr	r2, [pc, #156]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000e0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <HAL_CAN_MspInit+0x13c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <HAL_CAN_MspInit+0x13c>)
 8000e26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <HAL_CAN_MspInit+0x13c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d10d      	bne.n	8000e4c <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000e3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_CAN_MspInit+0x140>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e68:	2360      	movs	r3, #96	; 0x60
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000e78:	2309      	movs	r3, #9
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	480a      	ldr	r0, [pc, #40]	; (8000eac <HAL_CAN_MspInit+0x144>)
 8000e84:	f001 f928 	bl	80020d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 6, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2106      	movs	r1, #6
 8000e8c:	2040      	movs	r0, #64	; 0x40
 8000e8e:	f001 f8f9 	bl	8002084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000e92:	2040      	movs	r0, #64	; 0x40
 8000e94:	f001 f912 	bl	80020bc <HAL_NVIC_EnableIRQ>
}
 8000e98:	bf00      	nop
 8000e9a:	3730      	adds	r7, #48	; 0x30
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40006400 	.word	0x40006400
 8000ea4:	20000410 	.word	0x20000410
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020400 	.word	0x40020400
 8000eb0:	40006800 	.word	0x40006800

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <HAL_UART_MspInit+0x84>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d12c      	bne.n	8000f30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_UART_MspInit+0x88>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_UART_MspInit+0x88>)
 8000ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_UART_MspInit+0x88>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_UART_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_UART_MspInit+0x88>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_UART_MspInit+0x88>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f20:	2307      	movs	r3, #7
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_UART_MspInit+0x8c>)
 8000f2c:	f001 f8d4 	bl	80020d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40004800 	.word	0x40004800
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020c00 	.word	0x40020c00

08000f44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	; 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	2037      	movs	r0, #55	; 0x37
 8000f5a:	f001 f893 	bl	8002084 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f5e:	2037      	movs	r0, #55	; 0x37
 8000f60:	f001 f8ac 	bl	80020bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_InitTick+0xa0>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <HAL_InitTick+0xa0>)
 8000f6e:	f043 0320 	orr.w	r3, r3, #32
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_InitTick+0xa0>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f003 0320 	and.w	r3, r3, #32
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f80:	f107 0210 	add.w	r2, r7, #16
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fedc 	bl	8002d48 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f90:	f001 feb2 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8000f94:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	0c9b      	lsrs	r3, r3, #18
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_InitTick+0xa8>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <HAL_InitTick+0xac>)
 8000fa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_InitTick+0xa8>)
 8000fac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fb0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_InitTick+0xa8>)
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_InitTick+0xa8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_InitTick+0xa8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <HAL_InitTick+0xa8>)
 8000fc6:	f001 fef1 	bl	8002dac <HAL_TIM_Base_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d104      	bne.n	8000fda <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000fd0:	4806      	ldr	r0, [pc, #24]	; (8000fec <HAL_InitTick+0xa8>)
 8000fd2:	f001 ff45 	bl	8002e60 <HAL_TIM_Base_Start_IT>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3730      	adds	r7, #48	; 0x30
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	431bde83 	.word	0x431bde83
 8000fec:	20000414 	.word	0x20000414
 8000ff0:	40001400 	.word	0x40001400

08000ff4 <HardFault_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <HardFault_Handler+0x4>

08000ffa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <MemManage_Handler+0x4>

08001000 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <BusFault_Handler+0x4>

08001006 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <UsageFault_Handler+0x4>

0800100c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <TIM7_IRQHandler+0x10>)
 8001022:	f001 ff8d 	bl	8002f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000414 	.word	0x20000414

08001030 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <CAN2_RX0_IRQHandler+0x10>)
 8001036:	f000 fd3e 	bl	8001ab6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000030c 	.word	0x2000030c

08001044 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	e00a      	b.n	800106c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001056:	f3af 8000 	nop.w
 800105a:	4601      	mov	r1, r0
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	60ba      	str	r2, [r7, #8]
 8001062:	b2ca      	uxtb	r2, r1
 8001064:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf0      	blt.n	8001056 <_read+0x12>
	}

return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_close>:
	}
	return len;
}

int _close(int file)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	return -1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a6:	605a      	str	r2, [r3, #4]
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_isatty>:

int _isatty(int file)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f004 f8d8 	bl	80052cc <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20030000 	.word	0x20030000
 8001148:	00000400 	.word	0x00000400
 800114c:	2000045c 	.word	0x2000045c
 8001150:	200041c8 	.word	0x200041c8

08001154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117e:	490e      	ldr	r1, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001194:	4c0b      	ldr	r4, [pc, #44]	; (80011c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011a2:	f7ff ffd7 	bl	8001154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f004 f897 	bl	80052d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff fab1 	bl	8000710 <main>
  bx  lr    
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011bc:	0800643c 	.word	0x0800643c
  ldr r2, =_sbss
 80011c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011c4:	200041c8 	.word	0x200041c8

080011c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC_IRQHandler>
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <HAL_Init+0x40>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_Init+0x40>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_Init+0x40>)
 80011ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 ff3a 	bl	800206e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	200f      	movs	r0, #15
 80011fc:	f7ff fea2 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001200:	f7ff fd76 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023c00 	.word	0x40023c00

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	20000460 	.word	0x20000460

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000460 	.word	0x20000460

08001250 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0ed      	b.n	800143e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fd7a 	bl	8000d68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0201 	orr.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001284:	f7ff ffd8 	bl	8001238 <HAL_GetTick>
 8001288:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800128a:	e012      	b.n	80012b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800128c:	f7ff ffd4 	bl	8001238 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b0a      	cmp	r3, #10
 8001298:	d90b      	bls.n	80012b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2205      	movs	r2, #5
 80012aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0c5      	b.n	800143e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0e5      	beq.n	800128c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0202 	bic.w	r2, r2, #2
 80012ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d0:	f7ff ffb2 	bl	8001238 <HAL_GetTick>
 80012d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012d6:	e012      	b.n	80012fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012d8:	f7ff ffae 	bl	8001238 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b0a      	cmp	r3, #10
 80012e4:	d90b      	bls.n	80012fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2205      	movs	r2, #5
 80012f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e09f      	b.n	800143e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1e5      	bne.n	80012d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7e1b      	ldrb	r3, [r3, #24]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d108      	bne.n	8001326 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	e007      	b.n	8001336 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7e5b      	ldrb	r3, [r3, #25]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d108      	bne.n	8001350 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e007      	b.n	8001360 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800135e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7e9b      	ldrb	r3, [r3, #26]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d108      	bne.n	800137a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0220 	orr.w	r2, r2, #32
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e007      	b.n	800138a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0220 	bic.w	r2, r2, #32
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7edb      	ldrb	r3, [r3, #27]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d108      	bne.n	80013a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0210 	bic.w	r2, r2, #16
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e007      	b.n	80013b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0210 	orr.w	r2, r2, #16
 80013b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7f1b      	ldrb	r3, [r3, #28]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d108      	bne.n	80013ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0208 	orr.w	r2, r2, #8
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e007      	b.n	80013de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0208 	bic.w	r2, r2, #8
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7f5b      	ldrb	r3, [r3, #29]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d108      	bne.n	80013f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0204 	orr.w	r2, r2, #4
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e007      	b.n	8001408 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0204 	bic.w	r2, r2, #4
 8001406:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	ea42 0103 	orr.w	r1, r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	1e5a      	subs	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001460:	7cfb      	ldrb	r3, [r7, #19]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d003      	beq.n	800146e <HAL_CAN_ConfigFilter+0x26>
 8001466:	7cfb      	ldrb	r3, [r7, #19]
 8001468:	2b02      	cmp	r3, #2
 800146a:	f040 80be 	bne.w	80015ea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800146e:	4b65      	ldr	r3, [pc, #404]	; (8001604 <HAL_CAN_ConfigFilter+0x1bc>)
 8001470:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001478:	f043 0201 	orr.w	r2, r3, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001488:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	431a      	orrs	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	2201      	movs	r2, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	401a      	ands	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d123      	bne.n	8001518 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	43db      	mvns	r3, r3
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3248      	adds	r2, #72	; 0x48
 80014f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800150c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800150e:	6979      	ldr	r1, [r7, #20]
 8001510:	3348      	adds	r3, #72	; 0x48
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d122      	bne.n	8001566 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	431a      	orrs	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001540:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3248      	adds	r2, #72	; 0x48
 8001546:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800155a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800155c:	6979      	ldr	r1, [r7, #20]
 800155e:	3348      	adds	r3, #72	; 0x48
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	401a      	ands	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001580:	e007      	b.n	8001592 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	431a      	orrs	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	401a      	ands	r2, r3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80015ac:	e007      	b.n	80015be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d107      	bne.n	80015d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015dc:	f023 0201 	bic.w	r2, r3, #1
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e006      	b.n	80015f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
  }
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	371c      	adds	r7, #28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40006400 	.word	0x40006400

08001608 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b01      	cmp	r3, #1
 800161a:	d12e      	bne.n	800167a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001634:	f7ff fe00 	bl	8001238 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800163a:	e012      	b.n	8001662 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800163c:	f7ff fdfc 	bl	8001238 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b0a      	cmp	r3, #10
 8001648:	d90b      	bls.n	8001662 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2205      	movs	r2, #5
 800165a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e012      	b.n	8001688 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1e5      	bne.n	800163c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e006      	b.n	8001688 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
  }
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ae:	7ffb      	ldrb	r3, [r7, #31]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d003      	beq.n	80016bc <HAL_CAN_AddTxMessage+0x2c>
 80016b4:	7ffb      	ldrb	r3, [r7, #31]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	f040 80b8 	bne.w	800182c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10a      	bne.n	80016dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d105      	bne.n	80016dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80a0 	beq.w	800181c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	0e1b      	lsrs	r3, r3, #24
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d907      	bls.n	80016fc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e09e      	b.n	800183a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016fc:	2201      	movs	r2, #1
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	409a      	lsls	r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10d      	bne.n	800172a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	6809      	ldr	r1, [r1, #0]
 800171c:	431a      	orrs	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3318      	adds	r3, #24
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	440b      	add	r3, r1
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e00f      	b.n	800174a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001734:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800173a:	68f9      	ldr	r1, [r7, #12]
 800173c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800173e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3318      	adds	r3, #24
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	440b      	add	r3, r1
 8001748:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6819      	ldr	r1, [r3, #0]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3318      	adds	r3, #24
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	440b      	add	r3, r1
 800175a:	3304      	adds	r3, #4
 800175c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	7d1b      	ldrb	r3, [r3, #20]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d111      	bne.n	800178a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3318      	adds	r3, #24
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4413      	add	r3, r2
 8001772:	3304      	adds	r3, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	6811      	ldr	r1, [r2, #0]
 800177a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3318      	adds	r3, #24
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	440b      	add	r3, r1
 8001786:	3304      	adds	r3, #4
 8001788:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3307      	adds	r3, #7
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	061a      	lsls	r2, r3, #24
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3306      	adds	r3, #6
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3305      	adds	r3, #5
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	4313      	orrs	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	3204      	adds	r2, #4
 80017aa:	7812      	ldrb	r2, [r2, #0]
 80017ac:	4610      	mov	r0, r2
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	6811      	ldr	r1, [r2, #0]
 80017b2:	ea43 0200 	orr.w	r2, r3, r0
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	440b      	add	r3, r1
 80017bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80017c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3303      	adds	r3, #3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	061a      	lsls	r2, r3, #24
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3302      	adds	r3, #2
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3301      	adds	r3, #1
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	4313      	orrs	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	4610      	mov	r0, r2
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	6811      	ldr	r1, [r2, #0]
 80017e8:	ea43 0200 	orr.w	r2, r3, r0
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	440b      	add	r3, r1
 80017f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80017f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3318      	adds	r3, #24
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	6811      	ldr	r1, [r2, #0]
 800180a:	f043 0201 	orr.w	r2, r3, #1
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3318      	adds	r3, #24
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	440b      	add	r3, r1
 8001816:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e00e      	b.n	800183a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e006      	b.n	800183a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
  }
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001846:	b480      	push	{r7}
 8001848:	b087      	sub	sp, #28
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d003      	beq.n	800186a <HAL_CAN_GetRxMessage+0x24>
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	2b02      	cmp	r3, #2
 8001866:	f040 80f3 	bne.w	8001a50 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10e      	bne.n	800188e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d116      	bne.n	80018ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0e7      	b.n	8001a5e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0d8      	b.n	8001a5e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	331b      	adds	r3, #27
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4413      	add	r3, r2
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0204 	and.w	r2, r3, #4
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10c      	bne.n	80018e4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	331b      	adds	r3, #27
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0d5b      	lsrs	r3, r3, #21
 80018da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e00b      	b.n	80018fc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	331b      	adds	r3, #27
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	4413      	add	r3, r2
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	08db      	lsrs	r3, r3, #3
 80018f4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	331b      	adds	r3, #27
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	4413      	add	r3, r2
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0202 	and.w	r2, r3, #2
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	331b      	adds	r3, #27
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	4413      	add	r3, r2
 800191e:	3304      	adds	r3, #4
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 020f 	and.w	r2, r3, #15
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	331b      	adds	r3, #27
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4413      	add	r3, r2
 8001936:	3304      	adds	r3, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	b2da      	uxtb	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	331b      	adds	r3, #27
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	4413      	add	r3, r2
 800194e:	3304      	adds	r3, #4
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	0c1b      	lsrs	r3, r3, #16
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	4413      	add	r3, r2
 8001964:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	4413      	add	r3, r2
 800197a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0a1a      	lsrs	r2, r3, #8
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0c1a      	lsrs	r2, r3, #16
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	3302      	adds	r3, #2
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0e1a      	lsrs	r2, r3, #24
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3303      	adds	r3, #3
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	3304      	adds	r3, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0a1a      	lsrs	r2, r3, #8
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	3305      	adds	r3, #5
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0c1a      	lsrs	r2, r3, #16
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	3306      	adds	r3, #6
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	0e1a      	lsrs	r2, r3, #24
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	3307      	adds	r3, #7
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d108      	bne.n	8001a3c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0220 	orr.w	r2, r2, #32
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	e007      	b.n	8001a4c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0220 	orr.w	r2, r2, #32
 8001a4a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e006      	b.n	8001a5e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
  }
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d002      	beq.n	8001a88 <HAL_CAN_ActivateNotification+0x1e>
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d109      	bne.n	8001a9c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6959      	ldr	r1, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e006      	b.n	8001aaa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b08a      	sub	sp, #40	; 0x28
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d07c      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d023      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f983 	bl	8001e24 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b1e:	e016      	b.n	8001b4e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	e00c      	b.n	8001b4e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	e002      	b.n	8001b4e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f989 	bl	8001e60 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d024      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f963 	bl	8001e38 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b72:	e016      	b.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d004      	beq.n	8001b88 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
 8001b86:	e00c      	b.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9a:	e002      	b.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f969 	bl	8001e74 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d024      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f943 	bl	8001e4c <HAL_CAN_TxMailbox2CompleteCallback>
 8001bc6:	e016      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bda:	e00c      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
 8001bee:	e002      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f949 	bl	8001e88 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2210      	movs	r2, #16
 8001c18:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00b      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2208      	movs	r2, #8
 8001c34:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f930 	bl	8001e9c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7fe fd35 	bl	80006c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00b      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2208      	movs	r2, #8
 8001c98:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f912 	bl	8001ec4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8f9 	bl	8001eb0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00b      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8fc 	bl	8001ed8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8f5 	bl	8001eec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d07b      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d072      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d043      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d03e      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d84:	2b60      	cmp	r3, #96	; 0x60
 8001d86:	d02b      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x32a>
 8001d88:	2b60      	cmp	r3, #96	; 0x60
 8001d8a:	d82e      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001d8c:	2b50      	cmp	r3, #80	; 0x50
 8001d8e:	d022      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x320>
 8001d90:	2b50      	cmp	r3, #80	; 0x50
 8001d92:	d82a      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	d019      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x316>
 8001d98:	2b40      	cmp	r3, #64	; 0x40
 8001d9a:	d826      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001d9c:	2b30      	cmp	r3, #48	; 0x30
 8001d9e:	d010      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x30c>
 8001da0:	2b30      	cmp	r3, #48	; 0x30
 8001da2:	d822      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001da4:	2b10      	cmp	r3, #16
 8001da6:	d002      	beq.n	8001dae <HAL_CAN_IRQHandler+0x2f8>
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d005      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001dac:	e01d      	b.n	8001dea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001db6:	e019      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	f043 0310 	orr.w	r3, r3, #16
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dc0:	e014      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	f043 0320 	orr.w	r3, r3, #32
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dca:	e00f      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dd4:	e00a      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dde:	e005      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001de8:	e000      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            break;
 8001dea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001dfa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2204      	movs	r2, #4
 8001e02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f872 	bl	8001f00 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <__NVIC_EnableIRQ+0x38>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	; (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	; (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ff4c 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002096:	f7ff ff61 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 800209a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	68b9      	ldr	r1, [r7, #8]
 80020a0:	6978      	ldr	r0, [r7, #20]
 80020a2:	f7ff ffb1 	bl	8002008 <NVIC_EncodePriority>
 80020a6:	4602      	mov	r2, r0
 80020a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff80 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020b4:	bf00      	nop
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff54 	bl	8001f78 <__NVIC_EnableIRQ>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	e177      	b.n	80023e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020f4:	2201      	movs	r2, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	f040 8166 	bne.w	80023de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d005      	beq.n	800212a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002126:	2b02      	cmp	r3, #2
 8002128:	d130      	bne.n	800218c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002160:	2201      	movs	r2, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 0201 	and.w	r2, r3, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b03      	cmp	r3, #3
 8002196:	d017      	beq.n	80021c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d123      	bne.n	800221c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	220f      	movs	r2, #15
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	08da      	lsrs	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3208      	adds	r2, #8
 8002216:	69b9      	ldr	r1, [r7, #24]
 8002218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0203 	and.w	r2, r3, #3
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80c0 	beq.w	80023de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	4b66      	ldr	r3, [pc, #408]	; (80023fc <HAL_GPIO_Init+0x324>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a65      	ldr	r2, [pc, #404]	; (80023fc <HAL_GPIO_Init+0x324>)
 8002268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b63      	ldr	r3, [pc, #396]	; (80023fc <HAL_GPIO_Init+0x324>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800227a:	4a61      	ldr	r2, [pc, #388]	; (8002400 <HAL_GPIO_Init+0x328>)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a58      	ldr	r2, [pc, #352]	; (8002404 <HAL_GPIO_Init+0x32c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d037      	beq.n	8002316 <HAL_GPIO_Init+0x23e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a57      	ldr	r2, [pc, #348]	; (8002408 <HAL_GPIO_Init+0x330>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d031      	beq.n	8002312 <HAL_GPIO_Init+0x23a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a56      	ldr	r2, [pc, #344]	; (800240c <HAL_GPIO_Init+0x334>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d02b      	beq.n	800230e <HAL_GPIO_Init+0x236>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a55      	ldr	r2, [pc, #340]	; (8002410 <HAL_GPIO_Init+0x338>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d025      	beq.n	800230a <HAL_GPIO_Init+0x232>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a54      	ldr	r2, [pc, #336]	; (8002414 <HAL_GPIO_Init+0x33c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01f      	beq.n	8002306 <HAL_GPIO_Init+0x22e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a53      	ldr	r2, [pc, #332]	; (8002418 <HAL_GPIO_Init+0x340>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d019      	beq.n	8002302 <HAL_GPIO_Init+0x22a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_GPIO_Init+0x344>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_GPIO_Init+0x226>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a51      	ldr	r2, [pc, #324]	; (8002420 <HAL_GPIO_Init+0x348>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00d      	beq.n	80022fa <HAL_GPIO_Init+0x222>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a50      	ldr	r2, [pc, #320]	; (8002424 <HAL_GPIO_Init+0x34c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <HAL_GPIO_Init+0x21e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4f      	ldr	r2, [pc, #316]	; (8002428 <HAL_GPIO_Init+0x350>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_GPIO_Init+0x21a>
 80022ee:	2309      	movs	r3, #9
 80022f0:	e012      	b.n	8002318 <HAL_GPIO_Init+0x240>
 80022f2:	230a      	movs	r3, #10
 80022f4:	e010      	b.n	8002318 <HAL_GPIO_Init+0x240>
 80022f6:	2308      	movs	r3, #8
 80022f8:	e00e      	b.n	8002318 <HAL_GPIO_Init+0x240>
 80022fa:	2307      	movs	r3, #7
 80022fc:	e00c      	b.n	8002318 <HAL_GPIO_Init+0x240>
 80022fe:	2306      	movs	r3, #6
 8002300:	e00a      	b.n	8002318 <HAL_GPIO_Init+0x240>
 8002302:	2305      	movs	r3, #5
 8002304:	e008      	b.n	8002318 <HAL_GPIO_Init+0x240>
 8002306:	2304      	movs	r3, #4
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x240>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x240>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x240>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x240>
 8002316:	2300      	movs	r3, #0
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002328:	4935      	ldr	r1, [pc, #212]	; (8002400 <HAL_GPIO_Init+0x328>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002336:	4b3d      	ldr	r3, [pc, #244]	; (800242c <HAL_GPIO_Init+0x354>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235a:	4a34      	ldr	r2, [pc, #208]	; (800242c <HAL_GPIO_Init+0x354>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002360:	4b32      	ldr	r3, [pc, #200]	; (800242c <HAL_GPIO_Init+0x354>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002384:	4a29      	ldr	r2, [pc, #164]	; (800242c <HAL_GPIO_Init+0x354>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800238a:	4b28      	ldr	r3, [pc, #160]	; (800242c <HAL_GPIO_Init+0x354>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ae:	4a1f      	ldr	r2, [pc, #124]	; (800242c <HAL_GPIO_Init+0x354>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_GPIO_Init+0x354>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <HAL_GPIO_Init+0x354>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	f67f ae84 	bls.w	80020f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40013800 	.word	0x40013800
 8002404:	40020000 	.word	0x40020000
 8002408:	40020400 	.word	0x40020400
 800240c:	40020800 	.word	0x40020800
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40021000 	.word	0x40021000
 8002418:	40021400 	.word	0x40021400
 800241c:	40021800 	.word	0x40021800
 8002420:	40021c00 	.word	0x40021c00
 8002424:	40022000 	.word	0x40022000
 8002428:	40022400 	.word	0x40022400
 800242c:	40013c00 	.word	0x40013c00

08002430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
 800243c:	4613      	mov	r3, r2
 800243e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002440:	787b      	ldrb	r3, [r7, #1]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002446:	887a      	ldrh	r2, [r7, #2]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800244c:	e003      	b.n	8002456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	041a      	lsls	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	619a      	str	r2, [r3, #24]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002462:	b480      	push	{r7}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002474:	887a      	ldrh	r2, [r7, #2]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4013      	ands	r3, r2
 800247a:	041a      	lsls	r2, r3, #16
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	43d9      	mvns	r1, r3
 8002480:	887b      	ldrh	r3, [r7, #2]
 8002482:	400b      	ands	r3, r1
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	619a      	str	r2, [r3, #24]
}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e267      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d075      	beq.n	80025a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b6:	4b88      	ldr	r3, [pc, #544]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d00c      	beq.n	80024dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c2:	4b85      	ldr	r3, [pc, #532]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d112      	bne.n	80024f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ce:	4b82      	ldr	r3, [pc, #520]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024da:	d10b      	bne.n	80024f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	4b7e      	ldr	r3, [pc, #504]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d05b      	beq.n	80025a0 <HAL_RCC_OscConfig+0x108>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d157      	bne.n	80025a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e242      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fc:	d106      	bne.n	800250c <HAL_RCC_OscConfig+0x74>
 80024fe:	4b76      	ldr	r3, [pc, #472]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a75      	ldr	r2, [pc, #468]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e01d      	b.n	8002548 <HAL_RCC_OscConfig+0xb0>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x98>
 8002516:	4b70      	ldr	r3, [pc, #448]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a6f      	ldr	r2, [pc, #444]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b6d      	ldr	r3, [pc, #436]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6c      	ldr	r2, [pc, #432]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0xb0>
 8002530:	4b69      	ldr	r3, [pc, #420]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a68      	ldr	r2, [pc, #416]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b66      	ldr	r3, [pc, #408]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a65      	ldr	r2, [pc, #404]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d013      	beq.n	8002578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe fe72 	bl	8001238 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fe6e 	bl	8001238 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e207      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b5b      	ldr	r3, [pc, #364]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0xc0>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe fe5e 	bl	8001238 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002580:	f7fe fe5a 	bl	8001238 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1f3      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	4b51      	ldr	r3, [pc, #324]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0xe8>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d063      	beq.n	8002676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ae:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d11c      	bne.n	8002600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b44      	ldr	r3, [pc, #272]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d116      	bne.n	8002600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	4b41      	ldr	r3, [pc, #260]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x152>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e1c7      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ea:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4937      	ldr	r1, [pc, #220]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	e03a      	b.n	8002676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002608:	4b34      	ldr	r3, [pc, #208]	; (80026dc <HAL_RCC_OscConfig+0x244>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fe13 	bl	8001238 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002616:	f7fe fe0f 	bl	8001238 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1a8      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4925      	ldr	r1, [pc, #148]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <HAL_RCC_OscConfig+0x244>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe fdf2 	bl	8001238 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002658:	f7fe fdee 	bl	8001238 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e187      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d036      	beq.n	80026f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d016      	beq.n	80026b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_RCC_OscConfig+0x248>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7fe fdd2 	bl	8001238 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002698:	f7fe fdce 	bl	8001238 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e167      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x200>
 80026b6:	e01b      	b.n	80026f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_OscConfig+0x248>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026be:	f7fe fdbb 	bl	8001238 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	e00e      	b.n	80026e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c6:	f7fe fdb7 	bl	8001238 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d907      	bls.n	80026e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e150      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	42470000 	.word	0x42470000
 80026e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	4b88      	ldr	r3, [pc, #544]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 80026e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ea      	bne.n	80026c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8097 	beq.w	800282c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002702:	4b81      	ldr	r3, [pc, #516]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	4b7d      	ldr	r3, [pc, #500]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a7c      	ldr	r2, [pc, #496]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b7a      	ldr	r3, [pc, #488]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b77      	ldr	r3, [pc, #476]	; (800290c <HAL_RCC_OscConfig+0x474>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d118      	bne.n	800276c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273a:	4b74      	ldr	r3, [pc, #464]	; (800290c <HAL_RCC_OscConfig+0x474>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a73      	ldr	r2, [pc, #460]	; (800290c <HAL_RCC_OscConfig+0x474>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002746:	f7fe fd77 	bl	8001238 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274e:	f7fe fd73 	bl	8001238 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e10c      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_RCC_OscConfig+0x474>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x2ea>
 8002774:	4b64      	ldr	r3, [pc, #400]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	4a63      	ldr	r2, [pc, #396]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6713      	str	r3, [r2, #112]	; 0x70
 8002780:	e01c      	b.n	80027bc <HAL_RCC_OscConfig+0x324>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x30c>
 800278a:	4b5f      	ldr	r3, [pc, #380]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	4a5e      	ldr	r2, [pc, #376]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6713      	str	r3, [r2, #112]	; 0x70
 8002796:	4b5c      	ldr	r3, [pc, #368]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a5b      	ldr	r2, [pc, #364]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0x324>
 80027a4:	4b58      	ldr	r3, [pc, #352]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a57      	ldr	r2, [pc, #348]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
 80027b0:	4b55      	ldr	r3, [pc, #340]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a54      	ldr	r2, [pc, #336]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f023 0304 	bic.w	r3, r3, #4
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7fe fd38 	bl	8001238 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7fe fd34 	bl	8001238 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0cb      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	4b49      	ldr	r3, [pc, #292]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0ee      	beq.n	80027cc <HAL_RCC_OscConfig+0x334>
 80027ee:	e014      	b.n	800281a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f0:	f7fe fd22 	bl	8001238 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f6:	e00a      	b.n	800280e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f8:	f7fe fd1e 	bl	8001238 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e0b5      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280e:	4b3e      	ldr	r3, [pc, #248]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ee      	bne.n	80027f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002820:	4b39      	ldr	r3, [pc, #228]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	4a38      	ldr	r2, [pc, #224]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a1 	beq.w	8002978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002836:	4b34      	ldr	r3, [pc, #208]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b08      	cmp	r3, #8
 8002840:	d05c      	beq.n	80028fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d141      	bne.n	80028ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b31      	ldr	r3, [pc, #196]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fcf2 	bl	8001238 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe fcee 	bl	8001238 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e087      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	019b      	lsls	r3, r3, #6
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	3b01      	subs	r3, #1
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	061b      	lsls	r3, r3, #24
 800289a:	491b      	ldr	r1, [pc, #108]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7fe fcc7 	bl	8001238 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ae:	f7fe fcc3 	bl	8001238 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e05c      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x416>
 80028cc:	e054      	b.n	8002978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe fcb0 	bl	8001238 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe fcac 	bl	8001238 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e045      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_RCC_OscConfig+0x470>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x444>
 80028fa:	e03d      	b.n	8002978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d107      	bne.n	8002914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e038      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000
 8002910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_RCC_OscConfig+0x4ec>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d028      	beq.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d121      	bne.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d11a      	bne.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002944:	4013      	ands	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800294a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800294c:	4293      	cmp	r3, r2
 800294e:	d111      	bne.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	3b01      	subs	r3, #1
 800295e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d107      	bne.n	8002974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800

08002988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0cc      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800299c:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d90c      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b65      	ldr	r3, [pc, #404]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b8      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a58      	ldr	r2, [pc, #352]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f4:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b50      	ldr	r3, [pc, #320]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	494d      	ldr	r1, [pc, #308]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d044      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d119      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e07f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e06f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e067      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a66:	4b37      	ldr	r3, [pc, #220]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4934      	ldr	r1, [pc, #208]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a78:	f7fe fbde 	bl	8001238 <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a80:	f7fe fbda 	bl	8001238 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e04f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 020c 	and.w	r2, r3, #12
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1eb      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d20c      	bcs.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e032      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4916      	ldr	r1, [pc, #88]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	490e      	ldr	r1, [pc, #56]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b0e:	f000 f821 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002b12:	4602      	mov	r2, r0
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	490a      	ldr	r1, [pc, #40]	; (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	5ccb      	ldrb	r3, [r1, r3]
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fa08 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023c00 	.word	0x40023c00
 8002b44:	40023800 	.word	0x40023800
 8002b48:	0800637c 	.word	0x0800637c
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000004 	.word	0x20000004

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b58:	b090      	sub	sp, #64	; 0x40
 8002b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b60:	2300      	movs	r3, #0
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b64:	2300      	movs	r3, #0
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b6c:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d00d      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x40>
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	f200 80a1 	bhi.w	8002cc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x34>
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b86:	e09b      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b8c:	e09b      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8e:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002b90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b92:	e098      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b94:	4b4f      	ldr	r3, [pc, #316]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9e:	4b4d      	ldr	r3, [pc, #308]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d028      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002baa:	4b4a      	ldr	r3, [pc, #296]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	099b      	lsrs	r3, r3, #6
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	623b      	str	r3, [r7, #32]
 8002bb4:	627a      	str	r2, [r7, #36]	; 0x24
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4b47      	ldr	r3, [pc, #284]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002bc0:	fb03 f201 	mul.w	r2, r3, r1
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	fb00 f303 	mul.w	r3, r0, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a43      	ldr	r2, [pc, #268]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002bce:	fba0 1202 	umull	r1, r2, r0, r2
 8002bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bd4:	460a      	mov	r2, r1
 8002bd6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bda:	4413      	add	r3, r2
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	2200      	movs	r2, #0
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	61fa      	str	r2, [r7, #28]
 8002be6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bee:	f7fd fb4f 	bl	8000290 <__aeabi_uldivmod>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bfa:	e053      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfc:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	099b      	lsrs	r3, r3, #6
 8002c02:	2200      	movs	r2, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	617a      	str	r2, [r7, #20]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c0e:	f04f 0b00 	mov.w	fp, #0
 8002c12:	4652      	mov	r2, sl
 8002c14:	465b      	mov	r3, fp
 8002c16:	f04f 0000 	mov.w	r0, #0
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	0159      	lsls	r1, r3, #5
 8002c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c24:	0150      	lsls	r0, r2, #5
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c2e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c46:	ebb2 0408 	subs.w	r4, r2, r8
 8002c4a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	00eb      	lsls	r3, r5, #3
 8002c58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c5c:	00e2      	lsls	r2, r4, #3
 8002c5e:	4614      	mov	r4, r2
 8002c60:	461d      	mov	r5, r3
 8002c62:	eb14 030a 	adds.w	r3, r4, sl
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	eb45 030b 	adc.w	r3, r5, fp
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	028b      	lsls	r3, r1, #10
 8002c7e:	4621      	mov	r1, r4
 8002c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c84:	4621      	mov	r1, r4
 8002c86:	028a      	lsls	r2, r1, #10
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	60fa      	str	r2, [r7, #12]
 8002c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c98:	f7fd fafa 	bl	8000290 <__aeabi_uldivmod>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cbe:	e002      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3740      	adds	r7, #64	; 0x40
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	00f42400 	.word	0x00f42400
 8002cdc:	017d7840 	.word	0x017d7840

08002ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000000 	.word	0x20000000

08002cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cfc:	f7ff fff0 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0a9b      	lsrs	r3, r3, #10
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4903      	ldr	r1, [pc, #12]	; (8002d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	0800638c 	.word	0x0800638c

08002d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d24:	f7ff ffdc 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0b5b      	lsrs	r3, r3, #13
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	0800638c 	.word	0x0800638c

08002d48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	220f      	movs	r2, #15
 8002d56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0203 	and.w	r2, r3, #3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	08db      	lsrs	r3, r3, #3
 8002d82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <HAL_RCC_GetClockConfig+0x60>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 020f 	and.w	r2, r3, #15
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	601a      	str	r2, [r3, #0]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40023c00 	.word	0x40023c00

08002dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e041      	b.n	8002e42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f839 	bl	8002e4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4610      	mov	r0, r2
 8002dec:	f000 f9d8 	bl	80031a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d001      	beq.n	8002e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e04e      	b.n	8002f16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a23      	ldr	r2, [pc, #140]	; (8002f24 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d022      	beq.n	8002ee0 <HAL_TIM_Base_Start_IT+0x80>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea2:	d01d      	beq.n	8002ee0 <HAL_TIM_Base_Start_IT+0x80>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <HAL_TIM_Base_Start_IT+0xc8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d018      	beq.n	8002ee0 <HAL_TIM_Base_Start_IT+0x80>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1e      	ldr	r2, [pc, #120]	; (8002f2c <HAL_TIM_Base_Start_IT+0xcc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <HAL_TIM_Base_Start_IT+0x80>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00e      	beq.n	8002ee0 <HAL_TIM_Base_Start_IT+0x80>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1b      	ldr	r2, [pc, #108]	; (8002f34 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d009      	beq.n	8002ee0 <HAL_TIM_Base_Start_IT+0x80>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d004      	beq.n	8002ee0 <HAL_TIM_Base_Start_IT+0x80>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <HAL_TIM_Base_Start_IT+0xdc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d111      	bne.n	8002f04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b06      	cmp	r3, #6
 8002ef0:	d010      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0201 	orr.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f02:	e007      	b.n	8002f14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40010000 	.word	0x40010000
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	40000800 	.word	0x40000800
 8002f30:	40000c00 	.word	0x40000c00
 8002f34:	40010400 	.word	0x40010400
 8002f38:	40014000 	.word	0x40014000
 8002f3c:	40001800 	.word	0x40001800

08002f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d122      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d11b      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0202 	mvn.w	r2, #2
 8002f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f8ee 	bl	8003164 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f8e0 	bl	8003150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f8f1 	bl	8003178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0204 	mvn.w	r2, #4
 8002fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8c4 	bl	8003164 <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f8b6 	bl	8003150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f8c7 	bl	8003178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d122      	bne.n	8003044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b08      	cmp	r3, #8
 800300a:	d11b      	bne.n	8003044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0208 	mvn.w	r2, #8
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2204      	movs	r2, #4
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f89a 	bl	8003164 <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f88c 	bl	8003150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f89d 	bl	8003178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b10      	cmp	r3, #16
 8003050:	d122      	bne.n	8003098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b10      	cmp	r3, #16
 800305e:	d11b      	bne.n	8003098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0210 	mvn.w	r2, #16
 8003068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2208      	movs	r2, #8
 800306e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f870 	bl	8003164 <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f862 	bl	8003150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f873 	bl	8003178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d10e      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d107      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0201 	mvn.w	r2, #1
 80030bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fd fdfe 	bl	8000cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b80      	cmp	r3, #128	; 0x80
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	2b80      	cmp	r3, #128	; 0x80
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f902 	bl	80032f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d10e      	bne.n	800311c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d107      	bne.n	800311c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f838 	bl	800318c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b20      	cmp	r3, #32
 8003128:	d10e      	bne.n	8003148 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b20      	cmp	r3, #32
 8003136:	d107      	bne.n	8003148 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0220 	mvn.w	r2, #32
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8cc 	bl	80032e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a40      	ldr	r2, [pc, #256]	; (80032b4 <TIM_Base_SetConfig+0x114>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d013      	beq.n	80031e0 <TIM_Base_SetConfig+0x40>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031be:	d00f      	beq.n	80031e0 <TIM_Base_SetConfig+0x40>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a3d      	ldr	r2, [pc, #244]	; (80032b8 <TIM_Base_SetConfig+0x118>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00b      	beq.n	80031e0 <TIM_Base_SetConfig+0x40>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a3c      	ldr	r2, [pc, #240]	; (80032bc <TIM_Base_SetConfig+0x11c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d007      	beq.n	80031e0 <TIM_Base_SetConfig+0x40>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a3b      	ldr	r2, [pc, #236]	; (80032c0 <TIM_Base_SetConfig+0x120>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <TIM_Base_SetConfig+0x40>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a3a      	ldr	r2, [pc, #232]	; (80032c4 <TIM_Base_SetConfig+0x124>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d108      	bne.n	80031f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a2f      	ldr	r2, [pc, #188]	; (80032b4 <TIM_Base_SetConfig+0x114>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d02b      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003200:	d027      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a2c      	ldr	r2, [pc, #176]	; (80032b8 <TIM_Base_SetConfig+0x118>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d023      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a2b      	ldr	r2, [pc, #172]	; (80032bc <TIM_Base_SetConfig+0x11c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01f      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2a      	ldr	r2, [pc, #168]	; (80032c0 <TIM_Base_SetConfig+0x120>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d01b      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a29      	ldr	r2, [pc, #164]	; (80032c4 <TIM_Base_SetConfig+0x124>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d017      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a28      	ldr	r2, [pc, #160]	; (80032c8 <TIM_Base_SetConfig+0x128>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d013      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a27      	ldr	r2, [pc, #156]	; (80032cc <TIM_Base_SetConfig+0x12c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00f      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <TIM_Base_SetConfig+0x130>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00b      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a25      	ldr	r2, [pc, #148]	; (80032d4 <TIM_Base_SetConfig+0x134>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a24      	ldr	r2, [pc, #144]	; (80032d8 <TIM_Base_SetConfig+0x138>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d003      	beq.n	8003252 <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a23      	ldr	r2, [pc, #140]	; (80032dc <TIM_Base_SetConfig+0x13c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d108      	bne.n	8003264 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <TIM_Base_SetConfig+0x114>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_Base_SetConfig+0xf8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <TIM_Base_SetConfig+0x124>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d103      	bne.n	80032a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	615a      	str	r2, [r3, #20]
}
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40010000 	.word	0x40010000
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40000c00 	.word	0x40000c00
 80032c4:	40010400 	.word	0x40010400
 80032c8:	40014000 	.word	0x40014000
 80032cc:	40014400 	.word	0x40014400
 80032d0:	40014800 	.word	0x40014800
 80032d4:	40001800 	.word	0x40001800
 80032d8:	40001c00 	.word	0x40001c00
 80032dc:	40002000 	.word	0x40002000

080032e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e03f      	b.n	800339a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd fdc0 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800334a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f929 	bl	80035a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b08a      	sub	sp, #40	; 0x28
 80033a6:	af02      	add	r7, sp, #8
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d17c      	bne.n	80034bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_UART_Transmit+0x2c>
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e075      	b.n	80034be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_UART_Transmit+0x3e>
 80033dc:	2302      	movs	r3, #2
 80033de:	e06e      	b.n	80034be <HAL_UART_Transmit+0x11c>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2221      	movs	r2, #33	; 0x21
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033f6:	f7fd ff1f 	bl	8001238 <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	88fa      	ldrh	r2, [r7, #6]
 8003406:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003410:	d108      	bne.n	8003424 <HAL_UART_Transmit+0x82>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d104      	bne.n	8003424 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	e003      	b.n	800342c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003434:	e02a      	b.n	800348c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2200      	movs	r2, #0
 800343e:	2180      	movs	r1, #128	; 0x80
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f840 	bl	80034c6 <UART_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e036      	b.n	80034be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10b      	bne.n	800346e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003464:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	3302      	adds	r3, #2
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	e007      	b.n	800347e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	3301      	adds	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1cf      	bne.n	8003436 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2200      	movs	r2, #0
 800349e:	2140      	movs	r1, #64	; 0x40
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f810 	bl	80034c6 <UART_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e006      	b.n	80034be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e000      	b.n	80034be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
  }
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b090      	sub	sp, #64	; 0x40
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	4613      	mov	r3, r2
 80034d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d6:	e050      	b.n	800357a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034de:	d04c      	beq.n	800357a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80034e6:	f7fd fea7 	bl	8001238 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d241      	bcs.n	800357a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	330c      	adds	r3, #12
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	e853 3f00 	ldrex	r3, [r3]
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	330c      	adds	r3, #12
 8003514:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003516:	637a      	str	r2, [r7, #52]	; 0x34
 8003518:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800351c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800351e:	e841 2300 	strex	r3, r2, [r1]
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1e5      	bne.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3314      	adds	r3, #20
 8003530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	e853 3f00 	ldrex	r3, [r3]
 8003538:	613b      	str	r3, [r7, #16]
   return(result);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	63bb      	str	r3, [r7, #56]	; 0x38
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3314      	adds	r3, #20
 8003548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800354a:	623a      	str	r2, [r7, #32]
 800354c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	69f9      	ldr	r1, [r7, #28]
 8003550:	6a3a      	ldr	r2, [r7, #32]
 8003552:	e841 2300 	strex	r3, r2, [r1]
 8003556:	61bb      	str	r3, [r7, #24]
   return(result);
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1e5      	bne.n	800352a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e00f      	b.n	800359a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4013      	ands	r3, r2
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	429a      	cmp	r2, r3
 8003588:	bf0c      	ite	eq
 800358a:	2301      	moveq	r3, #1
 800358c:	2300      	movne	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	429a      	cmp	r2, r3
 8003596:	d09f      	beq.n	80034d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3740      	adds	r7, #64	; 0x40
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a8:	b0c0      	sub	sp, #256	; 0x100
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c0:	68d9      	ldr	r1, [r3, #12]
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	ea40 0301 	orr.w	r3, r0, r1
 80035cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	431a      	orrs	r2, r3
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035fc:	f021 010c 	bic.w	r1, r1, #12
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800360a:	430b      	orrs	r3, r1
 800360c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800360e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800361a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361e:	6999      	ldr	r1, [r3, #24]
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	ea40 0301 	orr.w	r3, r0, r1
 800362a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	4b8f      	ldr	r3, [pc, #572]	; (8003870 <UART_SetConfig+0x2cc>)
 8003634:	429a      	cmp	r2, r3
 8003636:	d005      	beq.n	8003644 <UART_SetConfig+0xa0>
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b8d      	ldr	r3, [pc, #564]	; (8003874 <UART_SetConfig+0x2d0>)
 8003640:	429a      	cmp	r2, r3
 8003642:	d104      	bne.n	800364e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003644:	f7ff fb6c 	bl	8002d20 <HAL_RCC_GetPCLK2Freq>
 8003648:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800364c:	e003      	b.n	8003656 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800364e:	f7ff fb53 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8003652:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003660:	f040 810c 	bne.w	800387c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003668:	2200      	movs	r2, #0
 800366a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800366e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003672:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003676:	4622      	mov	r2, r4
 8003678:	462b      	mov	r3, r5
 800367a:	1891      	adds	r1, r2, r2
 800367c:	65b9      	str	r1, [r7, #88]	; 0x58
 800367e:	415b      	adcs	r3, r3
 8003680:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003682:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003686:	4621      	mov	r1, r4
 8003688:	eb12 0801 	adds.w	r8, r2, r1
 800368c:	4629      	mov	r1, r5
 800368e:	eb43 0901 	adc.w	r9, r3, r1
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800369e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036a6:	4690      	mov	r8, r2
 80036a8:	4699      	mov	r9, r3
 80036aa:	4623      	mov	r3, r4
 80036ac:	eb18 0303 	adds.w	r3, r8, r3
 80036b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036b4:	462b      	mov	r3, r5
 80036b6:	eb49 0303 	adc.w	r3, r9, r3
 80036ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036d2:	460b      	mov	r3, r1
 80036d4:	18db      	adds	r3, r3, r3
 80036d6:	653b      	str	r3, [r7, #80]	; 0x50
 80036d8:	4613      	mov	r3, r2
 80036da:	eb42 0303 	adc.w	r3, r2, r3
 80036de:	657b      	str	r3, [r7, #84]	; 0x54
 80036e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036e8:	f7fc fdd2 	bl	8000290 <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4b61      	ldr	r3, [pc, #388]	; (8003878 <UART_SetConfig+0x2d4>)
 80036f2:	fba3 2302 	umull	r2, r3, r3, r2
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	011c      	lsls	r4, r3, #4
 80036fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003704:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003708:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800370c:	4642      	mov	r2, r8
 800370e:	464b      	mov	r3, r9
 8003710:	1891      	adds	r1, r2, r2
 8003712:	64b9      	str	r1, [r7, #72]	; 0x48
 8003714:	415b      	adcs	r3, r3
 8003716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003718:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800371c:	4641      	mov	r1, r8
 800371e:	eb12 0a01 	adds.w	sl, r2, r1
 8003722:	4649      	mov	r1, r9
 8003724:	eb43 0b01 	adc.w	fp, r3, r1
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003734:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800373c:	4692      	mov	sl, r2
 800373e:	469b      	mov	fp, r3
 8003740:	4643      	mov	r3, r8
 8003742:	eb1a 0303 	adds.w	r3, sl, r3
 8003746:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800374a:	464b      	mov	r3, r9
 800374c:	eb4b 0303 	adc.w	r3, fp, r3
 8003750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003760:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003764:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003768:	460b      	mov	r3, r1
 800376a:	18db      	adds	r3, r3, r3
 800376c:	643b      	str	r3, [r7, #64]	; 0x40
 800376e:	4613      	mov	r3, r2
 8003770:	eb42 0303 	adc.w	r3, r2, r3
 8003774:	647b      	str	r3, [r7, #68]	; 0x44
 8003776:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800377a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800377e:	f7fc fd87 	bl	8000290 <__aeabi_uldivmod>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4611      	mov	r1, r2
 8003788:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <UART_SetConfig+0x2d4>)
 800378a:	fba3 2301 	umull	r2, r3, r3, r1
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	2264      	movs	r2, #100	; 0x64
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	1acb      	subs	r3, r1, r3
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800379e:	4b36      	ldr	r3, [pc, #216]	; (8003878 <UART_SetConfig+0x2d4>)
 80037a0:	fba3 2302 	umull	r2, r3, r3, r2
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037ac:	441c      	add	r4, r3
 80037ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037c0:	4642      	mov	r2, r8
 80037c2:	464b      	mov	r3, r9
 80037c4:	1891      	adds	r1, r2, r2
 80037c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80037c8:	415b      	adcs	r3, r3
 80037ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037d0:	4641      	mov	r1, r8
 80037d2:	1851      	adds	r1, r2, r1
 80037d4:	6339      	str	r1, [r7, #48]	; 0x30
 80037d6:	4649      	mov	r1, r9
 80037d8:	414b      	adcs	r3, r1
 80037da:	637b      	str	r3, [r7, #52]	; 0x34
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037e8:	4659      	mov	r1, fp
 80037ea:	00cb      	lsls	r3, r1, #3
 80037ec:	4651      	mov	r1, sl
 80037ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037f2:	4651      	mov	r1, sl
 80037f4:	00ca      	lsls	r2, r1, #3
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	4642      	mov	r2, r8
 80037fe:	189b      	adds	r3, r3, r2
 8003800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003804:	464b      	mov	r3, r9
 8003806:	460a      	mov	r2, r1
 8003808:	eb42 0303 	adc.w	r3, r2, r3
 800380c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800381c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003824:	460b      	mov	r3, r1
 8003826:	18db      	adds	r3, r3, r3
 8003828:	62bb      	str	r3, [r7, #40]	; 0x28
 800382a:	4613      	mov	r3, r2
 800382c:	eb42 0303 	adc.w	r3, r2, r3
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003836:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800383a:	f7fc fd29 	bl	8000290 <__aeabi_uldivmod>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <UART_SetConfig+0x2d4>)
 8003844:	fba3 1302 	umull	r1, r3, r3, r2
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	2164      	movs	r1, #100	; 0x64
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	3332      	adds	r3, #50	; 0x32
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <UART_SetConfig+0x2d4>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	f003 0207 	and.w	r2, r3, #7
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4422      	add	r2, r4
 800386a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800386c:	e105      	b.n	8003a7a <UART_SetConfig+0x4d6>
 800386e:	bf00      	nop
 8003870:	40011000 	.word	0x40011000
 8003874:	40011400 	.word	0x40011400
 8003878:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800387c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003880:	2200      	movs	r2, #0
 8003882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003886:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800388a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800388e:	4642      	mov	r2, r8
 8003890:	464b      	mov	r3, r9
 8003892:	1891      	adds	r1, r2, r2
 8003894:	6239      	str	r1, [r7, #32]
 8003896:	415b      	adcs	r3, r3
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
 800389a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800389e:	4641      	mov	r1, r8
 80038a0:	1854      	adds	r4, r2, r1
 80038a2:	4649      	mov	r1, r9
 80038a4:	eb43 0501 	adc.w	r5, r3, r1
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	00eb      	lsls	r3, r5, #3
 80038b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038b6:	00e2      	lsls	r2, r4, #3
 80038b8:	4614      	mov	r4, r2
 80038ba:	461d      	mov	r5, r3
 80038bc:	4643      	mov	r3, r8
 80038be:	18e3      	adds	r3, r4, r3
 80038c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038c4:	464b      	mov	r3, r9
 80038c6:	eb45 0303 	adc.w	r3, r5, r3
 80038ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038ea:	4629      	mov	r1, r5
 80038ec:	008b      	lsls	r3, r1, #2
 80038ee:	4621      	mov	r1, r4
 80038f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038f4:	4621      	mov	r1, r4
 80038f6:	008a      	lsls	r2, r1, #2
 80038f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038fc:	f7fc fcc8 	bl	8000290 <__aeabi_uldivmod>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4b60      	ldr	r3, [pc, #384]	; (8003a88 <UART_SetConfig+0x4e4>)
 8003906:	fba3 2302 	umull	r2, r3, r3, r2
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	011c      	lsls	r4, r3, #4
 800390e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003912:	2200      	movs	r2, #0
 8003914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003918:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800391c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003920:	4642      	mov	r2, r8
 8003922:	464b      	mov	r3, r9
 8003924:	1891      	adds	r1, r2, r2
 8003926:	61b9      	str	r1, [r7, #24]
 8003928:	415b      	adcs	r3, r3
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003930:	4641      	mov	r1, r8
 8003932:	1851      	adds	r1, r2, r1
 8003934:	6139      	str	r1, [r7, #16]
 8003936:	4649      	mov	r1, r9
 8003938:	414b      	adcs	r3, r1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003948:	4659      	mov	r1, fp
 800394a:	00cb      	lsls	r3, r1, #3
 800394c:	4651      	mov	r1, sl
 800394e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003952:	4651      	mov	r1, sl
 8003954:	00ca      	lsls	r2, r1, #3
 8003956:	4610      	mov	r0, r2
 8003958:	4619      	mov	r1, r3
 800395a:	4603      	mov	r3, r0
 800395c:	4642      	mov	r2, r8
 800395e:	189b      	adds	r3, r3, r2
 8003960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003964:	464b      	mov	r3, r9
 8003966:	460a      	mov	r2, r1
 8003968:	eb42 0303 	adc.w	r3, r2, r3
 800396c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	67bb      	str	r3, [r7, #120]	; 0x78
 800397a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003988:	4649      	mov	r1, r9
 800398a:	008b      	lsls	r3, r1, #2
 800398c:	4641      	mov	r1, r8
 800398e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003992:	4641      	mov	r1, r8
 8003994:	008a      	lsls	r2, r1, #2
 8003996:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800399a:	f7fc fc79 	bl	8000290 <__aeabi_uldivmod>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4b39      	ldr	r3, [pc, #228]	; (8003a88 <UART_SetConfig+0x4e4>)
 80039a4:	fba3 1302 	umull	r1, r3, r3, r2
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	2164      	movs	r1, #100	; 0x64
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	3332      	adds	r3, #50	; 0x32
 80039b6:	4a34      	ldr	r2, [pc, #208]	; (8003a88 <UART_SetConfig+0x4e4>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c2:	441c      	add	r4, r3
 80039c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c8:	2200      	movs	r2, #0
 80039ca:	673b      	str	r3, [r7, #112]	; 0x70
 80039cc:	677a      	str	r2, [r7, #116]	; 0x74
 80039ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039d2:	4642      	mov	r2, r8
 80039d4:	464b      	mov	r3, r9
 80039d6:	1891      	adds	r1, r2, r2
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	415b      	adcs	r3, r3
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039e2:	4641      	mov	r1, r8
 80039e4:	1851      	adds	r1, r2, r1
 80039e6:	6039      	str	r1, [r7, #0]
 80039e8:	4649      	mov	r1, r9
 80039ea:	414b      	adcs	r3, r1
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039fa:	4659      	mov	r1, fp
 80039fc:	00cb      	lsls	r3, r1, #3
 80039fe:	4651      	mov	r1, sl
 8003a00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a04:	4651      	mov	r1, sl
 8003a06:	00ca      	lsls	r2, r1, #3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	4642      	mov	r2, r8
 8003a10:	189b      	adds	r3, r3, r2
 8003a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a14:	464b      	mov	r3, r9
 8003a16:	460a      	mov	r2, r1
 8003a18:	eb42 0303 	adc.w	r3, r2, r3
 8003a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	663b      	str	r3, [r7, #96]	; 0x60
 8003a28:	667a      	str	r2, [r7, #100]	; 0x64
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a36:	4649      	mov	r1, r9
 8003a38:	008b      	lsls	r3, r1, #2
 8003a3a:	4641      	mov	r1, r8
 8003a3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a40:	4641      	mov	r1, r8
 8003a42:	008a      	lsls	r2, r1, #2
 8003a44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a48:	f7fc fc22 	bl	8000290 <__aeabi_uldivmod>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <UART_SetConfig+0x4e4>)
 8003a52:	fba3 1302 	umull	r1, r3, r3, r2
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2164      	movs	r1, #100	; 0x64
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	3332      	adds	r3, #50	; 0x32
 8003a64:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <UART_SetConfig+0x4e4>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	f003 020f 	and.w	r2, r3, #15
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4422      	add	r2, r4
 8003a78:	609a      	str	r2, [r3, #8]
}
 8003a7a:	bf00      	nop
 8003a7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a80:	46bd      	mov	sp, r7
 8003a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a86:	bf00      	nop
 8003a88:	51eb851f 	.word	0x51eb851f

08003a8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a9e:	2b84      	cmp	r3, #132	; 0x84
 8003aa0:	d005      	beq.n	8003aae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003aa2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3303      	adds	r3, #3
 8003aac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ac0:	f000 fc4e 	bl	8004360 <vTaskStartScheduler>
  
  return osOK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003acc:	b089      	sub	sp, #36	; 0x24
 8003ace:	af04      	add	r7, sp, #16
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <osThreadCreate+0x54>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01c      	beq.n	8003b1e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685c      	ldr	r4, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681d      	ldr	r5, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691e      	ldr	r6, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff ffc8 	bl	8003a8c <makeFreeRtosPriority>
 8003afc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b06:	9202      	str	r2, [sp, #8]
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	9100      	str	r1, [sp, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	4632      	mov	r2, r6
 8003b10:	4629      	mov	r1, r5
 8003b12:	4620      	mov	r0, r4
 8003b14:	f000 fa5d 	bl	8003fd2 <xTaskCreateStatic>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e01c      	b.n	8003b58 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685c      	ldr	r4, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b2a:	b29e      	uxth	r6, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ffaa 	bl	8003a8c <makeFreeRtosPriority>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	f107 030c 	add.w	r3, r7, #12
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	9200      	str	r2, [sp, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	4632      	mov	r2, r6
 8003b46:	4629      	mov	r1, r5
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f000 fa9f 	bl	800408c <xTaskCreate>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d001      	beq.n	8003b58 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b58:	68fb      	ldr	r3, [r7, #12]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b62 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <osDelay+0x16>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	e000      	b.n	8003b7a <osDelay+0x18>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fbbc 	bl	80042f8 <vTaskDelay>
  
  return osOK;
 8003b80:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b085      	sub	sp, #20
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	460b      	mov	r3, r1
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	72fb      	strb	r3, [r7, #11]
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
#endif

#else 
	return NULL;
 8003b98:	2300      	movs	r3, #0
#endif
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003ba6:	b590      	push	{r4, r7, lr}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af02      	add	r7, sp, #8
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d011      	beq.n	8003bdc <osMessageCreate+0x36>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00d      	beq.n	8003bdc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2400      	movs	r4, #0
 8003bd2:	9400      	str	r4, [sp, #0]
 8003bd4:	f000 f92c 	bl	8003e30 <xQueueGenericCreateStatic>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	e008      	b.n	8003bee <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	4619      	mov	r1, r3
 8003be8:	f000 f99a 	bl	8003f20 <xQueueGenericCreate>
 8003bec:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd90      	pop	{r4, r7, pc}

08003bf6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f103 0208 	add.w	r2, r3, #8
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c0e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f103 0208 	add.w	r2, r3, #8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f103 0208 	add.w	r2, r3, #8
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	601a      	str	r2, [r3, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cae:	d103      	bne.n	8003cb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e00c      	b.n	8003cd2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	e002      	b.n	8003cc6 <vListInsert+0x2e>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d2f6      	bcs.n	8003cc0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6892      	ldr	r2, [r2, #8]
 8003d20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6852      	ldr	r2, [r2, #4]
 8003d2a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d103      	bne.n	8003d3e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	1e5a      	subs	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xQueueGenericReset+0x2a>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	60bb      	str	r3, [r7, #8]
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d8a:	f000 ffd3 	bl	8004d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	441a      	add	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	68f9      	ldr	r1, [r7, #12]
 8003dbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	441a      	add	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	22ff      	movs	r2, #255	; 0xff
 8003dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	22ff      	movs	r2, #255	; 0xff
 8003dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d114      	bne.n	8003e0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01a      	beq.n	8003e1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3310      	adds	r3, #16
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fcd5 	bl	800479c <xTaskRemoveFromEventList>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d012      	beq.n	8003e1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <xQueueGenericReset+0xcc>)
 8003dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	e009      	b.n	8003e1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3310      	adds	r3, #16
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fef1 	bl	8003bf6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3324      	adds	r3, #36	; 0x24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff feec 	bl	8003bf6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e1e:	f000 ffb9 	bl	8004d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e22:	2301      	movs	r3, #1
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	e000ed04 	.word	0xe000ed04

08003e30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08e      	sub	sp, #56	; 0x38
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e56:	bf00      	nop
 8003e58:	e7fe      	b.n	8003e58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <xQueueGenericCreateStatic+0x52>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <xQueueGenericCreateStatic+0x56>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <xQueueGenericCreateStatic+0x58>
 8003e86:	2300      	movs	r3, #0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	623b      	str	r3, [r7, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <xQueueGenericCreateStatic+0x7e>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <xQueueGenericCreateStatic+0x82>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <xQueueGenericCreateStatic+0x84>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	61fb      	str	r3, [r7, #28]
}
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ece:	2348      	movs	r3, #72	; 0x48
 8003ed0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b48      	cmp	r3, #72	; 0x48
 8003ed6:	d00a      	beq.n	8003eee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	61bb      	str	r3, [r7, #24]
}
 8003eea:	bf00      	nop
 8003eec:	e7fe      	b.n	8003eec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003eee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00d      	beq.n	8003f16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f83f 	bl	8003f94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3730      	adds	r7, #48	; 0x30
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	613b      	str	r3, [r7, #16]
}
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	3348      	adds	r3, #72	; 0x48
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 ffcd 	bl	8004ef8 <pvPortMalloc>
 8003f5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d011      	beq.n	8003f8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	3348      	adds	r3, #72	; 0x48
 8003f6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f78:	79fa      	ldrb	r2, [r7, #7]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f805 	bl	8003f94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
	}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d103      	bne.n	8003fb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e002      	b.n	8003fb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	69b8      	ldr	r0, [r7, #24]
 8003fc6:	f7ff fecb 	bl	8003d60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b08e      	sub	sp, #56	; 0x38
 8003fd6:	af04      	add	r7, sp, #16
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <xTaskCreateStatic+0x2a>
	__asm volatile
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	623b      	str	r3, [r7, #32]
}
 8003ff8:	bf00      	nop
 8003ffa:	e7fe      	b.n	8003ffa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <xTaskCreateStatic+0x46>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	61fb      	str	r3, [r7, #28]
}
 8004014:	bf00      	nop
 8004016:	e7fe      	b.n	8004016 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004018:	2354      	movs	r3, #84	; 0x54
 800401a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b54      	cmp	r3, #84	; 0x54
 8004020:	d00a      	beq.n	8004038 <xTaskCreateStatic+0x66>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	61bb      	str	r3, [r7, #24]
}
 8004034:	bf00      	nop
 8004036:	e7fe      	b.n	8004036 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004038:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01e      	beq.n	800407e <xTaskCreateStatic+0xac>
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01b      	beq.n	800407e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800404e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004058:	2300      	movs	r3, #0
 800405a:	9303      	str	r3, [sp, #12]
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	9302      	str	r3, [sp, #8]
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f850 	bl	8004116 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004078:	f000 f8d4 	bl	8004224 <prvAddNewTaskToReadyList>
 800407c:	e001      	b.n	8004082 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004082:	697b      	ldr	r3, [r7, #20]
	}
 8004084:	4618      	mov	r0, r3
 8004086:	3728      	adds	r7, #40	; 0x28
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08c      	sub	sp, #48	; 0x30
 8004090:	af04      	add	r7, sp, #16
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800409c:	88fb      	ldrh	r3, [r7, #6]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 ff29 	bl	8004ef8 <pvPortMalloc>
 80040a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00e      	beq.n	80040cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040ae:	2054      	movs	r0, #84	; 0x54
 80040b0:	f000 ff22 	bl	8004ef8 <pvPortMalloc>
 80040b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
 80040c2:	e005      	b.n	80040d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040c4:	6978      	ldr	r0, [r7, #20]
 80040c6:	f000 ffe3 	bl	8005090 <vPortFree>
 80040ca:	e001      	b.n	80040d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d017      	beq.n	8004106 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040de:	88fa      	ldrh	r2, [r7, #6]
 80040e0:	2300      	movs	r3, #0
 80040e2:	9303      	str	r3, [sp, #12]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	9302      	str	r3, [sp, #8]
 80040e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f80e 	bl	8004116 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040fa:	69f8      	ldr	r0, [r7, #28]
 80040fc:	f000 f892 	bl	8004224 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004100:	2301      	movs	r3, #1
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	e002      	b.n	800410c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800410a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800410c:	69bb      	ldr	r3, [r7, #24]
	}
 800410e:	4618      	mov	r0, r3
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b088      	sub	sp, #32
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800412e:	3b01      	subs	r3, #1
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	f023 0307 	bic.w	r3, r3, #7
 800413c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <prvInitialiseNewTask+0x48>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	617b      	str	r3, [r7, #20]
}
 800415a:	bf00      	nop
 800415c:	e7fe      	b.n	800415c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01f      	beq.n	80041a4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e012      	b.n	8004190 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	4413      	add	r3, r2
 8004170:	7819      	ldrb	r1, [r3, #0]
 8004172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	4413      	add	r3, r2
 8004178:	3334      	adds	r3, #52	; 0x34
 800417a:	460a      	mov	r2, r1
 800417c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d006      	beq.n	8004198 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	3301      	adds	r3, #1
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b0f      	cmp	r3, #15
 8004194:	d9e9      	bls.n	800416a <prvInitialiseNewTask+0x54>
 8004196:	e000      	b.n	800419a <prvInitialiseNewTask+0x84>
			{
				break;
 8004198:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041a2:	e003      	b.n	80041ac <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	2b06      	cmp	r3, #6
 80041b0:	d901      	bls.n	80041b6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041b2:	2306      	movs	r3, #6
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	2200      	movs	r2, #0
 80041c6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	3304      	adds	r3, #4
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff fd32 	bl	8003c36 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	3318      	adds	r3, #24
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fd2d 	bl	8003c36 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	f1c3 0207 	rsb	r2, r3, #7
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	2200      	movs	r2, #0
 80041f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	69b8      	ldr	r0, [r7, #24]
 8004206:	f000 fc67 	bl	8004ad8 <pxPortInitialiseStack>
 800420a:	4602      	mov	r2, r0
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800421c:	bf00      	nop
 800421e:	3720      	adds	r7, #32
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800422c:	f000 fd82 	bl	8004d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004230:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <prvAddNewTaskToReadyList+0xb8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	4a29      	ldr	r2, [pc, #164]	; (80042dc <prvAddNewTaskToReadyList+0xb8>)
 8004238:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800423a:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <prvAddNewTaskToReadyList+0xbc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004242:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <prvAddNewTaskToReadyList+0xbc>)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004248:	4b24      	ldr	r3, [pc, #144]	; (80042dc <prvAddNewTaskToReadyList+0xb8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d110      	bne.n	8004272 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004250:	f000 fb1e 	bl	8004890 <prvInitialiseTaskLists>
 8004254:	e00d      	b.n	8004272 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004256:	4b23      	ldr	r3, [pc, #140]	; (80042e4 <prvAddNewTaskToReadyList+0xc0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800425e:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <prvAddNewTaskToReadyList+0xbc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	429a      	cmp	r2, r3
 800426a:	d802      	bhi.n	8004272 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800426c:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <prvAddNewTaskToReadyList+0xbc>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004272:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <prvAddNewTaskToReadyList+0xc4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3301      	adds	r3, #1
 8004278:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <prvAddNewTaskToReadyList+0xc4>)
 800427a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	2201      	movs	r2, #1
 8004282:	409a      	lsls	r2, r3
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <prvAddNewTaskToReadyList+0xc8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4313      	orrs	r3, r2
 800428a:	4a18      	ldr	r2, [pc, #96]	; (80042ec <prvAddNewTaskToReadyList+0xc8>)
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <prvAddNewTaskToReadyList+0xcc>)
 800429c:	441a      	add	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f7ff fcd3 	bl	8003c50 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042aa:	f000 fd73 	bl	8004d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <prvAddNewTaskToReadyList+0xc0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00e      	beq.n	80042d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <prvAddNewTaskToReadyList+0xbc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d207      	bcs.n	80042d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <prvAddNewTaskToReadyList+0xd0>)
 80042c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000564 	.word	0x20000564
 80042e0:	20000464 	.word	0x20000464
 80042e4:	20000570 	.word	0x20000570
 80042e8:	20000580 	.word	0x20000580
 80042ec:	2000056c 	.word	0x2000056c
 80042f0:	20000468 	.word	0x20000468
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d017      	beq.n	800433a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <vTaskDelay+0x60>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <vTaskDelay+0x30>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	60bb      	str	r3, [r7, #8]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004328:	f000 f87a 	bl	8004420 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800432c:	2100      	movs	r1, #0
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fb6c 	bl	8004a0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004334:	f000 f882 	bl	800443c <xTaskResumeAll>
 8004338:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d107      	bne.n	8004350 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <vTaskDelay+0x64>)
 8004342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	2000058c 	.word	0x2000058c
 800435c:	e000ed04 	.word	0xe000ed04

08004360 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800436e:	463a      	mov	r2, r7
 8004370:	1d39      	adds	r1, r7, #4
 8004372:	f107 0308 	add.w	r3, r7, #8
 8004376:	4618      	mov	r0, r3
 8004378:	f7fc f90c 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800437c:	6839      	ldr	r1, [r7, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	9202      	str	r2, [sp, #8]
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	2300      	movs	r3, #0
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	2300      	movs	r3, #0
 800438c:	460a      	mov	r2, r1
 800438e:	491e      	ldr	r1, [pc, #120]	; (8004408 <vTaskStartScheduler+0xa8>)
 8004390:	481e      	ldr	r0, [pc, #120]	; (800440c <vTaskStartScheduler+0xac>)
 8004392:	f7ff fe1e 	bl	8003fd2 <xTaskCreateStatic>
 8004396:	4603      	mov	r3, r0
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <vTaskStartScheduler+0xb0>)
 800439a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800439c:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <vTaskStartScheduler+0xb0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80043a4:	2301      	movs	r3, #1
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e001      	b.n	80043ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d116      	bne.n	80043e2 <vTaskStartScheduler+0x82>
	__asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	613b      	str	r3, [r7, #16]
}
 80043c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043c8:	4b12      	ldr	r3, [pc, #72]	; (8004414 <vTaskStartScheduler+0xb4>)
 80043ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043d0:	4b11      	ldr	r3, [pc, #68]	; (8004418 <vTaskStartScheduler+0xb8>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043d6:	4b11      	ldr	r3, [pc, #68]	; (800441c <vTaskStartScheduler+0xbc>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043dc:	f000 fc08 	bl	8004bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043e0:	e00e      	b.n	8004400 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e8:	d10a      	bne.n	8004400 <vTaskStartScheduler+0xa0>
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	60fb      	str	r3, [r7, #12]
}
 80043fc:	bf00      	nop
 80043fe:	e7fe      	b.n	80043fe <vTaskStartScheduler+0x9e>
}
 8004400:	bf00      	nop
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	08006374 	.word	0x08006374
 800440c:	08004861 	.word	0x08004861
 8004410:	20000588 	.word	0x20000588
 8004414:	20000584 	.word	0x20000584
 8004418:	20000570 	.word	0x20000570
 800441c:	20000568 	.word	0x20000568

08004420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004424:	4b04      	ldr	r3, [pc, #16]	; (8004438 <vTaskSuspendAll+0x18>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	4a03      	ldr	r2, [pc, #12]	; (8004438 <vTaskSuspendAll+0x18>)
 800442c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800442e:	bf00      	nop
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	2000058c 	.word	0x2000058c

0800443c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800444a:	4b41      	ldr	r3, [pc, #260]	; (8004550 <xTaskResumeAll+0x114>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <xTaskResumeAll+0x2c>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	603b      	str	r3, [r7, #0]
}
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004468:	f000 fc64 	bl	8004d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800446c:	4b38      	ldr	r3, [pc, #224]	; (8004550 <xTaskResumeAll+0x114>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3b01      	subs	r3, #1
 8004472:	4a37      	ldr	r2, [pc, #220]	; (8004550 <xTaskResumeAll+0x114>)
 8004474:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004476:	4b36      	ldr	r3, [pc, #216]	; (8004550 <xTaskResumeAll+0x114>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d161      	bne.n	8004542 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800447e:	4b35      	ldr	r3, [pc, #212]	; (8004554 <xTaskResumeAll+0x118>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d05d      	beq.n	8004542 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004486:	e02e      	b.n	80044e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004488:	4b33      	ldr	r3, [pc, #204]	; (8004558 <xTaskResumeAll+0x11c>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3318      	adds	r3, #24
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fc38 	bl	8003d0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3304      	adds	r3, #4
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff fc33 	bl	8003d0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	2201      	movs	r2, #1
 80044aa:	409a      	lsls	r2, r3
 80044ac:	4b2b      	ldr	r3, [pc, #172]	; (800455c <xTaskResumeAll+0x120>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	4a2a      	ldr	r2, [pc, #168]	; (800455c <xTaskResumeAll+0x120>)
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4a27      	ldr	r2, [pc, #156]	; (8004560 <xTaskResumeAll+0x124>)
 80044c4:	441a      	add	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3304      	adds	r3, #4
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f7ff fbbf 	bl	8003c50 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d6:	4b23      	ldr	r3, [pc, #140]	; (8004564 <xTaskResumeAll+0x128>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	429a      	cmp	r2, r3
 80044de:	d302      	bcc.n	80044e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80044e0:	4b21      	ldr	r3, [pc, #132]	; (8004568 <xTaskResumeAll+0x12c>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044e6:	4b1c      	ldr	r3, [pc, #112]	; (8004558 <xTaskResumeAll+0x11c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1cc      	bne.n	8004488 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044f4:	f000 fa6a 	bl	80049cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80044f8:	4b1c      	ldr	r3, [pc, #112]	; (800456c <xTaskResumeAll+0x130>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d010      	beq.n	8004526 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004504:	f000 f836 	bl	8004574 <xTaskIncrementTick>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800450e:	4b16      	ldr	r3, [pc, #88]	; (8004568 <xTaskResumeAll+0x12c>)
 8004510:	2201      	movs	r2, #1
 8004512:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3b01      	subs	r3, #1
 8004518:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f1      	bne.n	8004504 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004520:	4b12      	ldr	r3, [pc, #72]	; (800456c <xTaskResumeAll+0x130>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <xTaskResumeAll+0x12c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800452e:	2301      	movs	r3, #1
 8004530:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <xTaskResumeAll+0x134>)
 8004534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004542:	f000 fc27 	bl	8004d94 <vPortExitCritical>

	return xAlreadyYielded;
 8004546:	68bb      	ldr	r3, [r7, #8]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	2000058c 	.word	0x2000058c
 8004554:	20000564 	.word	0x20000564
 8004558:	20000524 	.word	0x20000524
 800455c:	2000056c 	.word	0x2000056c
 8004560:	20000468 	.word	0x20000468
 8004564:	20000464 	.word	0x20000464
 8004568:	20000578 	.word	0x20000578
 800456c:	20000574 	.word	0x20000574
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800457e:	4b4e      	ldr	r3, [pc, #312]	; (80046b8 <xTaskIncrementTick+0x144>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f040 808e 	bne.w	80046a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004588:	4b4c      	ldr	r3, [pc, #304]	; (80046bc <xTaskIncrementTick+0x148>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3301      	adds	r3, #1
 800458e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004590:	4a4a      	ldr	r2, [pc, #296]	; (80046bc <xTaskIncrementTick+0x148>)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d120      	bne.n	80045de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800459c:	4b48      	ldr	r3, [pc, #288]	; (80046c0 <xTaskIncrementTick+0x14c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <xTaskIncrementTick+0x48>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	603b      	str	r3, [r7, #0]
}
 80045b8:	bf00      	nop
 80045ba:	e7fe      	b.n	80045ba <xTaskIncrementTick+0x46>
 80045bc:	4b40      	ldr	r3, [pc, #256]	; (80046c0 <xTaskIncrementTick+0x14c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	4b40      	ldr	r3, [pc, #256]	; (80046c4 <xTaskIncrementTick+0x150>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a3e      	ldr	r2, [pc, #248]	; (80046c0 <xTaskIncrementTick+0x14c>)
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	4a3e      	ldr	r2, [pc, #248]	; (80046c4 <xTaskIncrementTick+0x150>)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	4b3d      	ldr	r3, [pc, #244]	; (80046c8 <xTaskIncrementTick+0x154>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3301      	adds	r3, #1
 80045d6:	4a3c      	ldr	r2, [pc, #240]	; (80046c8 <xTaskIncrementTick+0x154>)
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	f000 f9f7 	bl	80049cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045de:	4b3b      	ldr	r3, [pc, #236]	; (80046cc <xTaskIncrementTick+0x158>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d348      	bcc.n	800467a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045e8:	4b35      	ldr	r3, [pc, #212]	; (80046c0 <xTaskIncrementTick+0x14c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f2:	4b36      	ldr	r3, [pc, #216]	; (80046cc <xTaskIncrementTick+0x158>)
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045f8:	601a      	str	r2, [r3, #0]
					break;
 80045fa:	e03e      	b.n	800467a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fc:	4b30      	ldr	r3, [pc, #192]	; (80046c0 <xTaskIncrementTick+0x14c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	429a      	cmp	r2, r3
 8004612:	d203      	bcs.n	800461c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004614:	4a2d      	ldr	r2, [pc, #180]	; (80046cc <xTaskIncrementTick+0x158>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800461a:	e02e      	b.n	800467a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	3304      	adds	r3, #4
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fb72 	bl	8003d0a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	2b00      	cmp	r3, #0
 800462c:	d004      	beq.n	8004638 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3318      	adds	r3, #24
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fb69 	bl	8003d0a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	2201      	movs	r2, #1
 800463e:	409a      	lsls	r2, r3
 8004640:	4b23      	ldr	r3, [pc, #140]	; (80046d0 <xTaskIncrementTick+0x15c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4313      	orrs	r3, r2
 8004646:	4a22      	ldr	r2, [pc, #136]	; (80046d0 <xTaskIncrementTick+0x15c>)
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4a1f      	ldr	r2, [pc, #124]	; (80046d4 <xTaskIncrementTick+0x160>)
 8004658:	441a      	add	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	3304      	adds	r3, #4
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f7ff faf5 	bl	8003c50 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466a:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <xTaskIncrementTick+0x164>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	429a      	cmp	r2, r3
 8004672:	d3b9      	bcc.n	80045e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004674:	2301      	movs	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004678:	e7b6      	b.n	80045e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800467a:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <xTaskIncrementTick+0x164>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004680:	4914      	ldr	r1, [pc, #80]	; (80046d4 <xTaskIncrementTick+0x160>)
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d901      	bls.n	8004696 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004692:	2301      	movs	r3, #1
 8004694:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004696:	4b11      	ldr	r3, [pc, #68]	; (80046dc <xTaskIncrementTick+0x168>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800469e:	2301      	movs	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	e004      	b.n	80046ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80046a4:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <xTaskIncrementTick+0x16c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <xTaskIncrementTick+0x16c>)
 80046ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80046ae:	697b      	ldr	r3, [r7, #20]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	2000058c 	.word	0x2000058c
 80046bc:	20000568 	.word	0x20000568
 80046c0:	2000051c 	.word	0x2000051c
 80046c4:	20000520 	.word	0x20000520
 80046c8:	2000057c 	.word	0x2000057c
 80046cc:	20000584 	.word	0x20000584
 80046d0:	2000056c 	.word	0x2000056c
 80046d4:	20000468 	.word	0x20000468
 80046d8:	20000464 	.word	0x20000464
 80046dc:	20000578 	.word	0x20000578
 80046e0:	20000574 	.word	0x20000574

080046e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046ea:	4b27      	ldr	r3, [pc, #156]	; (8004788 <vTaskSwitchContext+0xa4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046f2:	4b26      	ldr	r3, [pc, #152]	; (800478c <vTaskSwitchContext+0xa8>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046f8:	e03f      	b.n	800477a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80046fa:	4b24      	ldr	r3, [pc, #144]	; (800478c <vTaskSwitchContext+0xa8>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004700:	4b23      	ldr	r3, [pc, #140]	; (8004790 <vTaskSwitchContext+0xac>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	fab3 f383 	clz	r3, r3
 800470c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800470e:	7afb      	ldrb	r3, [r7, #11]
 8004710:	f1c3 031f 	rsb	r3, r3, #31
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	491f      	ldr	r1, [pc, #124]	; (8004794 <vTaskSwitchContext+0xb0>)
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <vTaskSwitchContext+0x5c>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	607b      	str	r3, [r7, #4]
}
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <vTaskSwitchContext+0x5a>
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4a12      	ldr	r2, [pc, #72]	; (8004794 <vTaskSwitchContext+0xb0>)
 800474c:	4413      	add	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	3308      	adds	r3, #8
 8004762:	429a      	cmp	r2, r3
 8004764:	d104      	bne.n	8004770 <vTaskSwitchContext+0x8c>
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	605a      	str	r2, [r3, #4]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	4a08      	ldr	r2, [pc, #32]	; (8004798 <vTaskSwitchContext+0xb4>)
 8004778:	6013      	str	r3, [r2, #0]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	2000058c 	.word	0x2000058c
 800478c:	20000578 	.word	0x20000578
 8004790:	2000056c 	.word	0x2000056c
 8004794:	20000468 	.word	0x20000468
 8004798:	20000464 	.word	0x20000464

0800479c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60fb      	str	r3, [r7, #12]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	3318      	adds	r3, #24
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff fa9c 	bl	8003d0a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047d2:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <xTaskRemoveFromEventList+0xac>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d11c      	bne.n	8004814 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3304      	adds	r3, #4
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fa93 	bl	8003d0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	2201      	movs	r2, #1
 80047ea:	409a      	lsls	r2, r3
 80047ec:	4b17      	ldr	r3, [pc, #92]	; (800484c <xTaskRemoveFromEventList+0xb0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	4a16      	ldr	r2, [pc, #88]	; (800484c <xTaskRemoveFromEventList+0xb0>)
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4a13      	ldr	r2, [pc, #76]	; (8004850 <xTaskRemoveFromEventList+0xb4>)
 8004804:	441a      	add	r2, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	3304      	adds	r3, #4
 800480a:	4619      	mov	r1, r3
 800480c:	4610      	mov	r0, r2
 800480e:	f7ff fa1f 	bl	8003c50 <vListInsertEnd>
 8004812:	e005      	b.n	8004820 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	3318      	adds	r3, #24
 8004818:	4619      	mov	r1, r3
 800481a:	480e      	ldr	r0, [pc, #56]	; (8004854 <xTaskRemoveFromEventList+0xb8>)
 800481c:	f7ff fa18 	bl	8003c50 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <xTaskRemoveFromEventList+0xbc>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	429a      	cmp	r2, r3
 800482c:	d905      	bls.n	800483a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800482e:	2301      	movs	r3, #1
 8004830:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <xTaskRemoveFromEventList+0xc0>)
 8004834:	2201      	movs	r2, #1
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e001      	b.n	800483e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800483e:	697b      	ldr	r3, [r7, #20]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	2000058c 	.word	0x2000058c
 800484c:	2000056c 	.word	0x2000056c
 8004850:	20000468 	.word	0x20000468
 8004854:	20000524 	.word	0x20000524
 8004858:	20000464 	.word	0x20000464
 800485c:	20000578 	.word	0x20000578

08004860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004868:	f000 f852 	bl	8004910 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800486c:	4b06      	ldr	r3, [pc, #24]	; (8004888 <prvIdleTask+0x28>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d9f9      	bls.n	8004868 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <prvIdleTask+0x2c>)
 8004876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004884:	e7f0      	b.n	8004868 <prvIdleTask+0x8>
 8004886:	bf00      	nop
 8004888:	20000468 	.word	0x20000468
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004896:	2300      	movs	r3, #0
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	e00c      	b.n	80048b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <prvInitialiseTaskLists+0x60>)
 80048a8:	4413      	add	r3, r2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff f9a3 	bl	8003bf6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3301      	adds	r3, #1
 80048b4:	607b      	str	r3, [r7, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b06      	cmp	r3, #6
 80048ba:	d9ef      	bls.n	800489c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048bc:	480d      	ldr	r0, [pc, #52]	; (80048f4 <prvInitialiseTaskLists+0x64>)
 80048be:	f7ff f99a 	bl	8003bf6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048c2:	480d      	ldr	r0, [pc, #52]	; (80048f8 <prvInitialiseTaskLists+0x68>)
 80048c4:	f7ff f997 	bl	8003bf6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048c8:	480c      	ldr	r0, [pc, #48]	; (80048fc <prvInitialiseTaskLists+0x6c>)
 80048ca:	f7ff f994 	bl	8003bf6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048ce:	480c      	ldr	r0, [pc, #48]	; (8004900 <prvInitialiseTaskLists+0x70>)
 80048d0:	f7ff f991 	bl	8003bf6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048d4:	480b      	ldr	r0, [pc, #44]	; (8004904 <prvInitialiseTaskLists+0x74>)
 80048d6:	f7ff f98e 	bl	8003bf6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <prvInitialiseTaskLists+0x78>)
 80048dc:	4a05      	ldr	r2, [pc, #20]	; (80048f4 <prvInitialiseTaskLists+0x64>)
 80048de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <prvInitialiseTaskLists+0x7c>)
 80048e2:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <prvInitialiseTaskLists+0x68>)
 80048e4:	601a      	str	r2, [r3, #0]
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000468 	.word	0x20000468
 80048f4:	200004f4 	.word	0x200004f4
 80048f8:	20000508 	.word	0x20000508
 80048fc:	20000524 	.word	0x20000524
 8004900:	20000538 	.word	0x20000538
 8004904:	20000550 	.word	0x20000550
 8004908:	2000051c 	.word	0x2000051c
 800490c:	20000520 	.word	0x20000520

08004910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004916:	e019      	b.n	800494c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004918:	f000 fa0c 	bl	8004d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800491c:	4b10      	ldr	r3, [pc, #64]	; (8004960 <prvCheckTasksWaitingTermination+0x50>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3304      	adds	r3, #4
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff f9ee 	bl	8003d0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800492e:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <prvCheckTasksWaitingTermination+0x54>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3b01      	subs	r3, #1
 8004934:	4a0b      	ldr	r2, [pc, #44]	; (8004964 <prvCheckTasksWaitingTermination+0x54>)
 8004936:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <prvCheckTasksWaitingTermination+0x58>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3b01      	subs	r3, #1
 800493e:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <prvCheckTasksWaitingTermination+0x58>)
 8004940:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004942:	f000 fa27 	bl	8004d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f810 	bl	800496c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <prvCheckTasksWaitingTermination+0x58>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e1      	bne.n	8004918 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20000538 	.word	0x20000538
 8004964:	20000564 	.word	0x20000564
 8004968:	2000054c 	.word	0x2000054c

0800496c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800497a:	2b00      	cmp	r3, #0
 800497c:	d108      	bne.n	8004990 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fb84 	bl	8005090 <vPortFree>
				vPortFree( pxTCB );
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fb81 	bl	8005090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800498e:	e018      	b.n	80049c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004996:	2b01      	cmp	r3, #1
 8004998:	d103      	bne.n	80049a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fb78 	bl	8005090 <vPortFree>
	}
 80049a0:	e00f      	b.n	80049c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d00a      	beq.n	80049c2 <prvDeleteTCB+0x56>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	60fb      	str	r3, [r7, #12]
}
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <prvDeleteTCB+0x54>
	}
 80049c2:	bf00      	nop
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049d2:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <prvResetNextTaskUnblockTime+0x38>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d104      	bne.n	80049e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <prvResetNextTaskUnblockTime+0x3c>)
 80049de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049e4:	e008      	b.n	80049f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e6:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <prvResetNextTaskUnblockTime+0x38>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <prvResetNextTaskUnblockTime+0x3c>)
 80049f6:	6013      	str	r3, [r2, #0]
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	2000051c 	.word	0x2000051c
 8004a08:	20000584 	.word	0x20000584

08004a0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a16:	4b29      	ldr	r3, [pc, #164]	; (8004abc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a1c:	4b28      	ldr	r3, [pc, #160]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff f971 	bl	8003d0a <uxListRemove>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a2e:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	2201      	movs	r2, #1
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4013      	ands	r3, r2
 8004a42:	4a20      	ldr	r2, [pc, #128]	; (8004ac4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a4c:	d10a      	bne.n	8004a64 <prvAddCurrentTaskToDelayedList+0x58>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a54:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	481a      	ldr	r0, [pc, #104]	; (8004ac8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a5e:	f7ff f8f7 	bl	8003c50 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a62:	e026      	b.n	8004ab2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4413      	add	r3, r2
 8004a6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a6c:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d209      	bcs.n	8004a90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a7c:	4b13      	ldr	r3, [pc, #76]	; (8004acc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3304      	adds	r3, #4
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f7ff f905 	bl	8003c98 <vListInsert>
}
 8004a8e:	e010      	b.n	8004ab2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a90:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7ff f8fb 	bl	8003c98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d202      	bcs.n	8004ab2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004aac:	4a09      	ldr	r2, [pc, #36]	; (8004ad4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6013      	str	r3, [r2, #0]
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000568 	.word	0x20000568
 8004ac0:	20000464 	.word	0x20000464
 8004ac4:	2000056c 	.word	0x2000056c
 8004ac8:	20000550 	.word	0x20000550
 8004acc:	20000520 	.word	0x20000520
 8004ad0:	2000051c 	.word	0x2000051c
 8004ad4:	20000584 	.word	0x20000584

08004ad8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3b04      	subs	r3, #4
 8004ae8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3b04      	subs	r3, #4
 8004af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f023 0201 	bic.w	r2, r3, #1
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3b04      	subs	r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b08:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <pxPortInitialiseStack+0x64>)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b14      	subs	r3, #20
 8004b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3b04      	subs	r3, #4
 8004b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f06f 0202 	mvn.w	r2, #2
 8004b26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3b20      	subs	r3, #32
 8004b2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	08004b41 	.word	0x08004b41

08004b40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <prvTaskExitError+0x54>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b52:	d00a      	beq.n	8004b6a <prvTaskExitError+0x2a>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	60fb      	str	r3, [r7, #12]
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <prvTaskExitError+0x28>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60bb      	str	r3, [r7, #8]
}
 8004b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b7e:	bf00      	nop
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0fc      	beq.n	8004b80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	2000000c 	.word	0x2000000c
	...

08004ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <pxCurrentTCBConst2>)
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	6808      	ldr	r0, [r1, #0]
 8004ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	f380 8809 	msr	PSP, r0
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8811 	msr	BASEPRI, r0
 8004bba:	4770      	bx	lr
 8004bbc:	f3af 8000 	nop.w

08004bc0 <pxCurrentTCBConst2>:
 8004bc0:	20000464 	.word	0x20000464
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop

08004bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004bc8:	4808      	ldr	r0, [pc, #32]	; (8004bec <prvPortStartFirstTask+0x24>)
 8004bca:	6800      	ldr	r0, [r0, #0]
 8004bcc:	6800      	ldr	r0, [r0, #0]
 8004bce:	f380 8808 	msr	MSP, r0
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8814 	msr	CONTROL, r0
 8004bda:	b662      	cpsie	i
 8004bdc:	b661      	cpsie	f
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	df00      	svc	0
 8004be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bea:	bf00      	nop
 8004bec:	e000ed08 	.word	0xe000ed08

08004bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bf6:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <xPortStartScheduler+0x120>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a46      	ldr	r2, [pc, #280]	; (8004d14 <xPortStartScheduler+0x124>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d10a      	bne.n	8004c16 <xPortStartScheduler+0x26>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	613b      	str	r3, [r7, #16]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c16:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <xPortStartScheduler+0x120>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a3f      	ldr	r2, [pc, #252]	; (8004d18 <xPortStartScheduler+0x128>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10a      	bne.n	8004c36 <xPortStartScheduler+0x46>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60fb      	str	r3, [r7, #12]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c36:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <xPortStartScheduler+0x12c>)
 8004c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	22ff      	movs	r2, #255	; 0xff
 8004c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <xPortStartScheduler+0x130>)
 8004c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c5e:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c60:	2207      	movs	r2, #7
 8004c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c64:	e009      	b.n	8004c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c66:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	4a2d      	ldr	r2, [pc, #180]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d0ef      	beq.n	8004c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c86:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1c3 0307 	rsb	r3, r3, #7
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d00a      	beq.n	8004ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	60bb      	str	r3, [r7, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	e7fe      	b.n	8004ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <xPortStartScheduler+0x134>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cb2:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cba:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cc6:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a17      	ldr	r2, [pc, #92]	; (8004d28 <xPortStartScheduler+0x138>)
 8004ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cde:	f000 f8dd 	bl	8004e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <xPortStartScheduler+0x13c>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ce8:	f000 f8fc 	bl	8004ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <xPortStartScheduler+0x140>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a0f      	ldr	r2, [pc, #60]	; (8004d30 <xPortStartScheduler+0x140>)
 8004cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cf8:	f7ff ff66 	bl	8004bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cfc:	f7ff fcf2 	bl	80046e4 <vTaskSwitchContext>
	prvTaskExitError();
 8004d00:	f7ff ff1e 	bl	8004b40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	e000ed00 	.word	0xe000ed00
 8004d14:	410fc271 	.word	0x410fc271
 8004d18:	410fc270 	.word	0x410fc270
 8004d1c:	e000e400 	.word	0xe000e400
 8004d20:	20000590 	.word	0x20000590
 8004d24:	20000594 	.word	0x20000594
 8004d28:	e000ed20 	.word	0xe000ed20
 8004d2c:	2000000c 	.word	0x2000000c
 8004d30:	e000ef34 	.word	0xe000ef34

08004d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	607b      	str	r3, [r7, #4]
}
 8004d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	4a0d      	ldr	r2, [pc, #52]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10f      	bne.n	8004d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <vPortEnterCritical+0x5c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	603b      	str	r3, [r7, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <vPortEnterCritical+0x4a>
	}
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	2000000c 	.word	0x2000000c
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <vPortExitCritical+0x50>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <vPortExitCritical+0x24>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	607b      	str	r3, [r7, #4]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <vPortExitCritical+0x50>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4a09      	ldr	r2, [pc, #36]	; (8004de4 <vPortExitCritical+0x50>)
 8004dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <vPortExitCritical+0x50>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <vPortExitCritical+0x42>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	2000000c 	.word	0x2000000c
	...

08004df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004df0:	f3ef 8009 	mrs	r0, PSP
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <pxCurrentTCBConst>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	f01e 0f10 	tst.w	lr, #16
 8004e00:	bf08      	it	eq
 8004e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	6010      	str	r0, [r2, #0]
 8004e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e14:	f380 8811 	msr	BASEPRI, r0
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f7ff fc60 	bl	80046e4 <vTaskSwitchContext>
 8004e24:	f04f 0000 	mov.w	r0, #0
 8004e28:	f380 8811 	msr	BASEPRI, r0
 8004e2c:	bc09      	pop	{r0, r3}
 8004e2e:	6819      	ldr	r1, [r3, #0]
 8004e30:	6808      	ldr	r0, [r1, #0]
 8004e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e36:	f01e 0f10 	tst.w	lr, #16
 8004e3a:	bf08      	it	eq
 8004e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e40:	f380 8809 	msr	PSP, r0
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	f3af 8000 	nop.w

08004e50 <pxCurrentTCBConst>:
 8004e50:	20000464 	.word	0x20000464
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop

08004e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	607b      	str	r3, [r7, #4]
}
 8004e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e72:	f7ff fb7f 	bl	8004574 <xTaskIncrementTick>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <SysTick_Handler+0x40>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f383 8811 	msr	BASEPRI, r3
}
 8004e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <vPortSetupTimerInterrupt+0x38>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <vPortSetupTimerInterrupt+0x3c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <vPortSetupTimerInterrupt+0x40>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	099b      	lsrs	r3, r3, #6
 8004eb8:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <vPortSetupTimerInterrupt+0x44>)
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	601a      	str	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	e000e010 	.word	0xe000e010
 8004ed4:	e000e018 	.word	0xe000e018
 8004ed8:	20000000 	.word	0x20000000
 8004edc:	10624dd3 	.word	0x10624dd3
 8004ee0:	e000e014 	.word	0xe000e014

08004ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ef4 <vPortEnableVFP+0x10>
 8004ee8:	6801      	ldr	r1, [r0, #0]
 8004eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004eee:	6001      	str	r1, [r0, #0]
 8004ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ef2:	bf00      	nop
 8004ef4:	e000ed88 	.word	0xe000ed88

08004ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	; 0x28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f04:	f7ff fa8c 	bl	8004420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f08:	4b5b      	ldr	r3, [pc, #364]	; (8005078 <pvPortMalloc+0x180>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f10:	f000 f920 	bl	8005154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f14:	4b59      	ldr	r3, [pc, #356]	; (800507c <pvPortMalloc+0x184>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 8093 	bne.w	8005048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01d      	beq.n	8004f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f28:	2208      	movs	r2, #8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d014      	beq.n	8004f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f023 0307 	bic.w	r3, r3, #7
 8004f40:	3308      	adds	r3, #8
 8004f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <pvPortMalloc+0x6c>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	617b      	str	r3, [r7, #20]
}
 8004f60:	bf00      	nop
 8004f62:	e7fe      	b.n	8004f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d06e      	beq.n	8005048 <pvPortMalloc+0x150>
 8004f6a:	4b45      	ldr	r3, [pc, #276]	; (8005080 <pvPortMalloc+0x188>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d869      	bhi.n	8005048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f74:	4b43      	ldr	r3, [pc, #268]	; (8005084 <pvPortMalloc+0x18c>)
 8004f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f78:	4b42      	ldr	r3, [pc, #264]	; (8005084 <pvPortMalloc+0x18c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f7e:	e004      	b.n	8004f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d903      	bls.n	8004f9c <pvPortMalloc+0xa4>
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f1      	bne.n	8004f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f9c:	4b36      	ldr	r3, [pc, #216]	; (8005078 <pvPortMalloc+0x180>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d050      	beq.n	8005048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2208      	movs	r2, #8
 8004fac:	4413      	add	r3, r2
 8004fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	1ad2      	subs	r2, r2, r3
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d91f      	bls.n	8005008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4413      	add	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	613b      	str	r3, [r7, #16]
}
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	1ad2      	subs	r2, r2, r3
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005002:	69b8      	ldr	r0, [r7, #24]
 8005004:	f000 f908 	bl	8005218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005008:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <pvPortMalloc+0x188>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <pvPortMalloc+0x188>)
 8005014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005016:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <pvPortMalloc+0x188>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4b1b      	ldr	r3, [pc, #108]	; (8005088 <pvPortMalloc+0x190>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d203      	bcs.n	800502a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005022:	4b17      	ldr	r3, [pc, #92]	; (8005080 <pvPortMalloc+0x188>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a18      	ldr	r2, [pc, #96]	; (8005088 <pvPortMalloc+0x190>)
 8005028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	4b13      	ldr	r3, [pc, #76]	; (800507c <pvPortMalloc+0x184>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	431a      	orrs	r2, r3
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800503e:	4b13      	ldr	r3, [pc, #76]	; (800508c <pvPortMalloc+0x194>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3301      	adds	r3, #1
 8005044:	4a11      	ldr	r2, [pc, #68]	; (800508c <pvPortMalloc+0x194>)
 8005046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005048:	f7ff f9f8 	bl	800443c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <pvPortMalloc+0x174>
	__asm volatile
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	60fb      	str	r3, [r7, #12]
}
 8005068:	bf00      	nop
 800506a:	e7fe      	b.n	800506a <pvPortMalloc+0x172>
	return pvReturn;
 800506c:	69fb      	ldr	r3, [r7, #28]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3728      	adds	r7, #40	; 0x28
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	200041a0 	.word	0x200041a0
 800507c:	200041b4 	.word	0x200041b4
 8005080:	200041a4 	.word	0x200041a4
 8005084:	20004198 	.word	0x20004198
 8005088:	200041a8 	.word	0x200041a8
 800508c:	200041ac 	.word	0x200041ac

08005090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d04d      	beq.n	800513e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050a2:	2308      	movs	r3, #8
 80050a4:	425b      	negs	r3, r3
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4413      	add	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	4b24      	ldr	r3, [pc, #144]	; (8005148 <vPortFree+0xb8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <vPortFree+0x44>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	60fb      	str	r3, [r7, #12]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <vPortFree+0x62>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	60bb      	str	r3, [r7, #8]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	4b14      	ldr	r3, [pc, #80]	; (8005148 <vPortFree+0xb8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01e      	beq.n	800513e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d11a      	bne.n	800513e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <vPortFree+0xb8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	43db      	mvns	r3, r3
 8005112:	401a      	ands	r2, r3
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005118:	f7ff f982 	bl	8004420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	4b0a      	ldr	r3, [pc, #40]	; (800514c <vPortFree+0xbc>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4413      	add	r3, r2
 8005126:	4a09      	ldr	r2, [pc, #36]	; (800514c <vPortFree+0xbc>)
 8005128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800512a:	6938      	ldr	r0, [r7, #16]
 800512c:	f000 f874 	bl	8005218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <vPortFree+0xc0>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3301      	adds	r3, #1
 8005136:	4a06      	ldr	r2, [pc, #24]	; (8005150 <vPortFree+0xc0>)
 8005138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800513a:	f7ff f97f 	bl	800443c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800513e:	bf00      	nop
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200041b4 	.word	0x200041b4
 800514c:	200041a4 	.word	0x200041a4
 8005150:	200041b0 	.word	0x200041b0

08005154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800515a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800515e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005160:	4b27      	ldr	r3, [pc, #156]	; (8005200 <prvHeapInit+0xac>)
 8005162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3307      	adds	r3, #7
 8005172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0307 	bic.w	r3, r3, #7
 800517a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	4a1f      	ldr	r2, [pc, #124]	; (8005200 <prvHeapInit+0xac>)
 8005184:	4413      	add	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800518c:	4a1d      	ldr	r2, [pc, #116]	; (8005204 <prvHeapInit+0xb0>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005192:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <prvHeapInit+0xb0>)
 8005194:	2200      	movs	r2, #0
 8005196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4413      	add	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051a0:	2208      	movs	r2, #8
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0307 	bic.w	r3, r3, #7
 80051ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a15      	ldr	r2, [pc, #84]	; (8005208 <prvHeapInit+0xb4>)
 80051b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051b6:	4b14      	ldr	r3, [pc, #80]	; (8005208 <prvHeapInit+0xb4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2200      	movs	r2, #0
 80051bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <prvHeapInit+0xb4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <prvHeapInit+0xb4>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a0a      	ldr	r2, [pc, #40]	; (800520c <prvHeapInit+0xb8>)
 80051e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a09      	ldr	r2, [pc, #36]	; (8005210 <prvHeapInit+0xbc>)
 80051ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <prvHeapInit+0xc0>)
 80051ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051f2:	601a      	str	r2, [r3, #0]
}
 80051f4:	bf00      	nop
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	20000598 	.word	0x20000598
 8005204:	20004198 	.word	0x20004198
 8005208:	200041a0 	.word	0x200041a0
 800520c:	200041a8 	.word	0x200041a8
 8005210:	200041a4 	.word	0x200041a4
 8005214:	200041b4 	.word	0x200041b4

08005218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005220:	4b28      	ldr	r3, [pc, #160]	; (80052c4 <prvInsertBlockIntoFreeList+0xac>)
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	e002      	b.n	800522c <prvInsertBlockIntoFreeList+0x14>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d8f7      	bhi.n	8005226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	4413      	add	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	429a      	cmp	r2, r3
 8005246:	d108      	bne.n	800525a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	441a      	add	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	441a      	add	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d118      	bne.n	80052a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d00d      	beq.n	8005296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	441a      	add	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e008      	b.n	80052a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005296:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e003      	b.n	80052a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d002      	beq.n	80052b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20004198 	.word	0x20004198
 80052c8:	200041a0 	.word	0x200041a0

080052cc <__errno>:
 80052cc:	4b01      	ldr	r3, [pc, #4]	; (80052d4 <__errno+0x8>)
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000010 	.word	0x20000010

080052d8 <__libc_init_array>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	4d0d      	ldr	r5, [pc, #52]	; (8005310 <__libc_init_array+0x38>)
 80052dc:	4c0d      	ldr	r4, [pc, #52]	; (8005314 <__libc_init_array+0x3c>)
 80052de:	1b64      	subs	r4, r4, r5
 80052e0:	10a4      	asrs	r4, r4, #2
 80052e2:	2600      	movs	r6, #0
 80052e4:	42a6      	cmp	r6, r4
 80052e6:	d109      	bne.n	80052fc <__libc_init_array+0x24>
 80052e8:	4d0b      	ldr	r5, [pc, #44]	; (8005318 <__libc_init_array+0x40>)
 80052ea:	4c0c      	ldr	r4, [pc, #48]	; (800531c <__libc_init_array+0x44>)
 80052ec:	f000 ffae 	bl	800624c <_init>
 80052f0:	1b64      	subs	r4, r4, r5
 80052f2:	10a4      	asrs	r4, r4, #2
 80052f4:	2600      	movs	r6, #0
 80052f6:	42a6      	cmp	r6, r4
 80052f8:	d105      	bne.n	8005306 <__libc_init_array+0x2e>
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005300:	4798      	blx	r3
 8005302:	3601      	adds	r6, #1
 8005304:	e7ee      	b.n	80052e4 <__libc_init_array+0xc>
 8005306:	f855 3b04 	ldr.w	r3, [r5], #4
 800530a:	4798      	blx	r3
 800530c:	3601      	adds	r6, #1
 800530e:	e7f2      	b.n	80052f6 <__libc_init_array+0x1e>
 8005310:	08006434 	.word	0x08006434
 8005314:	08006434 	.word	0x08006434
 8005318:	08006434 	.word	0x08006434
 800531c:	08006438 	.word	0x08006438

08005320 <memset>:
 8005320:	4402      	add	r2, r0
 8005322:	4603      	mov	r3, r0
 8005324:	4293      	cmp	r3, r2
 8005326:	d100      	bne.n	800532a <memset+0xa>
 8005328:	4770      	bx	lr
 800532a:	f803 1b01 	strb.w	r1, [r3], #1
 800532e:	e7f9      	b.n	8005324 <memset+0x4>

08005330 <iprintf>:
 8005330:	b40f      	push	{r0, r1, r2, r3}
 8005332:	4b0a      	ldr	r3, [pc, #40]	; (800535c <iprintf+0x2c>)
 8005334:	b513      	push	{r0, r1, r4, lr}
 8005336:	681c      	ldr	r4, [r3, #0]
 8005338:	b124      	cbz	r4, 8005344 <iprintf+0x14>
 800533a:	69a3      	ldr	r3, [r4, #24]
 800533c:	b913      	cbnz	r3, 8005344 <iprintf+0x14>
 800533e:	4620      	mov	r0, r4
 8005340:	f000 f866 	bl	8005410 <__sinit>
 8005344:	ab05      	add	r3, sp, #20
 8005346:	9a04      	ldr	r2, [sp, #16]
 8005348:	68a1      	ldr	r1, [r4, #8]
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	4620      	mov	r0, r4
 800534e:	f000 f9bd 	bl	80056cc <_vfiprintf_r>
 8005352:	b002      	add	sp, #8
 8005354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005358:	b004      	add	sp, #16
 800535a:	4770      	bx	lr
 800535c:	20000010 	.word	0x20000010

08005360 <std>:
 8005360:	2300      	movs	r3, #0
 8005362:	b510      	push	{r4, lr}
 8005364:	4604      	mov	r4, r0
 8005366:	e9c0 3300 	strd	r3, r3, [r0]
 800536a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800536e:	6083      	str	r3, [r0, #8]
 8005370:	8181      	strh	r1, [r0, #12]
 8005372:	6643      	str	r3, [r0, #100]	; 0x64
 8005374:	81c2      	strh	r2, [r0, #14]
 8005376:	6183      	str	r3, [r0, #24]
 8005378:	4619      	mov	r1, r3
 800537a:	2208      	movs	r2, #8
 800537c:	305c      	adds	r0, #92	; 0x5c
 800537e:	f7ff ffcf 	bl	8005320 <memset>
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <std+0x38>)
 8005384:	6263      	str	r3, [r4, #36]	; 0x24
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <std+0x3c>)
 8005388:	62a3      	str	r3, [r4, #40]	; 0x28
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <std+0x40>)
 800538c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <std+0x44>)
 8005390:	6224      	str	r4, [r4, #32]
 8005392:	6323      	str	r3, [r4, #48]	; 0x30
 8005394:	bd10      	pop	{r4, pc}
 8005396:	bf00      	nop
 8005398:	08005c75 	.word	0x08005c75
 800539c:	08005c97 	.word	0x08005c97
 80053a0:	08005ccf 	.word	0x08005ccf
 80053a4:	08005cf3 	.word	0x08005cf3

080053a8 <_cleanup_r>:
 80053a8:	4901      	ldr	r1, [pc, #4]	; (80053b0 <_cleanup_r+0x8>)
 80053aa:	f000 b8af 	b.w	800550c <_fwalk_reent>
 80053ae:	bf00      	nop
 80053b0:	08005fcd 	.word	0x08005fcd

080053b4 <__sfmoreglue>:
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	2268      	movs	r2, #104	; 0x68
 80053b8:	1e4d      	subs	r5, r1, #1
 80053ba:	4355      	muls	r5, r2
 80053bc:	460e      	mov	r6, r1
 80053be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053c2:	f000 f8e5 	bl	8005590 <_malloc_r>
 80053c6:	4604      	mov	r4, r0
 80053c8:	b140      	cbz	r0, 80053dc <__sfmoreglue+0x28>
 80053ca:	2100      	movs	r1, #0
 80053cc:	e9c0 1600 	strd	r1, r6, [r0]
 80053d0:	300c      	adds	r0, #12
 80053d2:	60a0      	str	r0, [r4, #8]
 80053d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053d8:	f7ff ffa2 	bl	8005320 <memset>
 80053dc:	4620      	mov	r0, r4
 80053de:	bd70      	pop	{r4, r5, r6, pc}

080053e0 <__sfp_lock_acquire>:
 80053e0:	4801      	ldr	r0, [pc, #4]	; (80053e8 <__sfp_lock_acquire+0x8>)
 80053e2:	f000 b8b3 	b.w	800554c <__retarget_lock_acquire_recursive>
 80053e6:	bf00      	nop
 80053e8:	200041b9 	.word	0x200041b9

080053ec <__sfp_lock_release>:
 80053ec:	4801      	ldr	r0, [pc, #4]	; (80053f4 <__sfp_lock_release+0x8>)
 80053ee:	f000 b8ae 	b.w	800554e <__retarget_lock_release_recursive>
 80053f2:	bf00      	nop
 80053f4:	200041b9 	.word	0x200041b9

080053f8 <__sinit_lock_acquire>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__sinit_lock_acquire+0x8>)
 80053fa:	f000 b8a7 	b.w	800554c <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	200041ba 	.word	0x200041ba

08005404 <__sinit_lock_release>:
 8005404:	4801      	ldr	r0, [pc, #4]	; (800540c <__sinit_lock_release+0x8>)
 8005406:	f000 b8a2 	b.w	800554e <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	200041ba 	.word	0x200041ba

08005410 <__sinit>:
 8005410:	b510      	push	{r4, lr}
 8005412:	4604      	mov	r4, r0
 8005414:	f7ff fff0 	bl	80053f8 <__sinit_lock_acquire>
 8005418:	69a3      	ldr	r3, [r4, #24]
 800541a:	b11b      	cbz	r3, 8005424 <__sinit+0x14>
 800541c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005420:	f7ff bff0 	b.w	8005404 <__sinit_lock_release>
 8005424:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005428:	6523      	str	r3, [r4, #80]	; 0x50
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <__sinit+0x68>)
 800542c:	4a13      	ldr	r2, [pc, #76]	; (800547c <__sinit+0x6c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	62a2      	str	r2, [r4, #40]	; 0x28
 8005432:	42a3      	cmp	r3, r4
 8005434:	bf04      	itt	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	61a3      	streq	r3, [r4, #24]
 800543a:	4620      	mov	r0, r4
 800543c:	f000 f820 	bl	8005480 <__sfp>
 8005440:	6060      	str	r0, [r4, #4]
 8005442:	4620      	mov	r0, r4
 8005444:	f000 f81c 	bl	8005480 <__sfp>
 8005448:	60a0      	str	r0, [r4, #8]
 800544a:	4620      	mov	r0, r4
 800544c:	f000 f818 	bl	8005480 <__sfp>
 8005450:	2200      	movs	r2, #0
 8005452:	60e0      	str	r0, [r4, #12]
 8005454:	2104      	movs	r1, #4
 8005456:	6860      	ldr	r0, [r4, #4]
 8005458:	f7ff ff82 	bl	8005360 <std>
 800545c:	68a0      	ldr	r0, [r4, #8]
 800545e:	2201      	movs	r2, #1
 8005460:	2109      	movs	r1, #9
 8005462:	f7ff ff7d 	bl	8005360 <std>
 8005466:	68e0      	ldr	r0, [r4, #12]
 8005468:	2202      	movs	r2, #2
 800546a:	2112      	movs	r1, #18
 800546c:	f7ff ff78 	bl	8005360 <std>
 8005470:	2301      	movs	r3, #1
 8005472:	61a3      	str	r3, [r4, #24]
 8005474:	e7d2      	b.n	800541c <__sinit+0xc>
 8005476:	bf00      	nop
 8005478:	08006394 	.word	0x08006394
 800547c:	080053a9 	.word	0x080053a9

08005480 <__sfp>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	4607      	mov	r7, r0
 8005484:	f7ff ffac 	bl	80053e0 <__sfp_lock_acquire>
 8005488:	4b1e      	ldr	r3, [pc, #120]	; (8005504 <__sfp+0x84>)
 800548a:	681e      	ldr	r6, [r3, #0]
 800548c:	69b3      	ldr	r3, [r6, #24]
 800548e:	b913      	cbnz	r3, 8005496 <__sfp+0x16>
 8005490:	4630      	mov	r0, r6
 8005492:	f7ff ffbd 	bl	8005410 <__sinit>
 8005496:	3648      	adds	r6, #72	; 0x48
 8005498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800549c:	3b01      	subs	r3, #1
 800549e:	d503      	bpl.n	80054a8 <__sfp+0x28>
 80054a0:	6833      	ldr	r3, [r6, #0]
 80054a2:	b30b      	cbz	r3, 80054e8 <__sfp+0x68>
 80054a4:	6836      	ldr	r6, [r6, #0]
 80054a6:	e7f7      	b.n	8005498 <__sfp+0x18>
 80054a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054ac:	b9d5      	cbnz	r5, 80054e4 <__sfp+0x64>
 80054ae:	4b16      	ldr	r3, [pc, #88]	; (8005508 <__sfp+0x88>)
 80054b0:	60e3      	str	r3, [r4, #12]
 80054b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054b6:	6665      	str	r5, [r4, #100]	; 0x64
 80054b8:	f000 f847 	bl	800554a <__retarget_lock_init_recursive>
 80054bc:	f7ff ff96 	bl	80053ec <__sfp_lock_release>
 80054c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80054c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80054c8:	6025      	str	r5, [r4, #0]
 80054ca:	61a5      	str	r5, [r4, #24]
 80054cc:	2208      	movs	r2, #8
 80054ce:	4629      	mov	r1, r5
 80054d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054d4:	f7ff ff24 	bl	8005320 <memset>
 80054d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054e0:	4620      	mov	r0, r4
 80054e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e4:	3468      	adds	r4, #104	; 0x68
 80054e6:	e7d9      	b.n	800549c <__sfp+0x1c>
 80054e8:	2104      	movs	r1, #4
 80054ea:	4638      	mov	r0, r7
 80054ec:	f7ff ff62 	bl	80053b4 <__sfmoreglue>
 80054f0:	4604      	mov	r4, r0
 80054f2:	6030      	str	r0, [r6, #0]
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d1d5      	bne.n	80054a4 <__sfp+0x24>
 80054f8:	f7ff ff78 	bl	80053ec <__sfp_lock_release>
 80054fc:	230c      	movs	r3, #12
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	e7ee      	b.n	80054e0 <__sfp+0x60>
 8005502:	bf00      	nop
 8005504:	08006394 	.word	0x08006394
 8005508:	ffff0001 	.word	0xffff0001

0800550c <_fwalk_reent>:
 800550c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005510:	4606      	mov	r6, r0
 8005512:	4688      	mov	r8, r1
 8005514:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005518:	2700      	movs	r7, #0
 800551a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800551e:	f1b9 0901 	subs.w	r9, r9, #1
 8005522:	d505      	bpl.n	8005530 <_fwalk_reent+0x24>
 8005524:	6824      	ldr	r4, [r4, #0]
 8005526:	2c00      	cmp	r4, #0
 8005528:	d1f7      	bne.n	800551a <_fwalk_reent+0xe>
 800552a:	4638      	mov	r0, r7
 800552c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005530:	89ab      	ldrh	r3, [r5, #12]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d907      	bls.n	8005546 <_fwalk_reent+0x3a>
 8005536:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800553a:	3301      	adds	r3, #1
 800553c:	d003      	beq.n	8005546 <_fwalk_reent+0x3a>
 800553e:	4629      	mov	r1, r5
 8005540:	4630      	mov	r0, r6
 8005542:	47c0      	blx	r8
 8005544:	4307      	orrs	r7, r0
 8005546:	3568      	adds	r5, #104	; 0x68
 8005548:	e7e9      	b.n	800551e <_fwalk_reent+0x12>

0800554a <__retarget_lock_init_recursive>:
 800554a:	4770      	bx	lr

0800554c <__retarget_lock_acquire_recursive>:
 800554c:	4770      	bx	lr

0800554e <__retarget_lock_release_recursive>:
 800554e:	4770      	bx	lr

08005550 <sbrk_aligned>:
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	4e0e      	ldr	r6, [pc, #56]	; (800558c <sbrk_aligned+0x3c>)
 8005554:	460c      	mov	r4, r1
 8005556:	6831      	ldr	r1, [r6, #0]
 8005558:	4605      	mov	r5, r0
 800555a:	b911      	cbnz	r1, 8005562 <sbrk_aligned+0x12>
 800555c:	f000 fb7a 	bl	8005c54 <_sbrk_r>
 8005560:	6030      	str	r0, [r6, #0]
 8005562:	4621      	mov	r1, r4
 8005564:	4628      	mov	r0, r5
 8005566:	f000 fb75 	bl	8005c54 <_sbrk_r>
 800556a:	1c43      	adds	r3, r0, #1
 800556c:	d00a      	beq.n	8005584 <sbrk_aligned+0x34>
 800556e:	1cc4      	adds	r4, r0, #3
 8005570:	f024 0403 	bic.w	r4, r4, #3
 8005574:	42a0      	cmp	r0, r4
 8005576:	d007      	beq.n	8005588 <sbrk_aligned+0x38>
 8005578:	1a21      	subs	r1, r4, r0
 800557a:	4628      	mov	r0, r5
 800557c:	f000 fb6a 	bl	8005c54 <_sbrk_r>
 8005580:	3001      	adds	r0, #1
 8005582:	d101      	bne.n	8005588 <sbrk_aligned+0x38>
 8005584:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005588:	4620      	mov	r0, r4
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	200041c0 	.word	0x200041c0

08005590 <_malloc_r>:
 8005590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005594:	1ccd      	adds	r5, r1, #3
 8005596:	f025 0503 	bic.w	r5, r5, #3
 800559a:	3508      	adds	r5, #8
 800559c:	2d0c      	cmp	r5, #12
 800559e:	bf38      	it	cc
 80055a0:	250c      	movcc	r5, #12
 80055a2:	2d00      	cmp	r5, #0
 80055a4:	4607      	mov	r7, r0
 80055a6:	db01      	blt.n	80055ac <_malloc_r+0x1c>
 80055a8:	42a9      	cmp	r1, r5
 80055aa:	d905      	bls.n	80055b8 <_malloc_r+0x28>
 80055ac:	230c      	movs	r3, #12
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	2600      	movs	r6, #0
 80055b2:	4630      	mov	r0, r6
 80055b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b8:	4e2e      	ldr	r6, [pc, #184]	; (8005674 <_malloc_r+0xe4>)
 80055ba:	f000 fdbb 	bl	8006134 <__malloc_lock>
 80055be:	6833      	ldr	r3, [r6, #0]
 80055c0:	461c      	mov	r4, r3
 80055c2:	bb34      	cbnz	r4, 8005612 <_malloc_r+0x82>
 80055c4:	4629      	mov	r1, r5
 80055c6:	4638      	mov	r0, r7
 80055c8:	f7ff ffc2 	bl	8005550 <sbrk_aligned>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	4604      	mov	r4, r0
 80055d0:	d14d      	bne.n	800566e <_malloc_r+0xde>
 80055d2:	6834      	ldr	r4, [r6, #0]
 80055d4:	4626      	mov	r6, r4
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	d140      	bne.n	800565c <_malloc_r+0xcc>
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	4631      	mov	r1, r6
 80055de:	4638      	mov	r0, r7
 80055e0:	eb04 0803 	add.w	r8, r4, r3
 80055e4:	f000 fb36 	bl	8005c54 <_sbrk_r>
 80055e8:	4580      	cmp	r8, r0
 80055ea:	d13a      	bne.n	8005662 <_malloc_r+0xd2>
 80055ec:	6821      	ldr	r1, [r4, #0]
 80055ee:	3503      	adds	r5, #3
 80055f0:	1a6d      	subs	r5, r5, r1
 80055f2:	f025 0503 	bic.w	r5, r5, #3
 80055f6:	3508      	adds	r5, #8
 80055f8:	2d0c      	cmp	r5, #12
 80055fa:	bf38      	it	cc
 80055fc:	250c      	movcc	r5, #12
 80055fe:	4629      	mov	r1, r5
 8005600:	4638      	mov	r0, r7
 8005602:	f7ff ffa5 	bl	8005550 <sbrk_aligned>
 8005606:	3001      	adds	r0, #1
 8005608:	d02b      	beq.n	8005662 <_malloc_r+0xd2>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	442b      	add	r3, r5
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	e00e      	b.n	8005630 <_malloc_r+0xa0>
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	1b52      	subs	r2, r2, r5
 8005616:	d41e      	bmi.n	8005656 <_malloc_r+0xc6>
 8005618:	2a0b      	cmp	r2, #11
 800561a:	d916      	bls.n	800564a <_malloc_r+0xba>
 800561c:	1961      	adds	r1, r4, r5
 800561e:	42a3      	cmp	r3, r4
 8005620:	6025      	str	r5, [r4, #0]
 8005622:	bf18      	it	ne
 8005624:	6059      	strne	r1, [r3, #4]
 8005626:	6863      	ldr	r3, [r4, #4]
 8005628:	bf08      	it	eq
 800562a:	6031      	streq	r1, [r6, #0]
 800562c:	5162      	str	r2, [r4, r5]
 800562e:	604b      	str	r3, [r1, #4]
 8005630:	4638      	mov	r0, r7
 8005632:	f104 060b 	add.w	r6, r4, #11
 8005636:	f000 fd83 	bl	8006140 <__malloc_unlock>
 800563a:	f026 0607 	bic.w	r6, r6, #7
 800563e:	1d23      	adds	r3, r4, #4
 8005640:	1af2      	subs	r2, r6, r3
 8005642:	d0b6      	beq.n	80055b2 <_malloc_r+0x22>
 8005644:	1b9b      	subs	r3, r3, r6
 8005646:	50a3      	str	r3, [r4, r2]
 8005648:	e7b3      	b.n	80055b2 <_malloc_r+0x22>
 800564a:	6862      	ldr	r2, [r4, #4]
 800564c:	42a3      	cmp	r3, r4
 800564e:	bf0c      	ite	eq
 8005650:	6032      	streq	r2, [r6, #0]
 8005652:	605a      	strne	r2, [r3, #4]
 8005654:	e7ec      	b.n	8005630 <_malloc_r+0xa0>
 8005656:	4623      	mov	r3, r4
 8005658:	6864      	ldr	r4, [r4, #4]
 800565a:	e7b2      	b.n	80055c2 <_malloc_r+0x32>
 800565c:	4634      	mov	r4, r6
 800565e:	6876      	ldr	r6, [r6, #4]
 8005660:	e7b9      	b.n	80055d6 <_malloc_r+0x46>
 8005662:	230c      	movs	r3, #12
 8005664:	603b      	str	r3, [r7, #0]
 8005666:	4638      	mov	r0, r7
 8005668:	f000 fd6a 	bl	8006140 <__malloc_unlock>
 800566c:	e7a1      	b.n	80055b2 <_malloc_r+0x22>
 800566e:	6025      	str	r5, [r4, #0]
 8005670:	e7de      	b.n	8005630 <_malloc_r+0xa0>
 8005672:	bf00      	nop
 8005674:	200041bc 	.word	0x200041bc

08005678 <__sfputc_r>:
 8005678:	6893      	ldr	r3, [r2, #8]
 800567a:	3b01      	subs	r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	b410      	push	{r4}
 8005680:	6093      	str	r3, [r2, #8]
 8005682:	da08      	bge.n	8005696 <__sfputc_r+0x1e>
 8005684:	6994      	ldr	r4, [r2, #24]
 8005686:	42a3      	cmp	r3, r4
 8005688:	db01      	blt.n	800568e <__sfputc_r+0x16>
 800568a:	290a      	cmp	r1, #10
 800568c:	d103      	bne.n	8005696 <__sfputc_r+0x1e>
 800568e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005692:	f000 bb33 	b.w	8005cfc <__swbuf_r>
 8005696:	6813      	ldr	r3, [r2, #0]
 8005698:	1c58      	adds	r0, r3, #1
 800569a:	6010      	str	r0, [r2, #0]
 800569c:	7019      	strb	r1, [r3, #0]
 800569e:	4608      	mov	r0, r1
 80056a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <__sfputs_r>:
 80056a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a8:	4606      	mov	r6, r0
 80056aa:	460f      	mov	r7, r1
 80056ac:	4614      	mov	r4, r2
 80056ae:	18d5      	adds	r5, r2, r3
 80056b0:	42ac      	cmp	r4, r5
 80056b2:	d101      	bne.n	80056b8 <__sfputs_r+0x12>
 80056b4:	2000      	movs	r0, #0
 80056b6:	e007      	b.n	80056c8 <__sfputs_r+0x22>
 80056b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056bc:	463a      	mov	r2, r7
 80056be:	4630      	mov	r0, r6
 80056c0:	f7ff ffda 	bl	8005678 <__sfputc_r>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d1f3      	bne.n	80056b0 <__sfputs_r+0xa>
 80056c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056cc <_vfiprintf_r>:
 80056cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d0:	460d      	mov	r5, r1
 80056d2:	b09d      	sub	sp, #116	; 0x74
 80056d4:	4614      	mov	r4, r2
 80056d6:	4698      	mov	r8, r3
 80056d8:	4606      	mov	r6, r0
 80056da:	b118      	cbz	r0, 80056e4 <_vfiprintf_r+0x18>
 80056dc:	6983      	ldr	r3, [r0, #24]
 80056de:	b90b      	cbnz	r3, 80056e4 <_vfiprintf_r+0x18>
 80056e0:	f7ff fe96 	bl	8005410 <__sinit>
 80056e4:	4b89      	ldr	r3, [pc, #548]	; (800590c <_vfiprintf_r+0x240>)
 80056e6:	429d      	cmp	r5, r3
 80056e8:	d11b      	bne.n	8005722 <_vfiprintf_r+0x56>
 80056ea:	6875      	ldr	r5, [r6, #4]
 80056ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056ee:	07d9      	lsls	r1, r3, #31
 80056f0:	d405      	bmi.n	80056fe <_vfiprintf_r+0x32>
 80056f2:	89ab      	ldrh	r3, [r5, #12]
 80056f4:	059a      	lsls	r2, r3, #22
 80056f6:	d402      	bmi.n	80056fe <_vfiprintf_r+0x32>
 80056f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056fa:	f7ff ff27 	bl	800554c <__retarget_lock_acquire_recursive>
 80056fe:	89ab      	ldrh	r3, [r5, #12]
 8005700:	071b      	lsls	r3, r3, #28
 8005702:	d501      	bpl.n	8005708 <_vfiprintf_r+0x3c>
 8005704:	692b      	ldr	r3, [r5, #16]
 8005706:	b9eb      	cbnz	r3, 8005744 <_vfiprintf_r+0x78>
 8005708:	4629      	mov	r1, r5
 800570a:	4630      	mov	r0, r6
 800570c:	f000 fb5a 	bl	8005dc4 <__swsetup_r>
 8005710:	b1c0      	cbz	r0, 8005744 <_vfiprintf_r+0x78>
 8005712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005714:	07dc      	lsls	r4, r3, #31
 8005716:	d50e      	bpl.n	8005736 <_vfiprintf_r+0x6a>
 8005718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800571c:	b01d      	add	sp, #116	; 0x74
 800571e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005722:	4b7b      	ldr	r3, [pc, #492]	; (8005910 <_vfiprintf_r+0x244>)
 8005724:	429d      	cmp	r5, r3
 8005726:	d101      	bne.n	800572c <_vfiprintf_r+0x60>
 8005728:	68b5      	ldr	r5, [r6, #8]
 800572a:	e7df      	b.n	80056ec <_vfiprintf_r+0x20>
 800572c:	4b79      	ldr	r3, [pc, #484]	; (8005914 <_vfiprintf_r+0x248>)
 800572e:	429d      	cmp	r5, r3
 8005730:	bf08      	it	eq
 8005732:	68f5      	ldreq	r5, [r6, #12]
 8005734:	e7da      	b.n	80056ec <_vfiprintf_r+0x20>
 8005736:	89ab      	ldrh	r3, [r5, #12]
 8005738:	0598      	lsls	r0, r3, #22
 800573a:	d4ed      	bmi.n	8005718 <_vfiprintf_r+0x4c>
 800573c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800573e:	f7ff ff06 	bl	800554e <__retarget_lock_release_recursive>
 8005742:	e7e9      	b.n	8005718 <_vfiprintf_r+0x4c>
 8005744:	2300      	movs	r3, #0
 8005746:	9309      	str	r3, [sp, #36]	; 0x24
 8005748:	2320      	movs	r3, #32
 800574a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800574e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005752:	2330      	movs	r3, #48	; 0x30
 8005754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005918 <_vfiprintf_r+0x24c>
 8005758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800575c:	f04f 0901 	mov.w	r9, #1
 8005760:	4623      	mov	r3, r4
 8005762:	469a      	mov	sl, r3
 8005764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005768:	b10a      	cbz	r2, 800576e <_vfiprintf_r+0xa2>
 800576a:	2a25      	cmp	r2, #37	; 0x25
 800576c:	d1f9      	bne.n	8005762 <_vfiprintf_r+0x96>
 800576e:	ebba 0b04 	subs.w	fp, sl, r4
 8005772:	d00b      	beq.n	800578c <_vfiprintf_r+0xc0>
 8005774:	465b      	mov	r3, fp
 8005776:	4622      	mov	r2, r4
 8005778:	4629      	mov	r1, r5
 800577a:	4630      	mov	r0, r6
 800577c:	f7ff ff93 	bl	80056a6 <__sfputs_r>
 8005780:	3001      	adds	r0, #1
 8005782:	f000 80aa 	beq.w	80058da <_vfiprintf_r+0x20e>
 8005786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005788:	445a      	add	r2, fp
 800578a:	9209      	str	r2, [sp, #36]	; 0x24
 800578c:	f89a 3000 	ldrb.w	r3, [sl]
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80a2 	beq.w	80058da <_vfiprintf_r+0x20e>
 8005796:	2300      	movs	r3, #0
 8005798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800579c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057a0:	f10a 0a01 	add.w	sl, sl, #1
 80057a4:	9304      	str	r3, [sp, #16]
 80057a6:	9307      	str	r3, [sp, #28]
 80057a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057ac:	931a      	str	r3, [sp, #104]	; 0x68
 80057ae:	4654      	mov	r4, sl
 80057b0:	2205      	movs	r2, #5
 80057b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b6:	4858      	ldr	r0, [pc, #352]	; (8005918 <_vfiprintf_r+0x24c>)
 80057b8:	f7fa fd1a 	bl	80001f0 <memchr>
 80057bc:	9a04      	ldr	r2, [sp, #16]
 80057be:	b9d8      	cbnz	r0, 80057f8 <_vfiprintf_r+0x12c>
 80057c0:	06d1      	lsls	r1, r2, #27
 80057c2:	bf44      	itt	mi
 80057c4:	2320      	movmi	r3, #32
 80057c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057ca:	0713      	lsls	r3, r2, #28
 80057cc:	bf44      	itt	mi
 80057ce:	232b      	movmi	r3, #43	; 0x2b
 80057d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057d4:	f89a 3000 	ldrb.w	r3, [sl]
 80057d8:	2b2a      	cmp	r3, #42	; 0x2a
 80057da:	d015      	beq.n	8005808 <_vfiprintf_r+0x13c>
 80057dc:	9a07      	ldr	r2, [sp, #28]
 80057de:	4654      	mov	r4, sl
 80057e0:	2000      	movs	r0, #0
 80057e2:	f04f 0c0a 	mov.w	ip, #10
 80057e6:	4621      	mov	r1, r4
 80057e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ec:	3b30      	subs	r3, #48	; 0x30
 80057ee:	2b09      	cmp	r3, #9
 80057f0:	d94e      	bls.n	8005890 <_vfiprintf_r+0x1c4>
 80057f2:	b1b0      	cbz	r0, 8005822 <_vfiprintf_r+0x156>
 80057f4:	9207      	str	r2, [sp, #28]
 80057f6:	e014      	b.n	8005822 <_vfiprintf_r+0x156>
 80057f8:	eba0 0308 	sub.w	r3, r0, r8
 80057fc:	fa09 f303 	lsl.w	r3, r9, r3
 8005800:	4313      	orrs	r3, r2
 8005802:	9304      	str	r3, [sp, #16]
 8005804:	46a2      	mov	sl, r4
 8005806:	e7d2      	b.n	80057ae <_vfiprintf_r+0xe2>
 8005808:	9b03      	ldr	r3, [sp, #12]
 800580a:	1d19      	adds	r1, r3, #4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	9103      	str	r1, [sp, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	bfbb      	ittet	lt
 8005814:	425b      	neglt	r3, r3
 8005816:	f042 0202 	orrlt.w	r2, r2, #2
 800581a:	9307      	strge	r3, [sp, #28]
 800581c:	9307      	strlt	r3, [sp, #28]
 800581e:	bfb8      	it	lt
 8005820:	9204      	strlt	r2, [sp, #16]
 8005822:	7823      	ldrb	r3, [r4, #0]
 8005824:	2b2e      	cmp	r3, #46	; 0x2e
 8005826:	d10c      	bne.n	8005842 <_vfiprintf_r+0x176>
 8005828:	7863      	ldrb	r3, [r4, #1]
 800582a:	2b2a      	cmp	r3, #42	; 0x2a
 800582c:	d135      	bne.n	800589a <_vfiprintf_r+0x1ce>
 800582e:	9b03      	ldr	r3, [sp, #12]
 8005830:	1d1a      	adds	r2, r3, #4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	9203      	str	r2, [sp, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	bfb8      	it	lt
 800583a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800583e:	3402      	adds	r4, #2
 8005840:	9305      	str	r3, [sp, #20]
 8005842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005928 <_vfiprintf_r+0x25c>
 8005846:	7821      	ldrb	r1, [r4, #0]
 8005848:	2203      	movs	r2, #3
 800584a:	4650      	mov	r0, sl
 800584c:	f7fa fcd0 	bl	80001f0 <memchr>
 8005850:	b140      	cbz	r0, 8005864 <_vfiprintf_r+0x198>
 8005852:	2340      	movs	r3, #64	; 0x40
 8005854:	eba0 000a 	sub.w	r0, r0, sl
 8005858:	fa03 f000 	lsl.w	r0, r3, r0
 800585c:	9b04      	ldr	r3, [sp, #16]
 800585e:	4303      	orrs	r3, r0
 8005860:	3401      	adds	r4, #1
 8005862:	9304      	str	r3, [sp, #16]
 8005864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005868:	482c      	ldr	r0, [pc, #176]	; (800591c <_vfiprintf_r+0x250>)
 800586a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800586e:	2206      	movs	r2, #6
 8005870:	f7fa fcbe 	bl	80001f0 <memchr>
 8005874:	2800      	cmp	r0, #0
 8005876:	d03f      	beq.n	80058f8 <_vfiprintf_r+0x22c>
 8005878:	4b29      	ldr	r3, [pc, #164]	; (8005920 <_vfiprintf_r+0x254>)
 800587a:	bb1b      	cbnz	r3, 80058c4 <_vfiprintf_r+0x1f8>
 800587c:	9b03      	ldr	r3, [sp, #12]
 800587e:	3307      	adds	r3, #7
 8005880:	f023 0307 	bic.w	r3, r3, #7
 8005884:	3308      	adds	r3, #8
 8005886:	9303      	str	r3, [sp, #12]
 8005888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588a:	443b      	add	r3, r7
 800588c:	9309      	str	r3, [sp, #36]	; 0x24
 800588e:	e767      	b.n	8005760 <_vfiprintf_r+0x94>
 8005890:	fb0c 3202 	mla	r2, ip, r2, r3
 8005894:	460c      	mov	r4, r1
 8005896:	2001      	movs	r0, #1
 8005898:	e7a5      	b.n	80057e6 <_vfiprintf_r+0x11a>
 800589a:	2300      	movs	r3, #0
 800589c:	3401      	adds	r4, #1
 800589e:	9305      	str	r3, [sp, #20]
 80058a0:	4619      	mov	r1, r3
 80058a2:	f04f 0c0a 	mov.w	ip, #10
 80058a6:	4620      	mov	r0, r4
 80058a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ac:	3a30      	subs	r2, #48	; 0x30
 80058ae:	2a09      	cmp	r2, #9
 80058b0:	d903      	bls.n	80058ba <_vfiprintf_r+0x1ee>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0c5      	beq.n	8005842 <_vfiprintf_r+0x176>
 80058b6:	9105      	str	r1, [sp, #20]
 80058b8:	e7c3      	b.n	8005842 <_vfiprintf_r+0x176>
 80058ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80058be:	4604      	mov	r4, r0
 80058c0:	2301      	movs	r3, #1
 80058c2:	e7f0      	b.n	80058a6 <_vfiprintf_r+0x1da>
 80058c4:	ab03      	add	r3, sp, #12
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	462a      	mov	r2, r5
 80058ca:	4b16      	ldr	r3, [pc, #88]	; (8005924 <_vfiprintf_r+0x258>)
 80058cc:	a904      	add	r1, sp, #16
 80058ce:	4630      	mov	r0, r6
 80058d0:	f3af 8000 	nop.w
 80058d4:	4607      	mov	r7, r0
 80058d6:	1c78      	adds	r0, r7, #1
 80058d8:	d1d6      	bne.n	8005888 <_vfiprintf_r+0x1bc>
 80058da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058dc:	07d9      	lsls	r1, r3, #31
 80058de:	d405      	bmi.n	80058ec <_vfiprintf_r+0x220>
 80058e0:	89ab      	ldrh	r3, [r5, #12]
 80058e2:	059a      	lsls	r2, r3, #22
 80058e4:	d402      	bmi.n	80058ec <_vfiprintf_r+0x220>
 80058e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058e8:	f7ff fe31 	bl	800554e <__retarget_lock_release_recursive>
 80058ec:	89ab      	ldrh	r3, [r5, #12]
 80058ee:	065b      	lsls	r3, r3, #25
 80058f0:	f53f af12 	bmi.w	8005718 <_vfiprintf_r+0x4c>
 80058f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058f6:	e711      	b.n	800571c <_vfiprintf_r+0x50>
 80058f8:	ab03      	add	r3, sp, #12
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	462a      	mov	r2, r5
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <_vfiprintf_r+0x258>)
 8005900:	a904      	add	r1, sp, #16
 8005902:	4630      	mov	r0, r6
 8005904:	f000 f880 	bl	8005a08 <_printf_i>
 8005908:	e7e4      	b.n	80058d4 <_vfiprintf_r+0x208>
 800590a:	bf00      	nop
 800590c:	080063b8 	.word	0x080063b8
 8005910:	080063d8 	.word	0x080063d8
 8005914:	08006398 	.word	0x08006398
 8005918:	080063f8 	.word	0x080063f8
 800591c:	08006402 	.word	0x08006402
 8005920:	00000000 	.word	0x00000000
 8005924:	080056a7 	.word	0x080056a7
 8005928:	080063fe 	.word	0x080063fe

0800592c <_printf_common>:
 800592c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005930:	4616      	mov	r6, r2
 8005932:	4699      	mov	r9, r3
 8005934:	688a      	ldr	r2, [r1, #8]
 8005936:	690b      	ldr	r3, [r1, #16]
 8005938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800593c:	4293      	cmp	r3, r2
 800593e:	bfb8      	it	lt
 8005940:	4613      	movlt	r3, r2
 8005942:	6033      	str	r3, [r6, #0]
 8005944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005948:	4607      	mov	r7, r0
 800594a:	460c      	mov	r4, r1
 800594c:	b10a      	cbz	r2, 8005952 <_printf_common+0x26>
 800594e:	3301      	adds	r3, #1
 8005950:	6033      	str	r3, [r6, #0]
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	0699      	lsls	r1, r3, #26
 8005956:	bf42      	ittt	mi
 8005958:	6833      	ldrmi	r3, [r6, #0]
 800595a:	3302      	addmi	r3, #2
 800595c:	6033      	strmi	r3, [r6, #0]
 800595e:	6825      	ldr	r5, [r4, #0]
 8005960:	f015 0506 	ands.w	r5, r5, #6
 8005964:	d106      	bne.n	8005974 <_printf_common+0x48>
 8005966:	f104 0a19 	add.w	sl, r4, #25
 800596a:	68e3      	ldr	r3, [r4, #12]
 800596c:	6832      	ldr	r2, [r6, #0]
 800596e:	1a9b      	subs	r3, r3, r2
 8005970:	42ab      	cmp	r3, r5
 8005972:	dc26      	bgt.n	80059c2 <_printf_common+0x96>
 8005974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005978:	1e13      	subs	r3, r2, #0
 800597a:	6822      	ldr	r2, [r4, #0]
 800597c:	bf18      	it	ne
 800597e:	2301      	movne	r3, #1
 8005980:	0692      	lsls	r2, r2, #26
 8005982:	d42b      	bmi.n	80059dc <_printf_common+0xb0>
 8005984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005988:	4649      	mov	r1, r9
 800598a:	4638      	mov	r0, r7
 800598c:	47c0      	blx	r8
 800598e:	3001      	adds	r0, #1
 8005990:	d01e      	beq.n	80059d0 <_printf_common+0xa4>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	68e5      	ldr	r5, [r4, #12]
 8005996:	6832      	ldr	r2, [r6, #0]
 8005998:	f003 0306 	and.w	r3, r3, #6
 800599c:	2b04      	cmp	r3, #4
 800599e:	bf08      	it	eq
 80059a0:	1aad      	subeq	r5, r5, r2
 80059a2:	68a3      	ldr	r3, [r4, #8]
 80059a4:	6922      	ldr	r2, [r4, #16]
 80059a6:	bf0c      	ite	eq
 80059a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059ac:	2500      	movne	r5, #0
 80059ae:	4293      	cmp	r3, r2
 80059b0:	bfc4      	itt	gt
 80059b2:	1a9b      	subgt	r3, r3, r2
 80059b4:	18ed      	addgt	r5, r5, r3
 80059b6:	2600      	movs	r6, #0
 80059b8:	341a      	adds	r4, #26
 80059ba:	42b5      	cmp	r5, r6
 80059bc:	d11a      	bne.n	80059f4 <_printf_common+0xc8>
 80059be:	2000      	movs	r0, #0
 80059c0:	e008      	b.n	80059d4 <_printf_common+0xa8>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4652      	mov	r2, sl
 80059c6:	4649      	mov	r1, r9
 80059c8:	4638      	mov	r0, r7
 80059ca:	47c0      	blx	r8
 80059cc:	3001      	adds	r0, #1
 80059ce:	d103      	bne.n	80059d8 <_printf_common+0xac>
 80059d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d8:	3501      	adds	r5, #1
 80059da:	e7c6      	b.n	800596a <_printf_common+0x3e>
 80059dc:	18e1      	adds	r1, r4, r3
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	2030      	movs	r0, #48	; 0x30
 80059e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059e6:	4422      	add	r2, r4
 80059e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059f0:	3302      	adds	r3, #2
 80059f2:	e7c7      	b.n	8005984 <_printf_common+0x58>
 80059f4:	2301      	movs	r3, #1
 80059f6:	4622      	mov	r2, r4
 80059f8:	4649      	mov	r1, r9
 80059fa:	4638      	mov	r0, r7
 80059fc:	47c0      	blx	r8
 80059fe:	3001      	adds	r0, #1
 8005a00:	d0e6      	beq.n	80059d0 <_printf_common+0xa4>
 8005a02:	3601      	adds	r6, #1
 8005a04:	e7d9      	b.n	80059ba <_printf_common+0x8e>
	...

08005a08 <_printf_i>:
 8005a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a0c:	7e0f      	ldrb	r7, [r1, #24]
 8005a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a10:	2f78      	cmp	r7, #120	; 0x78
 8005a12:	4691      	mov	r9, r2
 8005a14:	4680      	mov	r8, r0
 8005a16:	460c      	mov	r4, r1
 8005a18:	469a      	mov	sl, r3
 8005a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a1e:	d807      	bhi.n	8005a30 <_printf_i+0x28>
 8005a20:	2f62      	cmp	r7, #98	; 0x62
 8005a22:	d80a      	bhi.n	8005a3a <_printf_i+0x32>
 8005a24:	2f00      	cmp	r7, #0
 8005a26:	f000 80d8 	beq.w	8005bda <_printf_i+0x1d2>
 8005a2a:	2f58      	cmp	r7, #88	; 0x58
 8005a2c:	f000 80a3 	beq.w	8005b76 <_printf_i+0x16e>
 8005a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a38:	e03a      	b.n	8005ab0 <_printf_i+0xa8>
 8005a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a3e:	2b15      	cmp	r3, #21
 8005a40:	d8f6      	bhi.n	8005a30 <_printf_i+0x28>
 8005a42:	a101      	add	r1, pc, #4	; (adr r1, 8005a48 <_printf_i+0x40>)
 8005a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a48:	08005aa1 	.word	0x08005aa1
 8005a4c:	08005ab5 	.word	0x08005ab5
 8005a50:	08005a31 	.word	0x08005a31
 8005a54:	08005a31 	.word	0x08005a31
 8005a58:	08005a31 	.word	0x08005a31
 8005a5c:	08005a31 	.word	0x08005a31
 8005a60:	08005ab5 	.word	0x08005ab5
 8005a64:	08005a31 	.word	0x08005a31
 8005a68:	08005a31 	.word	0x08005a31
 8005a6c:	08005a31 	.word	0x08005a31
 8005a70:	08005a31 	.word	0x08005a31
 8005a74:	08005bc1 	.word	0x08005bc1
 8005a78:	08005ae5 	.word	0x08005ae5
 8005a7c:	08005ba3 	.word	0x08005ba3
 8005a80:	08005a31 	.word	0x08005a31
 8005a84:	08005a31 	.word	0x08005a31
 8005a88:	08005be3 	.word	0x08005be3
 8005a8c:	08005a31 	.word	0x08005a31
 8005a90:	08005ae5 	.word	0x08005ae5
 8005a94:	08005a31 	.word	0x08005a31
 8005a98:	08005a31 	.word	0x08005a31
 8005a9c:	08005bab 	.word	0x08005bab
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	1d1a      	adds	r2, r3, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	602a      	str	r2, [r5, #0]
 8005aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0a3      	b.n	8005bfc <_printf_i+0x1f4>
 8005ab4:	6820      	ldr	r0, [r4, #0]
 8005ab6:	6829      	ldr	r1, [r5, #0]
 8005ab8:	0606      	lsls	r6, r0, #24
 8005aba:	f101 0304 	add.w	r3, r1, #4
 8005abe:	d50a      	bpl.n	8005ad6 <_printf_i+0xce>
 8005ac0:	680e      	ldr	r6, [r1, #0]
 8005ac2:	602b      	str	r3, [r5, #0]
 8005ac4:	2e00      	cmp	r6, #0
 8005ac6:	da03      	bge.n	8005ad0 <_printf_i+0xc8>
 8005ac8:	232d      	movs	r3, #45	; 0x2d
 8005aca:	4276      	negs	r6, r6
 8005acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad0:	485e      	ldr	r0, [pc, #376]	; (8005c4c <_printf_i+0x244>)
 8005ad2:	230a      	movs	r3, #10
 8005ad4:	e019      	b.n	8005b0a <_printf_i+0x102>
 8005ad6:	680e      	ldr	r6, [r1, #0]
 8005ad8:	602b      	str	r3, [r5, #0]
 8005ada:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ade:	bf18      	it	ne
 8005ae0:	b236      	sxthne	r6, r6
 8005ae2:	e7ef      	b.n	8005ac4 <_printf_i+0xbc>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	6820      	ldr	r0, [r4, #0]
 8005ae8:	1d19      	adds	r1, r3, #4
 8005aea:	6029      	str	r1, [r5, #0]
 8005aec:	0601      	lsls	r1, r0, #24
 8005aee:	d501      	bpl.n	8005af4 <_printf_i+0xec>
 8005af0:	681e      	ldr	r6, [r3, #0]
 8005af2:	e002      	b.n	8005afa <_printf_i+0xf2>
 8005af4:	0646      	lsls	r6, r0, #25
 8005af6:	d5fb      	bpl.n	8005af0 <_printf_i+0xe8>
 8005af8:	881e      	ldrh	r6, [r3, #0]
 8005afa:	4854      	ldr	r0, [pc, #336]	; (8005c4c <_printf_i+0x244>)
 8005afc:	2f6f      	cmp	r7, #111	; 0x6f
 8005afe:	bf0c      	ite	eq
 8005b00:	2308      	moveq	r3, #8
 8005b02:	230a      	movne	r3, #10
 8005b04:	2100      	movs	r1, #0
 8005b06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b0a:	6865      	ldr	r5, [r4, #4]
 8005b0c:	60a5      	str	r5, [r4, #8]
 8005b0e:	2d00      	cmp	r5, #0
 8005b10:	bfa2      	ittt	ge
 8005b12:	6821      	ldrge	r1, [r4, #0]
 8005b14:	f021 0104 	bicge.w	r1, r1, #4
 8005b18:	6021      	strge	r1, [r4, #0]
 8005b1a:	b90e      	cbnz	r6, 8005b20 <_printf_i+0x118>
 8005b1c:	2d00      	cmp	r5, #0
 8005b1e:	d04d      	beq.n	8005bbc <_printf_i+0x1b4>
 8005b20:	4615      	mov	r5, r2
 8005b22:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b26:	fb03 6711 	mls	r7, r3, r1, r6
 8005b2a:	5dc7      	ldrb	r7, [r0, r7]
 8005b2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b30:	4637      	mov	r7, r6
 8005b32:	42bb      	cmp	r3, r7
 8005b34:	460e      	mov	r6, r1
 8005b36:	d9f4      	bls.n	8005b22 <_printf_i+0x11a>
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d10b      	bne.n	8005b54 <_printf_i+0x14c>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	07de      	lsls	r6, r3, #31
 8005b40:	d508      	bpl.n	8005b54 <_printf_i+0x14c>
 8005b42:	6923      	ldr	r3, [r4, #16]
 8005b44:	6861      	ldr	r1, [r4, #4]
 8005b46:	4299      	cmp	r1, r3
 8005b48:	bfde      	ittt	le
 8005b4a:	2330      	movle	r3, #48	; 0x30
 8005b4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b54:	1b52      	subs	r2, r2, r5
 8005b56:	6122      	str	r2, [r4, #16]
 8005b58:	f8cd a000 	str.w	sl, [sp]
 8005b5c:	464b      	mov	r3, r9
 8005b5e:	aa03      	add	r2, sp, #12
 8005b60:	4621      	mov	r1, r4
 8005b62:	4640      	mov	r0, r8
 8005b64:	f7ff fee2 	bl	800592c <_printf_common>
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d14c      	bne.n	8005c06 <_printf_i+0x1fe>
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b70:	b004      	add	sp, #16
 8005b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b76:	4835      	ldr	r0, [pc, #212]	; (8005c4c <_printf_i+0x244>)
 8005b78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b7c:	6829      	ldr	r1, [r5, #0]
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b84:	6029      	str	r1, [r5, #0]
 8005b86:	061d      	lsls	r5, r3, #24
 8005b88:	d514      	bpl.n	8005bb4 <_printf_i+0x1ac>
 8005b8a:	07df      	lsls	r7, r3, #31
 8005b8c:	bf44      	itt	mi
 8005b8e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b92:	6023      	strmi	r3, [r4, #0]
 8005b94:	b91e      	cbnz	r6, 8005b9e <_printf_i+0x196>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	f023 0320 	bic.w	r3, r3, #32
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	2310      	movs	r3, #16
 8005ba0:	e7b0      	b.n	8005b04 <_printf_i+0xfc>
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	f043 0320 	orr.w	r3, r3, #32
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	2378      	movs	r3, #120	; 0x78
 8005bac:	4828      	ldr	r0, [pc, #160]	; (8005c50 <_printf_i+0x248>)
 8005bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bb2:	e7e3      	b.n	8005b7c <_printf_i+0x174>
 8005bb4:	0659      	lsls	r1, r3, #25
 8005bb6:	bf48      	it	mi
 8005bb8:	b2b6      	uxthmi	r6, r6
 8005bba:	e7e6      	b.n	8005b8a <_printf_i+0x182>
 8005bbc:	4615      	mov	r5, r2
 8005bbe:	e7bb      	b.n	8005b38 <_printf_i+0x130>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	6826      	ldr	r6, [r4, #0]
 8005bc4:	6961      	ldr	r1, [r4, #20]
 8005bc6:	1d18      	adds	r0, r3, #4
 8005bc8:	6028      	str	r0, [r5, #0]
 8005bca:	0635      	lsls	r5, r6, #24
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	d501      	bpl.n	8005bd4 <_printf_i+0x1cc>
 8005bd0:	6019      	str	r1, [r3, #0]
 8005bd2:	e002      	b.n	8005bda <_printf_i+0x1d2>
 8005bd4:	0670      	lsls	r0, r6, #25
 8005bd6:	d5fb      	bpl.n	8005bd0 <_printf_i+0x1c8>
 8005bd8:	8019      	strh	r1, [r3, #0]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6123      	str	r3, [r4, #16]
 8005bde:	4615      	mov	r5, r2
 8005be0:	e7ba      	b.n	8005b58 <_printf_i+0x150>
 8005be2:	682b      	ldr	r3, [r5, #0]
 8005be4:	1d1a      	adds	r2, r3, #4
 8005be6:	602a      	str	r2, [r5, #0]
 8005be8:	681d      	ldr	r5, [r3, #0]
 8005bea:	6862      	ldr	r2, [r4, #4]
 8005bec:	2100      	movs	r1, #0
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f7fa fafe 	bl	80001f0 <memchr>
 8005bf4:	b108      	cbz	r0, 8005bfa <_printf_i+0x1f2>
 8005bf6:	1b40      	subs	r0, r0, r5
 8005bf8:	6060      	str	r0, [r4, #4]
 8005bfa:	6863      	ldr	r3, [r4, #4]
 8005bfc:	6123      	str	r3, [r4, #16]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c04:	e7a8      	b.n	8005b58 <_printf_i+0x150>
 8005c06:	6923      	ldr	r3, [r4, #16]
 8005c08:	462a      	mov	r2, r5
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	4640      	mov	r0, r8
 8005c0e:	47d0      	blx	sl
 8005c10:	3001      	adds	r0, #1
 8005c12:	d0ab      	beq.n	8005b6c <_printf_i+0x164>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	079b      	lsls	r3, r3, #30
 8005c18:	d413      	bmi.n	8005c42 <_printf_i+0x23a>
 8005c1a:	68e0      	ldr	r0, [r4, #12]
 8005c1c:	9b03      	ldr	r3, [sp, #12]
 8005c1e:	4298      	cmp	r0, r3
 8005c20:	bfb8      	it	lt
 8005c22:	4618      	movlt	r0, r3
 8005c24:	e7a4      	b.n	8005b70 <_printf_i+0x168>
 8005c26:	2301      	movs	r3, #1
 8005c28:	4632      	mov	r2, r6
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	47d0      	blx	sl
 8005c30:	3001      	adds	r0, #1
 8005c32:	d09b      	beq.n	8005b6c <_printf_i+0x164>
 8005c34:	3501      	adds	r5, #1
 8005c36:	68e3      	ldr	r3, [r4, #12]
 8005c38:	9903      	ldr	r1, [sp, #12]
 8005c3a:	1a5b      	subs	r3, r3, r1
 8005c3c:	42ab      	cmp	r3, r5
 8005c3e:	dcf2      	bgt.n	8005c26 <_printf_i+0x21e>
 8005c40:	e7eb      	b.n	8005c1a <_printf_i+0x212>
 8005c42:	2500      	movs	r5, #0
 8005c44:	f104 0619 	add.w	r6, r4, #25
 8005c48:	e7f5      	b.n	8005c36 <_printf_i+0x22e>
 8005c4a:	bf00      	nop
 8005c4c:	08006409 	.word	0x08006409
 8005c50:	0800641a 	.word	0x0800641a

08005c54 <_sbrk_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4d06      	ldr	r5, [pc, #24]	; (8005c70 <_sbrk_r+0x1c>)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	602b      	str	r3, [r5, #0]
 8005c60:	f7fb fa42 	bl	80010e8 <_sbrk>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_sbrk_r+0x1a>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_sbrk_r+0x1a>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	200041c4 	.word	0x200041c4

08005c74 <__sread>:
 8005c74:	b510      	push	{r4, lr}
 8005c76:	460c      	mov	r4, r1
 8005c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7c:	f000 fab2 	bl	80061e4 <_read_r>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	bfab      	itete	ge
 8005c84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c86:	89a3      	ldrhlt	r3, [r4, #12]
 8005c88:	181b      	addge	r3, r3, r0
 8005c8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c8e:	bfac      	ite	ge
 8005c90:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c92:	81a3      	strhlt	r3, [r4, #12]
 8005c94:	bd10      	pop	{r4, pc}

08005c96 <__swrite>:
 8005c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9a:	461f      	mov	r7, r3
 8005c9c:	898b      	ldrh	r3, [r1, #12]
 8005c9e:	05db      	lsls	r3, r3, #23
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	4616      	mov	r6, r2
 8005ca6:	d505      	bpl.n	8005cb4 <__swrite+0x1e>
 8005ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cac:	2302      	movs	r3, #2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f000 f9c8 	bl	8006044 <_lseek_r>
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cbe:	81a3      	strh	r3, [r4, #12]
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cca:	f000 b869 	b.w	8005da0 <_write_r>

08005cce <__sseek>:
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd6:	f000 f9b5 	bl	8006044 <_lseek_r>
 8005cda:	1c43      	adds	r3, r0, #1
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	bf15      	itete	ne
 8005ce0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cea:	81a3      	strheq	r3, [r4, #12]
 8005cec:	bf18      	it	ne
 8005cee:	81a3      	strhne	r3, [r4, #12]
 8005cf0:	bd10      	pop	{r4, pc}

08005cf2 <__sclose>:
 8005cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf6:	f000 b8d3 	b.w	8005ea0 <_close_r>
	...

08005cfc <__swbuf_r>:
 8005cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfe:	460e      	mov	r6, r1
 8005d00:	4614      	mov	r4, r2
 8005d02:	4605      	mov	r5, r0
 8005d04:	b118      	cbz	r0, 8005d0e <__swbuf_r+0x12>
 8005d06:	6983      	ldr	r3, [r0, #24]
 8005d08:	b90b      	cbnz	r3, 8005d0e <__swbuf_r+0x12>
 8005d0a:	f7ff fb81 	bl	8005410 <__sinit>
 8005d0e:	4b21      	ldr	r3, [pc, #132]	; (8005d94 <__swbuf_r+0x98>)
 8005d10:	429c      	cmp	r4, r3
 8005d12:	d12b      	bne.n	8005d6c <__swbuf_r+0x70>
 8005d14:	686c      	ldr	r4, [r5, #4]
 8005d16:	69a3      	ldr	r3, [r4, #24]
 8005d18:	60a3      	str	r3, [r4, #8]
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	071a      	lsls	r2, r3, #28
 8005d1e:	d52f      	bpl.n	8005d80 <__swbuf_r+0x84>
 8005d20:	6923      	ldr	r3, [r4, #16]
 8005d22:	b36b      	cbz	r3, 8005d80 <__swbuf_r+0x84>
 8005d24:	6923      	ldr	r3, [r4, #16]
 8005d26:	6820      	ldr	r0, [r4, #0]
 8005d28:	1ac0      	subs	r0, r0, r3
 8005d2a:	6963      	ldr	r3, [r4, #20]
 8005d2c:	b2f6      	uxtb	r6, r6
 8005d2e:	4283      	cmp	r3, r0
 8005d30:	4637      	mov	r7, r6
 8005d32:	dc04      	bgt.n	8005d3e <__swbuf_r+0x42>
 8005d34:	4621      	mov	r1, r4
 8005d36:	4628      	mov	r0, r5
 8005d38:	f000 f948 	bl	8005fcc <_fflush_r>
 8005d3c:	bb30      	cbnz	r0, 8005d8c <__swbuf_r+0x90>
 8005d3e:	68a3      	ldr	r3, [r4, #8]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	60a3      	str	r3, [r4, #8]
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	6022      	str	r2, [r4, #0]
 8005d4a:	701e      	strb	r6, [r3, #0]
 8005d4c:	6963      	ldr	r3, [r4, #20]
 8005d4e:	3001      	adds	r0, #1
 8005d50:	4283      	cmp	r3, r0
 8005d52:	d004      	beq.n	8005d5e <__swbuf_r+0x62>
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	07db      	lsls	r3, r3, #31
 8005d58:	d506      	bpl.n	8005d68 <__swbuf_r+0x6c>
 8005d5a:	2e0a      	cmp	r6, #10
 8005d5c:	d104      	bne.n	8005d68 <__swbuf_r+0x6c>
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4628      	mov	r0, r5
 8005d62:	f000 f933 	bl	8005fcc <_fflush_r>
 8005d66:	b988      	cbnz	r0, 8005d8c <__swbuf_r+0x90>
 8005d68:	4638      	mov	r0, r7
 8005d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d6c:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <__swbuf_r+0x9c>)
 8005d6e:	429c      	cmp	r4, r3
 8005d70:	d101      	bne.n	8005d76 <__swbuf_r+0x7a>
 8005d72:	68ac      	ldr	r4, [r5, #8]
 8005d74:	e7cf      	b.n	8005d16 <__swbuf_r+0x1a>
 8005d76:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <__swbuf_r+0xa0>)
 8005d78:	429c      	cmp	r4, r3
 8005d7a:	bf08      	it	eq
 8005d7c:	68ec      	ldreq	r4, [r5, #12]
 8005d7e:	e7ca      	b.n	8005d16 <__swbuf_r+0x1a>
 8005d80:	4621      	mov	r1, r4
 8005d82:	4628      	mov	r0, r5
 8005d84:	f000 f81e 	bl	8005dc4 <__swsetup_r>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d0cb      	beq.n	8005d24 <__swbuf_r+0x28>
 8005d8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005d90:	e7ea      	b.n	8005d68 <__swbuf_r+0x6c>
 8005d92:	bf00      	nop
 8005d94:	080063b8 	.word	0x080063b8
 8005d98:	080063d8 	.word	0x080063d8
 8005d9c:	08006398 	.word	0x08006398

08005da0 <_write_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4d07      	ldr	r5, [pc, #28]	; (8005dc0 <_write_r+0x20>)
 8005da4:	4604      	mov	r4, r0
 8005da6:	4608      	mov	r0, r1
 8005da8:	4611      	mov	r1, r2
 8005daa:	2200      	movs	r2, #0
 8005dac:	602a      	str	r2, [r5, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f7fa fc0a 	bl	80005c8 <_write>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d102      	bne.n	8005dbe <_write_r+0x1e>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	b103      	cbz	r3, 8005dbe <_write_r+0x1e>
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
 8005dc0:	200041c4 	.word	0x200041c4

08005dc4 <__swsetup_r>:
 8005dc4:	4b32      	ldr	r3, [pc, #200]	; (8005e90 <__swsetup_r+0xcc>)
 8005dc6:	b570      	push	{r4, r5, r6, lr}
 8005dc8:	681d      	ldr	r5, [r3, #0]
 8005dca:	4606      	mov	r6, r0
 8005dcc:	460c      	mov	r4, r1
 8005dce:	b125      	cbz	r5, 8005dda <__swsetup_r+0x16>
 8005dd0:	69ab      	ldr	r3, [r5, #24]
 8005dd2:	b913      	cbnz	r3, 8005dda <__swsetup_r+0x16>
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	f7ff fb1b 	bl	8005410 <__sinit>
 8005dda:	4b2e      	ldr	r3, [pc, #184]	; (8005e94 <__swsetup_r+0xd0>)
 8005ddc:	429c      	cmp	r4, r3
 8005dde:	d10f      	bne.n	8005e00 <__swsetup_r+0x3c>
 8005de0:	686c      	ldr	r4, [r5, #4]
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005de8:	0719      	lsls	r1, r3, #28
 8005dea:	d42c      	bmi.n	8005e46 <__swsetup_r+0x82>
 8005dec:	06dd      	lsls	r5, r3, #27
 8005dee:	d411      	bmi.n	8005e14 <__swsetup_r+0x50>
 8005df0:	2309      	movs	r3, #9
 8005df2:	6033      	str	r3, [r6, #0]
 8005df4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005df8:	81a3      	strh	r3, [r4, #12]
 8005dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dfe:	e03e      	b.n	8005e7e <__swsetup_r+0xba>
 8005e00:	4b25      	ldr	r3, [pc, #148]	; (8005e98 <__swsetup_r+0xd4>)
 8005e02:	429c      	cmp	r4, r3
 8005e04:	d101      	bne.n	8005e0a <__swsetup_r+0x46>
 8005e06:	68ac      	ldr	r4, [r5, #8]
 8005e08:	e7eb      	b.n	8005de2 <__swsetup_r+0x1e>
 8005e0a:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <__swsetup_r+0xd8>)
 8005e0c:	429c      	cmp	r4, r3
 8005e0e:	bf08      	it	eq
 8005e10:	68ec      	ldreq	r4, [r5, #12]
 8005e12:	e7e6      	b.n	8005de2 <__swsetup_r+0x1e>
 8005e14:	0758      	lsls	r0, r3, #29
 8005e16:	d512      	bpl.n	8005e3e <__swsetup_r+0x7a>
 8005e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e1a:	b141      	cbz	r1, 8005e2e <__swsetup_r+0x6a>
 8005e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e20:	4299      	cmp	r1, r3
 8005e22:	d002      	beq.n	8005e2a <__swsetup_r+0x66>
 8005e24:	4630      	mov	r0, r6
 8005e26:	f000 f991 	bl	800614c <_free_r>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	6363      	str	r3, [r4, #52]	; 0x34
 8005e2e:	89a3      	ldrh	r3, [r4, #12]
 8005e30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e34:	81a3      	strh	r3, [r4, #12]
 8005e36:	2300      	movs	r3, #0
 8005e38:	6063      	str	r3, [r4, #4]
 8005e3a:	6923      	ldr	r3, [r4, #16]
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	f043 0308 	orr.w	r3, r3, #8
 8005e44:	81a3      	strh	r3, [r4, #12]
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	b94b      	cbnz	r3, 8005e5e <__swsetup_r+0x9a>
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e54:	d003      	beq.n	8005e5e <__swsetup_r+0x9a>
 8005e56:	4621      	mov	r1, r4
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f000 f92b 	bl	80060b4 <__smakebuf_r>
 8005e5e:	89a0      	ldrh	r0, [r4, #12]
 8005e60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e64:	f010 0301 	ands.w	r3, r0, #1
 8005e68:	d00a      	beq.n	8005e80 <__swsetup_r+0xbc>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60a3      	str	r3, [r4, #8]
 8005e6e:	6963      	ldr	r3, [r4, #20]
 8005e70:	425b      	negs	r3, r3
 8005e72:	61a3      	str	r3, [r4, #24]
 8005e74:	6923      	ldr	r3, [r4, #16]
 8005e76:	b943      	cbnz	r3, 8005e8a <__swsetup_r+0xc6>
 8005e78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e7c:	d1ba      	bne.n	8005df4 <__swsetup_r+0x30>
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	0781      	lsls	r1, r0, #30
 8005e82:	bf58      	it	pl
 8005e84:	6963      	ldrpl	r3, [r4, #20]
 8005e86:	60a3      	str	r3, [r4, #8]
 8005e88:	e7f4      	b.n	8005e74 <__swsetup_r+0xb0>
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	e7f7      	b.n	8005e7e <__swsetup_r+0xba>
 8005e8e:	bf00      	nop
 8005e90:	20000010 	.word	0x20000010
 8005e94:	080063b8 	.word	0x080063b8
 8005e98:	080063d8 	.word	0x080063d8
 8005e9c:	08006398 	.word	0x08006398

08005ea0 <_close_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4d06      	ldr	r5, [pc, #24]	; (8005ebc <_close_r+0x1c>)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	602b      	str	r3, [r5, #0]
 8005eac:	f7fb f8e7 	bl	800107e <_close>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_close_r+0x1a>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_close_r+0x1a>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	200041c4 	.word	0x200041c4

08005ec0 <__sflush_r>:
 8005ec0:	898a      	ldrh	r2, [r1, #12]
 8005ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec6:	4605      	mov	r5, r0
 8005ec8:	0710      	lsls	r0, r2, #28
 8005eca:	460c      	mov	r4, r1
 8005ecc:	d458      	bmi.n	8005f80 <__sflush_r+0xc0>
 8005ece:	684b      	ldr	r3, [r1, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dc05      	bgt.n	8005ee0 <__sflush_r+0x20>
 8005ed4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	dc02      	bgt.n	8005ee0 <__sflush_r+0x20>
 8005eda:	2000      	movs	r0, #0
 8005edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ee2:	2e00      	cmp	r6, #0
 8005ee4:	d0f9      	beq.n	8005eda <__sflush_r+0x1a>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005eec:	682f      	ldr	r7, [r5, #0]
 8005eee:	602b      	str	r3, [r5, #0]
 8005ef0:	d032      	beq.n	8005f58 <__sflush_r+0x98>
 8005ef2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	075a      	lsls	r2, r3, #29
 8005ef8:	d505      	bpl.n	8005f06 <__sflush_r+0x46>
 8005efa:	6863      	ldr	r3, [r4, #4]
 8005efc:	1ac0      	subs	r0, r0, r3
 8005efe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f00:	b10b      	cbz	r3, 8005f06 <__sflush_r+0x46>
 8005f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f04:	1ac0      	subs	r0, r0, r3
 8005f06:	2300      	movs	r3, #0
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f0c:	6a21      	ldr	r1, [r4, #32]
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b0      	blx	r6
 8005f12:	1c43      	adds	r3, r0, #1
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	d106      	bne.n	8005f26 <__sflush_r+0x66>
 8005f18:	6829      	ldr	r1, [r5, #0]
 8005f1a:	291d      	cmp	r1, #29
 8005f1c:	d82c      	bhi.n	8005f78 <__sflush_r+0xb8>
 8005f1e:	4a2a      	ldr	r2, [pc, #168]	; (8005fc8 <__sflush_r+0x108>)
 8005f20:	40ca      	lsrs	r2, r1
 8005f22:	07d6      	lsls	r6, r2, #31
 8005f24:	d528      	bpl.n	8005f78 <__sflush_r+0xb8>
 8005f26:	2200      	movs	r2, #0
 8005f28:	6062      	str	r2, [r4, #4]
 8005f2a:	04d9      	lsls	r1, r3, #19
 8005f2c:	6922      	ldr	r2, [r4, #16]
 8005f2e:	6022      	str	r2, [r4, #0]
 8005f30:	d504      	bpl.n	8005f3c <__sflush_r+0x7c>
 8005f32:	1c42      	adds	r2, r0, #1
 8005f34:	d101      	bne.n	8005f3a <__sflush_r+0x7a>
 8005f36:	682b      	ldr	r3, [r5, #0]
 8005f38:	b903      	cbnz	r3, 8005f3c <__sflush_r+0x7c>
 8005f3a:	6560      	str	r0, [r4, #84]	; 0x54
 8005f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f3e:	602f      	str	r7, [r5, #0]
 8005f40:	2900      	cmp	r1, #0
 8005f42:	d0ca      	beq.n	8005eda <__sflush_r+0x1a>
 8005f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f48:	4299      	cmp	r1, r3
 8005f4a:	d002      	beq.n	8005f52 <__sflush_r+0x92>
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f000 f8fd 	bl	800614c <_free_r>
 8005f52:	2000      	movs	r0, #0
 8005f54:	6360      	str	r0, [r4, #52]	; 0x34
 8005f56:	e7c1      	b.n	8005edc <__sflush_r+0x1c>
 8005f58:	6a21      	ldr	r1, [r4, #32]
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	47b0      	blx	r6
 8005f60:	1c41      	adds	r1, r0, #1
 8005f62:	d1c7      	bne.n	8005ef4 <__sflush_r+0x34>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0c4      	beq.n	8005ef4 <__sflush_r+0x34>
 8005f6a:	2b1d      	cmp	r3, #29
 8005f6c:	d001      	beq.n	8005f72 <__sflush_r+0xb2>
 8005f6e:	2b16      	cmp	r3, #22
 8005f70:	d101      	bne.n	8005f76 <__sflush_r+0xb6>
 8005f72:	602f      	str	r7, [r5, #0]
 8005f74:	e7b1      	b.n	8005eda <__sflush_r+0x1a>
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f7c:	81a3      	strh	r3, [r4, #12]
 8005f7e:	e7ad      	b.n	8005edc <__sflush_r+0x1c>
 8005f80:	690f      	ldr	r7, [r1, #16]
 8005f82:	2f00      	cmp	r7, #0
 8005f84:	d0a9      	beq.n	8005eda <__sflush_r+0x1a>
 8005f86:	0793      	lsls	r3, r2, #30
 8005f88:	680e      	ldr	r6, [r1, #0]
 8005f8a:	bf08      	it	eq
 8005f8c:	694b      	ldreq	r3, [r1, #20]
 8005f8e:	600f      	str	r7, [r1, #0]
 8005f90:	bf18      	it	ne
 8005f92:	2300      	movne	r3, #0
 8005f94:	eba6 0807 	sub.w	r8, r6, r7
 8005f98:	608b      	str	r3, [r1, #8]
 8005f9a:	f1b8 0f00 	cmp.w	r8, #0
 8005f9e:	dd9c      	ble.n	8005eda <__sflush_r+0x1a>
 8005fa0:	6a21      	ldr	r1, [r4, #32]
 8005fa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fa4:	4643      	mov	r3, r8
 8005fa6:	463a      	mov	r2, r7
 8005fa8:	4628      	mov	r0, r5
 8005faa:	47b0      	blx	r6
 8005fac:	2800      	cmp	r0, #0
 8005fae:	dc06      	bgt.n	8005fbe <__sflush_r+0xfe>
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fb6:	81a3      	strh	r3, [r4, #12]
 8005fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fbc:	e78e      	b.n	8005edc <__sflush_r+0x1c>
 8005fbe:	4407      	add	r7, r0
 8005fc0:	eba8 0800 	sub.w	r8, r8, r0
 8005fc4:	e7e9      	b.n	8005f9a <__sflush_r+0xda>
 8005fc6:	bf00      	nop
 8005fc8:	20400001 	.word	0x20400001

08005fcc <_fflush_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	690b      	ldr	r3, [r1, #16]
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	b913      	cbnz	r3, 8005fdc <_fflush_r+0x10>
 8005fd6:	2500      	movs	r5, #0
 8005fd8:	4628      	mov	r0, r5
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	b118      	cbz	r0, 8005fe6 <_fflush_r+0x1a>
 8005fde:	6983      	ldr	r3, [r0, #24]
 8005fe0:	b90b      	cbnz	r3, 8005fe6 <_fflush_r+0x1a>
 8005fe2:	f7ff fa15 	bl	8005410 <__sinit>
 8005fe6:	4b14      	ldr	r3, [pc, #80]	; (8006038 <_fflush_r+0x6c>)
 8005fe8:	429c      	cmp	r4, r3
 8005fea:	d11b      	bne.n	8006024 <_fflush_r+0x58>
 8005fec:	686c      	ldr	r4, [r5, #4]
 8005fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0ef      	beq.n	8005fd6 <_fflush_r+0xa>
 8005ff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ff8:	07d0      	lsls	r0, r2, #31
 8005ffa:	d404      	bmi.n	8006006 <_fflush_r+0x3a>
 8005ffc:	0599      	lsls	r1, r3, #22
 8005ffe:	d402      	bmi.n	8006006 <_fflush_r+0x3a>
 8006000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006002:	f7ff faa3 	bl	800554c <__retarget_lock_acquire_recursive>
 8006006:	4628      	mov	r0, r5
 8006008:	4621      	mov	r1, r4
 800600a:	f7ff ff59 	bl	8005ec0 <__sflush_r>
 800600e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006010:	07da      	lsls	r2, r3, #31
 8006012:	4605      	mov	r5, r0
 8006014:	d4e0      	bmi.n	8005fd8 <_fflush_r+0xc>
 8006016:	89a3      	ldrh	r3, [r4, #12]
 8006018:	059b      	lsls	r3, r3, #22
 800601a:	d4dd      	bmi.n	8005fd8 <_fflush_r+0xc>
 800601c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800601e:	f7ff fa96 	bl	800554e <__retarget_lock_release_recursive>
 8006022:	e7d9      	b.n	8005fd8 <_fflush_r+0xc>
 8006024:	4b05      	ldr	r3, [pc, #20]	; (800603c <_fflush_r+0x70>)
 8006026:	429c      	cmp	r4, r3
 8006028:	d101      	bne.n	800602e <_fflush_r+0x62>
 800602a:	68ac      	ldr	r4, [r5, #8]
 800602c:	e7df      	b.n	8005fee <_fflush_r+0x22>
 800602e:	4b04      	ldr	r3, [pc, #16]	; (8006040 <_fflush_r+0x74>)
 8006030:	429c      	cmp	r4, r3
 8006032:	bf08      	it	eq
 8006034:	68ec      	ldreq	r4, [r5, #12]
 8006036:	e7da      	b.n	8005fee <_fflush_r+0x22>
 8006038:	080063b8 	.word	0x080063b8
 800603c:	080063d8 	.word	0x080063d8
 8006040:	08006398 	.word	0x08006398

08006044 <_lseek_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4d07      	ldr	r5, [pc, #28]	; (8006064 <_lseek_r+0x20>)
 8006048:	4604      	mov	r4, r0
 800604a:	4608      	mov	r0, r1
 800604c:	4611      	mov	r1, r2
 800604e:	2200      	movs	r2, #0
 8006050:	602a      	str	r2, [r5, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	f7fb f83a 	bl	80010cc <_lseek>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d102      	bne.n	8006062 <_lseek_r+0x1e>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	b103      	cbz	r3, 8006062 <_lseek_r+0x1e>
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	bd38      	pop	{r3, r4, r5, pc}
 8006064:	200041c4 	.word	0x200041c4

08006068 <__swhatbuf_r>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	460e      	mov	r6, r1
 800606c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006070:	2900      	cmp	r1, #0
 8006072:	b096      	sub	sp, #88	; 0x58
 8006074:	4614      	mov	r4, r2
 8006076:	461d      	mov	r5, r3
 8006078:	da08      	bge.n	800608c <__swhatbuf_r+0x24>
 800607a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	602a      	str	r2, [r5, #0]
 8006082:	061a      	lsls	r2, r3, #24
 8006084:	d410      	bmi.n	80060a8 <__swhatbuf_r+0x40>
 8006086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800608a:	e00e      	b.n	80060aa <__swhatbuf_r+0x42>
 800608c:	466a      	mov	r2, sp
 800608e:	f000 f8bb 	bl	8006208 <_fstat_r>
 8006092:	2800      	cmp	r0, #0
 8006094:	dbf1      	blt.n	800607a <__swhatbuf_r+0x12>
 8006096:	9a01      	ldr	r2, [sp, #4]
 8006098:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800609c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060a0:	425a      	negs	r2, r3
 80060a2:	415a      	adcs	r2, r3
 80060a4:	602a      	str	r2, [r5, #0]
 80060a6:	e7ee      	b.n	8006086 <__swhatbuf_r+0x1e>
 80060a8:	2340      	movs	r3, #64	; 0x40
 80060aa:	2000      	movs	r0, #0
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	b016      	add	sp, #88	; 0x58
 80060b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080060b4 <__smakebuf_r>:
 80060b4:	898b      	ldrh	r3, [r1, #12]
 80060b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060b8:	079d      	lsls	r5, r3, #30
 80060ba:	4606      	mov	r6, r0
 80060bc:	460c      	mov	r4, r1
 80060be:	d507      	bpl.n	80060d0 <__smakebuf_r+0x1c>
 80060c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	6123      	str	r3, [r4, #16]
 80060c8:	2301      	movs	r3, #1
 80060ca:	6163      	str	r3, [r4, #20]
 80060cc:	b002      	add	sp, #8
 80060ce:	bd70      	pop	{r4, r5, r6, pc}
 80060d0:	ab01      	add	r3, sp, #4
 80060d2:	466a      	mov	r2, sp
 80060d4:	f7ff ffc8 	bl	8006068 <__swhatbuf_r>
 80060d8:	9900      	ldr	r1, [sp, #0]
 80060da:	4605      	mov	r5, r0
 80060dc:	4630      	mov	r0, r6
 80060de:	f7ff fa57 	bl	8005590 <_malloc_r>
 80060e2:	b948      	cbnz	r0, 80060f8 <__smakebuf_r+0x44>
 80060e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060e8:	059a      	lsls	r2, r3, #22
 80060ea:	d4ef      	bmi.n	80060cc <__smakebuf_r+0x18>
 80060ec:	f023 0303 	bic.w	r3, r3, #3
 80060f0:	f043 0302 	orr.w	r3, r3, #2
 80060f4:	81a3      	strh	r3, [r4, #12]
 80060f6:	e7e3      	b.n	80060c0 <__smakebuf_r+0xc>
 80060f8:	4b0d      	ldr	r3, [pc, #52]	; (8006130 <__smakebuf_r+0x7c>)
 80060fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80060fc:	89a3      	ldrh	r3, [r4, #12]
 80060fe:	6020      	str	r0, [r4, #0]
 8006100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006104:	81a3      	strh	r3, [r4, #12]
 8006106:	9b00      	ldr	r3, [sp, #0]
 8006108:	6163      	str	r3, [r4, #20]
 800610a:	9b01      	ldr	r3, [sp, #4]
 800610c:	6120      	str	r0, [r4, #16]
 800610e:	b15b      	cbz	r3, 8006128 <__smakebuf_r+0x74>
 8006110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006114:	4630      	mov	r0, r6
 8006116:	f000 f889 	bl	800622c <_isatty_r>
 800611a:	b128      	cbz	r0, 8006128 <__smakebuf_r+0x74>
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	f023 0303 	bic.w	r3, r3, #3
 8006122:	f043 0301 	orr.w	r3, r3, #1
 8006126:	81a3      	strh	r3, [r4, #12]
 8006128:	89a0      	ldrh	r0, [r4, #12]
 800612a:	4305      	orrs	r5, r0
 800612c:	81a5      	strh	r5, [r4, #12]
 800612e:	e7cd      	b.n	80060cc <__smakebuf_r+0x18>
 8006130:	080053a9 	.word	0x080053a9

08006134 <__malloc_lock>:
 8006134:	4801      	ldr	r0, [pc, #4]	; (800613c <__malloc_lock+0x8>)
 8006136:	f7ff ba09 	b.w	800554c <__retarget_lock_acquire_recursive>
 800613a:	bf00      	nop
 800613c:	200041b8 	.word	0x200041b8

08006140 <__malloc_unlock>:
 8006140:	4801      	ldr	r0, [pc, #4]	; (8006148 <__malloc_unlock+0x8>)
 8006142:	f7ff ba04 	b.w	800554e <__retarget_lock_release_recursive>
 8006146:	bf00      	nop
 8006148:	200041b8 	.word	0x200041b8

0800614c <_free_r>:
 800614c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800614e:	2900      	cmp	r1, #0
 8006150:	d044      	beq.n	80061dc <_free_r+0x90>
 8006152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006156:	9001      	str	r0, [sp, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f1a1 0404 	sub.w	r4, r1, #4
 800615e:	bfb8      	it	lt
 8006160:	18e4      	addlt	r4, r4, r3
 8006162:	f7ff ffe7 	bl	8006134 <__malloc_lock>
 8006166:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <_free_r+0x94>)
 8006168:	9801      	ldr	r0, [sp, #4]
 800616a:	6813      	ldr	r3, [r2, #0]
 800616c:	b933      	cbnz	r3, 800617c <_free_r+0x30>
 800616e:	6063      	str	r3, [r4, #4]
 8006170:	6014      	str	r4, [r2, #0]
 8006172:	b003      	add	sp, #12
 8006174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006178:	f7ff bfe2 	b.w	8006140 <__malloc_unlock>
 800617c:	42a3      	cmp	r3, r4
 800617e:	d908      	bls.n	8006192 <_free_r+0x46>
 8006180:	6825      	ldr	r5, [r4, #0]
 8006182:	1961      	adds	r1, r4, r5
 8006184:	428b      	cmp	r3, r1
 8006186:	bf01      	itttt	eq
 8006188:	6819      	ldreq	r1, [r3, #0]
 800618a:	685b      	ldreq	r3, [r3, #4]
 800618c:	1949      	addeq	r1, r1, r5
 800618e:	6021      	streq	r1, [r4, #0]
 8006190:	e7ed      	b.n	800616e <_free_r+0x22>
 8006192:	461a      	mov	r2, r3
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	b10b      	cbz	r3, 800619c <_free_r+0x50>
 8006198:	42a3      	cmp	r3, r4
 800619a:	d9fa      	bls.n	8006192 <_free_r+0x46>
 800619c:	6811      	ldr	r1, [r2, #0]
 800619e:	1855      	adds	r5, r2, r1
 80061a0:	42a5      	cmp	r5, r4
 80061a2:	d10b      	bne.n	80061bc <_free_r+0x70>
 80061a4:	6824      	ldr	r4, [r4, #0]
 80061a6:	4421      	add	r1, r4
 80061a8:	1854      	adds	r4, r2, r1
 80061aa:	42a3      	cmp	r3, r4
 80061ac:	6011      	str	r1, [r2, #0]
 80061ae:	d1e0      	bne.n	8006172 <_free_r+0x26>
 80061b0:	681c      	ldr	r4, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	6053      	str	r3, [r2, #4]
 80061b6:	4421      	add	r1, r4
 80061b8:	6011      	str	r1, [r2, #0]
 80061ba:	e7da      	b.n	8006172 <_free_r+0x26>
 80061bc:	d902      	bls.n	80061c4 <_free_r+0x78>
 80061be:	230c      	movs	r3, #12
 80061c0:	6003      	str	r3, [r0, #0]
 80061c2:	e7d6      	b.n	8006172 <_free_r+0x26>
 80061c4:	6825      	ldr	r5, [r4, #0]
 80061c6:	1961      	adds	r1, r4, r5
 80061c8:	428b      	cmp	r3, r1
 80061ca:	bf04      	itt	eq
 80061cc:	6819      	ldreq	r1, [r3, #0]
 80061ce:	685b      	ldreq	r3, [r3, #4]
 80061d0:	6063      	str	r3, [r4, #4]
 80061d2:	bf04      	itt	eq
 80061d4:	1949      	addeq	r1, r1, r5
 80061d6:	6021      	streq	r1, [r4, #0]
 80061d8:	6054      	str	r4, [r2, #4]
 80061da:	e7ca      	b.n	8006172 <_free_r+0x26>
 80061dc:	b003      	add	sp, #12
 80061de:	bd30      	pop	{r4, r5, pc}
 80061e0:	200041bc 	.word	0x200041bc

080061e4 <_read_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4d07      	ldr	r5, [pc, #28]	; (8006204 <_read_r+0x20>)
 80061e8:	4604      	mov	r4, r0
 80061ea:	4608      	mov	r0, r1
 80061ec:	4611      	mov	r1, r2
 80061ee:	2200      	movs	r2, #0
 80061f0:	602a      	str	r2, [r5, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	f7fa ff26 	bl	8001044 <_read>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d102      	bne.n	8006202 <_read_r+0x1e>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	b103      	cbz	r3, 8006202 <_read_r+0x1e>
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	200041c4 	.word	0x200041c4

08006208 <_fstat_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4d07      	ldr	r5, [pc, #28]	; (8006228 <_fstat_r+0x20>)
 800620c:	2300      	movs	r3, #0
 800620e:	4604      	mov	r4, r0
 8006210:	4608      	mov	r0, r1
 8006212:	4611      	mov	r1, r2
 8006214:	602b      	str	r3, [r5, #0]
 8006216:	f7fa ff3e 	bl	8001096 <_fstat>
 800621a:	1c43      	adds	r3, r0, #1
 800621c:	d102      	bne.n	8006224 <_fstat_r+0x1c>
 800621e:	682b      	ldr	r3, [r5, #0]
 8006220:	b103      	cbz	r3, 8006224 <_fstat_r+0x1c>
 8006222:	6023      	str	r3, [r4, #0]
 8006224:	bd38      	pop	{r3, r4, r5, pc}
 8006226:	bf00      	nop
 8006228:	200041c4 	.word	0x200041c4

0800622c <_isatty_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d06      	ldr	r5, [pc, #24]	; (8006248 <_isatty_r+0x1c>)
 8006230:	2300      	movs	r3, #0
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	f7fa ff3d 	bl	80010b6 <_isatty>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d102      	bne.n	8006246 <_isatty_r+0x1a>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b103      	cbz	r3, 8006246 <_isatty_r+0x1a>
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	200041c4 	.word	0x200041c4

0800624c <_init>:
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	bf00      	nop
 8006250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006252:	bc08      	pop	{r3}
 8006254:	469e      	mov	lr, r3
 8006256:	4770      	bx	lr

08006258 <_fini>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	bf00      	nop
 800625c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625e:	bc08      	pop	{r3}
 8006260:	469e      	mov	lr, r3
 8006262:	4770      	bx	lr
