
ProbandoCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002964  08002964  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800296c  0800296c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800296c  0800296c  0001296c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000118  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009323  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014b0  00000000  00000000  0002936b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  0002a820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006f8  00000000  00000000  0002af90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002281f  00000000  00000000  0002b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000087f1  00000000  00000000  0004dea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2edd  00000000  00000000  00056698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00129575  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e08  00000000  00000000  001295c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002934 	.word	0x08002934

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08002934 	.word	0x08002934

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fb48 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f852 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f94c 	bl	8000798 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000500:	f000 f920 	bl	8000744 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000504:	f000 f8b6 	bl	8000674 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000508:	f000 f8e8 	bl	80006dc <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */


  //Se configuran los filtros para el puerto CAN

  sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <main+0x8c>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh=0x12<<5;
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <main+0x8c>)
 8000514:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000518:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow=0;
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <main+0x8c>)
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh=0;
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <main+0x8c>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow=0;
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <main+0x8c>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 800052c:	4b13      	ldr	r3, [pc, #76]	; (800057c <main+0x8c>)
 800052e:	2201      	movs	r2, #1
 8000530:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterActivation=ENABLE;
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <main+0x8c>)
 8000534:	2201      	movs	r2, #1
 8000536:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 8000538:	4910      	ldr	r1, [pc, #64]	; (800057c <main+0x8c>)
 800053a:	4811      	ldr	r0, [pc, #68]	; (8000580 <main+0x90>)
 800053c:	f000 fcb6 	bl	8000eac <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8000540:	480f      	ldr	r0, [pc, #60]	; (8000580 <main+0x90>)
 8000542:	f000 fd93 	bl	800106c <HAL_CAN_Start>

  HAL_CAN_ConfigFilter(&hcan2,&sFilterConfig);
 8000546:	490d      	ldr	r1, [pc, #52]	; (800057c <main+0x8c>)
 8000548:	480e      	ldr	r0, [pc, #56]	; (8000584 <main+0x94>)
 800054a:	f000 fcaf 	bl	8000eac <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan2);
 800054e:	480d      	ldr	r0, [pc, #52]	; (8000584 <main+0x94>)
 8000550:	f000 fd8c 	bl	800106c <HAL_CAN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  	  {
  	  		  HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, txData, &pTxMailbox);
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <main+0x98>)
 8000556:	4a0d      	ldr	r2, [pc, #52]	; (800058c <main+0x9c>)
 8000558:	490d      	ldr	r1, [pc, #52]	; (8000590 <main+0xa0>)
 800055a:	4809      	ldr	r0, [pc, #36]	; (8000580 <main+0x90>)
 800055c:	f000 fdca 	bl	80010f4 <HAL_CAN_AddTxMessage>

  	  		  HAL_Delay(500);
 8000560:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000564:	f000 fb82 	bl	8000c6c <HAL_Delay>
  	  	  	  HAL_CAN_GetRxMessage(&hcan2, tamaño, &pRxHeader, paraCAN);
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <main+0xa4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <main+0xa8>)
 8000570:	4a0a      	ldr	r2, [pc, #40]	; (800059c <main+0xac>)
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <main+0x94>)
 8000574:	f000 fe99 	bl	80012aa <HAL_CAN_GetRxMessage>
  	  		  HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, txData, &pTxMailbox);
 8000578:	e7ec      	b.n	8000554 <main+0x64>
 800057a:	bf00      	nop
 800057c:	200000fc 	.word	0x200000fc
 8000580:	20000034 	.word	0x20000034
 8000584:	2000005c 	.word	0x2000005c
 8000588:	20000000 	.word	0x20000000
 800058c:	20000004 	.word	0x20000004
 8000590:	200000c8 	.word	0x200000c8
 8000594:	20000008 	.word	0x20000008
 8000598:	20000124 	.word	0x20000124
 800059c:	200000e0 	.word	0x200000e0

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 f9b8 	bl	8002924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a27      	ldr	r2, [pc, #156]	; (800066c <SystemClock_Config+0xcc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <SystemClock_Config+0xd0>)
 80005ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000600:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000614:	23a8      	movs	r3, #168	; 0xa8
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061c:	2307      	movs	r3, #7
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f001 f9ff 	bl	8001a28 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000630:	f000 f92e 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000640:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2105      	movs	r1, #5
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fc60 	bl	8001f18 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800065e:	f000 f917 	bl	8000890 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_CAN1_Init+0x60>)
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <MX_CAN1_Init+0x64>)
 800067c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_CAN1_Init+0x60>)
 8000680:	2210      	movs	r2, #16
 8000682:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_CAN1_Init+0x60>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_CAN1_Init+0x60>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_CAN1_Init+0x60>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_CAN1_Init+0x60>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_CAN1_Init+0x60>)
 800069e:	2200      	movs	r2, #0
 80006a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_CAN1_Init+0x60>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_CAN1_Init+0x60>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_CAN1_Init+0x60>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_CAN1_Init+0x60>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_CAN1_Init+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_CAN1_Init+0x60>)
 80006c2:	f000 faf7 	bl	8000cb4 <HAL_CAN_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006cc:	f000 f8e0 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000034 	.word	0x20000034
 80006d8:	40006400 	.word	0x40006400

080006dc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_CAN2_Init+0x60>)
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <MX_CAN2_Init+0x64>)
 80006e4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_CAN2_Init+0x60>)
 80006e8:	2210      	movs	r2, #16
 80006ea:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_CAN2_Init+0x60>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_CAN2_Init+0x60>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_CAN2_Init+0x60>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_CAN2_Init+0x60>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_CAN2_Init+0x60>)
 8000706:	2200      	movs	r2, #0
 8000708:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_CAN2_Init+0x60>)
 800070c:	2200      	movs	r2, #0
 800070e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_CAN2_Init+0x60>)
 8000712:	2200      	movs	r2, #0
 8000714:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_CAN2_Init+0x60>)
 8000718:	2200      	movs	r2, #0
 800071a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_CAN2_Init+0x60>)
 800071e:	2200      	movs	r2, #0
 8000720:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_CAN2_Init+0x60>)
 8000724:	2200      	movs	r2, #0
 8000726:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_CAN2_Init+0x60>)
 800072a:	f000 fac3 	bl	8000cb4 <HAL_CAN_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000734:	f000 f8ac 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000005c 	.word	0x2000005c
 8000740:	40006800 	.word	0x40006800

08000744 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART3_UART_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_USART3_UART_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_USART3_UART_Init+0x4c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART3_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART3_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART3_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART3_UART_Init+0x4c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART3_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART3_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART3_UART_Init+0x4c>)
 800077c:	f001 fdec 	bl	8002358 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000786:	f000 f883 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000084 	.word	0x20000084
 8000794:	40004800 	.word	0x40004800

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b34      	ldr	r3, [pc, #208]	; (8000884 <MX_GPIO_Init+0xec>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a33      	ldr	r2, [pc, #204]	; (8000884 <MX_GPIO_Init+0xec>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <MX_GPIO_Init+0xec>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <MX_GPIO_Init+0xec>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2c      	ldr	r2, [pc, #176]	; (8000884 <MX_GPIO_Init+0xec>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0xec>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_GPIO_Init+0xec>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a25      	ldr	r2, [pc, #148]	; (8000884 <MX_GPIO_Init+0xec>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_GPIO_Init+0xec>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_GPIO_Init+0xec>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <MX_GPIO_Init+0xec>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_GPIO_Init+0xec>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_GPIO_Init+0xec>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_GPIO_Init+0xec>)
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_GPIO_Init+0xec>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0308 	and.w	r3, r3, #8
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000840:	4811      	ldr	r0, [pc, #68]	; (8000888 <MX_GPIO_Init+0xf0>)
 8000842:	f001 f8d7 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000846:	2340      	movs	r3, #64	; 0x40
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_GPIO_Init+0xf4>)
 800085a:	f000 ff1f 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800085e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_GPIO_Init+0xf0>)
 8000878:	f000 ff10 	bl	800169c <HAL_GPIO_Init>

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40020400 	.word	0x40020400
 800088c:	40020000 	.word	0x40020000

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <HAL_MspInit+0x4c>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a42      	ldr	r2, [pc, #264]	; (8000a14 <HAL_CAN_MspInit+0x128>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d135      	bne.n	800097a <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800090e:	4b42      	ldr	r3, [pc, #264]	; (8000a18 <HAL_CAN_MspInit+0x12c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	4a40      	ldr	r2, [pc, #256]	; (8000a18 <HAL_CAN_MspInit+0x12c>)
 8000916:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000918:	4b3f      	ldr	r3, [pc, #252]	; (8000a18 <HAL_CAN_MspInit+0x12c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d10d      	bne.n	800093c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	4a3c      	ldr	r2, [pc, #240]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 800092a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800092e:	6413      	str	r3, [r2, #64]	; 0x40
 8000930:	4b3a      	ldr	r3, [pc, #232]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a35      	ldr	r2, [pc, #212]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 8000946:	f043 0308 	orr.w	r3, r3, #8
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000958:	2303      	movs	r3, #3
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000968:	2309      	movs	r3, #9
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	482b      	ldr	r0, [pc, #172]	; (8000a20 <HAL_CAN_MspInit+0x134>)
 8000974:	f000 fe92 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000978:	e048      	b.n	8000a0c <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a29      	ldr	r2, [pc, #164]	; (8000a24 <HAL_CAN_MspInit+0x138>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d143      	bne.n	8000a0c <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 800098e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <HAL_CAN_MspInit+0x12c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <HAL_CAN_MspInit+0x12c>)
 80009a8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_CAN_MspInit+0x12c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d10d      	bne.n	80009ce <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 80009bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_CAN_MspInit+0x130>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80009ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80009fc:	2309      	movs	r3, #9
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4808      	ldr	r0, [pc, #32]	; (8000a28 <HAL_CAN_MspInit+0x13c>)
 8000a08:	f000 fe48 	bl	800169c <HAL_GPIO_Init>
}
 8000a0c:	bf00      	nop
 8000a0e:	3730      	adds	r7, #48	; 0x30
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40006400 	.word	0x40006400
 8000a18:	20000128 	.word	0x20000128
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	40006800 	.word	0x40006800
 8000a28:	40020400 	.word	0x40020400

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <HAL_UART_MspInit+0x84>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12c      	bne.n	8000aa8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a98:	2307      	movs	r3, #7
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_UART_MspInit+0x8c>)
 8000aa4:	f000 fdfa 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40004800 	.word	0x40004800
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020c00 	.word	0x40020c00

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 f890 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b6c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b3a:	490e      	ldr	r1, [pc, #56]	; (8000b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b50:	4c0b      	ldr	r4, [pc, #44]	; (8000b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b5e:	f7ff ffd7 	bl	8000b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b62:	f001 febb 	bl	80028dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b66:	f7ff fcc3 	bl	80004f0 <main>
  bx  lr    
 8000b6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b78:	08002974 	.word	0x08002974
  ldr r2, =_sbss
 8000b7c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b80:	20000130 	.word	0x20000130

08000b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <HAL_Init+0x40>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_Init+0x40>)
 8000b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_Init+0x40>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 fd3f 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fe6e 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023c00 	.word	0x40023c00

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 fd49 	bl	8001682 <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c08:	f000 fd1f 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000000c 	.word	0x2000000c
 8000c24:	20000014 	.word	0x20000014
 8000c28:	20000010 	.word	0x20000010

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000014 	.word	0x20000014
 8000c50:	2000012c 	.word	0x2000012c

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000012c 	.word	0x2000012c

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff ffee 	bl	8000c54 <HAL_GetTick>
 8000c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c92:	bf00      	nop
 8000c94:	f7ff ffde 	bl	8000c54 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000014 	.word	0x20000014

08000cb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e0ed      	b.n	8000ea2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fe0a 	bl	80008ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0201 	orr.w	r2, r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ce8:	f7ff ffb4 	bl	8000c54 <HAL_GetTick>
 8000cec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cee:	e012      	b.n	8000d16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf0:	f7ff ffb0 	bl	8000c54 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b0a      	cmp	r3, #10
 8000cfc:	d90b      	bls.n	8000d16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2205      	movs	r2, #5
 8000d0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e0c5      	b.n	8000ea2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0e5      	beq.n	8000cf0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0202 	bic.w	r2, r2, #2
 8000d32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d34:	f7ff ff8e 	bl	8000c54 <HAL_GetTick>
 8000d38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d3a:	e012      	b.n	8000d62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d3c:	f7ff ff8a 	bl	8000c54 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b0a      	cmp	r3, #10
 8000d48:	d90b      	bls.n	8000d62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2205      	movs	r2, #5
 8000d5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e09f      	b.n	8000ea2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1e5      	bne.n	8000d3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7e1b      	ldrb	r3, [r3, #24]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d108      	bne.n	8000d8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	e007      	b.n	8000d9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7e5b      	ldrb	r3, [r3, #25]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d108      	bne.n	8000db4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e007      	b.n	8000dc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7e9b      	ldrb	r3, [r3, #26]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d108      	bne.n	8000dde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 0220 	orr.w	r2, r2, #32
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	e007      	b.n	8000dee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 0220 	bic.w	r2, r2, #32
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7edb      	ldrb	r3, [r3, #27]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d108      	bne.n	8000e08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0210 	bic.w	r2, r2, #16
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e007      	b.n	8000e18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0210 	orr.w	r2, r2, #16
 8000e16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7f1b      	ldrb	r3, [r3, #28]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d108      	bne.n	8000e32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0208 	orr.w	r2, r2, #8
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e007      	b.n	8000e42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0208 	bic.w	r2, r2, #8
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7f5b      	ldrb	r3, [r3, #29]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d108      	bne.n	8000e5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f042 0204 	orr.w	r2, r2, #4
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e007      	b.n	8000e6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 0204 	bic.w	r2, r2, #4
 8000e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	431a      	orrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	ea42 0103 	orr.w	r1, r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	1e5a      	subs	r2, r3, #1
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ec4:	7cfb      	ldrb	r3, [r7, #19]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d003      	beq.n	8000ed2 <HAL_CAN_ConfigFilter+0x26>
 8000eca:	7cfb      	ldrb	r3, [r7, #19]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	f040 80be 	bne.w	800104e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000ed2:	4b65      	ldr	r3, [pc, #404]	; (8001068 <HAL_CAN_ConfigFilter+0x1bc>)
 8000ed4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000eec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	431a      	orrs	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	f003 031f 	and.w	r3, r3, #31
 8000f12:	2201      	movs	r2, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	401a      	ands	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d123      	bne.n	8000f7c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3248      	adds	r2, #72	; 0x48
 8000f5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f72:	6979      	ldr	r1, [r7, #20]
 8000f74:	3348      	adds	r3, #72	; 0x48
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	440b      	add	r3, r1
 8000f7a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d122      	bne.n	8000fca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fa4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3248      	adds	r2, #72	; 0x48
 8000faa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fc0:	6979      	ldr	r1, [r7, #20]
 8000fc2:	3348      	adds	r3, #72	; 0x48
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d109      	bne.n	8000fe6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	401a      	ands	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000fe4:	e007      	b.n	8000ff6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d109      	bne.n	8001012 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	401a      	ands	r2, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001010:	e007      	b.n	8001022 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	431a      	orrs	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d107      	bne.n	800103a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	431a      	orrs	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001040:	f023 0201 	bic.w	r2, r3, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e006      	b.n	800105c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
  }
}
 800105c:	4618      	mov	r0, r3
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40006400 	.word	0x40006400

0800106c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b01      	cmp	r3, #1
 800107e:	d12e      	bne.n	80010de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2202      	movs	r2, #2
 8001084:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001098:	f7ff fddc 	bl	8000c54 <HAL_GetTick>
 800109c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800109e:	e012      	b.n	80010c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a0:	f7ff fdd8 	bl	8000c54 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d90b      	bls.n	80010c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2205      	movs	r2, #5
 80010be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e012      	b.n	80010ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1e5      	bne.n	80010a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e006      	b.n	80010ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
  }
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001108:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001112:	7ffb      	ldrb	r3, [r7, #31]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d003      	beq.n	8001120 <HAL_CAN_AddTxMessage+0x2c>
 8001118:	7ffb      	ldrb	r3, [r7, #31]
 800111a:	2b02      	cmp	r3, #2
 800111c:	f040 80b8 	bne.w	8001290 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10a      	bne.n	8001140 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001130:	2b00      	cmp	r3, #0
 8001132:	d105      	bne.n	8001140 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 80a0 	beq.w	8001280 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	0e1b      	lsrs	r3, r3, #24
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d907      	bls.n	8001160 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e09e      	b.n	800129e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001160:	2201      	movs	r2, #1
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	409a      	lsls	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10d      	bne.n	800118e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800117c:	68f9      	ldr	r1, [r7, #12]
 800117e:	6809      	ldr	r1, [r1, #0]
 8001180:	431a      	orrs	r2, r3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3318      	adds	r3, #24
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	440b      	add	r3, r1
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e00f      	b.n	80011ae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001198:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800119e:	68f9      	ldr	r1, [r7, #12]
 80011a0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011a2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3318      	adds	r3, #24
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	440b      	add	r3, r1
 80011ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6819      	ldr	r1, [r3, #0]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	691a      	ldr	r2, [r3, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3318      	adds	r3, #24
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	440b      	add	r3, r1
 80011be:	3304      	adds	r3, #4
 80011c0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	7d1b      	ldrb	r3, [r3, #20]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d111      	bne.n	80011ee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3318      	adds	r3, #24
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4413      	add	r3, r2
 80011d6:	3304      	adds	r3, #4
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	6811      	ldr	r1, [r2, #0]
 80011de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3318      	adds	r3, #24
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	440b      	add	r3, r1
 80011ea:	3304      	adds	r3, #4
 80011ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3307      	adds	r3, #7
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	061a      	lsls	r2, r3, #24
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3306      	adds	r3, #6
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	041b      	lsls	r3, r3, #16
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3305      	adds	r3, #5
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	4313      	orrs	r3, r2
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	3204      	adds	r2, #4
 800120e:	7812      	ldrb	r2, [r2, #0]
 8001210:	4610      	mov	r0, r2
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	6811      	ldr	r1, [r2, #0]
 8001216:	ea43 0200 	orr.w	r2, r3, r0
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	440b      	add	r3, r1
 8001220:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001224:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3303      	adds	r3, #3
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	061a      	lsls	r2, r3, #24
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3302      	adds	r3, #2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	041b      	lsls	r3, r3, #16
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3301      	adds	r3, #1
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	4313      	orrs	r3, r2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	4610      	mov	r0, r2
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	6811      	ldr	r1, [r2, #0]
 800124c:	ea43 0200 	orr.w	r2, r3, r0
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	440b      	add	r3, r1
 8001256:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800125a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3318      	adds	r3, #24
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	4413      	add	r3, r2
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	6811      	ldr	r1, [r2, #0]
 800126e:	f043 0201 	orr.w	r2, r3, #1
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3318      	adds	r3, #24
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	440b      	add	r3, r1
 800127a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	e00e      	b.n	800129e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e006      	b.n	800129e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
  }
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	; 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012aa:	b480      	push	{r7}
 80012ac:	b087      	sub	sp, #28
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012be:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d003      	beq.n	80012ce <HAL_CAN_GetRxMessage+0x24>
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	f040 80f3 	bne.w	80014b4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10e      	bne.n	80012f2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d116      	bne.n	8001310 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e0e7      	b.n	80014c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d107      	bne.n	8001310 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0d8      	b.n	80014c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	331b      	adds	r3, #27
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	4413      	add	r3, r2
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0204 	and.w	r2, r3, #4
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	331b      	adds	r3, #27
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	0d5b      	lsrs	r3, r3, #21
 800133e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e00b      	b.n	8001360 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	331b      	adds	r3, #27
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4413      	add	r3, r2
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	331b      	adds	r3, #27
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	4413      	add	r3, r2
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0202 	and.w	r2, r3, #2
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	331b      	adds	r3, #27
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	4413      	add	r3, r2
 8001382:	3304      	adds	r3, #4
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 020f 	and.w	r2, r3, #15
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	331b      	adds	r3, #27
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4413      	add	r3, r2
 800139a:	3304      	adds	r3, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	331b      	adds	r3, #27
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	4413      	add	r3, r2
 80013b2:	3304      	adds	r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0c1b      	lsrs	r3, r3, #16
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	4413      	add	r3, r2
 80013c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	4413      	add	r3, r2
 80013de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	0a1a      	lsrs	r2, r3, #8
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	0c1a      	lsrs	r2, r3, #16
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	3302      	adds	r3, #2
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0e1a      	lsrs	r2, r3, #24
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	3303      	adds	r3, #3
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	4413      	add	r3, r2
 800142c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	3304      	adds	r3, #4
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4413      	add	r3, r2
 8001444:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	0a1a      	lsrs	r2, r3, #8
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	3305      	adds	r3, #5
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	4413      	add	r3, r2
 800145e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	0c1a      	lsrs	r2, r3, #16
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	3306      	adds	r3, #6
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0e1a      	lsrs	r2, r3, #24
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	3307      	adds	r3, #7
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d108      	bne.n	80014a0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0220 	orr.w	r2, r2, #32
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	e007      	b.n	80014b0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0220 	orr.w	r2, r2, #32
 80014ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	e006      	b.n	80014c2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
  }
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	371c      	adds	r7, #28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff47 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff5c 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff8e 	bl	8001588 <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5d 	bl	8001534 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffb0 	bl	80015f0 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	e177      	b.n	80019a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b8:	2201      	movs	r2, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 8166 	bne.w	80019a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d005      	beq.n	80016ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d130      	bne.n	8001750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 0201 	and.w	r2, r3, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b03      	cmp	r3, #3
 800175a:	d017      	beq.n	800178c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d123      	bne.n	80017e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3208      	adds	r2, #8
 80017da:	69b9      	ldr	r1, [r7, #24]
 80017dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0203 	and.w	r2, r3, #3
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80c0 	beq.w	80019a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b66      	ldr	r3, [pc, #408]	; (80019c0 <HAL_GPIO_Init+0x324>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a65      	ldr	r2, [pc, #404]	; (80019c0 <HAL_GPIO_Init+0x324>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_GPIO_Init+0x324>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183e:	4a61      	ldr	r2, [pc, #388]	; (80019c4 <HAL_GPIO_Init+0x328>)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_GPIO_Init+0x32c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d037      	beq.n	80018da <HAL_GPIO_Init+0x23e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a57      	ldr	r2, [pc, #348]	; (80019cc <HAL_GPIO_Init+0x330>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d031      	beq.n	80018d6 <HAL_GPIO_Init+0x23a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a56      	ldr	r2, [pc, #344]	; (80019d0 <HAL_GPIO_Init+0x334>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d02b      	beq.n	80018d2 <HAL_GPIO_Init+0x236>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a55      	ldr	r2, [pc, #340]	; (80019d4 <HAL_GPIO_Init+0x338>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d025      	beq.n	80018ce <HAL_GPIO_Init+0x232>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a54      	ldr	r2, [pc, #336]	; (80019d8 <HAL_GPIO_Init+0x33c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d01f      	beq.n	80018ca <HAL_GPIO_Init+0x22e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a53      	ldr	r2, [pc, #332]	; (80019dc <HAL_GPIO_Init+0x340>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d019      	beq.n	80018c6 <HAL_GPIO_Init+0x22a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <HAL_GPIO_Init+0x344>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d013      	beq.n	80018c2 <HAL_GPIO_Init+0x226>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a51      	ldr	r2, [pc, #324]	; (80019e4 <HAL_GPIO_Init+0x348>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00d      	beq.n	80018be <HAL_GPIO_Init+0x222>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a50      	ldr	r2, [pc, #320]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d007      	beq.n	80018ba <HAL_GPIO_Init+0x21e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4f      	ldr	r2, [pc, #316]	; (80019ec <HAL_GPIO_Init+0x350>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_GPIO_Init+0x21a>
 80018b2:	2309      	movs	r3, #9
 80018b4:	e012      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018b6:	230a      	movs	r3, #10
 80018b8:	e010      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018ba:	2308      	movs	r3, #8
 80018bc:	e00e      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018be:	2307      	movs	r3, #7
 80018c0:	e00c      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018c2:	2306      	movs	r3, #6
 80018c4:	e00a      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018c6:	2305      	movs	r3, #5
 80018c8:	e008      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018ca:	2304      	movs	r3, #4
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018ce:	2303      	movs	r3, #3
 80018d0:	e004      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e002      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018da:	2300      	movs	r3, #0
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	f002 0203 	and.w	r2, r2, #3
 80018e2:	0092      	lsls	r2, r2, #2
 80018e4:	4093      	lsls	r3, r2
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ec:	4935      	ldr	r1, [pc, #212]	; (80019c4 <HAL_GPIO_Init+0x328>)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018fa:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <HAL_GPIO_Init+0x354>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800191e:	4a34      	ldr	r2, [pc, #208]	; (80019f0 <HAL_GPIO_Init+0x354>)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <HAL_GPIO_Init+0x354>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001948:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <HAL_GPIO_Init+0x354>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800194e:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <HAL_GPIO_Init+0x354>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001972:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <HAL_GPIO_Init+0x354>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_GPIO_Init+0x354>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800199c:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <HAL_GPIO_Init+0x354>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3301      	adds	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	2b0f      	cmp	r3, #15
 80019ac:	f67f ae84 	bls.w	80016b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40013800 	.word	0x40013800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020400 	.word	0x40020400
 80019d0:	40020800 	.word	0x40020800
 80019d4:	40020c00 	.word	0x40020c00
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40021400 	.word	0x40021400
 80019e0:	40021800 	.word	0x40021800
 80019e4:	40021c00 	.word	0x40021c00
 80019e8:	40022000 	.word	0x40022000
 80019ec:	40022400 	.word	0x40022400
 80019f0:	40013c00 	.word	0x40013c00

080019f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	619a      	str	r2, [r3, #24]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e267      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d075      	beq.n	8001b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a46:	4b88      	ldr	r3, [pc, #544]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d00c      	beq.n	8001a6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a52:	4b85      	ldr	r3, [pc, #532]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d112      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5e:	4b82      	ldr	r3, [pc, #520]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a6a:	d10b      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6c:	4b7e      	ldr	r3, [pc, #504]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d05b      	beq.n	8001b30 <HAL_RCC_OscConfig+0x108>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d157      	bne.n	8001b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e242      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d106      	bne.n	8001a9c <HAL_RCC_OscConfig+0x74>
 8001a8e:	4b76      	ldr	r3, [pc, #472]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a75      	ldr	r2, [pc, #468]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e01d      	b.n	8001ad8 <HAL_RCC_OscConfig+0xb0>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x98>
 8001aa6:	4b70      	ldr	r3, [pc, #448]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a6f      	ldr	r2, [pc, #444]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b6d      	ldr	r3, [pc, #436]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6c      	ldr	r2, [pc, #432]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xb0>
 8001ac0:	4b69      	ldr	r3, [pc, #420]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a68      	ldr	r2, [pc, #416]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b66      	ldr	r3, [pc, #408]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a65      	ldr	r2, [pc, #404]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f8b8 	bl	8000c54 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f8b4 	bl	8000c54 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e207      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	4b5b      	ldr	r3, [pc, #364]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xc0>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff f8a4 	bl	8000c54 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff f8a0 	bl	8000c54 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1f3      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	4b51      	ldr	r3, [pc, #324]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0xe8>
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d063      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b3e:	4b4a      	ldr	r3, [pc, #296]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00b      	beq.n	8001b62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b4a:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d11c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b56:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d116      	bne.n	8001b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_RCC_OscConfig+0x152>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e1c7      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4937      	ldr	r1, [pc, #220]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	e03a      	b.n	8001c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b98:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <HAL_RCC_OscConfig+0x244>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f859 	bl	8000c54 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba6:	f7ff f855 	bl	8000c54 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e1a8      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4925      	ldr	r1, [pc, #148]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e015      	b.n	8001c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <HAL_RCC_OscConfig+0x244>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff f838 	bl	8000c54 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be8:	f7ff f834 	bl	8000c54 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e187      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d036      	beq.n	8001c80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d016      	beq.n	8001c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <HAL_RCC_OscConfig+0x248>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f818 	bl	8000c54 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c28:	f7ff f814 	bl	8000c54 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e167      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x200>
 8001c46:	e01b      	b.n	8001c80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_OscConfig+0x248>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f801 	bl	8000c54 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	e00e      	b.n	8001c74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c56:	f7fe fffd 	bl	8000c54 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d907      	bls.n	8001c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e150      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	42470000 	.word	0x42470000
 8001c70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c74:	4b88      	ldr	r3, [pc, #544]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ea      	bne.n	8001c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 8097 	beq.w	8001dbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c92:	4b81      	ldr	r3, [pc, #516]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10f      	bne.n	8001cbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	4b7d      	ldr	r3, [pc, #500]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a7c      	ldr	r2, [pc, #496]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b7a      	ldr	r3, [pc, #488]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbe:	4b77      	ldr	r3, [pc, #476]	; (8001e9c <HAL_RCC_OscConfig+0x474>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cca:	4b74      	ldr	r3, [pc, #464]	; (8001e9c <HAL_RCC_OscConfig+0x474>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a73      	ldr	r2, [pc, #460]	; (8001e9c <HAL_RCC_OscConfig+0x474>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd6:	f7fe ffbd 	bl	8000c54 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cde:	f7fe ffb9 	bl	8000c54 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e10c      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	4b6a      	ldr	r3, [pc, #424]	; (8001e9c <HAL_RCC_OscConfig+0x474>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x2ea>
 8001d04:	4b64      	ldr	r3, [pc, #400]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d08:	4a63      	ldr	r2, [pc, #396]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d10:	e01c      	b.n	8001d4c <HAL_RCC_OscConfig+0x324>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b05      	cmp	r3, #5
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x30c>
 8001d1a:	4b5f      	ldr	r3, [pc, #380]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a5e      	ldr	r2, [pc, #376]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70
 8001d26:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	4a5b      	ldr	r2, [pc, #364]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6713      	str	r3, [r2, #112]	; 0x70
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0x324>
 8001d34:	4b58      	ldr	r3, [pc, #352]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	4a57      	ldr	r2, [pc, #348]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001d3a:	f023 0301 	bic.w	r3, r3, #1
 8001d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d40:	4b55      	ldr	r3, [pc, #340]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d44:	4a54      	ldr	r2, [pc, #336]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001d46:	f023 0304 	bic.w	r3, r3, #4
 8001d4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d015      	beq.n	8001d80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7fe ff7e 	bl	8000c54 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7fe ff7a 	bl	8000c54 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e0cb      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d72:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0ee      	beq.n	8001d5c <HAL_RCC_OscConfig+0x334>
 8001d7e:	e014      	b.n	8001daa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7fe ff68 	bl	8000c54 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d88:	f7fe ff64 	bl	8000c54 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0b5      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9e:	4b3e      	ldr	r3, [pc, #248]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1ee      	bne.n	8001d88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d105      	bne.n	8001dbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db0:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	4a38      	ldr	r2, [pc, #224]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80a1 	beq.w	8001f08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d05c      	beq.n	8001e8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d141      	bne.n	8001e5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <HAL_RCC_OscConfig+0x478>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7fe ff38 	bl	8000c54 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de8:	f7fe ff34 	bl	8000c54 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e087      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69da      	ldr	r2, [r3, #28]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	019b      	lsls	r3, r3, #6
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	085b      	lsrs	r3, r3, #1
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	041b      	lsls	r3, r3, #16
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	491b      	ldr	r1, [pc, #108]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_RCC_OscConfig+0x478>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7fe ff0d 	bl	8000c54 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7fe ff09 	bl	8000c54 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e05c      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x416>
 8001e5c:	e054      	b.n	8001f08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_RCC_OscConfig+0x478>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe fef6 	bl	8000c54 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe fef2 	bl	8000c54 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e045      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_OscConfig+0x470>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x444>
 8001e8a:	e03d      	b.n	8001f08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e038      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_RCC_OscConfig+0x4ec>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d028      	beq.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d121      	bne.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d11a      	bne.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d111      	bne.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	085b      	lsrs	r3, r3, #1
 8001eec:	3b01      	subs	r3, #1
 8001eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800

08001f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0cc      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d90c      	bls.n	8001f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b65      	ldr	r3, [pc, #404]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b63      	ldr	r3, [pc, #396]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0b8      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d020      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f6c:	4b59      	ldr	r3, [pc, #356]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4a58      	ldr	r2, [pc, #352]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f84:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4a52      	ldr	r2, [pc, #328]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f90:	4b50      	ldr	r3, [pc, #320]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	494d      	ldr	r1, [pc, #308]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d044      	beq.n	8002038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	4b47      	ldr	r3, [pc, #284]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d119      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e07f      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd6:	4b3f      	ldr	r3, [pc, #252]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e06f      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	4b3b      	ldr	r3, [pc, #236]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e067      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b37      	ldr	r3, [pc, #220]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4934      	ldr	r1, [pc, #208]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002008:	f7fe fe24 	bl	8000c54 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7fe fe20 	bl	8000c54 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e04f      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 020c 	and.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1eb      	bne.n	8002010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d20c      	bcs.n	8002060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d001      	beq.n	8002060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e032      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4916      	ldr	r1, [pc, #88]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800208a:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	490e      	ldr	r1, [pc, #56]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800209e:	f000 f821 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 80020a2:	4602      	mov	r2, r0
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	490a      	ldr	r1, [pc, #40]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	5ccb      	ldrb	r3, [r1, r3]
 80020b2:	fa22 f303 	lsr.w	r3, r2, r3
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fd84 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023c00 	.word	0x40023c00
 80020d4:	40023800 	.word	0x40023800
 80020d8:	0800294c 	.word	0x0800294c
 80020dc:	2000000c 	.word	0x2000000c
 80020e0:	20000010 	.word	0x20000010

080020e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020e8:	b094      	sub	sp, #80	; 0x50
 80020ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	647b      	str	r3, [r7, #68]	; 0x44
 80020f0:	2300      	movs	r3, #0
 80020f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020f4:	2300      	movs	r3, #0
 80020f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020fc:	4b79      	ldr	r3, [pc, #484]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d00d      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x40>
 8002108:	2b08      	cmp	r3, #8
 800210a:	f200 80e1 	bhi.w	80022d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x34>
 8002112:	2b04      	cmp	r3, #4
 8002114:	d003      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x3a>
 8002116:	e0db      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002118:	4b73      	ldr	r3, [pc, #460]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800211a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800211c:	e0db      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800211e:	4b73      	ldr	r3, [pc, #460]	; (80022ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002120:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002122:	e0d8      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002124:	4b6f      	ldr	r3, [pc, #444]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800212c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800212e:	4b6d      	ldr	r3, [pc, #436]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d063      	beq.n	8002202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800213a:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	099b      	lsrs	r3, r3, #6
 8002140:	2200      	movs	r2, #0
 8002142:	63bb      	str	r3, [r7, #56]	; 0x38
 8002144:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
 800214e:	2300      	movs	r3, #0
 8002150:	637b      	str	r3, [r7, #52]	; 0x34
 8002152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002156:	4622      	mov	r2, r4
 8002158:	462b      	mov	r3, r5
 800215a:	f04f 0000 	mov.w	r0, #0
 800215e:	f04f 0100 	mov.w	r1, #0
 8002162:	0159      	lsls	r1, r3, #5
 8002164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002168:	0150      	lsls	r0, r2, #5
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4621      	mov	r1, r4
 8002170:	1a51      	subs	r1, r2, r1
 8002172:	6139      	str	r1, [r7, #16]
 8002174:	4629      	mov	r1, r5
 8002176:	eb63 0301 	sbc.w	r3, r3, r1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002188:	4659      	mov	r1, fp
 800218a:	018b      	lsls	r3, r1, #6
 800218c:	4651      	mov	r1, sl
 800218e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002192:	4651      	mov	r1, sl
 8002194:	018a      	lsls	r2, r1, #6
 8002196:	4651      	mov	r1, sl
 8002198:	ebb2 0801 	subs.w	r8, r2, r1
 800219c:	4659      	mov	r1, fp
 800219e:	eb63 0901 	sbc.w	r9, r3, r1
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021b6:	4690      	mov	r8, r2
 80021b8:	4699      	mov	r9, r3
 80021ba:	4623      	mov	r3, r4
 80021bc:	eb18 0303 	adds.w	r3, r8, r3
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	462b      	mov	r3, r5
 80021c4:	eb49 0303 	adc.w	r3, r9, r3
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021d6:	4629      	mov	r1, r5
 80021d8:	024b      	lsls	r3, r1, #9
 80021da:	4621      	mov	r1, r4
 80021dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021e0:	4621      	mov	r1, r4
 80021e2:	024a      	lsls	r2, r1, #9
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ea:	2200      	movs	r2, #0
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021f4:	f7fd fffa 	bl	80001ec <__aeabi_uldivmod>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4613      	mov	r3, r2
 80021fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002200:	e058      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002202:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	099b      	lsrs	r3, r3, #6
 8002208:	2200      	movs	r2, #0
 800220a:	4618      	mov	r0, r3
 800220c:	4611      	mov	r1, r2
 800220e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002212:	623b      	str	r3, [r7, #32]
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
 8002218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800221c:	4642      	mov	r2, r8
 800221e:	464b      	mov	r3, r9
 8002220:	f04f 0000 	mov.w	r0, #0
 8002224:	f04f 0100 	mov.w	r1, #0
 8002228:	0159      	lsls	r1, r3, #5
 800222a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800222e:	0150      	lsls	r0, r2, #5
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4641      	mov	r1, r8
 8002236:	ebb2 0a01 	subs.w	sl, r2, r1
 800223a:	4649      	mov	r1, r9
 800223c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800224c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002254:	ebb2 040a 	subs.w	r4, r2, sl
 8002258:	eb63 050b 	sbc.w	r5, r3, fp
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	00eb      	lsls	r3, r5, #3
 8002266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800226a:	00e2      	lsls	r2, r4, #3
 800226c:	4614      	mov	r4, r2
 800226e:	461d      	mov	r5, r3
 8002270:	4643      	mov	r3, r8
 8002272:	18e3      	adds	r3, r4, r3
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	464b      	mov	r3, r9
 8002278:	eb45 0303 	adc.w	r3, r5, r3
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800228a:	4629      	mov	r1, r5
 800228c:	028b      	lsls	r3, r1, #10
 800228e:	4621      	mov	r1, r4
 8002290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002294:	4621      	mov	r1, r4
 8002296:	028a      	lsls	r2, r1, #10
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800229e:	2200      	movs	r2, #0
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	61fa      	str	r2, [r7, #28]
 80022a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022a8:	f7fd ffa0 	bl	80001ec <__aeabi_uldivmod>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4613      	mov	r3, r2
 80022b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	3301      	adds	r3, #1
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022ce:	e002      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3750      	adds	r7, #80	; 0x50
 80022dc:	46bd      	mov	sp, r7
 80022de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	00f42400 	.word	0x00f42400
 80022ec:	007a1200 	.word	0x007a1200

080022f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_RCC_GetHCLKFreq+0x14>)
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	2000000c 	.word	0x2000000c

08002308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800230c:	f7ff fff0 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 8002310:	4602      	mov	r2, r0
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	0a9b      	lsrs	r3, r3, #10
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	4903      	ldr	r1, [pc, #12]	; (800232c <HAL_RCC_GetPCLK1Freq+0x24>)
 800231e:	5ccb      	ldrb	r3, [r1, r3]
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40023800 	.word	0x40023800
 800232c:	0800295c 	.word	0x0800295c

08002330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002334:	f7ff ffdc 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	0b5b      	lsrs	r3, r3, #13
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4903      	ldr	r1, [pc, #12]	; (8002354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40023800 	.word	0x40023800
 8002354:	0800295c 	.word	0x0800295c

08002358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e03f      	b.n	80023ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe fb54 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2224      	movs	r2, #36	; 0x24
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800239a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f829 	bl	80023f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f8:	b0c0      	sub	sp, #256	; 0x100
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002410:	68d9      	ldr	r1, [r3, #12]
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	ea40 0301 	orr.w	r3, r0, r1
 800241c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800241e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	431a      	orrs	r2, r3
 800242c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	431a      	orrs	r2, r3
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800244c:	f021 010c 	bic.w	r1, r1, #12
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800245a:	430b      	orrs	r3, r1
 800245c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800245e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800246a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246e:	6999      	ldr	r1, [r3, #24]
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	ea40 0301 	orr.w	r3, r0, r1
 800247a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b8f      	ldr	r3, [pc, #572]	; (80026c0 <UART_SetConfig+0x2cc>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d005      	beq.n	8002494 <UART_SetConfig+0xa0>
 8002488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4b8d      	ldr	r3, [pc, #564]	; (80026c4 <UART_SetConfig+0x2d0>)
 8002490:	429a      	cmp	r2, r3
 8002492:	d104      	bne.n	800249e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002494:	f7ff ff4c 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8002498:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800249c:	e003      	b.n	80024a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800249e:	f7ff ff33 	bl	8002308 <HAL_RCC_GetPCLK1Freq>
 80024a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b0:	f040 810c 	bne.w	80026cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b8:	2200      	movs	r2, #0
 80024ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024c6:	4622      	mov	r2, r4
 80024c8:	462b      	mov	r3, r5
 80024ca:	1891      	adds	r1, r2, r2
 80024cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80024ce:	415b      	adcs	r3, r3
 80024d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024d6:	4621      	mov	r1, r4
 80024d8:	eb12 0801 	adds.w	r8, r2, r1
 80024dc:	4629      	mov	r1, r5
 80024de:	eb43 0901 	adc.w	r9, r3, r1
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024f6:	4690      	mov	r8, r2
 80024f8:	4699      	mov	r9, r3
 80024fa:	4623      	mov	r3, r4
 80024fc:	eb18 0303 	adds.w	r3, r8, r3
 8002500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002504:	462b      	mov	r3, r5
 8002506:	eb49 0303 	adc.w	r3, r9, r3
 800250a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800250e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800251a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800251e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002522:	460b      	mov	r3, r1
 8002524:	18db      	adds	r3, r3, r3
 8002526:	653b      	str	r3, [r7, #80]	; 0x50
 8002528:	4613      	mov	r3, r2
 800252a:	eb42 0303 	adc.w	r3, r2, r3
 800252e:	657b      	str	r3, [r7, #84]	; 0x54
 8002530:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002534:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002538:	f7fd fe58 	bl	80001ec <__aeabi_uldivmod>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <UART_SetConfig+0x2d4>)
 8002542:	fba3 2302 	umull	r2, r3, r3, r2
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	011c      	lsls	r4, r3, #4
 800254a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800254e:	2200      	movs	r2, #0
 8002550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002554:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002558:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800255c:	4642      	mov	r2, r8
 800255e:	464b      	mov	r3, r9
 8002560:	1891      	adds	r1, r2, r2
 8002562:	64b9      	str	r1, [r7, #72]	; 0x48
 8002564:	415b      	adcs	r3, r3
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002568:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800256c:	4641      	mov	r1, r8
 800256e:	eb12 0a01 	adds.w	sl, r2, r1
 8002572:	4649      	mov	r1, r9
 8002574:	eb43 0b01 	adc.w	fp, r3, r1
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002584:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002588:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800258c:	4692      	mov	sl, r2
 800258e:	469b      	mov	fp, r3
 8002590:	4643      	mov	r3, r8
 8002592:	eb1a 0303 	adds.w	r3, sl, r3
 8002596:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800259a:	464b      	mov	r3, r9
 800259c:	eb4b 0303 	adc.w	r3, fp, r3
 80025a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025b8:	460b      	mov	r3, r1
 80025ba:	18db      	adds	r3, r3, r3
 80025bc:	643b      	str	r3, [r7, #64]	; 0x40
 80025be:	4613      	mov	r3, r2
 80025c0:	eb42 0303 	adc.w	r3, r2, r3
 80025c4:	647b      	str	r3, [r7, #68]	; 0x44
 80025c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025ce:	f7fd fe0d 	bl	80001ec <__aeabi_uldivmod>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <UART_SetConfig+0x2d4>)
 80025da:	fba3 2301 	umull	r2, r3, r3, r1
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2264      	movs	r2, #100	; 0x64
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	1acb      	subs	r3, r1, r3
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025ee:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <UART_SetConfig+0x2d4>)
 80025f0:	fba3 2302 	umull	r2, r3, r3, r2
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025fc:	441c      	add	r4, r3
 80025fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002602:	2200      	movs	r2, #0
 8002604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002608:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800260c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002610:	4642      	mov	r2, r8
 8002612:	464b      	mov	r3, r9
 8002614:	1891      	adds	r1, r2, r2
 8002616:	63b9      	str	r1, [r7, #56]	; 0x38
 8002618:	415b      	adcs	r3, r3
 800261a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800261c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002620:	4641      	mov	r1, r8
 8002622:	1851      	adds	r1, r2, r1
 8002624:	6339      	str	r1, [r7, #48]	; 0x30
 8002626:	4649      	mov	r1, r9
 8002628:	414b      	adcs	r3, r1
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002638:	4659      	mov	r1, fp
 800263a:	00cb      	lsls	r3, r1, #3
 800263c:	4651      	mov	r1, sl
 800263e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002642:	4651      	mov	r1, sl
 8002644:	00ca      	lsls	r2, r1, #3
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	4603      	mov	r3, r0
 800264c:	4642      	mov	r2, r8
 800264e:	189b      	adds	r3, r3, r2
 8002650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002654:	464b      	mov	r3, r9
 8002656:	460a      	mov	r2, r1
 8002658:	eb42 0303 	adc.w	r3, r2, r3
 800265c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800266c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002670:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002674:	460b      	mov	r3, r1
 8002676:	18db      	adds	r3, r3, r3
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
 800267a:	4613      	mov	r3, r2
 800267c:	eb42 0303 	adc.w	r3, r2, r3
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002682:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002686:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800268a:	f7fd fdaf 	bl	80001ec <__aeabi_uldivmod>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <UART_SetConfig+0x2d4>)
 8002694:	fba3 1302 	umull	r1, r3, r3, r2
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	2164      	movs	r1, #100	; 0x64
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	3332      	adds	r3, #50	; 0x32
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <UART_SetConfig+0x2d4>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	f003 0207 	and.w	r2, r3, #7
 80026b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4422      	add	r2, r4
 80026ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026bc:	e105      	b.n	80028ca <UART_SetConfig+0x4d6>
 80026be:	bf00      	nop
 80026c0:	40011000 	.word	0x40011000
 80026c4:	40011400 	.word	0x40011400
 80026c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026d0:	2200      	movs	r2, #0
 80026d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026de:	4642      	mov	r2, r8
 80026e0:	464b      	mov	r3, r9
 80026e2:	1891      	adds	r1, r2, r2
 80026e4:	6239      	str	r1, [r7, #32]
 80026e6:	415b      	adcs	r3, r3
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ee:	4641      	mov	r1, r8
 80026f0:	1854      	adds	r4, r2, r1
 80026f2:	4649      	mov	r1, r9
 80026f4:	eb43 0501 	adc.w	r5, r3, r1
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	00eb      	lsls	r3, r5, #3
 8002702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002706:	00e2      	lsls	r2, r4, #3
 8002708:	4614      	mov	r4, r2
 800270a:	461d      	mov	r5, r3
 800270c:	4643      	mov	r3, r8
 800270e:	18e3      	adds	r3, r4, r3
 8002710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002714:	464b      	mov	r3, r9
 8002716:	eb45 0303 	adc.w	r3, r5, r3
 800271a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800272a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800273a:	4629      	mov	r1, r5
 800273c:	008b      	lsls	r3, r1, #2
 800273e:	4621      	mov	r1, r4
 8002740:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002744:	4621      	mov	r1, r4
 8002746:	008a      	lsls	r2, r1, #2
 8002748:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800274c:	f7fd fd4e 	bl	80001ec <__aeabi_uldivmod>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4b60      	ldr	r3, [pc, #384]	; (80028d8 <UART_SetConfig+0x4e4>)
 8002756:	fba3 2302 	umull	r2, r3, r3, r2
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	011c      	lsls	r4, r3, #4
 800275e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002762:	2200      	movs	r2, #0
 8002764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002768:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800276c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002770:	4642      	mov	r2, r8
 8002772:	464b      	mov	r3, r9
 8002774:	1891      	adds	r1, r2, r2
 8002776:	61b9      	str	r1, [r7, #24]
 8002778:	415b      	adcs	r3, r3
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002780:	4641      	mov	r1, r8
 8002782:	1851      	adds	r1, r2, r1
 8002784:	6139      	str	r1, [r7, #16]
 8002786:	4649      	mov	r1, r9
 8002788:	414b      	adcs	r3, r1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002798:	4659      	mov	r1, fp
 800279a:	00cb      	lsls	r3, r1, #3
 800279c:	4651      	mov	r1, sl
 800279e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027a2:	4651      	mov	r1, sl
 80027a4:	00ca      	lsls	r2, r1, #3
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	4642      	mov	r2, r8
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027b4:	464b      	mov	r3, r9
 80027b6:	460a      	mov	r2, r1
 80027b8:	eb42 0303 	adc.w	r3, r2, r3
 80027bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80027ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027d8:	4649      	mov	r1, r9
 80027da:	008b      	lsls	r3, r1, #2
 80027dc:	4641      	mov	r1, r8
 80027de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027e2:	4641      	mov	r1, r8
 80027e4:	008a      	lsls	r2, r1, #2
 80027e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027ea:	f7fd fcff 	bl	80001ec <__aeabi_uldivmod>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <UART_SetConfig+0x4e4>)
 80027f4:	fba3 1302 	umull	r1, r3, r3, r2
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	2164      	movs	r1, #100	; 0x64
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	3332      	adds	r3, #50	; 0x32
 8002806:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <UART_SetConfig+0x4e4>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002812:	441c      	add	r4, r3
 8002814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002818:	2200      	movs	r2, #0
 800281a:	673b      	str	r3, [r7, #112]	; 0x70
 800281c:	677a      	str	r2, [r7, #116]	; 0x74
 800281e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002822:	4642      	mov	r2, r8
 8002824:	464b      	mov	r3, r9
 8002826:	1891      	adds	r1, r2, r2
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	415b      	adcs	r3, r3
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002832:	4641      	mov	r1, r8
 8002834:	1851      	adds	r1, r2, r1
 8002836:	6039      	str	r1, [r7, #0]
 8002838:	4649      	mov	r1, r9
 800283a:	414b      	adcs	r3, r1
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800284a:	4659      	mov	r1, fp
 800284c:	00cb      	lsls	r3, r1, #3
 800284e:	4651      	mov	r1, sl
 8002850:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002854:	4651      	mov	r1, sl
 8002856:	00ca      	lsls	r2, r1, #3
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	4603      	mov	r3, r0
 800285e:	4642      	mov	r2, r8
 8002860:	189b      	adds	r3, r3, r2
 8002862:	66bb      	str	r3, [r7, #104]	; 0x68
 8002864:	464b      	mov	r3, r9
 8002866:	460a      	mov	r2, r1
 8002868:	eb42 0303 	adc.w	r3, r2, r3
 800286c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800286e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	663b      	str	r3, [r7, #96]	; 0x60
 8002878:	667a      	str	r2, [r7, #100]	; 0x64
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002886:	4649      	mov	r1, r9
 8002888:	008b      	lsls	r3, r1, #2
 800288a:	4641      	mov	r1, r8
 800288c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002890:	4641      	mov	r1, r8
 8002892:	008a      	lsls	r2, r1, #2
 8002894:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002898:	f7fd fca8 	bl	80001ec <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <UART_SetConfig+0x4e4>)
 80028a2:	fba3 1302 	umull	r1, r3, r3, r2
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2164      	movs	r1, #100	; 0x64
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	3332      	adds	r3, #50	; 0x32
 80028b4:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <UART_SetConfig+0x4e4>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	f003 020f 	and.w	r2, r3, #15
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4422      	add	r2, r4
 80028c8:	609a      	str	r2, [r3, #8]
}
 80028ca:	bf00      	nop
 80028cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028d0:	46bd      	mov	sp, r7
 80028d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d6:	bf00      	nop
 80028d8:	51eb851f 	.word	0x51eb851f

080028dc <__libc_init_array>:
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	4d0d      	ldr	r5, [pc, #52]	; (8002914 <__libc_init_array+0x38>)
 80028e0:	4c0d      	ldr	r4, [pc, #52]	; (8002918 <__libc_init_array+0x3c>)
 80028e2:	1b64      	subs	r4, r4, r5
 80028e4:	10a4      	asrs	r4, r4, #2
 80028e6:	2600      	movs	r6, #0
 80028e8:	42a6      	cmp	r6, r4
 80028ea:	d109      	bne.n	8002900 <__libc_init_array+0x24>
 80028ec:	4d0b      	ldr	r5, [pc, #44]	; (800291c <__libc_init_array+0x40>)
 80028ee:	4c0c      	ldr	r4, [pc, #48]	; (8002920 <__libc_init_array+0x44>)
 80028f0:	f000 f820 	bl	8002934 <_init>
 80028f4:	1b64      	subs	r4, r4, r5
 80028f6:	10a4      	asrs	r4, r4, #2
 80028f8:	2600      	movs	r6, #0
 80028fa:	42a6      	cmp	r6, r4
 80028fc:	d105      	bne.n	800290a <__libc_init_array+0x2e>
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
 8002900:	f855 3b04 	ldr.w	r3, [r5], #4
 8002904:	4798      	blx	r3
 8002906:	3601      	adds	r6, #1
 8002908:	e7ee      	b.n	80028e8 <__libc_init_array+0xc>
 800290a:	f855 3b04 	ldr.w	r3, [r5], #4
 800290e:	4798      	blx	r3
 8002910:	3601      	adds	r6, #1
 8002912:	e7f2      	b.n	80028fa <__libc_init_array+0x1e>
 8002914:	0800296c 	.word	0x0800296c
 8002918:	0800296c 	.word	0x0800296c
 800291c:	0800296c 	.word	0x0800296c
 8002920:	08002970 	.word	0x08002970

08002924 <memset>:
 8002924:	4402      	add	r2, r0
 8002926:	4603      	mov	r3, r0
 8002928:	4293      	cmp	r3, r2
 800292a:	d100      	bne.n	800292e <memset+0xa>
 800292c:	4770      	bx	lr
 800292e:	f803 1b01 	strb.w	r1, [r3], #1
 8002932:	e7f9      	b.n	8002928 <memset+0x4>

08002934 <_init>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	bf00      	nop
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr

08002940 <_fini>:
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	bf00      	nop
 8002944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002946:	bc08      	pop	{r3}
 8002948:	469e      	mov	lr, r3
 800294a:	4770      	bx	lr
