
TesisFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c58  08003c58  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c60  08003c60  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          0000027c  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000300  20000300  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a0b5  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018b0  00000000  00000000  0002a169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  0002ba20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000758  00000000  00000000  0002c220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000260e  00000000  00000000  0002c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f9c  00000000  00000000  0002ef86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4621  00000000  00000000  00038f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010d543  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023d0  00000000  00000000  0010d594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003b54 	.word	0x08003b54

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08003b54 	.word	0x08003b54

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <uartInit>:
 */
#include "API_uart.h"

static UART_HandleTypeDef UartHandle;

bool_t uartInit(){
 8000594:	b580      	push	{r7, lr}
 8000596:	b098      	sub	sp, #96	; 0x60
 8000598:	af00      	add	r7, sp, #0

	  UartHandle.Instance        = USART3;
 800059a:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <uartInit+0x7c>)
 800059c:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <uartInit+0x80>)
 800059e:	601a      	str	r2, [r3, #0]
	  UartHandle.Init.BaudRate   = 4800;
 80005a0:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <uartInit+0x7c>)
 80005a2:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80005a6:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <uartInit+0x7c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <uartInit+0x7c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <uartInit+0x7c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <uartInit+0x7c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <uartInit+0x7c>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <uartInit+0x7c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	61da      	str	r2, [r3, #28]

	  bool_t EstadoUart;
	  uint8_t miString[] = "BaudRate = 4800;\n\rDataBits=8;\n\rStopBits = 1;\n\rParity=NONE\n\n\rListo para recibir trama NMEA\n\r";
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <uartInit+0x84>)
 80005ce:	463b      	mov	r3, r7
 80005d0:	4611      	mov	r1, r2
 80005d2:	225c      	movs	r2, #92	; 0x5c
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fe47 	bl	8003268 <memcpy>


	  if (HAL_UART_Init(&UartHandle) != HAL_OK){
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <uartInit+0x7c>)
 80005dc:	f002 f9ae 	bl	800293c <HAL_UART_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d003      	beq.n	80005ee <uartInit+0x5a>
		  EstadoUart = false;
 80005e6:	2300      	movs	r3, #0
 80005e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80005ec:	e009      	b.n	8000602 <uartInit+0x6e>
	  }	else {
		  EstadoUart = true;
 80005ee:	2301      	movs	r3, #1
 80005f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		  HAL_UART_Transmit(&UartHandle, (uint8_t *) miString, sizeof(miString)/sizeof(char), 1000);
 80005f4:	4639      	mov	r1, r7
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	225c      	movs	r2, #92	; 0x5c
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <uartInit+0x7c>)
 80005fe:	f002 f9ea 	bl	80029d6 <HAL_UART_Transmit>
	  }

	  return EstadoUart;
 8000602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f

}
 8000606:	4618      	mov	r0, r3
 8000608:	3760      	adds	r7, #96	; 0x60
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200000a0 	.word	0x200000a0
 8000614:	40004800 	.word	0x40004800
 8000618:	08003b6c 	.word	0x08003b6c

0800061c <uartSendString>:

void uartSendString(uint8_t *ptrstring){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

	uint8_t cant=0;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]

	while(*(ptrstring+cant) != 0) cant++;
 8000628:	e002      	b.n	8000630 <uartSendString+0x14>
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	3301      	adds	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1f6      	bne.n	800062a <uartSendString+0xe>
	HAL_UART_Transmit(&UartHandle, ptrstring, cant, 1000);
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	b29a      	uxth	r2, r3
 8000640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000644:	6879      	ldr	r1, [r7, #4]
 8000646:	4803      	ldr	r0, [pc, #12]	; (8000654 <uartSendString+0x38>)
 8000648:	f002 f9c5 	bl	80029d6 <HAL_UART_Transmit>

}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000a0 	.word	0x200000a0

08000658 <uartRecvString>:

bool_t uartRecvString(uint8_t *ptrstring, uint8_t cantidad){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	70fb      	strb	r3, [r7, #3]
	if (HAL_UART_Receive(&UartHandle,ptrstring, cantidad,10) == HAL_OK) return true;
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	b29a      	uxth	r2, r3
 8000668:	230a      	movs	r3, #10
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	4806      	ldr	r0, [pc, #24]	; (8000688 <uartRecvString+0x30>)
 800066e:	f002 fa44 	bl	8002afa <HAL_UART_Receive>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d101      	bne.n	800067c <uartRecvString+0x24>
 8000678:	2301      	movs	r3, #1
 800067a:	e000      	b.n	800067e <uartRecvString+0x26>
	return false;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200000a0 	.word	0x200000a0

0800068c <decodeInit>:
/* ---------------------------------------------------------------------------*/

/* Esta funcion se utiliza para la inicializacion de datos y la MEF */

bool_t decodeInit(uint8_t * buffer, uint8_t length)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
	currentStatus = S0;
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <decodeInit+0x44>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
	startNewState = S0;
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <decodeInit+0x48>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
	startOldState = S0;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <decodeInit+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
	flagStart = false;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <decodeInit+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
	counter = 0;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <decodeInit+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
	myBuffer = buffer;
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <decodeInit+0x58>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6013      	str	r3, [r2, #0]
	myLength = length;
 80006bc:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <decodeInit+0x5c>)
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	7013      	strb	r3, [r2, #0]
	return true;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	200000e4 	.word	0x200000e4
 80006d4:	200000e5 	.word	0x200000e5
 80006d8:	200000e6 	.word	0x200000e6
 80006dc:	200000ed 	.word	0x200000ed
 80006e0:	200000ee 	.word	0x200000ee
 80006e4:	200000e8 	.word	0x200000e8
 80006e8:	200000ec 	.word	0x200000ec

080006ec <getData>:

/* Esta funcion recibe un dato del puerto serie y los analiza*/

int8_t getData(uint8_t data, uint8_t largo_trama){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
	int8_t r = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]

	if (isStartFrame(data) && !flagStart) {
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f842 	bl	800078c <isStartFrame>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d00a      	beq.n	8000724 <getData+0x38>
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <getData+0x94>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f083 0301 	eor.w	r3, r3, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <getData+0x38>
		flagStart = true;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <getData+0x94>)
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	e026      	b.n	8000772 <getData+0x86>
	} else {
		if (flagStart) {
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <getData+0x94>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d022      	beq.n	8000772 <getData+0x86>
			if (isEndFrame(data)) {
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f88a 	bl	8000848 <isEndFrame>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d00e      	beq.n	8000758 <getData+0x6c>
				if (largo_trama == counter) {
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <getData+0x98>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	429a      	cmp	r2, r3
 8000742:	d102      	bne.n	800074a <getData+0x5e>
					r= counter;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <getData+0x98>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	73fb      	strb	r3, [r7, #15]
				}
				flagStart=false;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <getData+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
				counter=0;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <getData+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e00c      	b.n	8000772 <getData+0x86>
			} else {
				myBuffer[counter] = data;
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <getData+0x9c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a09      	ldr	r2, [pc, #36]	; (8000784 <getData+0x98>)
 800075e:	7812      	ldrb	r2, [r2, #0]
 8000760:	4413      	add	r3, r2
 8000762:	79fa      	ldrb	r2, [r7, #7]
 8000764:	701a      	strb	r2, [r3, #0]
				counter++;
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <getData+0x98>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <getData+0x98>)
 8000770:	701a      	strb	r2, [r3, #0]
			}
		}
	}


	return r;
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000ed 	.word	0x200000ed
 8000784:	200000ee 	.word	0x200000ee
 8000788:	200000e8 	.word	0x200000e8

0800078c <isStartFrame>:

/* Esta función se utiliza para validar el inicio de la trama  con el patron de caracteres $GPR*/

uint8_t isStartFrame(uint8_t val){
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]

	bool_t flag = false;
 8000796:	2300      	movs	r3, #0
 8000798:	73fb      	strb	r3, [r7, #15]
	switch (startOldState){
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <isStartFrame+0xb0>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d840      	bhi.n	8000824 <isStartFrame+0x98>
 80007a2:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <isStartFrame+0x1c>)
 80007a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a8:	080007b9 	.word	0x080007b9
 80007ac:	080007d3 	.word	0x080007d3
 80007b0:	080007ed 	.word	0x080007ed
 80007b4:	08000807 	.word	0x08000807
		case S0:
		{
			if(val ^ startFrame[0]){
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <isStartFrame+0xb4>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d003      	beq.n	80007ca <isStartFrame+0x3e>
				startNewState = S0;
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <isStartFrame+0xb8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
			}else{
				startNewState = S1;
			}
			break;
 80007c8:	e02d      	b.n	8000826 <isStartFrame+0x9a>
				startNewState = S1;
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <isStartFrame+0xb8>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
			break;
 80007d0:	e029      	b.n	8000826 <isStartFrame+0x9a>
		}
		case S1:
		{
			if(val ^ startFrame[1]){
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <isStartFrame+0xb4>)
 80007d4:	785b      	ldrb	r3, [r3, #1]
 80007d6:	79fa      	ldrb	r2, [r7, #7]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d003      	beq.n	80007e4 <isStartFrame+0x58>
				startNewState = S0;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <isStartFrame+0xb8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
			}else{
				startNewState = S2;
			}
			break;
 80007e2:	e020      	b.n	8000826 <isStartFrame+0x9a>
				startNewState = S2;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <isStartFrame+0xb8>)
 80007e6:	2202      	movs	r2, #2
 80007e8:	701a      	strb	r2, [r3, #0]
			break;
 80007ea:	e01c      	b.n	8000826 <isStartFrame+0x9a>
		}
		case S2:
		{
			if(val ^ startFrame[2]){
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <isStartFrame+0xb4>)
 80007ee:	789b      	ldrb	r3, [r3, #2]
 80007f0:	79fa      	ldrb	r2, [r7, #7]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d003      	beq.n	80007fe <isStartFrame+0x72>
				startNewState = S0;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <isStartFrame+0xb8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
			}else{
				startNewState = S3;
			}
			break;
 80007fc:	e013      	b.n	8000826 <isStartFrame+0x9a>
				startNewState = S3;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <isStartFrame+0xb8>)
 8000800:	2203      	movs	r2, #3
 8000802:	701a      	strb	r2, [r3, #0]
			break;
 8000804:	e00f      	b.n	8000826 <isStartFrame+0x9a>
		}
		case S3:
		{
			if(val ^ startFrame[3]){
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <isStartFrame+0xb4>)
 8000808:	78db      	ldrb	r3, [r3, #3]
 800080a:	79fa      	ldrb	r2, [r7, #7]
 800080c:	429a      	cmp	r2, r3
 800080e:	d003      	beq.n	8000818 <isStartFrame+0x8c>
				startNewState = S0;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <isStartFrame+0xb8>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
			}else{
				startNewState = S0;
				flag = true;
			}

			break;
 8000816:	e006      	b.n	8000826 <isStartFrame+0x9a>
				startNewState = S0;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <isStartFrame+0xb8>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
				flag = true;
 800081e:	2301      	movs	r3, #1
 8000820:	73fb      	strb	r3, [r7, #15]
			break;
 8000822:	e000      	b.n	8000826 <isStartFrame+0x9a>
		}
		default:
			//decodeInit();
			break;
 8000824:	bf00      	nop
	}
	startOldState = startNewState;
 8000826:	4b07      	ldr	r3, [pc, #28]	; (8000844 <isStartFrame+0xb8>)
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <isStartFrame+0xb0>)
 800082c:	701a      	strb	r2, [r3, #0]

	return flag;
 800082e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	200000e6 	.word	0x200000e6
 8000840:	20000000 	.word	0x20000000
 8000844:	200000e5 	.word	0x200000e5

08000848 <isEndFrame>:

/* Esta función se utiliza para validar el fin de la trama con el caracter (*)   */

uint8_t isEndFrame(uint8_t val){
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]

	bool_t flag = false;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
	if(val == endFrame){
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <isEndFrame+0x2c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	429a      	cmp	r2, r3
 800085e:	d101      	bne.n	8000864 <isEndFrame+0x1c>
		flag = true;
 8000860:	2301      	movs	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
	}
	return flag;
 8000864:	7bfb      	ldrb	r3, [r7, #15]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000004 	.word	0x20000004

08000878 <filter>:

/* Esta función se utiliza para filtrar/obtener los datos del horario, latitud y longitud*/

uint8_t * filter(uint8_t *data){
 8000878:	b580      	push	{r7, lr}
 800087a:	b08e      	sub	sp, #56	; 0x38
 800087c:	af02      	add	r7, sp, #8
 800087e:	6078      	str	r0, [r7, #4]
	static uint8_t salida[255];
	uint8_t horario[7];
	uint8_t latitud[12];
	uint8_t longitud[13];
	memcpy(horario,data+3,6);     //hora
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	1cd9      	adds	r1, r3, #3
 8000884:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000888:	2206      	movs	r2, #6
 800088a:	4618      	mov	r0, r3
 800088c:	f002 fcec 	bl	8003268 <memcpy>
	memcpy(latitud,data+16,11);   //latitud
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f103 0110 	add.w	r1, r3, #16
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	220b      	movs	r2, #11
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fce3 	bl	8003268 <memcpy>
	memcpy(longitud,data+28,12);  //longitud
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f103 011c 	add.w	r1, r3, #28
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	220c      	movs	r2, #12
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fcda 	bl	8003268 <memcpy>
	horario[6] = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	latitud[11] = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	longitud[12] = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	763b      	strb	r3, [r7, #24]
	sprintf((char *)salida,"\nDatos de posicionamiento> Hora UTC: %s  Latitud: %s  Longitud %s\n\r",horario,latitud,longitud);
 80008c4:	f107 011c 	add.w	r1, r7, #28
 80008c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	460b      	mov	r3, r1
 80008d4:	4904      	ldr	r1, [pc, #16]	; (80008e8 <filter+0x70>)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <filter+0x74>)
 80008d8:	f002 fdcc 	bl	8003474 <siprintf>

	return salida;
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <filter+0x74>)
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3730      	adds	r7, #48	; 0x30
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	08003bc8 	.word	0x08003bc8
 80008ec:	200000f0 	.word	0x200000f0

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f8:	f000 fbd6 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fc:	f000 f8aa 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000900:	f000 f9a4 	bl	8000c4c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000904:	f000 f978 	bl	8000bf8 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000908:	f000 f90e 	bl	8000b28 <MX_CAN1_Init>
  MX_CAN2_Init();
 800090c:	f000 f940 	bl	8000b90 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  /* Defino una variable y un vector para manejar los datos recibidos por la UART */
  int8_t len = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
  uint8_t rcvBuffer[255];
  uint8_t decodeBuffer[255];

  /* Inicializa la decodificacion y los retardos no bloqueantes */
  decodeInit(decodeBuffer,255);
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	21ff      	movs	r1, #255	; 0xff
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff feb6 	bl	800068c <decodeInit>

  /*inicializa la UART y configura los parametros de comunicacion*/
  uartInit();
 8000920:	f7ff fe38 	bl	8000594 <uartInit>
  //Se configuran los filtros para el puerto CAN

  sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8000924:	4b42      	ldr	r3, [pc, #264]	; (8000a30 <main+0x140>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh=0x12<<5;
 800092a:	4b41      	ldr	r3, [pc, #260]	; (8000a30 <main+0x140>)
 800092c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000930:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow=0;
 8000932:	4b3f      	ldr	r3, [pc, #252]	; (8000a30 <main+0x140>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh=0;
 8000938:	4b3d      	ldr	r3, [pc, #244]	; (8000a30 <main+0x140>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow=0;
 800093e:	4b3c      	ldr	r3, [pc, #240]	; (8000a30 <main+0x140>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000944:	4b3a      	ldr	r3, [pc, #232]	; (8000a30 <main+0x140>)
 8000946:	2201      	movs	r2, #1
 8000948:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterActivation=ENABLE;
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <main+0x140>)
 800094c:	2201      	movs	r2, #1
 800094e:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 8000950:	4937      	ldr	r1, [pc, #220]	; (8000a30 <main+0x140>)
 8000952:	4838      	ldr	r0, [pc, #224]	; (8000a34 <main+0x144>)
 8000954:	f000 fd3a 	bl	80013cc <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8000958:	4836      	ldr	r0, [pc, #216]	; (8000a34 <main+0x144>)
 800095a:	f000 fe17 	bl	800158c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800095e:	2102      	movs	r1, #2
 8000960:	4834      	ldr	r0, [pc, #208]	; (8000a34 <main+0x144>)
 8000962:	f001 f844 	bl	80019ee <HAL_CAN_ActivateNotification>

  HAL_CAN_ConfigFilter(&hcan2,&sFilterConfig);
 8000966:	4932      	ldr	r1, [pc, #200]	; (8000a30 <main+0x140>)
 8000968:	4833      	ldr	r0, [pc, #204]	; (8000a38 <main+0x148>)
 800096a:	f000 fd2f 	bl	80013cc <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan2);
 800096e:	4832      	ldr	r0, [pc, #200]	; (8000a38 <main+0x148>)
 8000970:	f000 fe0c 	bl	800158c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000974:	2102      	movs	r1, #2
 8000976:	4830      	ldr	r0, [pc, #192]	; (8000a38 <main+0x148>)
 8000978:	f001 f839 	bl	80019ee <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
		if (uartRecvString(rcvBuffer, 1)) {               /* esta funcion recibe datos por la UART de a un caracter*/
 800097c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000980:	2101      	movs	r1, #1
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fe68 	bl	8000658 <uartRecvString>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d01d      	beq.n	80009ca <main+0xda>
			  len = getData(rcvBuffer[0], 62);            /* esta funcion obtiene los datos recibidos, los analiza y decodifica*/
 800098e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000992:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	213e      	movs	r1, #62	; 0x3e
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fea6 	bl	80006ec <getData>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

			  if(len > 0){                                /* Consulta si el largo de trama es mayor a 0*/
 80009a6:	f997 320b 	ldrsb.w	r3, [r7, #523]	; 0x20b
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	dd0d      	ble.n	80009ca <main+0xda>
				  uint8_t *vector = filter(decodeBuffer); /* esta funcion muestra datos filtrados de la trama*/
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff61 	bl	8000878 <filter>
 80009b6:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
				  uartSendString(vector);                 /* esta funcion envia datos por la UART*/
 80009ba:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80009be:	f7ff fe2d 	bl	800061c <uartSendString>
				  free(vector);                           /* vacio al vector*/
 80009c2:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80009c6:	f002 fc47 	bl	8003258 <free>
				//  BSP_LED_Toggle(LED1);                   /* Led enciende cada vez que la trama es valida*/
			  }
		  }

		  HAL_CAN_RxFifo0MsgPendingCallback(&hcan2);
 80009ca:	481b      	ldr	r0, [pc, #108]	; (8000a38 <main+0x148>)
 80009cc:	f001 f835 	bl	8001a3a <HAL_CAN_RxFifo0MsgPendingCallback>
for(int i=0;i<5;i++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80009d6:	e023      	b.n	8000a20 <main+0x130>
{
       HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, txData, &pTxMailbox);
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <main+0x14c>)
 80009da:	4a19      	ldr	r2, [pc, #100]	; (8000a40 <main+0x150>)
 80009dc:	4919      	ldr	r1, [pc, #100]	; (8000a44 <main+0x154>)
 80009de:	4815      	ldr	r0, [pc, #84]	; (8000a34 <main+0x144>)
 80009e0:	f000 fe18 	bl	8001614 <HAL_CAN_AddTxMessage>
       HAL_Delay(500);
 80009e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e8:	f000 fbd0 	bl	800118c <HAL_Delay>
if(HAL_CAN_GetState(&hcan2) == true)
 80009ec:	4812      	ldr	r0, [pc, #72]	; (8000a38 <main+0x148>)
 80009ee:	f001 f838 	bl	8001a62 <HAL_CAN_GetState>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d10e      	bne.n	8000a16 <main+0x126>
		{
HAL_CAN_RxFifo0FullCallback(&hcan1);
 80009f8:	480e      	ldr	r0, [pc, #56]	; (8000a34 <main+0x144>)
 80009fa:	f001 f828 	bl	8001a4e <HAL_CAN_RxFifo0FullCallback>

       HAL_CAN_GetRxMessage(&hcan2, tamaño, &pRxHeader,paraCAN);
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <main+0x158>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <main+0x15c>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <main+0x160>)
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <main+0x148>)
 8000a0a:	f000 fede 	bl	80017ca <HAL_CAN_GetRxMessage>
       HAL_Delay(500);}
 8000a0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a12:	f000 fbbb 	bl	800118c <HAL_Delay>
for(int i=0;i<5;i++)
 8000a16:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000a20:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	ddd7      	ble.n	80009d8 <main+0xe8>
}
       uartSendString(paraCAN);
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <main+0x15c>)
 8000a2a:	f7ff fdf7 	bl	800061c <uartSendString>
		if (uartRecvString(rcvBuffer, 1)) {               /* esta funcion recibe datos por la UART de a un caracter*/
 8000a2e:	e7a5      	b.n	800097c <main+0x8c>
 8000a30:	200002b8 	.word	0x200002b8
 8000a34:	200001f0 	.word	0x200001f0
 8000a38:	20000218 	.word	0x20000218
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	2000000c 	.word	0x2000000c
 8000a44:	20000284 	.word	0x20000284
 8000a48:	20000010 	.word	0x20000010
 8000a4c:	200002e0 	.word	0x200002e0
 8000a50:	2000029c 	.word	0x2000029c

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	; 0x50
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	2230      	movs	r2, #48	; 0x30
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fc0e 	bl	8003284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <SystemClock_Config+0xcc>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	4a27      	ldr	r2, [pc, #156]	; (8000b20 <SystemClock_Config+0xcc>)
 8000a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a86:	6413      	str	r3, [r2, #64]	; 0x40
 8000a88:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <SystemClock_Config+0xcc>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <SystemClock_Config+0xd0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a21      	ldr	r2, [pc, #132]	; (8000b24 <SystemClock_Config+0xd0>)
 8000a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <SystemClock_Config+0xd0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ac8:	23a8      	movs	r3, #168	; 0xa8
 8000aca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0320 	add.w	r3, r7, #32
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 fa97 	bl	800200c <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae4:	f000 f92e 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	230f      	movs	r3, #15
 8000aea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2302      	movs	r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2105      	movs	r1, #5
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fcf8 	bl	80024fc <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b12:	f000 f917 	bl	8000d44 <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3750      	adds	r7, #80	; 0x50
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000

08000b28 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_CAN1_Init+0x60>)
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <MX_CAN1_Init+0x64>)
 8000b30:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_CAN1_Init+0x60>)
 8000b34:	2210      	movs	r2, #16
 8000b36:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <MX_CAN1_Init+0x60>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_CAN1_Init+0x60>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_CAN1_Init+0x60>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_CAN1_Init+0x60>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <MX_CAN1_Init+0x60>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_CAN1_Init+0x60>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_CAN1_Init+0x60>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_CAN1_Init+0x60>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_CAN1_Init+0x60>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_CAN1_Init+0x60>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_CAN1_Init+0x60>)
 8000b76:	f000 fb2d 	bl	80011d4 <HAL_CAN_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000b80:	f000 f8e0 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200001f0 	.word	0x200001f0
 8000b8c:	40006400 	.word	0x40006400

08000b90 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_CAN2_Init+0x60>)
 8000b96:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <MX_CAN2_Init+0x64>)
 8000b98:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_CAN2_Init+0x60>)
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_CAN2_Init+0x60>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_CAN2_Init+0x60>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MX_CAN2_Init+0x60>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_CAN2_Init+0x60>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <MX_CAN2_Init+0x60>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_CAN2_Init+0x60>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_CAN2_Init+0x60>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_CAN2_Init+0x60>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_CAN2_Init+0x60>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_CAN2_Init+0x60>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_CAN2_Init+0x60>)
 8000bde:	f000 faf9 	bl	80011d4 <HAL_CAN_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000be8:	f000 f8ac 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000218 	.word	0x20000218
 8000bf4:	40006800 	.word	0x40006800

08000bf8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <MX_USART3_UART_Init+0x50>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c30:	f001 fe84 	bl	800293c <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c3a:	f000 f883 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000240 	.word	0x20000240
 8000c48:	40004800 	.word	0x40004800

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a33      	ldr	r2, [pc, #204]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b31      	ldr	r3, [pc, #196]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a2c      	ldr	r2, [pc, #176]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a25      	ldr	r2, [pc, #148]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a1e      	ldr	r2, [pc, #120]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_GPIO_Init+0xec>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cf4:	4811      	ldr	r0, [pc, #68]	; (8000d3c <MX_GPIO_Init+0xf0>)
 8000cf6:	f001 f96f 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cfa:	2340      	movs	r3, #64	; 0x40
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <MX_GPIO_Init+0xf4>)
 8000d0e:	f000 ffb7 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d12:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_GPIO_Init+0xf0>)
 8000d2c:	f000 ffa8 	bl	8001c80 <HAL_GPIO_Init>

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	40020000 	.word	0x40020000

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a42      	ldr	r2, [pc, #264]	; (8000ec8 <HAL_CAN_MspInit+0x128>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d135      	bne.n	8000e2e <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000dc2:	4b42      	ldr	r3, [pc, #264]	; (8000ecc <HAL_CAN_MspInit+0x12c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	4a40      	ldr	r2, [pc, #256]	; (8000ecc <HAL_CAN_MspInit+0x12c>)
 8000dca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000dcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <HAL_CAN_MspInit+0x12c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d10d      	bne.n	8000df0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	4b3d      	ldr	r3, [pc, #244]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a3c      	ldr	r2, [pc, #240]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000dde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b3a      	ldr	r3, [pc, #232]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4a35      	ldr	r2, [pc, #212]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000dfa:	f043 0308 	orr.w	r3, r3, #8
 8000dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000e00:	4b33      	ldr	r3, [pc, #204]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f003 0308 	and.w	r3, r3, #8
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	482b      	ldr	r0, [pc, #172]	; (8000ed4 <HAL_CAN_MspInit+0x134>)
 8000e28:	f000 ff2a 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000e2c:	e048      	b.n	8000ec0 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a29      	ldr	r2, [pc, #164]	; (8000ed8 <HAL_CAN_MspInit+0x138>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d143      	bne.n	8000ec0 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000e42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_CAN_MspInit+0x12c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <HAL_CAN_MspInit+0x12c>)
 8000e5c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_CAN_MspInit+0x12c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d10d      	bne.n	8000e82 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a18      	ldr	r2, [pc, #96]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000e70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_CAN_MspInit+0x130>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e9e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000eb0:	2309      	movs	r3, #9
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <HAL_CAN_MspInit+0x13c>)
 8000ebc:	f000 fee0 	bl	8001c80 <HAL_GPIO_Init>
}
 8000ec0:	bf00      	nop
 8000ec2:	3730      	adds	r7, #48	; 0x30
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40006400 	.word	0x40006400
 8000ecc:	200002e4 	.word	0x200002e4
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020c00 	.word	0x40020c00
 8000ed8:	40006800 	.word	0x40006800
 8000edc:	40020400 	.word	0x40020400

08000ee0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <HAL_UART_MspInit+0x84>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d12c      	bne.n	8000f5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <HAL_UART_MspInit+0x8c>)
 8000f58:	f000 fe92 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	; 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40004800 	.word	0x40004800
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f8c6 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f002 f906 	bl	8003204 <__errno>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20030000 	.word	0x20030000
 8001024:	00000400 	.word	0x00000400
 8001028:	200002e8 	.word	0x200002e8
 800102c:	20000300 	.word	0x20000300

08001030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <SystemInit+0x20>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <SystemInit+0x20>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800105a:	490e      	ldr	r1, [pc, #56]	; (8001094 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001070:	4c0b      	ldr	r4, [pc, #44]	; (80010a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800107e:	f7ff ffd7 	bl	8001030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f002 f8c5 	bl	8003210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff fc33 	bl	80008f0 <main>
  bx  lr    
 800108a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800108c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001098:	08003c68 	.word	0x08003c68
  ldr r2, =_sbss
 800109c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80010a0:	20000300 	.word	0x20000300

080010a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_Init+0x40>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_Init+0x40>)
 80010be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x40>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 fda1 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fe38 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023c00 	.word	0x40023c00

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fdab 	bl	8001c66 <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001128:	f000 fd81 	bl	8001c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000014 	.word	0x20000014
 8001144:	2000001c 	.word	0x2000001c
 8001148:	20000018 	.word	0x20000018

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	2000001c 	.word	0x2000001c
 8001170:	200002ec 	.word	0x200002ec

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200002ec 	.word	0x200002ec

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffde 	bl	8001174 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000001c 	.word	0x2000001c

080011d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e0ed      	b.n	80013c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fdd4 	bl	8000da0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0201 	orr.w	r2, r2, #1
 8001206:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001208:	f7ff ffb4 	bl	8001174 <HAL_GetTick>
 800120c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800120e:	e012      	b.n	8001236 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001210:	f7ff ffb0 	bl	8001174 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b0a      	cmp	r3, #10
 800121c:	d90b      	bls.n	8001236 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2205      	movs	r2, #5
 800122e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e0c5      	b.n	80013c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0e5      	beq.n	8001210 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0202 	bic.w	r2, r2, #2
 8001252:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001254:	f7ff ff8e 	bl	8001174 <HAL_GetTick>
 8001258:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800125a:	e012      	b.n	8001282 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800125c:	f7ff ff8a 	bl	8001174 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b0a      	cmp	r3, #10
 8001268:	d90b      	bls.n	8001282 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2205      	movs	r2, #5
 800127a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e09f      	b.n	80013c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1e5      	bne.n	800125c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7e1b      	ldrb	r3, [r3, #24]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d108      	bne.n	80012aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	e007      	b.n	80012ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7e5b      	ldrb	r3, [r3, #25]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d108      	bne.n	80012d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	e007      	b.n	80012e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7e9b      	ldrb	r3, [r3, #26]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d108      	bne.n	80012fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0220 	orr.w	r2, r2, #32
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	e007      	b.n	800130e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0220 	bic.w	r2, r2, #32
 800130c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7edb      	ldrb	r3, [r3, #27]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d108      	bne.n	8001328 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0210 	bic.w	r2, r2, #16
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e007      	b.n	8001338 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0210 	orr.w	r2, r2, #16
 8001336:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7f1b      	ldrb	r3, [r3, #28]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d108      	bne.n	8001352 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0208 	orr.w	r2, r2, #8
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e007      	b.n	8001362 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0208 	bic.w	r2, r2, #8
 8001360:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7f5b      	ldrb	r3, [r3, #29]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d108      	bne.n	800137c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 0204 	orr.w	r2, r2, #4
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e007      	b.n	800138c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0204 	bic.w	r2, r2, #4
 800138a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	ea42 0103 	orr.w	r1, r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013e4:	7cfb      	ldrb	r3, [r7, #19]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d003      	beq.n	80013f2 <HAL_CAN_ConfigFilter+0x26>
 80013ea:	7cfb      	ldrb	r3, [r7, #19]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	f040 80be 	bne.w	800156e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80013f2:	4b65      	ldr	r3, [pc, #404]	; (8001588 <HAL_CAN_ConfigFilter+0x1bc>)
 80013f4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013fc:	f043 0201 	orr.w	r2, r3, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800140c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	431a      	orrs	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	2201      	movs	r2, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	401a      	ands	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d123      	bne.n	800149c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	43db      	mvns	r3, r3
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001476:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3248      	adds	r2, #72	; 0x48
 800147c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001490:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001492:	6979      	ldr	r1, [r7, #20]
 8001494:	3348      	adds	r3, #72	; 0x48
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d122      	bne.n	80014ea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3248      	adds	r2, #72	; 0x48
 80014ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014e0:	6979      	ldr	r1, [r7, #20]
 80014e2:	3348      	adds	r3, #72	; 0x48
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	401a      	ands	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001504:	e007      	b.n	8001516 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	431a      	orrs	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43db      	mvns	r3, r3
 8001528:	401a      	ands	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001530:	e007      	b.n	8001542 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	431a      	orrs	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d107      	bne.n	800155a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	431a      	orrs	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001560:	f023 0201 	bic.w	r2, r3, #1
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e006      	b.n	800157c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
  }
}
 800157c:	4618      	mov	r0, r3
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40006400 	.word	0x40006400

0800158c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b01      	cmp	r3, #1
 800159e:	d12e      	bne.n	80015fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2202      	movs	r2, #2
 80015a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015b8:	f7ff fddc 	bl	8001174 <HAL_GetTick>
 80015bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015be:	e012      	b.n	80015e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c0:	f7ff fdd8 	bl	8001174 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b0a      	cmp	r3, #10
 80015cc:	d90b      	bls.n	80015e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2205      	movs	r2, #5
 80015de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e012      	b.n	800160c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1e5      	bne.n	80015c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e006      	b.n	800160c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
  }
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	; 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001628:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001632:	7ffb      	ldrb	r3, [r7, #31]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d003      	beq.n	8001640 <HAL_CAN_AddTxMessage+0x2c>
 8001638:	7ffb      	ldrb	r3, [r7, #31]
 800163a:	2b02      	cmp	r3, #2
 800163c:	f040 80b8 	bne.w	80017b0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10a      	bne.n	8001660 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001650:	2b00      	cmp	r3, #0
 8001652:	d105      	bne.n	8001660 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 80a0 	beq.w	80017a0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	0e1b      	lsrs	r3, r3, #24
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d907      	bls.n	8001680 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e09e      	b.n	80017be <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001680:	2201      	movs	r2, #1
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	409a      	lsls	r2, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10d      	bne.n	80016ae <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800169c:	68f9      	ldr	r1, [r7, #12]
 800169e:	6809      	ldr	r1, [r1, #0]
 80016a0:	431a      	orrs	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3318      	adds	r3, #24
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	440b      	add	r3, r1
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e00f      	b.n	80016ce <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016b8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016be:	68f9      	ldr	r1, [r7, #12]
 80016c0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016c2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3318      	adds	r3, #24
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	440b      	add	r3, r1
 80016cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6819      	ldr	r1, [r3, #0]
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3318      	adds	r3, #24
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	440b      	add	r3, r1
 80016de:	3304      	adds	r3, #4
 80016e0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	7d1b      	ldrb	r3, [r3, #20]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d111      	bne.n	800170e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3318      	adds	r3, #24
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4413      	add	r3, r2
 80016f6:	3304      	adds	r3, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	6811      	ldr	r1, [r2, #0]
 80016fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3318      	adds	r3, #24
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	440b      	add	r3, r1
 800170a:	3304      	adds	r3, #4
 800170c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3307      	adds	r3, #7
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	061a      	lsls	r2, r3, #24
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3306      	adds	r3, #6
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	041b      	lsls	r3, r3, #16
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3305      	adds	r3, #5
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	4313      	orrs	r3, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	3204      	adds	r2, #4
 800172e:	7812      	ldrb	r2, [r2, #0]
 8001730:	4610      	mov	r0, r2
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	6811      	ldr	r1, [r2, #0]
 8001736:	ea43 0200 	orr.w	r2, r3, r0
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	440b      	add	r3, r1
 8001740:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001744:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3303      	adds	r3, #3
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	061a      	lsls	r2, r3, #24
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3302      	adds	r3, #2
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3301      	adds	r3, #1
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	4313      	orrs	r3, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	7812      	ldrb	r2, [r2, #0]
 8001766:	4610      	mov	r0, r2
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	6811      	ldr	r1, [r2, #0]
 800176c:	ea43 0200 	orr.w	r2, r3, r0
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	440b      	add	r3, r1
 8001776:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800177a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3318      	adds	r3, #24
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	4413      	add	r3, r2
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	6811      	ldr	r1, [r2, #0]
 800178e:	f043 0201 	orr.w	r2, r3, #1
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3318      	adds	r3, #24
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	440b      	add	r3, r1
 800179a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	e00e      	b.n	80017be <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e006      	b.n	80017be <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
  }
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017ca:	b480      	push	{r7}
 80017cc:	b087      	sub	sp, #28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017de:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d003      	beq.n	80017ee <HAL_CAN_GetRxMessage+0x24>
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	f040 80f3 	bne.w	80019d4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10e      	bne.n	8001812 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d116      	bne.n	8001830 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0e7      	b.n	80019e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d107      	bne.n	8001830 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0d8      	b.n	80019e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	331b      	adds	r3, #27
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	4413      	add	r3, r2
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0204 	and.w	r2, r3, #4
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10c      	bne.n	8001868 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	331b      	adds	r3, #27
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0d5b      	lsrs	r3, r3, #21
 800185e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	e00b      	b.n	8001880 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	331b      	adds	r3, #27
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	4413      	add	r3, r2
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	08db      	lsrs	r3, r3, #3
 8001878:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	331b      	adds	r3, #27
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0202 	and.w	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	331b      	adds	r3, #27
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	4413      	add	r3, r2
 80018a2:	3304      	adds	r3, #4
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 020f 	and.w	r2, r3, #15
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	331b      	adds	r3, #27
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	3304      	adds	r3, #4
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	331b      	adds	r3, #27
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4413      	add	r3, r2
 80018d2:	3304      	adds	r3, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	0c1b      	lsrs	r3, r3, #16
 80018d8:	b29a      	uxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	4413      	add	r3, r2
 80018e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0a1a      	lsrs	r2, r3, #8
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	4413      	add	r3, r2
 8001918:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	0c1a      	lsrs	r2, r3, #16
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	3302      	adds	r3, #2
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4413      	add	r3, r2
 8001932:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0e1a      	lsrs	r2, r3, #24
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	3303      	adds	r3, #3
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	4413      	add	r3, r2
 800194c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3304      	adds	r3, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	4413      	add	r3, r2
 8001964:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	0a1a      	lsrs	r2, r3, #8
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	3305      	adds	r3, #5
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	4413      	add	r3, r2
 800197e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0c1a      	lsrs	r2, r3, #16
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	3306      	adds	r3, #6
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4413      	add	r3, r2
 8001998:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	0e1a      	lsrs	r2, r3, #24
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	3307      	adds	r3, #7
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d108      	bne.n	80019c0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 0220 	orr.w	r2, r2, #32
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	e007      	b.n	80019d0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0220 	orr.w	r2, r2, #32
 80019ce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e006      	b.n	80019e2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
  }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d002      	beq.n	8001a0c <HAL_CAN_ActivateNotification+0x1e>
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d109      	bne.n	8001a20 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6959      	ldr	r1, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e006      	b.n	8001a2e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
  }
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a70:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d002      	beq.n	8001a7e <HAL_CAN_GetState+0x1c>
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d112      	bne.n	8001aa4 <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	e008      	b.n	8001aa4 <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	; (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	; (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf28      	it	cs
 8001b8a:	2304      	movcs	r3, #4
 8001b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d902      	bls.n	8001b9c <NVIC_EncodePriority+0x30>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b03      	subs	r3, #3
 8001b9a:	e000      	b.n	8001b9e <NVIC_EncodePriority+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	4313      	orrs	r3, r2
         );
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	; 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d301      	bcc.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00f      	b.n	8001c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <SysTick_Config+0x40>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf8:	f7ff ff8e 	bl	8001b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <SysTick_Config+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SysTick_Config+0x40>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff47 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c40:	f7ff ff5c 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff ff8e 	bl	8001b6c <NVIC_EncodePriority>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff5d 	bl	8001b18 <__NVIC_SetPriority>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffb0 	bl	8001bd4 <SysTick_Config>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	e177      	b.n	8001f8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f040 8166 	bne.w	8001f86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d005      	beq.n	8001cd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d130      	bne.n	8001d34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 0201 	and.w	r2, r3, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d017      	beq.n	8001d70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d123      	bne.n	8001dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	08da      	lsrs	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3208      	adds	r2, #8
 8001d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	220f      	movs	r2, #15
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	08da      	lsrs	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3208      	adds	r2, #8
 8001dbe:	69b9      	ldr	r1, [r7, #24]
 8001dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2203      	movs	r2, #3
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0203 	and.w	r2, r3, #3
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80c0 	beq.w	8001f86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <HAL_GPIO_Init+0x324>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a65      	ldr	r2, [pc, #404]	; (8001fa4 <HAL_GPIO_Init+0x324>)
 8001e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <HAL_GPIO_Init+0x324>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e22:	4a61      	ldr	r2, [pc, #388]	; (8001fa8 <HAL_GPIO_Init+0x328>)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a58      	ldr	r2, [pc, #352]	; (8001fac <HAL_GPIO_Init+0x32c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d037      	beq.n	8001ebe <HAL_GPIO_Init+0x23e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a57      	ldr	r2, [pc, #348]	; (8001fb0 <HAL_GPIO_Init+0x330>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d031      	beq.n	8001eba <HAL_GPIO_Init+0x23a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a56      	ldr	r2, [pc, #344]	; (8001fb4 <HAL_GPIO_Init+0x334>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d02b      	beq.n	8001eb6 <HAL_GPIO_Init+0x236>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a55      	ldr	r2, [pc, #340]	; (8001fb8 <HAL_GPIO_Init+0x338>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d025      	beq.n	8001eb2 <HAL_GPIO_Init+0x232>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a54      	ldr	r2, [pc, #336]	; (8001fbc <HAL_GPIO_Init+0x33c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01f      	beq.n	8001eae <HAL_GPIO_Init+0x22e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a53      	ldr	r2, [pc, #332]	; (8001fc0 <HAL_GPIO_Init+0x340>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d019      	beq.n	8001eaa <HAL_GPIO_Init+0x22a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a52      	ldr	r2, [pc, #328]	; (8001fc4 <HAL_GPIO_Init+0x344>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0x226>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a51      	ldr	r2, [pc, #324]	; (8001fc8 <HAL_GPIO_Init+0x348>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00d      	beq.n	8001ea2 <HAL_GPIO_Init+0x222>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a50      	ldr	r2, [pc, #320]	; (8001fcc <HAL_GPIO_Init+0x34c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x21e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4f      	ldr	r2, [pc, #316]	; (8001fd0 <HAL_GPIO_Init+0x350>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_Init+0x21a>
 8001e96:	2309      	movs	r3, #9
 8001e98:	e012      	b.n	8001ec0 <HAL_GPIO_Init+0x240>
 8001e9a:	230a      	movs	r3, #10
 8001e9c:	e010      	b.n	8001ec0 <HAL_GPIO_Init+0x240>
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	e00e      	b.n	8001ec0 <HAL_GPIO_Init+0x240>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	e00c      	b.n	8001ec0 <HAL_GPIO_Init+0x240>
 8001ea6:	2306      	movs	r3, #6
 8001ea8:	e00a      	b.n	8001ec0 <HAL_GPIO_Init+0x240>
 8001eaa:	2305      	movs	r3, #5
 8001eac:	e008      	b.n	8001ec0 <HAL_GPIO_Init+0x240>
 8001eae:	2304      	movs	r3, #4
 8001eb0:	e006      	b.n	8001ec0 <HAL_GPIO_Init+0x240>
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e004      	b.n	8001ec0 <HAL_GPIO_Init+0x240>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e002      	b.n	8001ec0 <HAL_GPIO_Init+0x240>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_GPIO_Init+0x240>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	f002 0203 	and.w	r2, r2, #3
 8001ec6:	0092      	lsls	r2, r2, #2
 8001ec8:	4093      	lsls	r3, r2
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ed0:	4935      	ldr	r1, [pc, #212]	; (8001fa8 <HAL_GPIO_Init+0x328>)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ede:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <HAL_GPIO_Init+0x354>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f02:	4a34      	ldr	r2, [pc, #208]	; (8001fd4 <HAL_GPIO_Init+0x354>)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f08:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <HAL_GPIO_Init+0x354>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f2c:	4a29      	ldr	r2, [pc, #164]	; (8001fd4 <HAL_GPIO_Init+0x354>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f32:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <HAL_GPIO_Init+0x354>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f56:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <HAL_GPIO_Init+0x354>)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_GPIO_Init+0x354>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f80:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <HAL_GPIO_Init+0x354>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	2b0f      	cmp	r3, #15
 8001f90:	f67f ae84 	bls.w	8001c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40013800 	.word	0x40013800
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	40020800 	.word	0x40020800
 8001fb8:	40020c00 	.word	0x40020c00
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40021400 	.word	0x40021400
 8001fc4:	40021800 	.word	0x40021800
 8001fc8:	40021c00 	.word	0x40021c00
 8001fcc:	40022000 	.word	0x40022000
 8001fd0:	40022400 	.word	0x40022400
 8001fd4:	40013c00 	.word	0x40013c00

08001fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe8:	787b      	ldrb	r3, [r7, #1]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ff4:	e003      	b.n	8001ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ff6:	887b      	ldrh	r3, [r7, #2]
 8001ff8:	041a      	lsls	r2, r3, #16
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	619a      	str	r2, [r3, #24]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e267      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d075      	beq.n	8002116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800202a:	4b88      	ldr	r3, [pc, #544]	; (800224c <HAL_RCC_OscConfig+0x240>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b04      	cmp	r3, #4
 8002034:	d00c      	beq.n	8002050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002036:	4b85      	ldr	r3, [pc, #532]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800203e:	2b08      	cmp	r3, #8
 8002040:	d112      	bne.n	8002068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002042:	4b82      	ldr	r3, [pc, #520]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800204e:	d10b      	bne.n	8002068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002050:	4b7e      	ldr	r3, [pc, #504]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d05b      	beq.n	8002114 <HAL_RCC_OscConfig+0x108>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d157      	bne.n	8002114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e242      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002070:	d106      	bne.n	8002080 <HAL_RCC_OscConfig+0x74>
 8002072:	4b76      	ldr	r3, [pc, #472]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a75      	ldr	r2, [pc, #468]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e01d      	b.n	80020bc <HAL_RCC_OscConfig+0xb0>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x98>
 800208a:	4b70      	ldr	r3, [pc, #448]	; (800224c <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6f      	ldr	r2, [pc, #444]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b6d      	ldr	r3, [pc, #436]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a6c      	ldr	r2, [pc, #432]	; (800224c <HAL_RCC_OscConfig+0x240>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e00b      	b.n	80020bc <HAL_RCC_OscConfig+0xb0>
 80020a4:	4b69      	ldr	r3, [pc, #420]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a68      	ldr	r2, [pc, #416]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80020aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b66      	ldr	r3, [pc, #408]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a65      	ldr	r2, [pc, #404]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80020b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff f856 	bl	8001174 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020cc:	f7ff f852 	bl	8001174 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e207      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b5b      	ldr	r3, [pc, #364]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0xc0>
 80020ea:	e014      	b.n	8002116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff f842 	bl	8001174 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff f83e 	bl	8001174 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e1f3      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	4b51      	ldr	r3, [pc, #324]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0xe8>
 8002112:	e000      	b.n	8002116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d063      	beq.n	80021ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002122:	4b4a      	ldr	r3, [pc, #296]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002136:	2b08      	cmp	r3, #8
 8002138:	d11c      	bne.n	8002174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213a:	4b44      	ldr	r3, [pc, #272]	; (800224c <HAL_RCC_OscConfig+0x240>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d116      	bne.n	8002174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	4b41      	ldr	r3, [pc, #260]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_RCC_OscConfig+0x152>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e1c7      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215e:	4b3b      	ldr	r3, [pc, #236]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4937      	ldr	r1, [pc, #220]	; (800224c <HAL_RCC_OscConfig+0x240>)
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	e03a      	b.n	80021ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217c:	4b34      	ldr	r3, [pc, #208]	; (8002250 <HAL_RCC_OscConfig+0x244>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7fe fff7 	bl	8001174 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800218a:	f7fe fff3 	bl	8001174 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e1a8      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_RCC_OscConfig+0x240>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4925      	ldr	r1, [pc, #148]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
 80021bc:	e015      	b.n	80021ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCC_OscConfig+0x244>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe ffd6 	bl	8001174 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021cc:	f7fe ffd2 	bl	8001174 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e187      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d036      	beq.n	8002264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d016      	beq.n	800222c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_RCC_OscConfig+0x248>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002204:	f7fe ffb6 	bl	8001174 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220c:	f7fe ffb2 	bl	8001174 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e167      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_OscConfig+0x240>)
 8002220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x200>
 800222a:	e01b      	b.n	8002264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_OscConfig+0x248>)
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002232:	f7fe ff9f 	bl	8001174 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002238:	e00e      	b.n	8002258 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800223a:	f7fe ff9b 	bl	8001174 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d907      	bls.n	8002258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e150      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
 800224c:	40023800 	.word	0x40023800
 8002250:	42470000 	.word	0x42470000
 8002254:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002258:	4b88      	ldr	r3, [pc, #544]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800225a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1ea      	bne.n	800223a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8097 	beq.w	80023a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002276:	4b81      	ldr	r3, [pc, #516]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10f      	bne.n	80022a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	4b7d      	ldr	r3, [pc, #500]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a7c      	ldr	r2, [pc, #496]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
 8002292:	4b7a      	ldr	r3, [pc, #488]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229e:	2301      	movs	r3, #1
 80022a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b77      	ldr	r3, [pc, #476]	; (8002480 <HAL_RCC_OscConfig+0x474>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d118      	bne.n	80022e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ae:	4b74      	ldr	r3, [pc, #464]	; (8002480 <HAL_RCC_OscConfig+0x474>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a73      	ldr	r2, [pc, #460]	; (8002480 <HAL_RCC_OscConfig+0x474>)
 80022b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ba:	f7fe ff5b 	bl	8001174 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c2:	f7fe ff57 	bl	8001174 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e10c      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	4b6a      	ldr	r3, [pc, #424]	; (8002480 <HAL_RCC_OscConfig+0x474>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x2ea>
 80022e8:	4b64      	ldr	r3, [pc, #400]	; (800247c <HAL_RCC_OscConfig+0x470>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a63      	ldr	r2, [pc, #396]	; (800247c <HAL_RCC_OscConfig+0x470>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	e01c      	b.n	8002330 <HAL_RCC_OscConfig+0x324>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b05      	cmp	r3, #5
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x30c>
 80022fe:	4b5f      	ldr	r3, [pc, #380]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a5e      	ldr	r2, [pc, #376]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
 800230a:	4b5c      	ldr	r3, [pc, #368]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	4a5b      	ldr	r2, [pc, #364]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6713      	str	r3, [r2, #112]	; 0x70
 8002316:	e00b      	b.n	8002330 <HAL_RCC_OscConfig+0x324>
 8002318:	4b58      	ldr	r3, [pc, #352]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a57      	ldr	r2, [pc, #348]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
 8002324:	4b55      	ldr	r3, [pc, #340]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	4a54      	ldr	r2, [pc, #336]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800232a:	f023 0304 	bic.w	r3, r3, #4
 800232e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d015      	beq.n	8002364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7fe ff1c 	bl	8001174 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7fe ff18 	bl	8001174 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e0cb      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002356:	4b49      	ldr	r3, [pc, #292]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0ee      	beq.n	8002340 <HAL_RCC_OscConfig+0x334>
 8002362:	e014      	b.n	800238e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7fe ff06 	bl	8001174 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7fe ff02 	bl	8001174 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e0b5      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002382:	4b3e      	ldr	r3, [pc, #248]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ee      	bne.n	800236c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d105      	bne.n	80023a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002394:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	4a38      	ldr	r2, [pc, #224]	; (800247c <HAL_RCC_OscConfig+0x470>)
 800239a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a1 	beq.w	80024ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023aa:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_RCC_OscConfig+0x470>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d05c      	beq.n	8002470 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d141      	bne.n	8002442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	4b31      	ldr	r3, [pc, #196]	; (8002484 <HAL_RCC_OscConfig+0x478>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fed6 	bl	8001174 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe fed2 	bl	8001174 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e087      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	4b27      	ldr	r3, [pc, #156]	; (800247c <HAL_RCC_OscConfig+0x470>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	3b01      	subs	r3, #1
 8002404:	041b      	lsls	r3, r3, #16
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	061b      	lsls	r3, r3, #24
 800240e:	491b      	ldr	r1, [pc, #108]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_OscConfig+0x478>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7fe feab 	bl	8001174 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002422:	f7fe fea7 	bl	8001174 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e05c      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x416>
 8002440:	e054      	b.n	80024ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_RCC_OscConfig+0x478>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe fe94 	bl	8001174 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe fe90 	bl	8001174 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e045      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_OscConfig+0x470>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x444>
 800246e:	e03d      	b.n	80024ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d107      	bne.n	8002488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e038      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
 800247c:	40023800 	.word	0x40023800
 8002480:	40007000 	.word	0x40007000
 8002484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x4ec>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d028      	beq.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d121      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d11a      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024b8:	4013      	ands	r3, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d111      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	085b      	lsrs	r3, r3, #1
 80024d0:	3b01      	subs	r3, #1
 80024d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800

080024fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0cc      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b68      	ldr	r3, [pc, #416]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d90c      	bls.n	8002538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b63      	ldr	r3, [pc, #396]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0b8      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002550:	4b59      	ldr	r3, [pc, #356]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a58      	ldr	r2, [pc, #352]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800255a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002568:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	4a52      	ldr	r2, [pc, #328]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002574:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	494d      	ldr	r1, [pc, #308]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d044      	beq.n	800261c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d119      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e07f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d003      	beq.n	80025ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ba:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ca:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e067      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025da:	4b37      	ldr	r3, [pc, #220]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f023 0203 	bic.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4934      	ldr	r1, [pc, #208]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ec:	f7fe fdc2 	bl	8001174 <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	e00a      	b.n	800260a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f4:	f7fe fdbe 	bl	8001174 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e04f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 020c 	and.w	r2, r3, #12
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	429a      	cmp	r2, r3
 800261a:	d1eb      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d20c      	bcs.n	8002644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e032      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4916      	ldr	r1, [pc, #88]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	490e      	ldr	r1, [pc, #56]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002682:	f000 f821 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002686:	4602      	mov	r2, r0
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	490a      	ldr	r1, [pc, #40]	; (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	5ccb      	ldrb	r3, [r1, r3]
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x1c8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fd22 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023c00 	.word	0x40023c00
 80026b8:	40023800 	.word	0x40023800
 80026bc:	08003c0c 	.word	0x08003c0c
 80026c0:	20000014 	.word	0x20000014
 80026c4:	20000018 	.word	0x20000018

080026c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026cc:	b094      	sub	sp, #80	; 0x50
 80026ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	647b      	str	r3, [r7, #68]	; 0x44
 80026d4:	2300      	movs	r3, #0
 80026d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026d8:	2300      	movs	r3, #0
 80026da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e0:	4b79      	ldr	r3, [pc, #484]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d00d      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x40>
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	f200 80e1 	bhi.w	80028b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x34>
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x3a>
 80026fa:	e0db      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026fc:	4b73      	ldr	r3, [pc, #460]	; (80028cc <HAL_RCC_GetSysClockFreq+0x204>)
 80026fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002700:	e0db      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002702:	4b73      	ldr	r3, [pc, #460]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002704:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002706:	e0d8      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002708:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002710:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002712:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d063      	beq.n	80027e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271e:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	099b      	lsrs	r3, r3, #6
 8002724:	2200      	movs	r2, #0
 8002726:	63bb      	str	r3, [r7, #56]	; 0x38
 8002728:	63fa      	str	r2, [r7, #60]	; 0x3c
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
 8002732:	2300      	movs	r3, #0
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
 8002736:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800273a:	4622      	mov	r2, r4
 800273c:	462b      	mov	r3, r5
 800273e:	f04f 0000 	mov.w	r0, #0
 8002742:	f04f 0100 	mov.w	r1, #0
 8002746:	0159      	lsls	r1, r3, #5
 8002748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800274c:	0150      	lsls	r0, r2, #5
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4621      	mov	r1, r4
 8002754:	1a51      	subs	r1, r2, r1
 8002756:	6139      	str	r1, [r7, #16]
 8002758:	4629      	mov	r1, r5
 800275a:	eb63 0301 	sbc.w	r3, r3, r1
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800276c:	4659      	mov	r1, fp
 800276e:	018b      	lsls	r3, r1, #6
 8002770:	4651      	mov	r1, sl
 8002772:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002776:	4651      	mov	r1, sl
 8002778:	018a      	lsls	r2, r1, #6
 800277a:	4651      	mov	r1, sl
 800277c:	ebb2 0801 	subs.w	r8, r2, r1
 8002780:	4659      	mov	r1, fp
 8002782:	eb63 0901 	sbc.w	r9, r3, r1
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800279a:	4690      	mov	r8, r2
 800279c:	4699      	mov	r9, r3
 800279e:	4623      	mov	r3, r4
 80027a0:	eb18 0303 	adds.w	r3, r8, r3
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	462b      	mov	r3, r5
 80027a8:	eb49 0303 	adc.w	r3, r9, r3
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ba:	4629      	mov	r1, r5
 80027bc:	024b      	lsls	r3, r1, #9
 80027be:	4621      	mov	r1, r4
 80027c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027c4:	4621      	mov	r1, r4
 80027c6:	024a      	lsls	r2, r1, #9
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ce:	2200      	movs	r2, #0
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027d8:	f7fd fd5a 	bl	8000290 <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4613      	mov	r3, r2
 80027e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027e4:	e058      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e6:	4b38      	ldr	r3, [pc, #224]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	099b      	lsrs	r3, r3, #6
 80027ec:	2200      	movs	r2, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	4611      	mov	r1, r2
 80027f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027f6:	623b      	str	r3, [r7, #32]
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
 80027fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002800:	4642      	mov	r2, r8
 8002802:	464b      	mov	r3, r9
 8002804:	f04f 0000 	mov.w	r0, #0
 8002808:	f04f 0100 	mov.w	r1, #0
 800280c:	0159      	lsls	r1, r3, #5
 800280e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002812:	0150      	lsls	r0, r2, #5
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4641      	mov	r1, r8
 800281a:	ebb2 0a01 	subs.w	sl, r2, r1
 800281e:	4649      	mov	r1, r9
 8002820:	eb63 0b01 	sbc.w	fp, r3, r1
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002830:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002834:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002838:	ebb2 040a 	subs.w	r4, r2, sl
 800283c:	eb63 050b 	sbc.w	r5, r3, fp
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	00eb      	lsls	r3, r5, #3
 800284a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800284e:	00e2      	lsls	r2, r4, #3
 8002850:	4614      	mov	r4, r2
 8002852:	461d      	mov	r5, r3
 8002854:	4643      	mov	r3, r8
 8002856:	18e3      	adds	r3, r4, r3
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	464b      	mov	r3, r9
 800285c:	eb45 0303 	adc.w	r3, r5, r3
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800286e:	4629      	mov	r1, r5
 8002870:	028b      	lsls	r3, r1, #10
 8002872:	4621      	mov	r1, r4
 8002874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002878:	4621      	mov	r1, r4
 800287a:	028a      	lsls	r2, r1, #10
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002882:	2200      	movs	r2, #0
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	61fa      	str	r2, [r7, #28]
 8002888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800288c:	f7fd fd00 	bl	8000290 <__aeabi_uldivmod>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4613      	mov	r3, r2
 8002896:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	3301      	adds	r3, #1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028b2:	e002      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetSysClockFreq+0x204>)
 80028b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3750      	adds	r7, #80	; 0x50
 80028c0:	46bd      	mov	sp, r7
 80028c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	00f42400 	.word	0x00f42400
 80028d0:	007a1200 	.word	0x007a1200

080028d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000014 	.word	0x20000014

080028ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028f0:	f7ff fff0 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	0a9b      	lsrs	r3, r3, #10
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4903      	ldr	r1, [pc, #12]	; (8002910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40023800 	.word	0x40023800
 8002910:	08003c1c 	.word	0x08003c1c

08002914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002918:	f7ff ffdc 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0b5b      	lsrs	r3, r3, #13
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4903      	ldr	r1, [pc, #12]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800
 8002938:	08003c1c 	.word	0x08003c1c

0800293c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e03f      	b.n	80029ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fabc 	bl	8000ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800297e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f9cb 	bl	8002d1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b08a      	sub	sp, #40	; 0x28
 80029da:	af02      	add	r7, sp, #8
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d17c      	bne.n	8002af0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_UART_Transmit+0x2c>
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e075      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_UART_Transmit+0x3e>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e06e      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2221      	movs	r2, #33	; 0x21
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a2a:	f7fe fba3 	bl	8001174 <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	88fa      	ldrh	r2, [r7, #6]
 8002a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a44:	d108      	bne.n	8002a58 <HAL_UART_Transmit+0x82>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d104      	bne.n	8002a58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e003      	b.n	8002a60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a68:	e02a      	b.n	8002ac0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f8e2 	bl	8002c3e <UART_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e036      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10b      	bne.n	8002aa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	e007      	b.n	8002ab2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1cf      	bne.n	8002a6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2140      	movs	r1, #64	; 0x40
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f8b2 	bl	8002c3e <UART_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e006      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e000      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002af0:	2302      	movs	r3, #2
  }
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b08a      	sub	sp, #40	; 0x28
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	f040 808c 	bne.w	8002c34 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_UART_Receive+0x2e>
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e084      	b.n	8002c36 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_UART_Receive+0x40>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e07d      	b.n	8002c36 <HAL_UART_Receive+0x13c>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2222      	movs	r2, #34	; 0x22
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b56:	f7fe fb0d 	bl	8001174 <HAL_GetTick>
 8002b5a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	88fa      	ldrh	r2, [r7, #6]
 8002b66:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b70:	d108      	bne.n	8002b84 <HAL_UART_Receive+0x8a>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d104      	bne.n	8002b84 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	e003      	b.n	8002b8c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b94:	e043      	b.n	8002c1e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f84c 	bl	8002c3e <UART_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e042      	b.n	8002c36 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	3302      	adds	r3, #2
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	e01f      	b.n	8002c10 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd8:	d007      	beq.n	8002bea <HAL_UART_Receive+0xf0>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <HAL_UART_Receive+0xfe>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e008      	b.n	8002c0a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1b6      	bne.n	8002b96 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	e000      	b.n	8002c36 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
  }
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b090      	sub	sp, #64	; 0x40
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4e:	e050      	b.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c56:	d04c      	beq.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c5e:	f7fe fa89 	bl	8001174 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d241      	bcs.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c8e:	637a      	str	r2, [r7, #52]	; 0x34
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e5      	bne.n	8002c6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3314      	adds	r3, #20
 8002ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3314      	adds	r3, #20
 8002cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc2:	623a      	str	r2, [r7, #32]
 8002cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	69f9      	ldr	r1, [r7, #28]
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e5      	bne.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e00f      	b.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	bf0c      	ite	eq
 8002d02:	2301      	moveq	r3, #1
 8002d04:	2300      	movne	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d09f      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3740      	adds	r7, #64	; 0x40
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d20:	b0c0      	sub	sp, #256	; 0x100
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	68d9      	ldr	r1, [r3, #12]
 8002d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	ea40 0301 	orr.w	r3, r0, r1
 8002d44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d74:	f021 010c 	bic.w	r1, r1, #12
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d82:	430b      	orrs	r3, r1
 8002d84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d96:	6999      	ldr	r1, [r3, #24]
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	ea40 0301 	orr.w	r3, r0, r1
 8002da2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4b8f      	ldr	r3, [pc, #572]	; (8002fe8 <UART_SetConfig+0x2cc>)
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d005      	beq.n	8002dbc <UART_SetConfig+0xa0>
 8002db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b8d      	ldr	r3, [pc, #564]	; (8002fec <UART_SetConfig+0x2d0>)
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d104      	bne.n	8002dc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dbc:	f7ff fdaa 	bl	8002914 <HAL_RCC_GetPCLK2Freq>
 8002dc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dc4:	e003      	b.n	8002dce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dc6:	f7ff fd91 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 8002dca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd8:	f040 810c 	bne.w	8002ff4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002de6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002dee:	4622      	mov	r2, r4
 8002df0:	462b      	mov	r3, r5
 8002df2:	1891      	adds	r1, r2, r2
 8002df4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002df6:	415b      	adcs	r3, r3
 8002df8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dfe:	4621      	mov	r1, r4
 8002e00:	eb12 0801 	adds.w	r8, r2, r1
 8002e04:	4629      	mov	r1, r5
 8002e06:	eb43 0901 	adc.w	r9, r3, r1
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4699      	mov	r9, r3
 8002e22:	4623      	mov	r3, r4
 8002e24:	eb18 0303 	adds.w	r3, r8, r3
 8002e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e2c:	462b      	mov	r3, r5
 8002e2e:	eb49 0303 	adc.w	r3, r9, r3
 8002e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	18db      	adds	r3, r3, r3
 8002e4e:	653b      	str	r3, [r7, #80]	; 0x50
 8002e50:	4613      	mov	r3, r2
 8002e52:	eb42 0303 	adc.w	r3, r2, r3
 8002e56:	657b      	str	r3, [r7, #84]	; 0x54
 8002e58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e60:	f7fd fa16 	bl	8000290 <__aeabi_uldivmod>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4b61      	ldr	r3, [pc, #388]	; (8002ff0 <UART_SetConfig+0x2d4>)
 8002e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	011c      	lsls	r4, r3, #4
 8002e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e84:	4642      	mov	r2, r8
 8002e86:	464b      	mov	r3, r9
 8002e88:	1891      	adds	r1, r2, r2
 8002e8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e8c:	415b      	adcs	r3, r3
 8002e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e94:	4641      	mov	r1, r8
 8002e96:	eb12 0a01 	adds.w	sl, r2, r1
 8002e9a:	4649      	mov	r1, r9
 8002e9c:	eb43 0b01 	adc.w	fp, r3, r1
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eb4:	4692      	mov	sl, r2
 8002eb6:	469b      	mov	fp, r3
 8002eb8:	4643      	mov	r3, r8
 8002eba:	eb1a 0303 	adds.w	r3, sl, r3
 8002ebe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ec8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ed8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002edc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	18db      	adds	r3, r3, r3
 8002ee4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	eb42 0303 	adc.w	r3, r2, r3
 8002eec:	647b      	str	r3, [r7, #68]	; 0x44
 8002eee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ef2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ef6:	f7fd f9cb 	bl	8000290 <__aeabi_uldivmod>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <UART_SetConfig+0x2d4>)
 8002f02:	fba3 2301 	umull	r2, r3, r3, r1
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2264      	movs	r2, #100	; 0x64
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	1acb      	subs	r3, r1, r3
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f16:	4b36      	ldr	r3, [pc, #216]	; (8002ff0 <UART_SetConfig+0x2d4>)
 8002f18:	fba3 2302 	umull	r2, r3, r3, r2
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f24:	441c      	add	r4, r3
 8002f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f38:	4642      	mov	r2, r8
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	1891      	adds	r1, r2, r2
 8002f3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f40:	415b      	adcs	r3, r3
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f48:	4641      	mov	r1, r8
 8002f4a:	1851      	adds	r1, r2, r1
 8002f4c:	6339      	str	r1, [r7, #48]	; 0x30
 8002f4e:	4649      	mov	r1, r9
 8002f50:	414b      	adcs	r3, r1
 8002f52:	637b      	str	r3, [r7, #52]	; 0x34
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f60:	4659      	mov	r1, fp
 8002f62:	00cb      	lsls	r3, r1, #3
 8002f64:	4651      	mov	r1, sl
 8002f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f6a:	4651      	mov	r1, sl
 8002f6c:	00ca      	lsls	r2, r1, #3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	4619      	mov	r1, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	4642      	mov	r2, r8
 8002f76:	189b      	adds	r3, r3, r2
 8002f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f7c:	464b      	mov	r3, r9
 8002f7e:	460a      	mov	r2, r1
 8002f80:	eb42 0303 	adc.w	r3, r2, r3
 8002f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	18db      	adds	r3, r3, r3
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	eb42 0303 	adc.w	r3, r2, r3
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002faa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fb2:	f7fd f96d 	bl	8000290 <__aeabi_uldivmod>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <UART_SetConfig+0x2d4>)
 8002fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	2164      	movs	r1, #100	; 0x64
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	3332      	adds	r3, #50	; 0x32
 8002fce:	4a08      	ldr	r2, [pc, #32]	; (8002ff0 <UART_SetConfig+0x2d4>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	f003 0207 	and.w	r2, r3, #7
 8002fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4422      	add	r2, r4
 8002fe2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fe4:	e105      	b.n	80031f2 <UART_SetConfig+0x4d6>
 8002fe6:	bf00      	nop
 8002fe8:	40011000 	.word	0x40011000
 8002fec:	40011400 	.word	0x40011400
 8002ff0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ffe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003002:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003006:	4642      	mov	r2, r8
 8003008:	464b      	mov	r3, r9
 800300a:	1891      	adds	r1, r2, r2
 800300c:	6239      	str	r1, [r7, #32]
 800300e:	415b      	adcs	r3, r3
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
 8003012:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003016:	4641      	mov	r1, r8
 8003018:	1854      	adds	r4, r2, r1
 800301a:	4649      	mov	r1, r9
 800301c:	eb43 0501 	adc.w	r5, r3, r1
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	00eb      	lsls	r3, r5, #3
 800302a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800302e:	00e2      	lsls	r2, r4, #3
 8003030:	4614      	mov	r4, r2
 8003032:	461d      	mov	r5, r3
 8003034:	4643      	mov	r3, r8
 8003036:	18e3      	adds	r3, r4, r3
 8003038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800303c:	464b      	mov	r3, r9
 800303e:	eb45 0303 	adc.w	r3, r5, r3
 8003042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003052:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003062:	4629      	mov	r1, r5
 8003064:	008b      	lsls	r3, r1, #2
 8003066:	4621      	mov	r1, r4
 8003068:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800306c:	4621      	mov	r1, r4
 800306e:	008a      	lsls	r2, r1, #2
 8003070:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003074:	f7fd f90c 	bl	8000290 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4b60      	ldr	r3, [pc, #384]	; (8003200 <UART_SetConfig+0x4e4>)
 800307e:	fba3 2302 	umull	r2, r3, r3, r2
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	011c      	lsls	r4, r3, #4
 8003086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800308a:	2200      	movs	r2, #0
 800308c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003090:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003094:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003098:	4642      	mov	r2, r8
 800309a:	464b      	mov	r3, r9
 800309c:	1891      	adds	r1, r2, r2
 800309e:	61b9      	str	r1, [r7, #24]
 80030a0:	415b      	adcs	r3, r3
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a8:	4641      	mov	r1, r8
 80030aa:	1851      	adds	r1, r2, r1
 80030ac:	6139      	str	r1, [r7, #16]
 80030ae:	4649      	mov	r1, r9
 80030b0:	414b      	adcs	r3, r1
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030c0:	4659      	mov	r1, fp
 80030c2:	00cb      	lsls	r3, r1, #3
 80030c4:	4651      	mov	r1, sl
 80030c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ca:	4651      	mov	r1, sl
 80030cc:	00ca      	lsls	r2, r1, #3
 80030ce:	4610      	mov	r0, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	4642      	mov	r2, r8
 80030d6:	189b      	adds	r3, r3, r2
 80030d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030dc:	464b      	mov	r3, r9
 80030de:	460a      	mov	r2, r1
 80030e0:	eb42 0303 	adc.w	r3, r2, r3
 80030e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80030f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003100:	4649      	mov	r1, r9
 8003102:	008b      	lsls	r3, r1, #2
 8003104:	4641      	mov	r1, r8
 8003106:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800310a:	4641      	mov	r1, r8
 800310c:	008a      	lsls	r2, r1, #2
 800310e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003112:	f7fd f8bd 	bl	8000290 <__aeabi_uldivmod>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4b39      	ldr	r3, [pc, #228]	; (8003200 <UART_SetConfig+0x4e4>)
 800311c:	fba3 1302 	umull	r1, r3, r3, r2
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	2164      	movs	r1, #100	; 0x64
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	3332      	adds	r3, #50	; 0x32
 800312e:	4a34      	ldr	r2, [pc, #208]	; (8003200 <UART_SetConfig+0x4e4>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800313a:	441c      	add	r4, r3
 800313c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003140:	2200      	movs	r2, #0
 8003142:	673b      	str	r3, [r7, #112]	; 0x70
 8003144:	677a      	str	r2, [r7, #116]	; 0x74
 8003146:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800314a:	4642      	mov	r2, r8
 800314c:	464b      	mov	r3, r9
 800314e:	1891      	adds	r1, r2, r2
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	415b      	adcs	r3, r3
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800315a:	4641      	mov	r1, r8
 800315c:	1851      	adds	r1, r2, r1
 800315e:	6039      	str	r1, [r7, #0]
 8003160:	4649      	mov	r1, r9
 8003162:	414b      	adcs	r3, r1
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003172:	4659      	mov	r1, fp
 8003174:	00cb      	lsls	r3, r1, #3
 8003176:	4651      	mov	r1, sl
 8003178:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800317c:	4651      	mov	r1, sl
 800317e:	00ca      	lsls	r2, r1, #3
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	4603      	mov	r3, r0
 8003186:	4642      	mov	r2, r8
 8003188:	189b      	adds	r3, r3, r2
 800318a:	66bb      	str	r3, [r7, #104]	; 0x68
 800318c:	464b      	mov	r3, r9
 800318e:	460a      	mov	r2, r1
 8003190:	eb42 0303 	adc.w	r3, r2, r3
 8003194:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	663b      	str	r3, [r7, #96]	; 0x60
 80031a0:	667a      	str	r2, [r7, #100]	; 0x64
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031ae:	4649      	mov	r1, r9
 80031b0:	008b      	lsls	r3, r1, #2
 80031b2:	4641      	mov	r1, r8
 80031b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031b8:	4641      	mov	r1, r8
 80031ba:	008a      	lsls	r2, r1, #2
 80031bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031c0:	f7fd f866 	bl	8000290 <__aeabi_uldivmod>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <UART_SetConfig+0x4e4>)
 80031ca:	fba3 1302 	umull	r1, r3, r3, r2
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	2164      	movs	r1, #100	; 0x64
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	3332      	adds	r3, #50	; 0x32
 80031dc:	4a08      	ldr	r2, [pc, #32]	; (8003200 <UART_SetConfig+0x4e4>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	f003 020f 	and.w	r2, r3, #15
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4422      	add	r2, r4
 80031f0:	609a      	str	r2, [r3, #8]
}
 80031f2:	bf00      	nop
 80031f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031f8:	46bd      	mov	sp, r7
 80031fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031fe:	bf00      	nop
 8003200:	51eb851f 	.word	0x51eb851f

08003204 <__errno>:
 8003204:	4b01      	ldr	r3, [pc, #4]	; (800320c <__errno+0x8>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000020 	.word	0x20000020

08003210 <__libc_init_array>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	4d0d      	ldr	r5, [pc, #52]	; (8003248 <__libc_init_array+0x38>)
 8003214:	4c0d      	ldr	r4, [pc, #52]	; (800324c <__libc_init_array+0x3c>)
 8003216:	1b64      	subs	r4, r4, r5
 8003218:	10a4      	asrs	r4, r4, #2
 800321a:	2600      	movs	r6, #0
 800321c:	42a6      	cmp	r6, r4
 800321e:	d109      	bne.n	8003234 <__libc_init_array+0x24>
 8003220:	4d0b      	ldr	r5, [pc, #44]	; (8003250 <__libc_init_array+0x40>)
 8003222:	4c0c      	ldr	r4, [pc, #48]	; (8003254 <__libc_init_array+0x44>)
 8003224:	f000 fc96 	bl	8003b54 <_init>
 8003228:	1b64      	subs	r4, r4, r5
 800322a:	10a4      	asrs	r4, r4, #2
 800322c:	2600      	movs	r6, #0
 800322e:	42a6      	cmp	r6, r4
 8003230:	d105      	bne.n	800323e <__libc_init_array+0x2e>
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	f855 3b04 	ldr.w	r3, [r5], #4
 8003238:	4798      	blx	r3
 800323a:	3601      	adds	r6, #1
 800323c:	e7ee      	b.n	800321c <__libc_init_array+0xc>
 800323e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003242:	4798      	blx	r3
 8003244:	3601      	adds	r6, #1
 8003246:	e7f2      	b.n	800322e <__libc_init_array+0x1e>
 8003248:	08003c60 	.word	0x08003c60
 800324c:	08003c60 	.word	0x08003c60
 8003250:	08003c60 	.word	0x08003c60
 8003254:	08003c64 	.word	0x08003c64

08003258 <free>:
 8003258:	4b02      	ldr	r3, [pc, #8]	; (8003264 <free+0xc>)
 800325a:	4601      	mov	r1, r0
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	f000 b819 	b.w	8003294 <_free_r>
 8003262:	bf00      	nop
 8003264:	20000020 	.word	0x20000020

08003268 <memcpy>:
 8003268:	440a      	add	r2, r1
 800326a:	4291      	cmp	r1, r2
 800326c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003270:	d100      	bne.n	8003274 <memcpy+0xc>
 8003272:	4770      	bx	lr
 8003274:	b510      	push	{r4, lr}
 8003276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800327a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800327e:	4291      	cmp	r1, r2
 8003280:	d1f9      	bne.n	8003276 <memcpy+0xe>
 8003282:	bd10      	pop	{r4, pc}

08003284 <memset>:
 8003284:	4402      	add	r2, r0
 8003286:	4603      	mov	r3, r0
 8003288:	4293      	cmp	r3, r2
 800328a:	d100      	bne.n	800328e <memset+0xa>
 800328c:	4770      	bx	lr
 800328e:	f803 1b01 	strb.w	r1, [r3], #1
 8003292:	e7f9      	b.n	8003288 <memset+0x4>

08003294 <_free_r>:
 8003294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003296:	2900      	cmp	r1, #0
 8003298:	d044      	beq.n	8003324 <_free_r+0x90>
 800329a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800329e:	9001      	str	r0, [sp, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f1a1 0404 	sub.w	r4, r1, #4
 80032a6:	bfb8      	it	lt
 80032a8:	18e4      	addlt	r4, r4, r3
 80032aa:	f000 f903 	bl	80034b4 <__malloc_lock>
 80032ae:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <_free_r+0x94>)
 80032b0:	9801      	ldr	r0, [sp, #4]
 80032b2:	6813      	ldr	r3, [r2, #0]
 80032b4:	b933      	cbnz	r3, 80032c4 <_free_r+0x30>
 80032b6:	6063      	str	r3, [r4, #4]
 80032b8:	6014      	str	r4, [r2, #0]
 80032ba:	b003      	add	sp, #12
 80032bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032c0:	f000 b8fe 	b.w	80034c0 <__malloc_unlock>
 80032c4:	42a3      	cmp	r3, r4
 80032c6:	d908      	bls.n	80032da <_free_r+0x46>
 80032c8:	6825      	ldr	r5, [r4, #0]
 80032ca:	1961      	adds	r1, r4, r5
 80032cc:	428b      	cmp	r3, r1
 80032ce:	bf01      	itttt	eq
 80032d0:	6819      	ldreq	r1, [r3, #0]
 80032d2:	685b      	ldreq	r3, [r3, #4]
 80032d4:	1949      	addeq	r1, r1, r5
 80032d6:	6021      	streq	r1, [r4, #0]
 80032d8:	e7ed      	b.n	80032b6 <_free_r+0x22>
 80032da:	461a      	mov	r2, r3
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	b10b      	cbz	r3, 80032e4 <_free_r+0x50>
 80032e0:	42a3      	cmp	r3, r4
 80032e2:	d9fa      	bls.n	80032da <_free_r+0x46>
 80032e4:	6811      	ldr	r1, [r2, #0]
 80032e6:	1855      	adds	r5, r2, r1
 80032e8:	42a5      	cmp	r5, r4
 80032ea:	d10b      	bne.n	8003304 <_free_r+0x70>
 80032ec:	6824      	ldr	r4, [r4, #0]
 80032ee:	4421      	add	r1, r4
 80032f0:	1854      	adds	r4, r2, r1
 80032f2:	42a3      	cmp	r3, r4
 80032f4:	6011      	str	r1, [r2, #0]
 80032f6:	d1e0      	bne.n	80032ba <_free_r+0x26>
 80032f8:	681c      	ldr	r4, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	6053      	str	r3, [r2, #4]
 80032fe:	4421      	add	r1, r4
 8003300:	6011      	str	r1, [r2, #0]
 8003302:	e7da      	b.n	80032ba <_free_r+0x26>
 8003304:	d902      	bls.n	800330c <_free_r+0x78>
 8003306:	230c      	movs	r3, #12
 8003308:	6003      	str	r3, [r0, #0]
 800330a:	e7d6      	b.n	80032ba <_free_r+0x26>
 800330c:	6825      	ldr	r5, [r4, #0]
 800330e:	1961      	adds	r1, r4, r5
 8003310:	428b      	cmp	r3, r1
 8003312:	bf04      	itt	eq
 8003314:	6819      	ldreq	r1, [r3, #0]
 8003316:	685b      	ldreq	r3, [r3, #4]
 8003318:	6063      	str	r3, [r4, #4]
 800331a:	bf04      	itt	eq
 800331c:	1949      	addeq	r1, r1, r5
 800331e:	6021      	streq	r1, [r4, #0]
 8003320:	6054      	str	r4, [r2, #4]
 8003322:	e7ca      	b.n	80032ba <_free_r+0x26>
 8003324:	b003      	add	sp, #12
 8003326:	bd30      	pop	{r4, r5, pc}
 8003328:	200002f0 	.word	0x200002f0

0800332c <sbrk_aligned>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	4e0e      	ldr	r6, [pc, #56]	; (8003368 <sbrk_aligned+0x3c>)
 8003330:	460c      	mov	r4, r1
 8003332:	6831      	ldr	r1, [r6, #0]
 8003334:	4605      	mov	r5, r0
 8003336:	b911      	cbnz	r1, 800333e <sbrk_aligned+0x12>
 8003338:	f000 f88c 	bl	8003454 <_sbrk_r>
 800333c:	6030      	str	r0, [r6, #0]
 800333e:	4621      	mov	r1, r4
 8003340:	4628      	mov	r0, r5
 8003342:	f000 f887 	bl	8003454 <_sbrk_r>
 8003346:	1c43      	adds	r3, r0, #1
 8003348:	d00a      	beq.n	8003360 <sbrk_aligned+0x34>
 800334a:	1cc4      	adds	r4, r0, #3
 800334c:	f024 0403 	bic.w	r4, r4, #3
 8003350:	42a0      	cmp	r0, r4
 8003352:	d007      	beq.n	8003364 <sbrk_aligned+0x38>
 8003354:	1a21      	subs	r1, r4, r0
 8003356:	4628      	mov	r0, r5
 8003358:	f000 f87c 	bl	8003454 <_sbrk_r>
 800335c:	3001      	adds	r0, #1
 800335e:	d101      	bne.n	8003364 <sbrk_aligned+0x38>
 8003360:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003364:	4620      	mov	r0, r4
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	200002f4 	.word	0x200002f4

0800336c <_malloc_r>:
 800336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003370:	1ccd      	adds	r5, r1, #3
 8003372:	f025 0503 	bic.w	r5, r5, #3
 8003376:	3508      	adds	r5, #8
 8003378:	2d0c      	cmp	r5, #12
 800337a:	bf38      	it	cc
 800337c:	250c      	movcc	r5, #12
 800337e:	2d00      	cmp	r5, #0
 8003380:	4607      	mov	r7, r0
 8003382:	db01      	blt.n	8003388 <_malloc_r+0x1c>
 8003384:	42a9      	cmp	r1, r5
 8003386:	d905      	bls.n	8003394 <_malloc_r+0x28>
 8003388:	230c      	movs	r3, #12
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	2600      	movs	r6, #0
 800338e:	4630      	mov	r0, r6
 8003390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003394:	4e2e      	ldr	r6, [pc, #184]	; (8003450 <_malloc_r+0xe4>)
 8003396:	f000 f88d 	bl	80034b4 <__malloc_lock>
 800339a:	6833      	ldr	r3, [r6, #0]
 800339c:	461c      	mov	r4, r3
 800339e:	bb34      	cbnz	r4, 80033ee <_malloc_r+0x82>
 80033a0:	4629      	mov	r1, r5
 80033a2:	4638      	mov	r0, r7
 80033a4:	f7ff ffc2 	bl	800332c <sbrk_aligned>
 80033a8:	1c43      	adds	r3, r0, #1
 80033aa:	4604      	mov	r4, r0
 80033ac:	d14d      	bne.n	800344a <_malloc_r+0xde>
 80033ae:	6834      	ldr	r4, [r6, #0]
 80033b0:	4626      	mov	r6, r4
 80033b2:	2e00      	cmp	r6, #0
 80033b4:	d140      	bne.n	8003438 <_malloc_r+0xcc>
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	4631      	mov	r1, r6
 80033ba:	4638      	mov	r0, r7
 80033bc:	eb04 0803 	add.w	r8, r4, r3
 80033c0:	f000 f848 	bl	8003454 <_sbrk_r>
 80033c4:	4580      	cmp	r8, r0
 80033c6:	d13a      	bne.n	800343e <_malloc_r+0xd2>
 80033c8:	6821      	ldr	r1, [r4, #0]
 80033ca:	3503      	adds	r5, #3
 80033cc:	1a6d      	subs	r5, r5, r1
 80033ce:	f025 0503 	bic.w	r5, r5, #3
 80033d2:	3508      	adds	r5, #8
 80033d4:	2d0c      	cmp	r5, #12
 80033d6:	bf38      	it	cc
 80033d8:	250c      	movcc	r5, #12
 80033da:	4629      	mov	r1, r5
 80033dc:	4638      	mov	r0, r7
 80033de:	f7ff ffa5 	bl	800332c <sbrk_aligned>
 80033e2:	3001      	adds	r0, #1
 80033e4:	d02b      	beq.n	800343e <_malloc_r+0xd2>
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	442b      	add	r3, r5
 80033ea:	6023      	str	r3, [r4, #0]
 80033ec:	e00e      	b.n	800340c <_malloc_r+0xa0>
 80033ee:	6822      	ldr	r2, [r4, #0]
 80033f0:	1b52      	subs	r2, r2, r5
 80033f2:	d41e      	bmi.n	8003432 <_malloc_r+0xc6>
 80033f4:	2a0b      	cmp	r2, #11
 80033f6:	d916      	bls.n	8003426 <_malloc_r+0xba>
 80033f8:	1961      	adds	r1, r4, r5
 80033fa:	42a3      	cmp	r3, r4
 80033fc:	6025      	str	r5, [r4, #0]
 80033fe:	bf18      	it	ne
 8003400:	6059      	strne	r1, [r3, #4]
 8003402:	6863      	ldr	r3, [r4, #4]
 8003404:	bf08      	it	eq
 8003406:	6031      	streq	r1, [r6, #0]
 8003408:	5162      	str	r2, [r4, r5]
 800340a:	604b      	str	r3, [r1, #4]
 800340c:	4638      	mov	r0, r7
 800340e:	f104 060b 	add.w	r6, r4, #11
 8003412:	f000 f855 	bl	80034c0 <__malloc_unlock>
 8003416:	f026 0607 	bic.w	r6, r6, #7
 800341a:	1d23      	adds	r3, r4, #4
 800341c:	1af2      	subs	r2, r6, r3
 800341e:	d0b6      	beq.n	800338e <_malloc_r+0x22>
 8003420:	1b9b      	subs	r3, r3, r6
 8003422:	50a3      	str	r3, [r4, r2]
 8003424:	e7b3      	b.n	800338e <_malloc_r+0x22>
 8003426:	6862      	ldr	r2, [r4, #4]
 8003428:	42a3      	cmp	r3, r4
 800342a:	bf0c      	ite	eq
 800342c:	6032      	streq	r2, [r6, #0]
 800342e:	605a      	strne	r2, [r3, #4]
 8003430:	e7ec      	b.n	800340c <_malloc_r+0xa0>
 8003432:	4623      	mov	r3, r4
 8003434:	6864      	ldr	r4, [r4, #4]
 8003436:	e7b2      	b.n	800339e <_malloc_r+0x32>
 8003438:	4634      	mov	r4, r6
 800343a:	6876      	ldr	r6, [r6, #4]
 800343c:	e7b9      	b.n	80033b2 <_malloc_r+0x46>
 800343e:	230c      	movs	r3, #12
 8003440:	603b      	str	r3, [r7, #0]
 8003442:	4638      	mov	r0, r7
 8003444:	f000 f83c 	bl	80034c0 <__malloc_unlock>
 8003448:	e7a1      	b.n	800338e <_malloc_r+0x22>
 800344a:	6025      	str	r5, [r4, #0]
 800344c:	e7de      	b.n	800340c <_malloc_r+0xa0>
 800344e:	bf00      	nop
 8003450:	200002f0 	.word	0x200002f0

08003454 <_sbrk_r>:
 8003454:	b538      	push	{r3, r4, r5, lr}
 8003456:	4d06      	ldr	r5, [pc, #24]	; (8003470 <_sbrk_r+0x1c>)
 8003458:	2300      	movs	r3, #0
 800345a:	4604      	mov	r4, r0
 800345c:	4608      	mov	r0, r1
 800345e:	602b      	str	r3, [r5, #0]
 8003460:	f7fd fdb0 	bl	8000fc4 <_sbrk>
 8003464:	1c43      	adds	r3, r0, #1
 8003466:	d102      	bne.n	800346e <_sbrk_r+0x1a>
 8003468:	682b      	ldr	r3, [r5, #0]
 800346a:	b103      	cbz	r3, 800346e <_sbrk_r+0x1a>
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	bd38      	pop	{r3, r4, r5, pc}
 8003470:	200002f8 	.word	0x200002f8

08003474 <siprintf>:
 8003474:	b40e      	push	{r1, r2, r3}
 8003476:	b500      	push	{lr}
 8003478:	b09c      	sub	sp, #112	; 0x70
 800347a:	ab1d      	add	r3, sp, #116	; 0x74
 800347c:	9002      	str	r0, [sp, #8]
 800347e:	9006      	str	r0, [sp, #24]
 8003480:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003484:	4809      	ldr	r0, [pc, #36]	; (80034ac <siprintf+0x38>)
 8003486:	9107      	str	r1, [sp, #28]
 8003488:	9104      	str	r1, [sp, #16]
 800348a:	4909      	ldr	r1, [pc, #36]	; (80034b0 <siprintf+0x3c>)
 800348c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003490:	9105      	str	r1, [sp, #20]
 8003492:	6800      	ldr	r0, [r0, #0]
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	a902      	add	r1, sp, #8
 8003498:	f000 f874 	bl	8003584 <_svfiprintf_r>
 800349c:	9b02      	ldr	r3, [sp, #8]
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	b01c      	add	sp, #112	; 0x70
 80034a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034a8:	b003      	add	sp, #12
 80034aa:	4770      	bx	lr
 80034ac:	20000020 	.word	0x20000020
 80034b0:	ffff0208 	.word	0xffff0208

080034b4 <__malloc_lock>:
 80034b4:	4801      	ldr	r0, [pc, #4]	; (80034bc <__malloc_lock+0x8>)
 80034b6:	f000 baf9 	b.w	8003aac <__retarget_lock_acquire_recursive>
 80034ba:	bf00      	nop
 80034bc:	200002fc 	.word	0x200002fc

080034c0 <__malloc_unlock>:
 80034c0:	4801      	ldr	r0, [pc, #4]	; (80034c8 <__malloc_unlock+0x8>)
 80034c2:	f000 baf4 	b.w	8003aae <__retarget_lock_release_recursive>
 80034c6:	bf00      	nop
 80034c8:	200002fc 	.word	0x200002fc

080034cc <__ssputs_r>:
 80034cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	688e      	ldr	r6, [r1, #8]
 80034d2:	429e      	cmp	r6, r3
 80034d4:	4682      	mov	sl, r0
 80034d6:	460c      	mov	r4, r1
 80034d8:	4690      	mov	r8, r2
 80034da:	461f      	mov	r7, r3
 80034dc:	d838      	bhi.n	8003550 <__ssputs_r+0x84>
 80034de:	898a      	ldrh	r2, [r1, #12]
 80034e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034e4:	d032      	beq.n	800354c <__ssputs_r+0x80>
 80034e6:	6825      	ldr	r5, [r4, #0]
 80034e8:	6909      	ldr	r1, [r1, #16]
 80034ea:	eba5 0901 	sub.w	r9, r5, r1
 80034ee:	6965      	ldr	r5, [r4, #20]
 80034f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034f8:	3301      	adds	r3, #1
 80034fa:	444b      	add	r3, r9
 80034fc:	106d      	asrs	r5, r5, #1
 80034fe:	429d      	cmp	r5, r3
 8003500:	bf38      	it	cc
 8003502:	461d      	movcc	r5, r3
 8003504:	0553      	lsls	r3, r2, #21
 8003506:	d531      	bpl.n	800356c <__ssputs_r+0xa0>
 8003508:	4629      	mov	r1, r5
 800350a:	f7ff ff2f 	bl	800336c <_malloc_r>
 800350e:	4606      	mov	r6, r0
 8003510:	b950      	cbnz	r0, 8003528 <__ssputs_r+0x5c>
 8003512:	230c      	movs	r3, #12
 8003514:	f8ca 3000 	str.w	r3, [sl]
 8003518:	89a3      	ldrh	r3, [r4, #12]
 800351a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800351e:	81a3      	strh	r3, [r4, #12]
 8003520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003528:	6921      	ldr	r1, [r4, #16]
 800352a:	464a      	mov	r2, r9
 800352c:	f7ff fe9c 	bl	8003268 <memcpy>
 8003530:	89a3      	ldrh	r3, [r4, #12]
 8003532:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353a:	81a3      	strh	r3, [r4, #12]
 800353c:	6126      	str	r6, [r4, #16]
 800353e:	6165      	str	r5, [r4, #20]
 8003540:	444e      	add	r6, r9
 8003542:	eba5 0509 	sub.w	r5, r5, r9
 8003546:	6026      	str	r6, [r4, #0]
 8003548:	60a5      	str	r5, [r4, #8]
 800354a:	463e      	mov	r6, r7
 800354c:	42be      	cmp	r6, r7
 800354e:	d900      	bls.n	8003552 <__ssputs_r+0x86>
 8003550:	463e      	mov	r6, r7
 8003552:	6820      	ldr	r0, [r4, #0]
 8003554:	4632      	mov	r2, r6
 8003556:	4641      	mov	r1, r8
 8003558:	f000 faaa 	bl	8003ab0 <memmove>
 800355c:	68a3      	ldr	r3, [r4, #8]
 800355e:	1b9b      	subs	r3, r3, r6
 8003560:	60a3      	str	r3, [r4, #8]
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	4433      	add	r3, r6
 8003566:	6023      	str	r3, [r4, #0]
 8003568:	2000      	movs	r0, #0
 800356a:	e7db      	b.n	8003524 <__ssputs_r+0x58>
 800356c:	462a      	mov	r2, r5
 800356e:	f000 fab9 	bl	8003ae4 <_realloc_r>
 8003572:	4606      	mov	r6, r0
 8003574:	2800      	cmp	r0, #0
 8003576:	d1e1      	bne.n	800353c <__ssputs_r+0x70>
 8003578:	6921      	ldr	r1, [r4, #16]
 800357a:	4650      	mov	r0, sl
 800357c:	f7ff fe8a 	bl	8003294 <_free_r>
 8003580:	e7c7      	b.n	8003512 <__ssputs_r+0x46>
	...

08003584 <_svfiprintf_r>:
 8003584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003588:	4698      	mov	r8, r3
 800358a:	898b      	ldrh	r3, [r1, #12]
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	b09d      	sub	sp, #116	; 0x74
 8003590:	4607      	mov	r7, r0
 8003592:	460d      	mov	r5, r1
 8003594:	4614      	mov	r4, r2
 8003596:	d50e      	bpl.n	80035b6 <_svfiprintf_r+0x32>
 8003598:	690b      	ldr	r3, [r1, #16]
 800359a:	b963      	cbnz	r3, 80035b6 <_svfiprintf_r+0x32>
 800359c:	2140      	movs	r1, #64	; 0x40
 800359e:	f7ff fee5 	bl	800336c <_malloc_r>
 80035a2:	6028      	str	r0, [r5, #0]
 80035a4:	6128      	str	r0, [r5, #16]
 80035a6:	b920      	cbnz	r0, 80035b2 <_svfiprintf_r+0x2e>
 80035a8:	230c      	movs	r3, #12
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035b0:	e0d1      	b.n	8003756 <_svfiprintf_r+0x1d2>
 80035b2:	2340      	movs	r3, #64	; 0x40
 80035b4:	616b      	str	r3, [r5, #20]
 80035b6:	2300      	movs	r3, #0
 80035b8:	9309      	str	r3, [sp, #36]	; 0x24
 80035ba:	2320      	movs	r3, #32
 80035bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80035c4:	2330      	movs	r3, #48	; 0x30
 80035c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003770 <_svfiprintf_r+0x1ec>
 80035ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035ce:	f04f 0901 	mov.w	r9, #1
 80035d2:	4623      	mov	r3, r4
 80035d4:	469a      	mov	sl, r3
 80035d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035da:	b10a      	cbz	r2, 80035e0 <_svfiprintf_r+0x5c>
 80035dc:	2a25      	cmp	r2, #37	; 0x25
 80035de:	d1f9      	bne.n	80035d4 <_svfiprintf_r+0x50>
 80035e0:	ebba 0b04 	subs.w	fp, sl, r4
 80035e4:	d00b      	beq.n	80035fe <_svfiprintf_r+0x7a>
 80035e6:	465b      	mov	r3, fp
 80035e8:	4622      	mov	r2, r4
 80035ea:	4629      	mov	r1, r5
 80035ec:	4638      	mov	r0, r7
 80035ee:	f7ff ff6d 	bl	80034cc <__ssputs_r>
 80035f2:	3001      	adds	r0, #1
 80035f4:	f000 80aa 	beq.w	800374c <_svfiprintf_r+0x1c8>
 80035f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035fa:	445a      	add	r2, fp
 80035fc:	9209      	str	r2, [sp, #36]	; 0x24
 80035fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80a2 	beq.w	800374c <_svfiprintf_r+0x1c8>
 8003608:	2300      	movs	r3, #0
 800360a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800360e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003612:	f10a 0a01 	add.w	sl, sl, #1
 8003616:	9304      	str	r3, [sp, #16]
 8003618:	9307      	str	r3, [sp, #28]
 800361a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800361e:	931a      	str	r3, [sp, #104]	; 0x68
 8003620:	4654      	mov	r4, sl
 8003622:	2205      	movs	r2, #5
 8003624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003628:	4851      	ldr	r0, [pc, #324]	; (8003770 <_svfiprintf_r+0x1ec>)
 800362a:	f7fc fde1 	bl	80001f0 <memchr>
 800362e:	9a04      	ldr	r2, [sp, #16]
 8003630:	b9d8      	cbnz	r0, 800366a <_svfiprintf_r+0xe6>
 8003632:	06d0      	lsls	r0, r2, #27
 8003634:	bf44      	itt	mi
 8003636:	2320      	movmi	r3, #32
 8003638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800363c:	0711      	lsls	r1, r2, #28
 800363e:	bf44      	itt	mi
 8003640:	232b      	movmi	r3, #43	; 0x2b
 8003642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003646:	f89a 3000 	ldrb.w	r3, [sl]
 800364a:	2b2a      	cmp	r3, #42	; 0x2a
 800364c:	d015      	beq.n	800367a <_svfiprintf_r+0xf6>
 800364e:	9a07      	ldr	r2, [sp, #28]
 8003650:	4654      	mov	r4, sl
 8003652:	2000      	movs	r0, #0
 8003654:	f04f 0c0a 	mov.w	ip, #10
 8003658:	4621      	mov	r1, r4
 800365a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800365e:	3b30      	subs	r3, #48	; 0x30
 8003660:	2b09      	cmp	r3, #9
 8003662:	d94e      	bls.n	8003702 <_svfiprintf_r+0x17e>
 8003664:	b1b0      	cbz	r0, 8003694 <_svfiprintf_r+0x110>
 8003666:	9207      	str	r2, [sp, #28]
 8003668:	e014      	b.n	8003694 <_svfiprintf_r+0x110>
 800366a:	eba0 0308 	sub.w	r3, r0, r8
 800366e:	fa09 f303 	lsl.w	r3, r9, r3
 8003672:	4313      	orrs	r3, r2
 8003674:	9304      	str	r3, [sp, #16]
 8003676:	46a2      	mov	sl, r4
 8003678:	e7d2      	b.n	8003620 <_svfiprintf_r+0x9c>
 800367a:	9b03      	ldr	r3, [sp, #12]
 800367c:	1d19      	adds	r1, r3, #4
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	9103      	str	r1, [sp, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	bfbb      	ittet	lt
 8003686:	425b      	neglt	r3, r3
 8003688:	f042 0202 	orrlt.w	r2, r2, #2
 800368c:	9307      	strge	r3, [sp, #28]
 800368e:	9307      	strlt	r3, [sp, #28]
 8003690:	bfb8      	it	lt
 8003692:	9204      	strlt	r2, [sp, #16]
 8003694:	7823      	ldrb	r3, [r4, #0]
 8003696:	2b2e      	cmp	r3, #46	; 0x2e
 8003698:	d10c      	bne.n	80036b4 <_svfiprintf_r+0x130>
 800369a:	7863      	ldrb	r3, [r4, #1]
 800369c:	2b2a      	cmp	r3, #42	; 0x2a
 800369e:	d135      	bne.n	800370c <_svfiprintf_r+0x188>
 80036a0:	9b03      	ldr	r3, [sp, #12]
 80036a2:	1d1a      	adds	r2, r3, #4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	9203      	str	r2, [sp, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bfb8      	it	lt
 80036ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80036b0:	3402      	adds	r4, #2
 80036b2:	9305      	str	r3, [sp, #20]
 80036b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003780 <_svfiprintf_r+0x1fc>
 80036b8:	7821      	ldrb	r1, [r4, #0]
 80036ba:	2203      	movs	r2, #3
 80036bc:	4650      	mov	r0, sl
 80036be:	f7fc fd97 	bl	80001f0 <memchr>
 80036c2:	b140      	cbz	r0, 80036d6 <_svfiprintf_r+0x152>
 80036c4:	2340      	movs	r3, #64	; 0x40
 80036c6:	eba0 000a 	sub.w	r0, r0, sl
 80036ca:	fa03 f000 	lsl.w	r0, r3, r0
 80036ce:	9b04      	ldr	r3, [sp, #16]
 80036d0:	4303      	orrs	r3, r0
 80036d2:	3401      	adds	r4, #1
 80036d4:	9304      	str	r3, [sp, #16]
 80036d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036da:	4826      	ldr	r0, [pc, #152]	; (8003774 <_svfiprintf_r+0x1f0>)
 80036dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036e0:	2206      	movs	r2, #6
 80036e2:	f7fc fd85 	bl	80001f0 <memchr>
 80036e6:	2800      	cmp	r0, #0
 80036e8:	d038      	beq.n	800375c <_svfiprintf_r+0x1d8>
 80036ea:	4b23      	ldr	r3, [pc, #140]	; (8003778 <_svfiprintf_r+0x1f4>)
 80036ec:	bb1b      	cbnz	r3, 8003736 <_svfiprintf_r+0x1b2>
 80036ee:	9b03      	ldr	r3, [sp, #12]
 80036f0:	3307      	adds	r3, #7
 80036f2:	f023 0307 	bic.w	r3, r3, #7
 80036f6:	3308      	adds	r3, #8
 80036f8:	9303      	str	r3, [sp, #12]
 80036fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036fc:	4433      	add	r3, r6
 80036fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003700:	e767      	b.n	80035d2 <_svfiprintf_r+0x4e>
 8003702:	fb0c 3202 	mla	r2, ip, r2, r3
 8003706:	460c      	mov	r4, r1
 8003708:	2001      	movs	r0, #1
 800370a:	e7a5      	b.n	8003658 <_svfiprintf_r+0xd4>
 800370c:	2300      	movs	r3, #0
 800370e:	3401      	adds	r4, #1
 8003710:	9305      	str	r3, [sp, #20]
 8003712:	4619      	mov	r1, r3
 8003714:	f04f 0c0a 	mov.w	ip, #10
 8003718:	4620      	mov	r0, r4
 800371a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800371e:	3a30      	subs	r2, #48	; 0x30
 8003720:	2a09      	cmp	r2, #9
 8003722:	d903      	bls.n	800372c <_svfiprintf_r+0x1a8>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0c5      	beq.n	80036b4 <_svfiprintf_r+0x130>
 8003728:	9105      	str	r1, [sp, #20]
 800372a:	e7c3      	b.n	80036b4 <_svfiprintf_r+0x130>
 800372c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003730:	4604      	mov	r4, r0
 8003732:	2301      	movs	r3, #1
 8003734:	e7f0      	b.n	8003718 <_svfiprintf_r+0x194>
 8003736:	ab03      	add	r3, sp, #12
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	462a      	mov	r2, r5
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <_svfiprintf_r+0x1f8>)
 800373e:	a904      	add	r1, sp, #16
 8003740:	4638      	mov	r0, r7
 8003742:	f3af 8000 	nop.w
 8003746:	1c42      	adds	r2, r0, #1
 8003748:	4606      	mov	r6, r0
 800374a:	d1d6      	bne.n	80036fa <_svfiprintf_r+0x176>
 800374c:	89ab      	ldrh	r3, [r5, #12]
 800374e:	065b      	lsls	r3, r3, #25
 8003750:	f53f af2c 	bmi.w	80035ac <_svfiprintf_r+0x28>
 8003754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003756:	b01d      	add	sp, #116	; 0x74
 8003758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800375c:	ab03      	add	r3, sp, #12
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	462a      	mov	r2, r5
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <_svfiprintf_r+0x1f8>)
 8003764:	a904      	add	r1, sp, #16
 8003766:	4638      	mov	r0, r7
 8003768:	f000 f87a 	bl	8003860 <_printf_i>
 800376c:	e7eb      	b.n	8003746 <_svfiprintf_r+0x1c2>
 800376e:	bf00      	nop
 8003770:	08003c24 	.word	0x08003c24
 8003774:	08003c2e 	.word	0x08003c2e
 8003778:	00000000 	.word	0x00000000
 800377c:	080034cd 	.word	0x080034cd
 8003780:	08003c2a 	.word	0x08003c2a

08003784 <_printf_common>:
 8003784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003788:	4616      	mov	r6, r2
 800378a:	4699      	mov	r9, r3
 800378c:	688a      	ldr	r2, [r1, #8]
 800378e:	690b      	ldr	r3, [r1, #16]
 8003790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003794:	4293      	cmp	r3, r2
 8003796:	bfb8      	it	lt
 8003798:	4613      	movlt	r3, r2
 800379a:	6033      	str	r3, [r6, #0]
 800379c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037a0:	4607      	mov	r7, r0
 80037a2:	460c      	mov	r4, r1
 80037a4:	b10a      	cbz	r2, 80037aa <_printf_common+0x26>
 80037a6:	3301      	adds	r3, #1
 80037a8:	6033      	str	r3, [r6, #0]
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	0699      	lsls	r1, r3, #26
 80037ae:	bf42      	ittt	mi
 80037b0:	6833      	ldrmi	r3, [r6, #0]
 80037b2:	3302      	addmi	r3, #2
 80037b4:	6033      	strmi	r3, [r6, #0]
 80037b6:	6825      	ldr	r5, [r4, #0]
 80037b8:	f015 0506 	ands.w	r5, r5, #6
 80037bc:	d106      	bne.n	80037cc <_printf_common+0x48>
 80037be:	f104 0a19 	add.w	sl, r4, #25
 80037c2:	68e3      	ldr	r3, [r4, #12]
 80037c4:	6832      	ldr	r2, [r6, #0]
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	42ab      	cmp	r3, r5
 80037ca:	dc26      	bgt.n	800381a <_printf_common+0x96>
 80037cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037d0:	1e13      	subs	r3, r2, #0
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	bf18      	it	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	0692      	lsls	r2, r2, #26
 80037da:	d42b      	bmi.n	8003834 <_printf_common+0xb0>
 80037dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037e0:	4649      	mov	r1, r9
 80037e2:	4638      	mov	r0, r7
 80037e4:	47c0      	blx	r8
 80037e6:	3001      	adds	r0, #1
 80037e8:	d01e      	beq.n	8003828 <_printf_common+0xa4>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	68e5      	ldr	r5, [r4, #12]
 80037ee:	6832      	ldr	r2, [r6, #0]
 80037f0:	f003 0306 	and.w	r3, r3, #6
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	bf08      	it	eq
 80037f8:	1aad      	subeq	r5, r5, r2
 80037fa:	68a3      	ldr	r3, [r4, #8]
 80037fc:	6922      	ldr	r2, [r4, #16]
 80037fe:	bf0c      	ite	eq
 8003800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003804:	2500      	movne	r5, #0
 8003806:	4293      	cmp	r3, r2
 8003808:	bfc4      	itt	gt
 800380a:	1a9b      	subgt	r3, r3, r2
 800380c:	18ed      	addgt	r5, r5, r3
 800380e:	2600      	movs	r6, #0
 8003810:	341a      	adds	r4, #26
 8003812:	42b5      	cmp	r5, r6
 8003814:	d11a      	bne.n	800384c <_printf_common+0xc8>
 8003816:	2000      	movs	r0, #0
 8003818:	e008      	b.n	800382c <_printf_common+0xa8>
 800381a:	2301      	movs	r3, #1
 800381c:	4652      	mov	r2, sl
 800381e:	4649      	mov	r1, r9
 8003820:	4638      	mov	r0, r7
 8003822:	47c0      	blx	r8
 8003824:	3001      	adds	r0, #1
 8003826:	d103      	bne.n	8003830 <_printf_common+0xac>
 8003828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800382c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003830:	3501      	adds	r5, #1
 8003832:	e7c6      	b.n	80037c2 <_printf_common+0x3e>
 8003834:	18e1      	adds	r1, r4, r3
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	2030      	movs	r0, #48	; 0x30
 800383a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800383e:	4422      	add	r2, r4
 8003840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003848:	3302      	adds	r3, #2
 800384a:	e7c7      	b.n	80037dc <_printf_common+0x58>
 800384c:	2301      	movs	r3, #1
 800384e:	4622      	mov	r2, r4
 8003850:	4649      	mov	r1, r9
 8003852:	4638      	mov	r0, r7
 8003854:	47c0      	blx	r8
 8003856:	3001      	adds	r0, #1
 8003858:	d0e6      	beq.n	8003828 <_printf_common+0xa4>
 800385a:	3601      	adds	r6, #1
 800385c:	e7d9      	b.n	8003812 <_printf_common+0x8e>
	...

08003860 <_printf_i>:
 8003860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003864:	7e0f      	ldrb	r7, [r1, #24]
 8003866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003868:	2f78      	cmp	r7, #120	; 0x78
 800386a:	4691      	mov	r9, r2
 800386c:	4680      	mov	r8, r0
 800386e:	460c      	mov	r4, r1
 8003870:	469a      	mov	sl, r3
 8003872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003876:	d807      	bhi.n	8003888 <_printf_i+0x28>
 8003878:	2f62      	cmp	r7, #98	; 0x62
 800387a:	d80a      	bhi.n	8003892 <_printf_i+0x32>
 800387c:	2f00      	cmp	r7, #0
 800387e:	f000 80d8 	beq.w	8003a32 <_printf_i+0x1d2>
 8003882:	2f58      	cmp	r7, #88	; 0x58
 8003884:	f000 80a3 	beq.w	80039ce <_printf_i+0x16e>
 8003888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800388c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003890:	e03a      	b.n	8003908 <_printf_i+0xa8>
 8003892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003896:	2b15      	cmp	r3, #21
 8003898:	d8f6      	bhi.n	8003888 <_printf_i+0x28>
 800389a:	a101      	add	r1, pc, #4	; (adr r1, 80038a0 <_printf_i+0x40>)
 800389c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038a0:	080038f9 	.word	0x080038f9
 80038a4:	0800390d 	.word	0x0800390d
 80038a8:	08003889 	.word	0x08003889
 80038ac:	08003889 	.word	0x08003889
 80038b0:	08003889 	.word	0x08003889
 80038b4:	08003889 	.word	0x08003889
 80038b8:	0800390d 	.word	0x0800390d
 80038bc:	08003889 	.word	0x08003889
 80038c0:	08003889 	.word	0x08003889
 80038c4:	08003889 	.word	0x08003889
 80038c8:	08003889 	.word	0x08003889
 80038cc:	08003a19 	.word	0x08003a19
 80038d0:	0800393d 	.word	0x0800393d
 80038d4:	080039fb 	.word	0x080039fb
 80038d8:	08003889 	.word	0x08003889
 80038dc:	08003889 	.word	0x08003889
 80038e0:	08003a3b 	.word	0x08003a3b
 80038e4:	08003889 	.word	0x08003889
 80038e8:	0800393d 	.word	0x0800393d
 80038ec:	08003889 	.word	0x08003889
 80038f0:	08003889 	.word	0x08003889
 80038f4:	08003a03 	.word	0x08003a03
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	1d1a      	adds	r2, r3, #4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	602a      	str	r2, [r5, #0]
 8003900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003908:	2301      	movs	r3, #1
 800390a:	e0a3      	b.n	8003a54 <_printf_i+0x1f4>
 800390c:	6820      	ldr	r0, [r4, #0]
 800390e:	6829      	ldr	r1, [r5, #0]
 8003910:	0606      	lsls	r6, r0, #24
 8003912:	f101 0304 	add.w	r3, r1, #4
 8003916:	d50a      	bpl.n	800392e <_printf_i+0xce>
 8003918:	680e      	ldr	r6, [r1, #0]
 800391a:	602b      	str	r3, [r5, #0]
 800391c:	2e00      	cmp	r6, #0
 800391e:	da03      	bge.n	8003928 <_printf_i+0xc8>
 8003920:	232d      	movs	r3, #45	; 0x2d
 8003922:	4276      	negs	r6, r6
 8003924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003928:	485e      	ldr	r0, [pc, #376]	; (8003aa4 <_printf_i+0x244>)
 800392a:	230a      	movs	r3, #10
 800392c:	e019      	b.n	8003962 <_printf_i+0x102>
 800392e:	680e      	ldr	r6, [r1, #0]
 8003930:	602b      	str	r3, [r5, #0]
 8003932:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003936:	bf18      	it	ne
 8003938:	b236      	sxthne	r6, r6
 800393a:	e7ef      	b.n	800391c <_printf_i+0xbc>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	6820      	ldr	r0, [r4, #0]
 8003940:	1d19      	adds	r1, r3, #4
 8003942:	6029      	str	r1, [r5, #0]
 8003944:	0601      	lsls	r1, r0, #24
 8003946:	d501      	bpl.n	800394c <_printf_i+0xec>
 8003948:	681e      	ldr	r6, [r3, #0]
 800394a:	e002      	b.n	8003952 <_printf_i+0xf2>
 800394c:	0646      	lsls	r6, r0, #25
 800394e:	d5fb      	bpl.n	8003948 <_printf_i+0xe8>
 8003950:	881e      	ldrh	r6, [r3, #0]
 8003952:	4854      	ldr	r0, [pc, #336]	; (8003aa4 <_printf_i+0x244>)
 8003954:	2f6f      	cmp	r7, #111	; 0x6f
 8003956:	bf0c      	ite	eq
 8003958:	2308      	moveq	r3, #8
 800395a:	230a      	movne	r3, #10
 800395c:	2100      	movs	r1, #0
 800395e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003962:	6865      	ldr	r5, [r4, #4]
 8003964:	60a5      	str	r5, [r4, #8]
 8003966:	2d00      	cmp	r5, #0
 8003968:	bfa2      	ittt	ge
 800396a:	6821      	ldrge	r1, [r4, #0]
 800396c:	f021 0104 	bicge.w	r1, r1, #4
 8003970:	6021      	strge	r1, [r4, #0]
 8003972:	b90e      	cbnz	r6, 8003978 <_printf_i+0x118>
 8003974:	2d00      	cmp	r5, #0
 8003976:	d04d      	beq.n	8003a14 <_printf_i+0x1b4>
 8003978:	4615      	mov	r5, r2
 800397a:	fbb6 f1f3 	udiv	r1, r6, r3
 800397e:	fb03 6711 	mls	r7, r3, r1, r6
 8003982:	5dc7      	ldrb	r7, [r0, r7]
 8003984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003988:	4637      	mov	r7, r6
 800398a:	42bb      	cmp	r3, r7
 800398c:	460e      	mov	r6, r1
 800398e:	d9f4      	bls.n	800397a <_printf_i+0x11a>
 8003990:	2b08      	cmp	r3, #8
 8003992:	d10b      	bne.n	80039ac <_printf_i+0x14c>
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	07de      	lsls	r6, r3, #31
 8003998:	d508      	bpl.n	80039ac <_printf_i+0x14c>
 800399a:	6923      	ldr	r3, [r4, #16]
 800399c:	6861      	ldr	r1, [r4, #4]
 800399e:	4299      	cmp	r1, r3
 80039a0:	bfde      	ittt	le
 80039a2:	2330      	movle	r3, #48	; 0x30
 80039a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80039ac:	1b52      	subs	r2, r2, r5
 80039ae:	6122      	str	r2, [r4, #16]
 80039b0:	f8cd a000 	str.w	sl, [sp]
 80039b4:	464b      	mov	r3, r9
 80039b6:	aa03      	add	r2, sp, #12
 80039b8:	4621      	mov	r1, r4
 80039ba:	4640      	mov	r0, r8
 80039bc:	f7ff fee2 	bl	8003784 <_printf_common>
 80039c0:	3001      	adds	r0, #1
 80039c2:	d14c      	bne.n	8003a5e <_printf_i+0x1fe>
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039c8:	b004      	add	sp, #16
 80039ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ce:	4835      	ldr	r0, [pc, #212]	; (8003aa4 <_printf_i+0x244>)
 80039d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039d4:	6829      	ldr	r1, [r5, #0]
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80039dc:	6029      	str	r1, [r5, #0]
 80039de:	061d      	lsls	r5, r3, #24
 80039e0:	d514      	bpl.n	8003a0c <_printf_i+0x1ac>
 80039e2:	07df      	lsls	r7, r3, #31
 80039e4:	bf44      	itt	mi
 80039e6:	f043 0320 	orrmi.w	r3, r3, #32
 80039ea:	6023      	strmi	r3, [r4, #0]
 80039ec:	b91e      	cbnz	r6, 80039f6 <_printf_i+0x196>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	f023 0320 	bic.w	r3, r3, #32
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	2310      	movs	r3, #16
 80039f8:	e7b0      	b.n	800395c <_printf_i+0xfc>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	f043 0320 	orr.w	r3, r3, #32
 8003a00:	6023      	str	r3, [r4, #0]
 8003a02:	2378      	movs	r3, #120	; 0x78
 8003a04:	4828      	ldr	r0, [pc, #160]	; (8003aa8 <_printf_i+0x248>)
 8003a06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a0a:	e7e3      	b.n	80039d4 <_printf_i+0x174>
 8003a0c:	0659      	lsls	r1, r3, #25
 8003a0e:	bf48      	it	mi
 8003a10:	b2b6      	uxthmi	r6, r6
 8003a12:	e7e6      	b.n	80039e2 <_printf_i+0x182>
 8003a14:	4615      	mov	r5, r2
 8003a16:	e7bb      	b.n	8003990 <_printf_i+0x130>
 8003a18:	682b      	ldr	r3, [r5, #0]
 8003a1a:	6826      	ldr	r6, [r4, #0]
 8003a1c:	6961      	ldr	r1, [r4, #20]
 8003a1e:	1d18      	adds	r0, r3, #4
 8003a20:	6028      	str	r0, [r5, #0]
 8003a22:	0635      	lsls	r5, r6, #24
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	d501      	bpl.n	8003a2c <_printf_i+0x1cc>
 8003a28:	6019      	str	r1, [r3, #0]
 8003a2a:	e002      	b.n	8003a32 <_printf_i+0x1d2>
 8003a2c:	0670      	lsls	r0, r6, #25
 8003a2e:	d5fb      	bpl.n	8003a28 <_printf_i+0x1c8>
 8003a30:	8019      	strh	r1, [r3, #0]
 8003a32:	2300      	movs	r3, #0
 8003a34:	6123      	str	r3, [r4, #16]
 8003a36:	4615      	mov	r5, r2
 8003a38:	e7ba      	b.n	80039b0 <_printf_i+0x150>
 8003a3a:	682b      	ldr	r3, [r5, #0]
 8003a3c:	1d1a      	adds	r2, r3, #4
 8003a3e:	602a      	str	r2, [r5, #0]
 8003a40:	681d      	ldr	r5, [r3, #0]
 8003a42:	6862      	ldr	r2, [r4, #4]
 8003a44:	2100      	movs	r1, #0
 8003a46:	4628      	mov	r0, r5
 8003a48:	f7fc fbd2 	bl	80001f0 <memchr>
 8003a4c:	b108      	cbz	r0, 8003a52 <_printf_i+0x1f2>
 8003a4e:	1b40      	subs	r0, r0, r5
 8003a50:	6060      	str	r0, [r4, #4]
 8003a52:	6863      	ldr	r3, [r4, #4]
 8003a54:	6123      	str	r3, [r4, #16]
 8003a56:	2300      	movs	r3, #0
 8003a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a5c:	e7a8      	b.n	80039b0 <_printf_i+0x150>
 8003a5e:	6923      	ldr	r3, [r4, #16]
 8003a60:	462a      	mov	r2, r5
 8003a62:	4649      	mov	r1, r9
 8003a64:	4640      	mov	r0, r8
 8003a66:	47d0      	blx	sl
 8003a68:	3001      	adds	r0, #1
 8003a6a:	d0ab      	beq.n	80039c4 <_printf_i+0x164>
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	079b      	lsls	r3, r3, #30
 8003a70:	d413      	bmi.n	8003a9a <_printf_i+0x23a>
 8003a72:	68e0      	ldr	r0, [r4, #12]
 8003a74:	9b03      	ldr	r3, [sp, #12]
 8003a76:	4298      	cmp	r0, r3
 8003a78:	bfb8      	it	lt
 8003a7a:	4618      	movlt	r0, r3
 8003a7c:	e7a4      	b.n	80039c8 <_printf_i+0x168>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	4632      	mov	r2, r6
 8003a82:	4649      	mov	r1, r9
 8003a84:	4640      	mov	r0, r8
 8003a86:	47d0      	blx	sl
 8003a88:	3001      	adds	r0, #1
 8003a8a:	d09b      	beq.n	80039c4 <_printf_i+0x164>
 8003a8c:	3501      	adds	r5, #1
 8003a8e:	68e3      	ldr	r3, [r4, #12]
 8003a90:	9903      	ldr	r1, [sp, #12]
 8003a92:	1a5b      	subs	r3, r3, r1
 8003a94:	42ab      	cmp	r3, r5
 8003a96:	dcf2      	bgt.n	8003a7e <_printf_i+0x21e>
 8003a98:	e7eb      	b.n	8003a72 <_printf_i+0x212>
 8003a9a:	2500      	movs	r5, #0
 8003a9c:	f104 0619 	add.w	r6, r4, #25
 8003aa0:	e7f5      	b.n	8003a8e <_printf_i+0x22e>
 8003aa2:	bf00      	nop
 8003aa4:	08003c35 	.word	0x08003c35
 8003aa8:	08003c46 	.word	0x08003c46

08003aac <__retarget_lock_acquire_recursive>:
 8003aac:	4770      	bx	lr

08003aae <__retarget_lock_release_recursive>:
 8003aae:	4770      	bx	lr

08003ab0 <memmove>:
 8003ab0:	4288      	cmp	r0, r1
 8003ab2:	b510      	push	{r4, lr}
 8003ab4:	eb01 0402 	add.w	r4, r1, r2
 8003ab8:	d902      	bls.n	8003ac0 <memmove+0x10>
 8003aba:	4284      	cmp	r4, r0
 8003abc:	4623      	mov	r3, r4
 8003abe:	d807      	bhi.n	8003ad0 <memmove+0x20>
 8003ac0:	1e43      	subs	r3, r0, #1
 8003ac2:	42a1      	cmp	r1, r4
 8003ac4:	d008      	beq.n	8003ad8 <memmove+0x28>
 8003ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003aca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ace:	e7f8      	b.n	8003ac2 <memmove+0x12>
 8003ad0:	4402      	add	r2, r0
 8003ad2:	4601      	mov	r1, r0
 8003ad4:	428a      	cmp	r2, r1
 8003ad6:	d100      	bne.n	8003ada <memmove+0x2a>
 8003ad8:	bd10      	pop	{r4, pc}
 8003ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ae2:	e7f7      	b.n	8003ad4 <memmove+0x24>

08003ae4 <_realloc_r>:
 8003ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae8:	4680      	mov	r8, r0
 8003aea:	4614      	mov	r4, r2
 8003aec:	460e      	mov	r6, r1
 8003aee:	b921      	cbnz	r1, 8003afa <_realloc_r+0x16>
 8003af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003af4:	4611      	mov	r1, r2
 8003af6:	f7ff bc39 	b.w	800336c <_malloc_r>
 8003afa:	b92a      	cbnz	r2, 8003b08 <_realloc_r+0x24>
 8003afc:	f7ff fbca 	bl	8003294 <_free_r>
 8003b00:	4625      	mov	r5, r4
 8003b02:	4628      	mov	r0, r5
 8003b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b08:	f000 f81b 	bl	8003b42 <_malloc_usable_size_r>
 8003b0c:	4284      	cmp	r4, r0
 8003b0e:	4607      	mov	r7, r0
 8003b10:	d802      	bhi.n	8003b18 <_realloc_r+0x34>
 8003b12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b16:	d812      	bhi.n	8003b3e <_realloc_r+0x5a>
 8003b18:	4621      	mov	r1, r4
 8003b1a:	4640      	mov	r0, r8
 8003b1c:	f7ff fc26 	bl	800336c <_malloc_r>
 8003b20:	4605      	mov	r5, r0
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d0ed      	beq.n	8003b02 <_realloc_r+0x1e>
 8003b26:	42bc      	cmp	r4, r7
 8003b28:	4622      	mov	r2, r4
 8003b2a:	4631      	mov	r1, r6
 8003b2c:	bf28      	it	cs
 8003b2e:	463a      	movcs	r2, r7
 8003b30:	f7ff fb9a 	bl	8003268 <memcpy>
 8003b34:	4631      	mov	r1, r6
 8003b36:	4640      	mov	r0, r8
 8003b38:	f7ff fbac 	bl	8003294 <_free_r>
 8003b3c:	e7e1      	b.n	8003b02 <_realloc_r+0x1e>
 8003b3e:	4635      	mov	r5, r6
 8003b40:	e7df      	b.n	8003b02 <_realloc_r+0x1e>

08003b42 <_malloc_usable_size_r>:
 8003b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b46:	1f18      	subs	r0, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bfbc      	itt	lt
 8003b4c:	580b      	ldrlt	r3, [r1, r0]
 8003b4e:	18c0      	addlt	r0, r0, r3
 8003b50:	4770      	bx	lr
	...

08003b54 <_init>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr

08003b60 <_fini>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr
